Compiling Program: F:\GitHub\vdfd-framework-community\AppSrc\CE.src
Memory Available: 1688133632
1>Use VDFD_CE.pkg
Including file: VDFD_CE.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\VDFD_CE.pkg)
1>>>// VDFD_CE.pkg
1>>>//
1>>>// Precompile package
1>>>//
1>>>
1>>>Use DFALLENT.pkg
Using pre-compiled package DFALLENT.PKG
Including file: dfallent.pkd    (C:\Program Files\Visual DataFlex 17.1\Pkg\dfallent.pkd)
73115>>>
73115>>>// DAW Classes
73115>>>Use Base\cVDFD_CE_Array.pkg
Including file: Base\cVDFD_CE_Array.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_Array.pkg)
73115>>>>>Use VdfBase.pkg
73115>>>>>
73115>>>>>Class cVDFD_CE_Array is a Array
73116>>>>>    
73116>>>>>    Procedure Construct_Object
73118>>>>>        Forward Send Construct_Object
73120>>>>>
73120>>>>>    End_Procedure
73121>>>>>
73121>>>>>    Procedure End_Construct_Object
73123>>>>>        Forward Send End_Construct_Object
73125>>>>>
73125>>>>>    End_Procedure
73126>>>>>
73126>>>>>End_Class
73127>>>Use Base\cVDFD_CE_BitmapContainer.pkg
Including file: Base\cVDFD_CE_BitmapContainer.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_BitmapContainer.pkg)
73127>>>>>Use dfBitmap.pkg
73127>>>>>
73127>>>>>Class cVDFD_CE_BitmapContainer is a BitmapContainer
73128>>>>>    
73128>>>>>    Procedure Construct_Object
73130>>>>>        Forward Send Construct_Object
73132>>>>>
73132>>>>>    End_Procedure
73133>>>>>
73133>>>>>    Procedure End_Construct_Object
73135>>>>>        Forward Send End_Construct_Object
73137>>>>>
73137>>>>>    End_Procedure
73138>>>>>
73138>>>>>End_Class
73139>>>Use Base\cVDFD_CE_BusinessProcess.pkg
Including file: Base\cVDFD_CE_BusinessProcess.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_BusinessProcess.pkg)
73139>>>>>Use BatchDD.pkg
73139>>>>>
73139>>>>>Class cVDFD_CE_BusinessProcess is a BusinessProcess
73140>>>>>    
73140>>>>>    Procedure Construct_Object
73142>>>>>        Forward Send Construct_Object
73144>>>>>
73144>>>>>    End_Procedure
73145>>>>>
73145>>>>>    Procedure End_Construct_Object
73147>>>>>        Forward Send End_Construct_Object
73149>>>>>
73149>>>>>    End_Procedure
73150>>>>>
73150>>>>>End_Class
73151>>>Use Base\cVDFD_CE_Button.pkg
Including file: Base\cVDFD_CE_Button.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_Button.pkg)
73151>>>>>Use Windows.pkg
73151>>>>>
73151>>>>>Class cVDFD_CE_Button is a Button
73152>>>>>    
73152>>>>>    Procedure Construct_Object
73154>>>>>        Forward Send Construct_Object
73156>>>>>
73156>>>>>    End_Procedure
73157>>>>>
73157>>>>>    Procedure End_Construct_Object
73159>>>>>        Forward Send End_Construct_Object
73161>>>>>
73161>>>>>    End_Procedure
73162>>>>>
73162>>>>>End_Class
73163>>>Use Base\cVDFD_CE_Animation.pkg
Including file: Base\cVDFD_CE_Animation.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_Animation.pkg)
73163>>>>>Use cAnimation.pkg
Including file: cAnimation.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cAnimation.pkg)
73163>>>>>>>Use LanguageText.pkg
73163>>>>>>>Use cWinControl.pkg
73163>>>>>>>Use GlobalFunctionsProcedures.pkg
73163>>>>>>>
73163>>>>>>>// Styles:
73163>>>>>>>Define ACS_CENTER      for |CI0001
73163>>>>>>>Define ACS_TRANSPARENT for |CI0002
73163>>>>>>>Define ACS_AUTOPLAY    for |CI0004
73163>>>>>>>Define ACS_TIMER       for |CI0008  // don't use threads... use timers
73163>>>>>>>
73163>>>>>>>// Messages:
73163>>>>>>>Define ACM_OPEN        for (WM_USER+100)
73163>>>>>>>Define ACM_PLAY        for (WM_USER+101)
73163>>>>>>>Define ACM_STOP        for (WM_USER+102)
73163>>>>>>>
73163>>>>>>>// Notifications:
73163>>>>>>>Define ACN_START       for 1
73163>>>>>>>Define ACN_STOP        for 2
73163>>>>>>>
73163>>>>>>>Enum_List  // for peAnimation
73163>>>>>>>    Define aviEmptyRecycle
73163>>>>>>>    Define aviFileCopy
73163>>>>>>>    Define aviFileDelete
73163>>>>>>>    Define aviFileFind
73163>>>>>>>    Define aviFileMove
73163>>>>>>>    Define aviFileRecycle
73163>>>>>>>    Define aviFindComputer
73163>>>>>>>    Define aviNone
73163>>>>>>>    Define aviSearch
73163>>>>>>>End_Enum_List
73163>>>>>>>
73163>>>>>>>Register_Function GetAnimationFile Returns String
73163>>>>>>>
73163>>>>>>>
73163>>>>>>>Class cAnimation is a cWinControl
73164>>>>>>>    Procedure Construct_Object
73166>>>>>>>        Forward Send Construct_Object
73168>>>>>>>
73168>>>>>>>        Set External_Class_Name "cVdfAnimation" To "SysAnimate32"
73169>>>>>>>
73169>>>>>>>        Property Boolean pbIsOpen     // is the AVI open?
73170>>>>>>>
73170>>>>>>>        Property Boolean private_pbActive       False
73171>>>>>>>        Property Boolean private_pbAutoSize     True
73172>>>>>>>        Property Boolean private_pbTransparent  True
73173>>>>>>>        Property Integer private_peAnimation    aviNone
73174>>>>>>>        Property Integer private_piRepetitions  0
73175>>>>>>>        Property String  private_psFileName
73176>>>>>>>
73176>>>>>>>        Set Focus_Mode To NonFocusable
73177>>>>>>>        Set Color      to clBtnFace
73178>>>>>>>        Set Skip_State to True
73179>>>>>>>
73179>>>>>>>        Set External_Message WM_NCHITTEST To msg_OnWmNcHitTest
73180>>>>>>>    End_Procedure
73181>>>>>>>
73181>>>>>>>    Procedure OnWmNcHitTest Integer wParam Integer lParam
73183>>>>>>>        Set Windows_Override_State To True
73184>>>>>>>        Procedure_return HTCLIENT //  by default, the control will return HTTRANSPARENT, which would not give us mouse messages
73185>>>>>>>    End_Procedure
73186>>>>>>>
73186>>>>>>>    Procedure Command Integer wParam Integer lParam
73188>>>>>>>        Integer eEvent
73188>>>>>>>
73188>>>>>>>        Move (Hi(wParam)) To eEvent
73189>>>>>>>        If      (eEvent = ACN_START) Send OnStart
73192>>>>>>>        Else If (eEvent = ACN_STOP)  Send OnStop
73196>>>>>>>    End_Procedure
73197>>>>>>>
73197>>>>>>>    Procedure Page Integer iState
73199>>>>>>>        Handle hWnd
73199>>>>>>>        String sFileName
73199>>>>>>>
73199>>>>>>>        Get Window_Handle To hWnd
73200>>>>>>>        If (hWnd =0 and iState =1) Begin
73202>>>>>>>            Set Window_Style To ACS_CENTER      (private_pbAutoSize(self) = False)
73203>>>>>>>            Set Window_Style To ACS_TRANSPARENT (private_pbTransparent(self))
73204>>>>>>>        End
73204>>>>>>>>
73204>>>>>>>        Forward Send Page iState
73206>>>>>>>
73206>>>>>>>        Get GetAnimationFile To sFilename
73207>>>>>>>        If (sFileName <> '') Begin
73209>>>>>>>            Send DoOpen sFileName
73210>>>>>>>            If (pbIsOpen(self) and private_pbActive(self)) Send DoPlay
73213>>>>>>>            If (pbIsOpen(self) =False) Set private_pbActive To False // if we couldn't open the file, we need to ensure the pbActive property is False
73216>>>>>>>        End
73216>>>>>>>>
73216>>>>>>>    End_Procedure
73217>>>>>>>
73217>>>>>>>
73217>>>>>>>    Procedure DoOpen String sAvi
73219>>>>>>>        Boolean bOpenedOk
73219>>>>>>>
73219>>>>>>>        Get WindowsMessage ACM_OPEN 0 (AddressOf(sAvi)) To bOpenedOk
73220>>>>>>>        Set pbIsOpen To bOpenedOk
73221>>>>>>>        If (bOpenedOk =False) Begin
73223>>>>>>>            Error DFERR_CANT_OPEN_INPUT_FILE (SFormat(C_$UnableToOpen, sAvi))
73224>>>>>>>>
73224>>>>>>>            Set private_pbActive To False
73225>>>>>>>        End
73225>>>>>>>>
73225>>>>>>>    End_Procedure
73226>>>>>>>
73226>>>>>>>    Procedure DoClose
73228>>>>>>>        Send Windows_Message ACM_OPEN 0 0
73229>>>>>>>        Set pbIsOpen To False
73230>>>>>>>        Set private_pbActive To False
73231>>>>>>>    End_Procedure
73232>>>>>>>
73232>>>>>>>    Procedure DoPlay Integer iFrameStart Integer iFrameEnd
73234>>>>>>>        Integer icRepetition
73234>>>>>>>
73234>>>>>>>        If (pbIsOpen(self)= False) Send DoOpen (GetAnimationFile(self))
73237>>>>>>>        If (pbIsOpen(self)) Begin
73239>>>>>>>            Get piRepetitions To icRepetition
73240>>>>>>>            If (icRepetition =0) Move -1 To icRepetition // windows wants -1 for continuous
73243>>>>>>>            If (Num_Arguments = 0) Send Windows_Message ACM_PLAY icRepetition -1
73246>>>>>>>            Else                   Send Windows_Message ACM_PLAY icRepetition (iFrameEnd*65536 +iFrameStart)
73248>>>>>>>        End
73248>>>>>>>>
73248>>>>>>>    End_Procedure
73249>>>>>>>
73249>>>>>>>    Procedure DoStop
73251>>>>>>>        Send Windows_Message ACM_STOP 0 0
73252>>>>>>>    End_Procedure
73253>>>>>>>
73253>>>>>>>    Procedure Set pbActive Boolean bActive
73255>>>>>>>        If (Window_Handle(self)) Begin
73257>>>>>>>            If (bActive <> private_pbActive(self)) Begin
73259>>>>>>>                Set private_pbActive To bActive
73260>>>>>>>                If bActive Send DoPlay
73263>>>>>>>                Else       Send DoStop
73265>>>>>>>            End
73265>>>>>>>>
73265>>>>>>>        End
73265>>>>>>>>
73265>>>>>>>        Else Set private_pbActive To bActive
73267>>>>>>>    End_Procedure
73268>>>>>>>    Function pbActive Returns Boolean
73270>>>>>>>        Function_Return (private_pbActive(self))
73271>>>>>>>    End_Function
73272>>>>>>>
73272>>>>>>>    Procedure Set pbAutoSize Boolean bAutoSize
73274>>>>>>>        If (bAutoSize <> private_pbAutoSize(self)) Begin
73276>>>>>>>            Set private_pbAutoSize To bAutoSize
73277>>>>>>>            Send DoRecreateWindow
73278>>>>>>>        End
73278>>>>>>>>
73278>>>>>>>    End_Procedure
73279>>>>>>>    Function pbAutoSize Returns Boolean
73281>>>>>>>        Function_Return (private_pbAutoSize(self))
73282>>>>>>>    End_Function
73283>>>>>>>
73283>>>>>>>    Procedure Set pbTransparent Boolean bTransparent
73285>>>>>>>        Set private_pbTransparent To bTransparent
73286>>>>>>>        Send DoRecreateWindow
73287>>>>>>>    End_Procedure
73288>>>>>>>    Function pbTransparent Returns Boolean
73290>>>>>>>        Function_Return (private_pbTransparent(self))
73291>>>>>>>    End_Function
73292>>>>>>>
73292>>>>>>>    Procedure Set peAnimation Integer eAnimation
73294>>>>>>>        Integer eAnimationOld
73294>>>>>>>
73294>>>>>>>        Get private_peAnimation To eAnimationOld
73295>>>>>>>        If (eAnimation <> eAnimationOld) Begin
73297>>>>>>>            Set private_peAnimation To eAnimation
73298>>>>>>>            If (eAnimation <> aviNone) Set private_psFileName To "" // If a built-in animation is required, reset the psFileName
73301>>>>>>>            If (eAnimationOld <> aviNone) Send DoClose // close the old animation file
73304>>>>>>>            Send DoRecreateWindow
73305>>>>>>>        End
73305>>>>>>>>
73305>>>>>>>    End_Procedure
73306>>>>>>>    Function peAnimation Returns Integer
73308>>>>>>>        Function_Return (private_peAnimation(self))
73309>>>>>>>    End_Function
73310>>>>>>>
73310>>>>>>>    Procedure Set piRepetitions Integer iRepetitions
73312>>>>>>>        Set private_piRepetitions To iRepetitions
73313>>>>>>>    End_Procedure
73314>>>>>>>    Function piRepetitions Returns Integer
73316>>>>>>>        Function_Return (private_piRepetitions(self))
73317>>>>>>>    End_Function
73318>>>>>>>
73318>>>>>>>    Procedure Set psFileName String sFileName
73320>>>>>>>        If (sFileName <> private_psFileName(self)) Begin
73322>>>>>>>            Set private_psFileName To sFileName
73323>>>>>>>            // If a filename is set, reset the peAnimation property:
73323>>>>>>>            If (sFileName <>"") Set private_peAnimation To aviNone
73326>>>>>>>            Send DoRecreateWindow
73327>>>>>>>        End
73327>>>>>>>>
73327>>>>>>>    End_Procedure
73328>>>>>>>    Function psFileName Returns String
73330>>>>>>>        Function_Return (private_psFileName(self))
73331>>>>>>>    End_Function
73332>>>>>>>
73332>>>>>>>    Function GetAnimationFile Returns String
73334>>>>>>>        // returns the filename to open. If AnimationMode <> aviNone, this will be Filename,
73334>>>>>>>        // otherwise it will be the filename of the animation
73334>>>>>>>        Integer eAnimation
73334>>>>>>>        String sFileName
73334>>>>>>>
73334>>>>>>>        Get private_peAnimation To eAnimation
73335>>>>>>>        If      (eAnimation = aviNone)         Get private_psFileName         To sFileName
73338>>>>>>>        Else If (eAnimation = aviFileCopy)     Get_File_Path "FileCopy.avi"   To sFileName
73342>>>>>>>        Else If (eAnimation = aviFileDelete)   Get_File_Path "FileDel.avi"    To sFileName
73346>>>>>>>        Else If (eAnimation = aviFileRecycle)  Get_File_Path "FileDelR.avi"   To sFileName
73350>>>>>>>        Else If (eAnimation = aviFileMove)     Get_File_Path "FileMove.avi"   To sFileName
73354>>>>>>>        Else If (eAnimation = aviEmptyRecycle) Get_File_Path "FileNuke.avi"   To sFileName
73358>>>>>>>        Else If (eAnimation = aviFindComputer) Get_File_Path "FindComp.avi"   To sFileName
73362>>>>>>>        Else If (eAnimation = aviFileFind)     Get_File_Path "FindFile.avi"   To sFileName
73366>>>>>>>        Else If (eAnimation = aviSearch)       Get_File_Path "Search.avi"     To sFileName
73370>>>>>>>
73370>>>>>>>        Function_Return sFileName
73371>>>>>>>    End_Function
73372>>>>>>>
73372>>>>>>>    Procedure OnStart
73374>>>>>>>        // The animation has started playing
73374>>>>>>>    End_Procedure
73375>>>>>>>    Procedure OnStop
73377>>>>>>>        // The animation has stopped playing
73377>>>>>>>    End_Procedure
73378>>>>>>>
73378>>>>>>>End_Class
73379>>>>>>>
73379>>>>>
73379>>>>>Class cVDFD_CE_Animation is a cAnimation
73380>>>>>    
73380>>>>>    Procedure Construct_Object
73382>>>>>        Forward Send Construct_Object
73384>>>>>
73384>>>>>    End_Procedure
73385>>>>>
73385>>>>>    Procedure End_Construct_Object
73387>>>>>        Forward Send End_Construct_Object
73389>>>>>
73389>>>>>    End_Procedure
73390>>>>>
73390>>>>>End_Class
73391>>>Use Base\cVDFD_CE_Application.pkg
Including file: Base\cVDFD_CE_Application.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_Application.pkg)
73391>>>>>Use cApplication.pkg
73391>>>>>
73391>>>>>Class cVDFD_CE_Application is a cApplication
73392>>>>>    
73392>>>>>    Procedure Construct_Object
73394>>>>>        Forward Send Construct_Object
73396>>>>>
73396>>>>>    End_Procedure
73397>>>>>
73397>>>>>    Procedure End_Construct_Object
73399>>>>>        Forward Send End_Construct_Object
73401>>>>>
73401>>>>>    End_Procedure
73402>>>>>
73402>>>>>End_Class
73403>>>Use Base\cVDFD_CE_CJContextMenu.pkg
Including file: Base\cVDFD_CE_CJContextMenu.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_CJContextMenu.pkg)
73403>>>>>Use cCJCommandBarSystem.pkg
73403>>>>>
73403>>>>>Class cVDFD_CE_CJContextMenu is a cCJContextMenu
73404>>>>>    
73404>>>>>    Procedure Construct_Object
73406>>>>>        Forward Send Construct_Object
73408>>>>>
73408>>>>>    End_Procedure
73409>>>>>
73409>>>>>    Procedure End_Construct_Object
73411>>>>>        Forward Send End_Construct_Object
73413>>>>>
73413>>>>>    End_Procedure
73414>>>>>
73414>>>>>End_Class
73415>>>Use Base\cVDFD_CE_CJGrid.pkg
Including file: Base\cVDFD_CE_CJGrid.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_CJGrid.pkg)
73415>>>>>Use cCJGrid.pkg
73415>>>>>
73415>>>>>Class cVDFD_CE_CJGrid is a cCJGrid
73416>>>>>    
73416>>>>>    Procedure Construct_Object
73418>>>>>        Forward Send Construct_Object
73420>>>>>
73420>>>>>    End_Procedure
73421>>>>>
73421>>>>>    Procedure End_Construct_Object
73423>>>>>        Forward Send End_Construct_Object
73425>>>>>
73425>>>>>    End_Procedure
73426>>>>>
73426>>>>>End_Class
73427>>>Use Base\cVDFD_CE_CJGridColumn.pkg
Including file: Base\cVDFD_CE_CJGridColumn.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_CJGridColumn.pkg)
73427>>>>>Use cCJGridColumn.pkg
73427>>>>>
73427>>>>>Class cVDFD_CE_CJGridColumn is a cCJGridColumn
73428>>>>>    
73428>>>>>    Procedure Construct_Object
73430>>>>>        Forward Send Construct_Object
73432>>>>>
73432>>>>>    End_Procedure
73433>>>>>
73433>>>>>    Procedure End_Construct_Object
73435>>>>>        Forward Send End_Construct_Object
73437>>>>>
73437>>>>>    End_Procedure
73438>>>>>
73438>>>>>End_Class
73439>>>Use Base\cVDFD_CE_CJGridColumnRowIndicator.pkg
Including file: Base\cVDFD_CE_CJGridColumnRowIndicator.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_CJGridColumnRowIndicator.pkg)
73439>>>>>Use cCJGridColumnRowIndicator.pkg
Including file: cCJGridColumnRowIndicator.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cCJGridColumnRowIndicator.pkg)
73439>>>>>>>Use cCJGridColumn.pkg
73439>>>>>>>
73439>>>>>>>Class cCJGridColumnRowIndicator is a cCJGridColumn
73440>>>>>>>    
73440>>>>>>>    Procedure Construct_Object
73442>>>>>>>        Forward Send Construct_Object
73444>>>>>>>    
73444>>>>>>>        Property Integer piImage 0
73445>>>>>>>        
73445>>>>>>>        Set psCaption to ""
73446>>>>>>>        Set piWidth to 20
73447>>>>>>>        Set pbResizable to False
73448>>>>>>>        Set pbEditable to False
73449>>>>>>>        Set pbFocusable to False
73450>>>>>>>        Set pbAllowDrag to False
73451>>>>>>>        Set psTooltip to "Row Indicator"
73452>>>>>>>//        Set Color to (RGB(217,222,243))   //JVH
73452>>>>>>>    End_Procedure
73453>>>>>>>    
73453>>>>>>>    Procedure OnCreateColumn
73455>>>>>>>        Integer iImage
73455>>>>>>>        Delegate Get AddImage "GridColumnRowIndicator.bmp" 0 to iImage
73457>>>>>>>        Set piImage to iImage
73458>>>>>>>    End_Procedure
73459>>>>>>>            
73459>>>>>>>    Procedure OnSetDisplayMetrics Handle hoGridItemMetrics Integer iRow String ByRef sValue
73461>>>>>>>        Integer iImage iFocusedRow
73461>>>>>>>        Handle hoDataSource
73461>>>>>>>        
73461>>>>>>>        Get phoDataSource to hoDataSource
73462>>>>>>>        Get SelectedRow of hoDataSource to iFocusedRow
73463>>>>>>>        Move -1 to iImage
73464>>>>>>>        If (iRow = iFocusedRow) Begin
73466>>>>>>>            Get piImage to iImage
73467>>>>>>>            Set ComItemIcon of hoGridItemMetrics to iImage
73468>>>>>>>        End
73468>>>>>>>>
73468>>>>>>>    End_Procedure
73469>>>>>>>
73469>>>>>>>End_Class
73470>>>>>
73470>>>>>Class cVDFD_CE_CJGridColumnRowIndicator is a cCJGridColumnRowIndicator
73471>>>>>    
73471>>>>>    Procedure Construct_Object
73473>>>>>        Forward Send Construct_Object
73475>>>>>
73475>>>>>    End_Procedure
73476>>>>>
73476>>>>>    Procedure End_Construct_Object
73478>>>>>        Forward Send End_Construct_Object
73480>>>>>
73480>>>>>    End_Procedure
73481>>>>>
73481>>>>>End_Class
73482>>>Use Base\cVDFD_CE_CJGridPromptList.pkg
Including file: Base\cVDFD_CE_CJGridPromptList.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_CJGridPromptList.pkg)
73482>>>>>Use cCJGridPromptList.pkg
Including file: cCJGridPromptList.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cCJGridPromptList.pkg)
73482>>>>>>>Use Windows.pkg
73482>>>>>>>Use cCJGrid.pkg
73482>>>>>>>
73482>>>>>>>
73482>>>>>>>
73482>>>>>>>Class cCJGridPromptList is a cCJGrid
73483>>>>>>>
73483>>>>>>>    Procedure Construct_Object
73485>>>>>>>        Forward Send Construct_Object
73487>>>>>>>
73487>>>>>>>        Property Boolean pbAutoSeed True     // if we should seed list from invoking data
73488>>>>>>>        Property Boolean Private_pbAutoOrdering True
73489>>>>>>>        Property Boolean pbAutoSearch True  // pops up search window
73490>>>>>>>        Property Integer peUpdateMode umPromptValue
73491>>>>>>>        Property Integer piUpdateColumn 0
73492>>>>>>>        Property Integer piInitialColumn -1
73493>>>>>>>        Property String  psSeedValue ''
73494>>>>>>>        Property Handle phmPromptUpdateCallback 0
73495>>>>>>>        Property Integer phoInvokingObject
73496>>>>>>>        
73496>>>>>>>        Property Boolean pbStoredAutoSeed
73497>>>>>>>        Property Boolean pbStoredAutoOrdering
73498>>>>>>>        Property Boolean pbStoredAutoSearch
73499>>>>>>>        Property Integer peStoredUpdateMode
73500>>>>>>>        Property Integer piStoredUpdateColumn
73501>>>>>>>        Property Integer piStoredInitialColumn
73502>>>>>>>        Property Handle  phmStoredPromptUpdateCallback
73503>>>>>>>        Property Boolean pbStoredSelectionEnable
73504>>>>>>>        Property Boolean pbStoredMultipleSelection
73505>>>>>>>
73505>>>>>>>        // internally set by list
73505>>>>>>>        // these must be set upon closing the list and can be used for manual list updates
73505>>>>>>>        Property Boolean pbCanceled
73506>>>>>>>        Property Integer[] pSelectedRows
73507>>>>>>>
73507>>>>>>>        Property Boolean pbNeedsNewOrdering
73508>>>>>>>        Property Boolean pbRequestSearch
73509>>>>>>>        Property tGridKeyPair[] pSearchKeys
73510>>>>>>>        
73510>>>>>>>        // these properties makes a prompt list a prompt list
73510>>>>>>>        // and should not be changed.
73510>>>>>>>        Set pbEditOnKeyNavigation to False
73511>>>>>>>        Set pbEditOnClick to False
73512>>>>>>>        Set pbReadOnly to True
73513>>>>>>>        Set pbFocusSubItems to True
73514>>>>>>>        
73514>>>>>>>        // these could maybe be changed
73514>>>>>>>        Set pbShadeSortColumn to True
73515>>>>>>>        Set pbHeaderReorders to True
73516>>>>>>>        Set pbHeaderTogglesDirection to True
73517>>>>>>>        Set pbHeaderSelectsColumn to True
73518>>>>>>>        Set peHorizontalGridStyle to xtpGridNoLines
73519>>>>>>>        Set piFocusCellBackColor to clNone
73520>>>>>>>        Set piFocusCellForeColor to clNone
73521>>>>>>>        Set piFocusCellRectangleColor to clBlack
73522>>>>>>>        Set pbUseFocusCellRectangle to False
73523>>>>>>>        Set pbSelectionEnable to True
73524>>>>>>>        
73524>>>>>>>        On_Key kEnter Send Ok
73525>>>>>>>        On_Key kCancel Send Cancel
73526>>>>>>>
73526>>>>>>>    End_Procedure
73527>>>>>>>    
73527>>>>>>>    // reorder list automatically on column change
73527>>>>>>>    // this also set pbFocusSubItems which is required to make the two states work
73527>>>>>>>    Procedure Set pbAutoOrdering Boolean bAutoOrder
73529>>>>>>>        Set Private_pbAutoOrdering to bAutoOrder
73530>>>>>>>        Set pbFocusSubItems to bAutoOrder
73531>>>>>>>    End_Procedure
73532>>>>>>>    
73532>>>>>>>    Function pbAutoOrdering Returns Boolean
73534>>>>>>>        Boolean bAutoOrder
73534>>>>>>>        Get Private_pbAutoOrdering to bAutoOrder
73535>>>>>>>        Function_Return bAutoOrder
73536>>>>>>>    End_Function
73537>>>>>>>
73537>>>>>>>    // augmented to handle auto-ordering and invoking the search popup list
73537>>>>>>>    Procedure OnIdle
73539>>>>>>>        Boolean bNeedsReorder bSearch bOldToggle
73539>>>>>>>        Handle hoCol
73539>>>>>>>        Integer iKy1 iKy2 iCol
73539>>>>>>>
73539>>>>>>>        Get pbNeedsNewOrdering to bNeedsReorder
73540>>>>>>>        If bNeedsReorder Begin
73542>>>>>>>            Get SelectedColumn to iCol
73543>>>>>>>            If (iCol<>-1) Begin
73545>>>>>>>                
73545>>>>>>>                Get pbHeaderTogglesDirection to bOldToggle
73546>>>>>>>                Set pbHeaderTogglesDirection to False
73547>>>>>>>                Send HeaderReorder iCol
73548>>>>>>>                Set pbHeaderTogglesDirection to bOldToggle
73549>>>>>>>                
73549>>>>>>>                Set pbNeedsNewOrdering to False
73550>>>>>>>            End
73550>>>>>>>>
73550>>>>>>>        End
73550>>>>>>>>
73550>>>>>>>        
73550>>>>>>>        Get pbRequestSearch to bSearch
73551>>>>>>>        If bSearch Begin
73553>>>>>>>            Send Request_SearchEx // will use the keys pSearchKeys as eed
73554>>>>>>>        End
73554>>>>>>>>
73554>>>>>>>        
73554>>>>>>>        Forward Send OnIdle
73556>>>>>>>    End_Procedure
73557>>>>>>>    
73557>>>>>>>    Procedure OnStoreDefaults
73559>>>>>>>        Integer iVal
73559>>>>>>>        Boolean bVal
73559>>>>>>>
73559>>>>>>>        Get pbAutoSeed to bVal           
73560>>>>>>>        Set pbStoredAutoSeed to bVal           
73561>>>>>>>        
73561>>>>>>>        Get pbAutoOrdering to bVal        
73562>>>>>>>        Set pbStoredAutoOrdering to bVal      
73563>>>>>>>        
73563>>>>>>>        Get pbAutoSearch to bVal         
73564>>>>>>>        Set pbStoredAutoSearch to bVal         
73565>>>>>>>        
73565>>>>>>>        Get peUpdateMode to iVal
73566>>>>>>>        Set peStoredUpdateMode to iVal
73567>>>>>>>        
73567>>>>>>>        Get piUpdateColumn to iVal       
73568>>>>>>>        Set piStoredUpdateColumn to iVal       
73569>>>>>>>
73569>>>>>>>        Get piInitialColumn to iVal       
73570>>>>>>>        Set piStoredInitialColumn to iVal       
73571>>>>>>>
73571>>>>>>>        Get phmPromptUpdateCallback to iVal       
73572>>>>>>>        Set phmStoredPromptUpdateCallback to iVal       
73573>>>>>>>
73573>>>>>>>        Get pbSelectionEnable to bVal
73574>>>>>>>        Set pbStoredSelectionEnable to bVal
73575>>>>>>>        
73575>>>>>>>        Get pbMultipleSelection to bVal
73576>>>>>>>        Set pbStoredMultipleSelection to bVal
73577>>>>>>>        
73577>>>>>>>    End_Procedure
73578>>>>>>>
73578>>>>>>>    Procedure OnRestoreDefaults
73580>>>>>>>        Integer iVal
73580>>>>>>>        Boolean bVal
73580>>>>>>>
73580>>>>>>>        Get pbStoredAutoSeed to bVal           
73581>>>>>>>        Set pbAutoSeed to bVal           
73582>>>>>>>        
73582>>>>>>>        Get pbStoredAutoOrdering to bVal        
73583>>>>>>>        Set pbAutoOrdering to bVal      
73584>>>>>>>        
73584>>>>>>>        Get pbStoredAutoSearch to bVal         
73585>>>>>>>        Set pbAutoSearch to bVal         
73586>>>>>>>        
73586>>>>>>>        Get peStoredUpdateMode to iVal
73587>>>>>>>        Set peUpdateMode to iVal
73588>>>>>>>        
73588>>>>>>>        Get piStoredInitialColumn to iVal       
73589>>>>>>>        Set piInitialColumn to iVal       
73590>>>>>>>        
73590>>>>>>>        Get phmStoredPromptUpdateCallback to iVal       
73591>>>>>>>        Set phmPromptUpdateCallback to iVal       
73592>>>>>>>
73592>>>>>>>        Get pbStoredSelectionEnable to bVal
73593>>>>>>>        Set pbSelectionEnable to bVal
73594>>>>>>>        
73594>>>>>>>        Get pbStoredMultipleSelection to bVal
73595>>>>>>>        Set pbMultipleSelection to bVal
73596>>>>>>>
73596>>>>>>>    End_Procedure
73597>>>>>>>    
73597>>>>>>>    // finds the target seed value in the updatecolumn. If we autoseed and there is a
73597>>>>>>>    // seed value (psSeedValue), attempt to find GE that value, else move to first row
73597>>>>>>>    // Suitable for augmentation
73597>>>>>>>    Procedure OnSeedData
73599>>>>>>>        Integer iUpdateColumn
73599>>>>>>>        Boolean bSeed
73599>>>>>>>        String sValue
73599>>>>>>>        Get piUpdateColumn to iUpdateColumn
73600>>>>>>>        Get psSeedValue to sValue
73601>>>>>>>        Get pbAutoSeed to bSeed
73602>>>>>>>        If (bSeed and iUpdateColumn<>-1 and sValue<>"") Begin
73604>>>>>>>            Send RequestFindColumnValue iUpdateColumn sValue True 0  
73605>>>>>>>        End
73605>>>>>>>>
73605>>>>>>>        Else Begin
73606>>>>>>>            Send MovetoFirstRow
73607>>>>>>>        End
73607>>>>>>>>
73607>>>>>>>    End_Function
73608>>>>>>>
73608>>>>>>>    Procedure OnMoveValueOutByValue
73610>>>>>>>        String sValue
73610>>>>>>>        Handle hoInvokingObject hoCol  hoDataSource
73610>>>>>>>        Integer iRow iCol
73610>>>>>>>        Integer[] SelRowsIndexes
73611>>>>>>>
73611>>>>>>>        Get phoInvokingObject to hoInvokingObject
73612>>>>>>>        Get pSelectedRows to SelRowsIndexes
73613>>>>>>>        If (SizeOfArray(SelRowsIndexes)>0) Begin
73615>>>>>>>            Get piUpdateColumn to iCol
73616>>>>>>>            Get ColumnObject iCol to hoCol
73617>>>>>>>            Get RowValue of hoCol SelRowsIndexes[0] to sValue
73618>>>>>>>            Set Value of hoInvokingObject to sValue
73619>>>>>>>            Set Item_Changed_State of hoInvokingObject to True
73620>>>>>>>        End
73620>>>>>>>>
73620>>>>>>>    End_Procedure
73621>>>>>>>
73621>>>>>>>    Procedure OnMoveValueOutByCustom
73623>>>>>>>    End_Procedure
73624>>>>>>>
73624>>>>>>>    // augment to popup a search window when allowed
73624>>>>>>>    Procedure OnComKeyDown Short ByRef llKeyCode Short llShift
73626>>>>>>>        Boolean bSubFocus bAutoSearch bChar
73626>>>>>>>        Integer iVal
73626>>>>>>>        
73626>>>>>>>        Get pbFocusSubItems to bSubFocus
73627>>>>>>>        Get pbAutoSearch to bAutoSearch
73628>>>>>>>        Forward Send OnComKeyDown llKeyCode llShift
73630>>>>>>>        If (bAutoSearch and not(bSubFocus)) Begin
73632>>>>>>>            If ((llShift iand 6)=0) Begin // skip alt and ctrl
73634>>>>>>>                Get GetVKeyToAnsi llKeyCode llShift to iVal
73635>>>>>>>                Move (iVal<>0) to bChar
73636>>>>>>>            End
73636>>>>>>>>
73636>>>>>>>            If bChar Begin
73638>>>>>>>                // this can get called multiple times before a search dialog pops up
73638>>>>>>>                Send AddToSearchKeys llKeyCode llShift
73639>>>>>>>            End
73639>>>>>>>>
73639>>>>>>>        End
73639>>>>>>>>
73639>>>>>>>    End_Procedure
73640>>>>>>>    
73640>>>>>>>    Procedure OnComRequestEdit Variant llRow Variant llColumn Variant llItem Boolean ByRef llCancel
73642>>>>>>>        Boolean bAutoSearch
73642>>>>>>>        Integer iKeyCode iShiftCode
73642>>>>>>>        Get pbAutoSearch to bAutoSearch
73643>>>>>>>        If bAutoSearch Begin
73645>>>>>>>            // this can get called multiple times before a search dialog pops up
73645>>>>>>>            Get piLastKey to iKeyCode
73646>>>>>>>            Get piLastKey2 to iShiftCode
73647>>>>>>>            Send AddToSearchKeys iKeyCode iShiftCode
73648>>>>>>>        End
73648>>>>>>>>
73648>>>>>>>        Move True to llCancel
73649>>>>>>>    End_Procedure  // OnComRequestEdit
73650>>>>>>>    
73650>>>>>>>    Procedure OnComRowDblClick Variant llRow Variant llItem
73652>>>>>>>        Send ClearSearchRequest // kill any deferred search popup
73653>>>>>>>        Forward Send OnComRowDblClick llRow llItem
73655>>>>>>>    End_Procedure
73656>>>>>>>    
73656>>>>>>>    Procedure OnRowDoubleClick Integer iRow Integer iCol
73658>>>>>>>        Send Ok
73659>>>>>>>    End_Procedure
73660>>>>>>>    
73660>>>>>>>    
73660>>>>>>>    // we don't want a menu for prompt lists
73660>>>>>>>    Function CreateContextMenu Returns Handle
73662>>>>>>>        Function_Return 0
73663>>>>>>>    End_Function
73664>>>>>>>
73664>>>>>>>    // if we use auto-ordering, change the order when the column changes
73664>>>>>>>    Procedure ColumnChanged Integer iOld Integer iNew
73666>>>>>>>        Boolean bAutoOrder
73666>>>>>>>        Forward Send ColumnChanged iOld iNew
73668>>>>>>>        Get pbAutoOrdering to bAutoOrder
73669>>>>>>>        If bAutoOrder Begin
73671>>>>>>>            // will be reordered in idle event
73671>>>>>>>            Set pbNeedsNewOrdering to True
73672>>>>>>>        End
73672>>>>>>>>
73672>>>>>>>    End_Procedure
73673>>>>>>>    
73673>>>>>>>
73673>>>>>>>    Procedure Add_Focus Handle hoParent Returns Integer
73675>>>>>>>        Integer eMode
73675>>>>>>>        Integer[] SelRowsIndexes
73676>>>>>>>        Set pbCanceled to True // assume cancel unless changed
73677>>>>>>>        Set pSelectedRows to SelRowsIndexes // empty
73678>>>>>>>        Get peUpdateMode to eMode
73679>>>>>>>        If (eMode<>umPromptNonInvoking) Begin
73681>>>>>>>            Send OnStoreDefaults
73682>>>>>>>        End
73682>>>>>>>>
73682>>>>>>>        Send InitializePromptList
73683>>>>>>>        Forward Send Add_Focus hoParent
73685>>>>>>>        Send LoadData
73686>>>>>>>        Set psSeedValue to ""
73687>>>>>>>    End_Procedure
73688>>>>>>>    
73688>>>>>>>    // called before the list is activated. 
73688>>>>>>>    Procedure InitializePromptList
73690>>>>>>>        Integer hoInvokingObject
73690>>>>>>>        Boolean bAutoColumn bAutoSeed 
73690>>>>>>>        Integer i iOldMode eUpdateMode
73690>>>>>>>        String sValue
73690>>>>>>>        
73690>>>>>>>        Get peUpdateMode to eUpdateMode
73691>>>>>>>        If (eUpdateMode<>umPromptNonInvoking) Begin
73693>>>>>>>            Get Focus of Desktop to hoInvokingObject
73694>>>>>>>            If (hoInvokingObject<=Desktop) Begin
73696>>>>>>>                Error DFERR_PROGRAM "Prompt list has no invoking object"
73697>>>>>>>>
73697>>>>>>>                Procedure_Return
73698>>>>>>>            End
73698>>>>>>>>
73698>>>>>>>
73698>>>>>>>            Set phoInvokingObject to hoInvokingObject
73699>>>>>>>
73699>>>>>>>            Send Prompt_Callback to hoInvokingObject Self
73700>>>>>>>            Get peUpdateMode to eUpdateMode
73701>>>>>>>        End
73701>>>>>>>>
73701>>>>>>>
73701>>>>>>>        Send ClearSearchRequest // clear the search keys
73702>>>>>>>        Set pbNeedsNewOrdering to False
73703>>>>>>>
73703>>>>>>>        Get pbAutoSeed to bAutoSeed
73704>>>>>>>
73704>>>>>>>        If (eUpdateMode=umPromptValue) Begin // else not used here intentionally
73706>>>>>>>            Get Value of hoInvokingObject to sValue
73707>>>>>>>            Set psSeedValue to sValue
73708>>>>>>>        End
73708>>>>>>>>
73708>>>>>>>        
73708>>>>>>>    End_Procedure
73709>>>>>>>    
73709>>>>>>>    // called after list is created and active. Load Data, seed list, select start column, etc.
73709>>>>>>>    Procedure LoadData
73711>>>>>>>        Handle hoInvokingObject hoDataSource hoInitialColumn
73711>>>>>>>        Integer iUpdateColumn iRows iInitialColumn iInitialOrder
73711>>>>>>>        Integer eUpdateMode
73711>>>>>>>        Boolean bAutoSeed bAutoColumn bCancel bSubFocus bAutoOrder 
73711>>>>>>>        
73711>>>>>>>        Get phoDataSource to hoDataSource
73712>>>>>>>        Get peUpdateMode to eUpdateMode
73713>>>>>>>        Get phoInvokingObject to hoInvokingObject
73714>>>>>>>        Get pbAutoSeed to bAutoSeed
73715>>>>>>>        Get piInitialColumn to iInitialColumn
73716>>>>>>>        Get piUpdateColumn to iUpdateColumn
73717>>>>>>>        Get RowCount of hoDataSource to iRows
73718>>>>>>>        
73718>>>>>>>        // We need an initial column. if you specified an initial column that will get used for the start column
73718>>>>>>>        // and the initial sort order. If you did not, which is typical, it will use the update column
73718>>>>>>>        If (iInitialColumn=-1) Begin
73720>>>>>>>            Move iUpdateColumn to iInitialColumn
73721>>>>>>>        End
73721>>>>>>>>
73721>>>>>>>        If (iInitialColumn>=0) Begin
73723>>>>>>>            Get ColumnObject iInitialColumn to hoInitialColumn
73724>>>>>>>            Set pbVisible of hoInitialColumn to True // initial column should be visible
73725>>>>>>>        End
73725>>>>>>>>
73725>>>>>>>        Send OnSeedData // find a good starting place for the row
73726>>>>>>>        Get pbFocusSubItems to bSubFocus
73727>>>>>>>        If bSubFocus Begin
73729>>>>>>>            // if column focus, which is normal, go to initialcolumn       
73729>>>>>>>            If hoInitialColumn Begin
73731>>>>>>>                Get MoveToColumnObject hoInitialColumn to bCancel
73732>>>>>>>            End
73732>>>>>>>>
73732>>>>>>>            Else Begin
73733>>>>>>>                Send MoveToFirstEnterableColumn
73734>>>>>>>            End
73734>>>>>>>>
73734>>>>>>>        End
73734>>>>>>>>
73734>>>>>>>
73734>>>>>>>    End_Procedure
73735>>>>>>>    
73735>>>>>>>    // This is only called in a successful close
73735>>>>>>>    Procedure ClosePromptList
73737>>>>>>>        Handle hoDataSource hoInvokingObject
73737>>>>>>>        Handle hmCallBack
73737>>>>>>>        Integer iRow eUpdateMode
73737>>>>>>>        Integer[] SelRowsIndexes
73738>>>>>>>        
73738>>>>>>>        Get phoDataSource to hoDataSource
73739>>>>>>>        Get phoInvokingObject to hoInvokingObject
73740>>>>>>>        
73740>>>>>>>        If (pbMultipleSelection(Self)) Begin
73742>>>>>>>            Get GetIndexesForSelectedRows to SelRowsIndexes
73743>>>>>>>        End
73743>>>>>>>>
73743>>>>>>>        Else Begin
73744>>>>>>>            Get SelectedRow of hoDataSource to iRow
73745>>>>>>>            If (iRow<>-1) Begin
73747>>>>>>>                Move iRow to SelRowsIndexes[0]
73748>>>>>>>            End
73748>>>>>>>>
73748>>>>>>>        End
73748>>>>>>>>
73748>>>>>>>        
73748>>>>>>>        Set pbCanceled to False
73749>>>>>>>        Set pSelectedRows to SelRowsIndexes
73750>>>>>>>        
73750>>>>>>>        Get peUpdateMode to eUpdateMode
73751>>>>>>>        // if non-invoking there is by definition, no move value out
73751>>>>>>>        If (eUpdateMode<>umPromptNonInvoking) Begin
73753>>>>>>>            
73753>>>>>>>            If (eUpdateMode=umPromptValue) Begin
73755>>>>>>>                Send OnMoveValueOutByValue
73756>>>>>>>            End
73756>>>>>>>>
73756>>>>>>>            Else If (eUpdateMode=umPromptCustom) Begin
73759>>>>>>>                Send OnMoveValueOutByCustom
73760>>>>>>>            End
73760>>>>>>>>
73760>>>>>>>                Get phmPromptUpdateCallback to hmCallBack
73761>>>>>>>                If hmCallBack Begin
73763>>>>>>>                    Send hmCallBack of hoInvokingObject Self
73764>>>>>>>                End
73764>>>>>>>>
73764>>>>>>>        End
73764>>>>>>>>
73764>>>>>>>
73764>>>>>>>        Send Close_Panel
73765>>>>>>>    End_Procedure
73766>>>>>>>
73766>>>>>>>    // augment to send OnRestoreDefaults.
73766>>>>>>>    Procedure Release_Focus
73768>>>>>>>        Integer eUpdateMode
73768>>>>>>>        Get peUpdateMode to eUpdateMode
73769>>>>>>>        Forward Send Release_Focus
73771>>>>>>>        If (eUpdateMode<>umPromptNonInvoking) Begin
73773>>>>>>>            Send OnRestoreDefaults
73774>>>>>>>        End
73774>>>>>>>>
73774>>>>>>>    End_Procedure
73775>>>>>>>    
73775>>>>>>>    Function SelectedRowIds Returns RowID[]
73777>>>>>>>        RowID[] SelectedRowids
73778>>>>>>>        Integer[] SelectedRows
73779>>>>>>>        Integer i iRows
73779>>>>>>>        Handle hoDataSource
73779>>>>>>>        Get phoDataSource to hoDataSource
73780>>>>>>>        Get pSelectedRows to SelectedRows
73781>>>>>>>        Move (SizeOfArray(SelectedRows)) to iRows
73782>>>>>>>        For i from 0 to (iRows-1)
73788>>>>>>>>
73788>>>>>>>            Get RowTag of hoDataSource SelectedRows[i] to SelectedRowIds[i]
73789>>>>>>>        Loop
73790>>>>>>>>
73790>>>>>>>        Function_Return SelectedRowids
73791>>>>>>>    End_Function
73792>>>>>>>
73792>>>>>>>    Function SelectedColumnValues Integer iCol Returns String[]
73794>>>>>>>        String[] SelectedValues
73795>>>>>>>        Integer[] SelectedRows
73796>>>>>>>        Integer i iRows
73796>>>>>>>        Handle hoCol
73796>>>>>>>        Get ColumnObject iCol to hoCol
73797>>>>>>>        Get pSelectedRows to SelectedRows
73798>>>>>>>        Move (SizeOfArray(SelectedRows)) to iRows
73799>>>>>>>        For i from 0 to (iRows-1)
73805>>>>>>>>
73805>>>>>>>            Get RowValue of hoCol SelectedRows[i] to SelectedValues[i]
73806>>>>>>>        Loop
73807>>>>>>>>
73807>>>>>>>        Function_Return SelectedValues
73808>>>>>>>    End_Function
73809>>>>>>>
73809>>>>>>>    Procedure Ok Returns Integer
73811>>>>>>>        Send ClosePromptList
73812>>>>>>>    End_Procedure
73813>>>>>>>
73813>>>>>>>    Procedure Cancel Returns Integer
73815>>>>>>>        Send Close_Panel
73816>>>>>>>    End_Procedure
73817>>>>>>>        
73817>>>>>>>    Procedure Search
73819>>>>>>>        Send Activate // give focus back to list so focus things are correct
73820>>>>>>>        Send Request_Search 0 0
73821>>>>>>>    End_Procedure
73822>>>>>>>    
73822>>>>>>>    // do a search using the current keys in the search key buffer for the sort column.
73822>>>>>>>    // Becaue this is called via an OnIdle it is possible to have multiple keys pressed before
73822>>>>>>>    // the OnIdle. These have been stored in pSearchKeys and will be passed to the popup dialog
73822>>>>>>>    Procedure Request_SearchEx
73824>>>>>>>        tGridKeyPair[] Keys
73824>>>>>>>        tGridKeyPair[] Keys
73825>>>>>>>        Integer iCol
73825>>>>>>>        Handle hoCol hoSearchDialog 
73825>>>>>>>        Boolean bOk
73825>>>>>>>        String sValue
73825>>>>>>>
73825>>>>>>>        Get piSortColumn to iCol
73826>>>>>>>        If (iCol<>-1) Begin
73828>>>>>>>            Get ColumnObject iCol to hoCol
73829>>>>>>>                Get pSearchKeys to Keys
73830>>>>>>>            Get Create (RefClass(cCJGridSearchDialog)) to hoSearchDialog
73831>>>>>>>            Get RequestGridSearchEx of hoSearchDialog Keys hoCol (&sValue) to bOk
73832>>>>>>>            If bOk Begin
73834>>>>>>>               Send RequestFindColumnValue iCol sValue True 0  
73835>>>>>>>            End
73835>>>>>>>>
73835>>>>>>>            Send Destroy of hoSearchDialog
73836>>>>>>>        End
73836>>>>>>>>
73836>>>>>>>        Send ClearSearchRequest // clear the search keys
73837>>>>>>>    End_Procedure
73838>>>>>>>    
73838>>>>>>>    // set pbRequestSearch to true and add the keys to the search buffer.
73838>>>>>>>    Procedure AddToSearchKeys Integer iKeyCode Integer iShiftCode
73840>>>>>>>        tGridKeyPair[] Keys
73840>>>>>>>        tGridKeyPair[] Keys
73841>>>>>>>        tGridKeyPair KeyPair
73841>>>>>>>        tGridKeyPair KeyPair
73841>>>>>>>        Set pbRequestSearch to True
73842>>>>>>>        Move iKeyCode to KeyPair.KeyCode
73843>>>>>>>        Move iShiftCode to KeyPair.ShiftCode
73844>>>>>>>        Get pSearchKeys to Keys                
73845>>>>>>>        Move KeyPair to Keys[SizeOfArray(Keys)]
73846>>>>>>>        Set pSearchKeys to Keys                
73847>>>>>>>    End_Procedure
73848>>>>>>>
73848>>>>>>>    Procedure ClearSearchRequest
73850>>>>>>>        tGridKeyPair[] SearchKeys
73850>>>>>>>        tGridKeyPair[] SearchKeys
73851>>>>>>>        Set pSearchKeys to SearchKeys
73852>>>>>>>        Set pbRequestSearch to False
73853>>>>>>>    End_Procedure
73854>>>>>>>    
73854>>>>>>>End_Class
73855>>>>>
73855>>>>>Class cVDFD_CE_CJGridPromptList is a cCJGridPromptList
73856>>>>>    
73856>>>>>    Procedure Construct_Object
73858>>>>>        Forward Send Construct_Object
73860>>>>>
73860>>>>>    End_Procedure
73861>>>>>
73861>>>>>    Procedure End_Construct_Object
73863>>>>>        Forward Send End_Construct_Object
73865>>>>>
73865>>>>>    End_Procedure
73866>>>>>
73866>>>>>End_Class
73867>>>Use Base\cVDFD_CE_CJMenuBar.pkg
Including file: Base\cVDFD_CE_CJMenuBar.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_CJMenuBar.pkg)
73867>>>>>Use cCJCommandBarSystem.pkg
73867>>>>>
73867>>>>>Class cVDFD_CE_CJMenuBar is a cCJMenuBar
73868>>>>>    
73868>>>>>    Procedure Construct_Object
73870>>>>>        Forward Send Construct_Object
73872>>>>>
73872>>>>>    End_Procedure
73873>>>>>
73873>>>>>    Procedure End_Construct_Object
73875>>>>>        Forward Send End_Construct_Object
73877>>>>>
73877>>>>>    End_Procedure
73878>>>>>
73878>>>>>End_Class
73879>>>Use Base\cVDFD_CE_CJSkinFramework.pkg
Including file: Base\cVDFD_CE_CJSkinFramework.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_CJSkinFramework.pkg)
73879>>>>>Use cCJSkinFramework.pkg
Including file: cCJSkinFramework.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cCJSkinFramework.pkg)
73879>>>>>>>Use windows.pkg
73879>>>>>>>Use cCJComSkinFramework.pkg
Including file: cCJComSkinFramework.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cCJComSkinFramework.pkg)
73879>>>>>>>>>// Visual DataFlex COM proxy classes generated from C:\Program Files\Codejock Software\ActiveX\Xtreme SuitePro ActiveX v15.3.1\Bin\Codejock.SkinFramework.v15.3.1.ocx
73879>>>>>>>>>Use FlexCom20.pkg
73879>>>>>>>>>
73879>>>>>>>>>// Changes to Imported package
73879>>>>>>>>>//     OLEXTPxx to XTPxx
73879>>>>>>>>>//     OLExtpxx to xtpxx
73879>>>>>>>>>//     OLESkinFramework to SkinFramework
73879>>>>>>>>>//     OLESTDxxx and OLEXPxxxx to STD/XP
73879>>>>>>>>>//     cCom classes to cCJ
73879>>>>>>>>>//     cCJAutomationObject back to cComAutomationObject
73879>>>>>>>>>//     cCJActiveXControl back to cComActiveXControl
73879>>>>>>>>>//     cCJSkinFramework to cCJComSkinFramework
73879>>>>>>>>>//     Use statements as noted below (classes moved to these files)
73879>>>>>>>>>//     Set classlibrary of all cComAutomation objects to Windows (for class doc)
73879>>>>>>>>>
73879>>>>>>>>>// These have been extracted from this class and moved into seperate packages
73879>>>>>>>>>// because other Codejock classes use these.
73879>>>>>>>>>Use cCJColorManager.pkg     // cCJColorManager
73879>>>>>>>>>
73879>>>>>>>>>Define SkinFrameworkApplyOptions for Integer
73879>>>>>>>>>    Define xtpSkinApplyMetrics for 1
73879>>>>>>>>>    Define xtpSkinApplyFrame for 2
73879>>>>>>>>>    Define xtpSkinApplyColors for 4
73879>>>>>>>>>    Define xtpSkinApplyMenus for 8
73879>>>>>>>>>
73879>>>>>>>>>// CLSID: {AFA0E6A1-28D7-4F2C-87A7-7266367B4655}
73879>>>>>>>>>// Dispatch interface for SkinFramework Control
73879>>>>>>>>>Class cCJ_DSkinFramework is a Mixin
73880>>>>>>>>>
73880>>>>>>>>>    Function ComApplyOptions Returns SkinFrameworkApplyOptions
73882>>>>>>>>>        SkinFrameworkApplyOptions retVal
73882>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to retVal
73883>>>>>>>>>        Function_Return retVal
73884>>>>>>>>>    End_Function
73885>>>>>>>>>
73885>>>>>>>>>    Procedure Set ComApplyOptions SkinFrameworkApplyOptions value
73887>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_I4 to value
73888>>>>>>>>>    End_Procedure
73889>>>>>>>>>
73889>>>>>>>>>    Function ComAutoApplyNewWindows Returns Boolean
73891>>>>>>>>>        Boolean retVal
73891>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to retVal
73892>>>>>>>>>        Function_Return retVal
73893>>>>>>>>>    End_Function
73894>>>>>>>>>
73894>>>>>>>>>    Procedure Set ComAutoApplyNewWindows Boolean value
73896>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 5 OLE_VT_BOOL to value
73897>>>>>>>>>    End_Procedure
73898>>>>>>>>>
73898>>>>>>>>>    Function ComAutoApplyNewThreads Returns Boolean
73900>>>>>>>>>        Boolean retVal
73900>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to retVal
73901>>>>>>>>>        Function_Return retVal
73902>>>>>>>>>    End_Function
73903>>>>>>>>>
73903>>>>>>>>>    Procedure Set ComAutoApplyNewThreads Boolean value
73905>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 10 OLE_VT_BOOL to value
73906>>>>>>>>>    End_Procedure
73907>>>>>>>>>
73907>>>>>>>>>    Function ComLoadSkin String llResourcePath String llIniFileName Returns Boolean
73909>>>>>>>>>        Handle hDispatchDriver
73909>>>>>>>>>        Boolean retVal
73909>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73910>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
73911>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourcePath
73912>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
73913>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BOOL to retVal
73914>>>>>>>>>        Function_Return retVal
73915>>>>>>>>>    End_Function
73916>>>>>>>>>
73916>>>>>>>>>    Procedure ComApplyWindow OLE_HANDLE llhWnd
73918>>>>>>>>>        Handle hDispatchDriver
73918>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73919>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
73920>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
73921>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
73922>>>>>>>>>    End_Procedure
73923>>>>>>>>>
73923>>>>>>>>>    Procedure ComEnableThemeDialogTexture OLE_HANDLE llhWnd Integer llFlags
73925>>>>>>>>>        Handle hDispatchDriver
73925>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73926>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
73927>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
73928>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llFlags
73929>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 4 OLE_VT_VOID
73930>>>>>>>>>    End_Procedure
73931>>>>>>>>>
73931>>>>>>>>>    Procedure ComRemoveWindow OLE_HANDLE llhWnd
73933>>>>>>>>>        Handle hDispatchDriver
73933>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73934>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
73935>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
73936>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 6 OLE_VT_VOID
73937>>>>>>>>>    End_Procedure
73938>>>>>>>>>
73938>>>>>>>>>    Procedure ComRemoveAllWindows
73940>>>>>>>>>        Handle hDispatchDriver
73940>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73941>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 7 OLE_VT_VOID
73942>>>>>>>>>    End_Procedure
73943>>>>>>>>>
73943>>>>>>>>>    Procedure ComAddWindowClass String llClassName String llBaseClassName
73945>>>>>>>>>        Handle hDispatchDriver
73945>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73946>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
73947>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
73948>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llBaseClassName
73949>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 8 OLE_VT_VOID
73950>>>>>>>>>    End_Procedure
73951>>>>>>>>>
73951>>>>>>>>>    Procedure ComRemoveWindowClass String llClassName
73953>>>>>>>>>        Handle hDispatchDriver
73953>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73954>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
73955>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llClassName
73956>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 9 OLE_VT_VOID
73957>>>>>>>>>    End_Procedure
73958>>>>>>>>>
73958>>>>>>>>>    Function ComEnumerateSkinDirectory String llPath Boolean llRecursive Returns Variant
73960>>>>>>>>>        Handle hDispatchDriver
73960>>>>>>>>>        Variant retVal
73960>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73961>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
73962>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
73963>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llRecursive
73964>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_DISPATCH to retVal
73965>>>>>>>>>        Function_Return retVal
73966>>>>>>>>>    End_Function
73967>>>>>>>>>
73967>>>>>>>>>    Function ComEnumerateSkinFile String llPath Returns Variant
73969>>>>>>>>>        Handle hDispatchDriver
73969>>>>>>>>>        Variant retVal
73969>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73970>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
73971>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llPath
73972>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_DISPATCH to retVal
73973>>>>>>>>>        Function_Return retVal
73974>>>>>>>>>    End_Function
73975>>>>>>>>>
73975>>>>>>>>>    Function ComGetColor XTPColorManagerColor llIndex Returns OLE_COLOR
73977>>>>>>>>>        Handle hDispatchDriver
73977>>>>>>>>>        OLE_COLOR retVal
73977>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73978>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
73979>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
73980>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 14 OLE_VT_I4 to retVal
73981>>>>>>>>>        Function_Return retVal
73982>>>>>>>>>    End_Function
73983>>>>>>>>>
73983>>>>>>>>>    Procedure ComExcludeModule String llModuleName
73985>>>>>>>>>        Handle hDispatchDriver
73985>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73986>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
73987>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llModuleName
73988>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 15 OLE_VT_VOID
73989>>>>>>>>>    End_Procedure
73990>>>>>>>>>
73990>>>>>>>>>    Function ComCreateSchema String llResourcePath String llIniFileName Returns Variant
73992>>>>>>>>>        Handle hDispatchDriver
73992>>>>>>>>>        Variant retVal
73992>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
73993>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
73994>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llResourcePath
73995>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llIniFileName
73996>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 16 OLE_VT_DISPATCH to retVal
73997>>>>>>>>>        Function_Return retVal
73998>>>>>>>>>    End_Function
73999>>>>>>>>>
73999>>>>>>>>>    Procedure ComSetWindowTheme OLE_HANDLE llhWnd Variant llSchema
74001>>>>>>>>>        Handle hDispatchDriver
74001>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74002>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
74003>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
74004>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llSchema
74005>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 17 OLE_VT_VOID
74006>>>>>>>>>    End_Procedure
74007>>>>>>>>>
74007>>>>>>>>>    Procedure ComAboutBox
74009>>>>>>>>>        Handle hDispatchDriver
74009>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74010>>>>>>>>>        Send InvokeComMethod to hDispatchDriver -552 OLE_VT_VOID
74011>>>>>>>>>    End_Procedure
74012>>>>>>>>>End_Class
74013>>>>>>>>>
74013>>>>>>>>>// CLSID: {40217CB8-4463-4030-B324-AC6A8075FEC8}
74013>>>>>>>>>// Event interface for SkinFramework Control
74013>>>>>>>>>Class cCJ_DSkinFrameworkEvents is a Mixin
74014>>>>>>>>>
74014>>>>>>>>>    Procedure RegisterComEvents
74016>>>>>>>>>    End_Procedure
74017>>>>>>>>>End_Class
74018>>>>>>>>>
74018>>>>>>>>>// CoClass
74018>>>>>>>>>// ProgID: Codejock.SkinFramework.15.3.1
74018>>>>>>>>>// CLSID: {A93F00D2-D25E-483C-9BD4-7DA977D24264}
74018>>>>>>>>>// SkinFramework Control
74018>>>>>>>>>Class cCJComSkinFramework is a cComActiveXControl
74019>>>>>>>>>    Import_Class_Protocol cCJ_DSkinFramework
74020>>>>>>>>>    Import_Class_Protocol cCJ_DSkinFrameworkEvents
74021>>>>>>>>>
74021>>>>>>>>>    Procedure Construct_Object
74023>>>>>>>>>        Forward Send Construct_Object
74025>>>>>>>>>        Set psProgID to "{A93F00D2-D25E-483C-9BD4-7DA977D24264}"
74026>>>>>>>>>        Set psEventId to "{40217CB8-4463-4030-B324-AC6A8075FEC8}"
74027>>>>>>>>>        Set psLicenseKey to ("Skin Framework Control Copyright (c) 2003-2012 Codejock Software"+ Character(13)+ Character(10)+;                             "PRODUCT-ID: Codejock.SkinFramework.ActiveX.v15.3"+ Character(13)+ Character(10)+;                             "VALIDATE-CODE: GGE-OLD-QQR-EJS")
74028>>>>>>>>>        Set peAutoCreate to acAutoCreate
74029>>>>>>>>>    End_Procedure
74030>>>>>>>>>End_Class
74031>>>>>>>>>
74031>>>>>>>>>// CLSID: {3D834DC6-1E6B-4E75-ABF7-B4E1AC6BB5D4}
74031>>>>>>>>>// SkinFramework Global Settings
74031>>>>>>>>>Class cCJISkinFrameworkGlobalSettings is a Mixin
74032>>>>>>>>>
74032>>>>>>>>>    Function ComLicense Returns String
74034>>>>>>>>>        String retVal
74034>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to retVal
74035>>>>>>>>>        Function_Return retVal
74036>>>>>>>>>    End_Function
74037>>>>>>>>>
74037>>>>>>>>>    Procedure Set ComLicense String value
74039>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 101 OLE_VT_BSTR to value
74040>>>>>>>>>    End_Procedure
74041>>>>>>>>>
74041>>>>>>>>>    Function ComTitle Returns String
74043>>>>>>>>>        String retVal
74043>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to retVal
74044>>>>>>>>>        Function_Return retVal
74045>>>>>>>>>    End_Function
74046>>>>>>>>>
74046>>>>>>>>>    Procedure Set ComTitle String value
74048>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 102 OLE_VT_BSTR to value
74049>>>>>>>>>    End_Procedure
74050>>>>>>>>>
74050>>>>>>>>>    Function ComVersion Returns String
74052>>>>>>>>>        Handle hDispatchDriver
74052>>>>>>>>>        String retVal
74052>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74053>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_BSTR to retVal
74054>>>>>>>>>        Function_Return retVal
74055>>>>>>>>>    End_Function
74056>>>>>>>>>
74056>>>>>>>>>    Function ComUnicode Returns Boolean
74058>>>>>>>>>        Handle hDispatchDriver
74058>>>>>>>>>        Boolean retVal
74058>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74059>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_BOOL to retVal
74060>>>>>>>>>        Function_Return retVal
74061>>>>>>>>>    End_Function
74062>>>>>>>>>
74062>>>>>>>>>    Function ComOcxPath Returns String
74064>>>>>>>>>        Handle hDispatchDriver
74064>>>>>>>>>        String retVal
74064>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74065>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_BSTR to retVal
74066>>>>>>>>>        Function_Return retVal
74067>>>>>>>>>    End_Function
74068>>>>>>>>>End_Class
74069>>>>>>>>>
74069>>>>>>>>>// CoClass
74069>>>>>>>>>// ProgID: Codejock.SkinFrameworkGlobalSettings.15.3.1
74069>>>>>>>>>// CLSID: {04321109-B098-429C-A71F-22FF76BAFA5C}
74069>>>>>>>>>// SkinFramework Global Settings
74069>>>>>>>>>Class cCJSkinFrameworkGlobalSettings is a cComAutomationObject
74070>>>>>>>>>    Import_Class_Protocol cCJISkinFrameworkGlobalSettings
74071>>>>>>>>>
74071>>>>>>>>>    Procedure Construct_Object
74073>>>>>>>>>        Forward Send Construct_Object
74075>>>>>>>>>        Set psProgID to "{04321109-B098-429C-A71F-22FF76BAFA5C}"
74076>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
74077>>>>>>>>>    End_Procedure
74078>>>>>>>>>End_Class
74079>>>>>>>>>
74079>>>>>>>>>// CLSID: {7DF35127-3730-4B5E-8F84-700FE941F518}
74079>>>>>>>>>Class cCJSkinIniFile is a cComAutomationObject
74080>>>>>>>>>
74080>>>>>>>>>    Function ComColorScheme Returns String
74082>>>>>>>>>        String retVal
74082>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
74083>>>>>>>>>        Function_Return retVal
74084>>>>>>>>>    End_Function
74085>>>>>>>>>
74085>>>>>>>>>    Procedure Set ComColorScheme String value
74087>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
74088>>>>>>>>>    End_Procedure
74089>>>>>>>>>
74089>>>>>>>>>    Function ComFontSize Returns String
74091>>>>>>>>>        String retVal
74091>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
74092>>>>>>>>>        Function_Return retVal
74093>>>>>>>>>    End_Function
74094>>>>>>>>>
74094>>>>>>>>>    Procedure Set ComFontSize String value
74096>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
74097>>>>>>>>>    End_Procedure
74098>>>>>>>>>
74098>>>>>>>>>    Function ComIniFileName Returns String
74100>>>>>>>>>        String retVal
74100>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to retVal
74101>>>>>>>>>        Function_Return retVal
74102>>>>>>>>>    End_Function
74103>>>>>>>>>
74103>>>>>>>>>    Procedure Set ComIniFileName String value
74105>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 3 OLE_VT_BSTR to value
74106>>>>>>>>>    End_Procedure
74107>>>>>>>>>End_Class
74108>>>>>>>>>
74108>>>>>>>>>// CLSID: {0B27848E-7DF1-4989-ABE4-5E891F427FFE}
74108>>>>>>>>>Class cCJSkinDescription is a cComAutomationObject
74109>>>>>>>>>
74109>>>>>>>>>    Function ComName Returns String
74111>>>>>>>>>        String retVal
74111>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to retVal
74112>>>>>>>>>        Function_Return retVal
74113>>>>>>>>>    End_Function
74114>>>>>>>>>
74114>>>>>>>>>    Procedure Set ComName String value
74116>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 1 OLE_VT_BSTR to value
74117>>>>>>>>>    End_Procedure
74118>>>>>>>>>
74118>>>>>>>>>    Function ComPath Returns String
74120>>>>>>>>>        String retVal
74120>>>>>>>>>        Get ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to retVal
74121>>>>>>>>>        Function_Return retVal
74122>>>>>>>>>    End_Function
74123>>>>>>>>>
74123>>>>>>>>>    Procedure Set ComPath String value
74125>>>>>>>>>        Set ComProperty of (phDispatchDriver(Self)) 2 OLE_VT_BSTR to value
74126>>>>>>>>>    End_Procedure
74127>>>>>>>>>
74127>>>>>>>>>    Function ComCount Returns Integer
74129>>>>>>>>>        Handle hDispatchDriver
74129>>>>>>>>>        Integer retVal
74129>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74130>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
74131>>>>>>>>>        Function_Return retVal
74132>>>>>>>>>    End_Function
74133>>>>>>>>>
74133>>>>>>>>>    Function ComIniFile Integer llIndex Returns Variant
74135>>>>>>>>>        Handle hDispatchDriver
74135>>>>>>>>>        Variant retVal
74135>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74136>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74137>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
74138>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
74139>>>>>>>>>        Function_Return retVal
74140>>>>>>>>>    End_Function
74141>>>>>>>>>
74141>>>>>>>>>    Function Com_NewEnum Returns Variant
74143>>>>>>>>>        Handle hDispatchDriver
74143>>>>>>>>>        Variant retVal
74143>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74144>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
74145>>>>>>>>>        Function_Return retVal
74146>>>>>>>>>    End_Function
74147>>>>>>>>>End_Class
74148>>>>>>>>>
74148>>>>>>>>>// CLSID: {29B9DF5B-868C-4295-AF88-230659AD9F2D}
74148>>>>>>>>>Class cCJSkinDescriptions is a cComAutomationObject
74149>>>>>>>>>
74149>>>>>>>>>    Function ComCount Returns Integer
74151>>>>>>>>>        Handle hDispatchDriver
74151>>>>>>>>>        Integer retVal
74151>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74152>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
74153>>>>>>>>>        Function_Return retVal
74154>>>>>>>>>    End_Function
74155>>>>>>>>>
74155>>>>>>>>>    Function ComSkin Integer llIndex Returns Variant
74157>>>>>>>>>        Handle hDispatchDriver
74157>>>>>>>>>        Variant retVal
74157>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74158>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74159>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
74160>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
74161>>>>>>>>>        Function_Return retVal
74162>>>>>>>>>    End_Function
74163>>>>>>>>>
74163>>>>>>>>>    Function Com_NewEnum Returns Variant
74165>>>>>>>>>        Handle hDispatchDriver
74165>>>>>>>>>        Variant retVal
74165>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74166>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
74167>>>>>>>>>        Function_Return retVal
74168>>>>>>>>>    End_Function
74169>>>>>>>>>End_Class
74170>>>>>>>>>
74170>>>>>>>>>// CLSID: {128507E0-C56F-43C0-BCF1-8193B35FE4C4}
74170>>>>>>>>>Class cCJSkinSchema is a cComAutomationObject
74171>>>>>>>>>End_Class
74172>>>>>>>Use cApplication.pkg
74172>>>>>>>
74172>>>>>>>Struct tSkinInformation
74172>>>>>>>    String sName     // description of the skin
74172>>>>>>>    String sSkinfile // file path. Can be relative or full
74172>>>>>>>    String sSkinIni  // section name
74172>>>>>>>End_Struct
74172>>>>>>>
74172>>>>>>>
74172>>>>>>>Class cCJSkinFramework is a cCJComSkinFramework
74173>>>>>>>    
74173>>>>>>>    Procedure Construct_Object
74175>>>>>>>        Forward Send Construct_Object
74177>>>>>>>        
74177>>>>>>>        Property String psSkinFile ""
74178>>>>>>>        Property String psSkinIni ""
74179>>>>>>>        Property Boolean pbLoadPreference False
74180>>>>>>>        
74180>>>>>>>        Set peAutoCreate to acAutoCreate
74181>>>>>>>        
74181>>>>>>>        Move Self to ghoSkinFramework
74182>>>>>>>    End_Procedure
74183>>>>>>>    
74183>>>>>>>    // return the default skin path, which is the programs directory.
74183>>>>>>>    // This requires an application object.
74183>>>>>>>    // If you want to different skin path, override this.
74183>>>>>>>    Function SkinPath Returns String
74185>>>>>>>        String sPath sPaths
74185>>>>>>>        Handle hoWorkspace
74185>>>>>>>        If ghoApplication Begin
74187>>>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
74188>>>>>>>            Get psProgramPath of hoWorkspace to sPaths
74189>>>>>>>            Get PathAtIndex of hoWorkspace sPaths 1 to sPath
74190>>>>>>>        End
74190>>>>>>>>
74190>>>>>>>        Else Begin
74191>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
74192>>>>>>>>
74192>>>>>>>        End
74192>>>>>>>>
74192>>>>>>>        Function_Return sPath
74193>>>>>>>    End_Function
74194>>>>>>>    
74194>>>>>>>    // Returns the Qualified name of psSkinFile. If the file is already qualified it just
74194>>>>>>>    // returns itself. If it is not, it uses SkinPath to get the path.
74194>>>>>>>    Function SkinQFile Returns String
74196>>>>>>>        String sFile sPath sSep
74196>>>>>>>        Boolean bQualified
74196>>>>>>>        Get psSkinFile to sFile
74197>>>>>>>        If not (IsFileNameQualified(sFile)) Begin
74199>>>>>>>            Get SkinPath to sPath
74200>>>>>>>            Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sSep
74201>>>>>>>            Move (sPath - sSep - sFile) to sFile
74202>>>>>>>        End
74202>>>>>>>>
74202>>>>>>>        Function_Return sFile
74203>>>>>>>    End_Function
74204>>>>>>>        
74204>>>>>>>    // defines the default VDF window class mapping.    
74204>>>>>>>    Procedure OnAddVDFWindowClasses
74206>>>>>>>        Send ComAddWindowClass "DFlistbox"               "ListBox"
74207>>>>>>>        Send ComAddWindowClass "DFentry"                 "Edit"
74208>>>>>>>        Send ComAddWindowClass "DFtextbox"               "Edit"
74209>>>>>>>        Send ComAddWindowClass "DFRichEditCtrl"          "Edit"
74210>>>>>>>        Send ComAddWindowClass "DFcombobox"              "ComboBox"
74211>>>>>>>        Send ComAddWindowClass "DFformlist"              "Edit"
74212>>>>>>>        Send ComAddWindowClass "DFFormListHeader"        "SysHeader32"
74213>>>>>>>        Send ComAddWindowClass "DFbutton"                "Button"
74214>>>>>>>        Send ComAddWindowClass "HPromptBtn"              "Button"
74215>>>>>>>        Send ComAddWindowClass "Hspinbtn"                "msctls_updown32"
74216>>>>>>>        Send ComAddWindowClass "DFSysTabControl32"       "SysTabControl32"
74217>>>>>>>        Send ComAddWindowClass "DFMDIClient"             "MDIClient" 
74218>>>>>>>        Send ComAddWindowClass "DFedit"                  "edit"
74219>>>>>>>        Send ComAddWindowClass "DFlistedit"              "edit"
74220>>>>>>>        Send ComAddWindowClass "DFscrollbar"             "scrollbar"
74221>>>>>>>        Send ComAddWindowClass "DFgroup"                 "Button"
74222>>>>>>>        Send ComAddWindowClass "DFComboGrid"             "ComboBox"
74223>>>>>>>        // External class
74223>>>>>>>        Send ComAddWindowClass "cVdfAnimation"           "SysAnimate32"
74224>>>>>>>        Send ComAddWindowClass "cVdfProgressBar"         "msctls_progress32"
74225>>>>>>>        Send ComAddWindowClass "cVdfStatusBar"           "msctls_statusbar32"
74226>>>>>>>        Send ComAddWindowClass "cVdfToolbar"             "ToolbarWindow32"
74227>>>>>>>        Send ComAddWindowClass "cObsoleteVdfProgressBar" "msctls_progress32"
74228>>>>>>>        Send ComAddWindowClass "cVdfTrackBar"            "msctls_trackbar32"
74229>>>>>>>        Send ComAddWindowClass "cObsoleteBasicStatusBar" "msctls_statusbar32"
74230>>>>>>>        Send ComAddWindowClass "cVdfTreeView"            "SysTreeView32"
74231>>>>>>>    End_Procedure
74232>>>>>>>    
74232>>>>>>>    // Used to support developer designed class mappings (e.g. COM controls)
74232>>>>>>>    Procedure OnAddCustomWindowClasses
74234>>>>>>>    End_Procedure
74235>>>>>>>
74235>>>>>>>    // called when object is created during end_construct_object.
74235>>>>>>>    Procedure OnCreate
74237>>>>>>>        Integer iOpts
74237>>>>>>>        Boolean bUseWindowsFont
74237>>>>>>>        Forward Send OnCreate
74239>>>>>>>        
74239>>>>>>>        // if we are using the windows fonts we will disable the apply metrics which
74239>>>>>>>        // never really looked good anyway. This test only exists or legacy purposes
74239>>>>>>>        Get pbUseWindowsFont of Desktop to bUseWindowsFont
74240>>>>>>>        If bUseWindowsFont Begin
74242>>>>>>>            Get ComApplyOptions to iOpts
74243>>>>>>>            Set ComApplyOptions to (RemoveBitValue(xtpSkinApplyMetrics, iOpts))
74244>>>>>>>        End
74244>>>>>>>>
74244>>>>>>>
74244>>>>>>>        // this works around a CJ issue where skins applied to other threads causes an exception upon close down. 
74244>>>>>>>        // We saw this with our mssql driver but it could occur elsewhere. This has been reported in the CJ newsgroup
74244>>>>>>>        // and this was the suggested workaround.
74244>>>>>>>        Set ComAutoApplyNewThreads to False
74245>>>>>>>
74245>>>>>>>        Send OnAddVDFWindowClasses
74246>>>>>>>        Send OnAddCustomWindowClasses
74247>>>>>>>        
74247>>>>>>>        // if preferences are used, it will set psSkinFile and psSkinIni
74247>>>>>>>        If (pbLoadPreference(Self)) Begin
74249>>>>>>>            Send LoadSkinPreference
74250>>>>>>>        End
74250>>>>>>>>
74250>>>>>>>        // if a skin file name exists, we apply the skin.    
74250>>>>>>>        If (psSkinFile(Self)<>"") Begin
74252>>>>>>>            Send ApplySkin
74253>>>>>>>        End        
74253>>>>>>>>
74253>>>>>>>    End_Procedure
74254>>>>>>>    
74254>>>>>>>    // called by framework as part of application exit.
74254>>>>>>>    Procedure Broadcast_Notify_Exit_Application
74256>>>>>>>        Send Notify_Exit_Application
74257>>>>>>>    End_Procedure // Notify_Exit_Application
74258>>>>>>>
74258>>>>>>>    Procedure Notify_Exit_Application
74260>>>>>>>        If (pbLoadPreference(Self)) Begin
74262>>>>>>>            Send SaveSkinPreference
74263>>>>>>>        End
74263>>>>>>>>
74263>>>>>>>    End_Procedure
74264>>>>>>>
74264>>>>>>>    Procedure NotifyPreApplySkin
74266>>>>>>>        Broadcast Send OnPreApplySkin of Desktop True       
74268>>>>>>>    End_Procedure
74269>>>>>>>
74269>>>>>>>    Procedure NotifyPostApplySkin
74271>>>>>>>        Broadcast Send OnPostApplySkin of Desktop True       
74273>>>>>>>    End_Procedure
74274>>>>>>>    
74274>>>>>>>    // returns an array of all skins in the path. If path is "", use the default path.
74274>>>>>>>    // If the default path is used, returns the file names as relative names, else use full path.
74274>>>>>>>    Function EnumerateSkins String sPath Boolean bRecursive Returns tSkinInformation[]
74276>>>>>>>        tSkinInformation[] Skins
74276>>>>>>>        tSkinInformation[] Skins
74277>>>>>>>        String sSkinName sSkinFile sDefaultPath sSep
74277>>>>>>>        Variant vSkinDescriptions vSkinDescription vSkinIniFile
74277>>>>>>>        Handle hSkinDescriptions hSkinDescription hSkinIniFile
74277>>>>>>>        Integer iSkinsCount iSkinFilesCount iNumSkins iNumSkinFiles iArrayItem
74277>>>>>>>        Integer iPos iDfltLen
74277>>>>>>>        Boolean bUseRelativePath
74277>>>>>>>        
74277>>>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sSep
74278>>>>>>>        
74278>>>>>>>        Get SkinPath to sDefaultPath
74279>>>>>>>        If (sPath="") Begin
74281>>>>>>>            Move sDefaultPath to sPath
74282>>>>>>>        End
74282>>>>>>>>
74282>>>>>>>        Move (Uppercase(sDefaultPath)) to sDefaultPath
74283>>>>>>>        Move (Length(sDefaultPath)) to iDfltLen
74284>>>>>>>        Move (sDefaultPath=Uppercase(sPath)) to bUseRelativePath
74285>>>>>>>
74285>>>>>>>        Get ComEnumerateSkinDirectory sPath bRecursive to vSkinDescriptions
74286>>>>>>>        If (not(IsNullComObject(vSkinDescriptions))) Begin
74288>>>>>>>
74288>>>>>>>            Get Create U_cCJSkinDescriptions to hSkinDescriptions
74289>>>>>>>            Get Create U_cCJSkinDescription to hSkinDescription
74290>>>>>>>            Get Create U_cCJSkinIniFile to hSkinIniFile
74291>>>>>>>            
74291>>>>>>>            Set pvComObject of hSkinDescriptions to vSkinDescriptions
74292>>>>>>>            Get ComCount of hSkinDescriptions to iNumSkinFiles
74293>>>>>>>            
74293>>>>>>>            For iSkinFilesCount from 0 to (iNumSkinFiles-1)
74299>>>>>>>>
74299>>>>>>>                Get ComSkin of hSkinDescriptions iSkinFilesCount to vSkinDescription
74300>>>>>>>                Set pvComObject of hSkinDescription to vSkinDescription
74301>>>>>>>
74301>>>>>>>                Get ComCount of hSkinDescription to iNumSkins
74302>>>>>>>                    
74302>>>>>>>                For iSkinsCount from 0 to (iNumSkins-1)
74308>>>>>>>>
74308>>>>>>>                    Get ComIniFile of hSkinDescription iSkinsCount to vSkinIniFile
74309>>>>>>>                    Set pvComObject of hSkinIniFile to vSkinIniFile
74310>>>>>>>
74310>>>>>>>                    Get ComName of hSkinDescription to Skins[iArrayItem].sName
74311>>>>>>>                    Get ComPath of hSkinDescription to sSkinFile
74312>>>>>>>                    If bUseRelativePath Begin
74314>>>>>>>                        Move (pos(sDefaultPath,uppercase(sSkinFile))) to iPos
74315>>>>>>>                        If iPos Begin
74317>>>>>>>                            Move (Remove(sSkinFile,iPos,iDfltLen)) to sSkinFile   
74318>>>>>>>                            While (Left(sSkinFile,1)=sSep)
74322>>>>>>>                                Move (Remove(sSkinFile,1,1)) to sSkinFile   
74323>>>>>>>                            Loop                         
74324>>>>>>>>
74324>>>>>>>                        End
74324>>>>>>>>
74324>>>>>>>                    End
74324>>>>>>>>
74324>>>>>>>                    Move sSkinFile to Skins[iArrayItem].sSkinfile
74325>>>>>>>                    Get ComIniFileName of hSkinIniFile to Skins[iArrayItem].sSkinIni
74326>>>>>>>
74326>>>>>>>                    Increment iArrayItem
74327>>>>>>>                Loop
74328>>>>>>>>
74328>>>>>>>            Loop
74329>>>>>>>>
74329>>>>>>>                            
74329>>>>>>>            Send Destroy of hSkinDescriptions
74330>>>>>>>            Send Destroy of hSkinDescription
74331>>>>>>>            Send Destroy of hSkinIniFile
74332>>>>>>>                
74332>>>>>>>        End
74332>>>>>>>>
74332>>>>>>>        Function_Return Skins
74333>>>>>>>    End_Function 
74334>>>>>>>    
74334>>>>>>>    // Save the skin preference. This requires an application object.
74334>>>>>>>    // Only do this if the application object allows it. 
74334>>>>>>>    // This is called during startup if pbLoadPreference is True
74334>>>>>>>    // Suitable for override
74334>>>>>>>    Procedure SaveSkinPreference 
74336>>>>>>>        String sSkin sIni
74336>>>>>>>        If ghoApplication Begin
74338>>>>>>>            If (pbPreserveEnvironment(ghoApplication)) Begin
74340>>>>>>>                Get psSkinFile to sSkin
74341>>>>>>>                Get psSkinIni to sIni
74342>>>>>>>                Send WriteString of ghoApplication "Preferences" "SkinFile" sSkin
74343>>>>>>>                Send WriteString of ghoApplication "Preferences" "SkinIni" sIni
74344>>>>>>>            End
74344>>>>>>>>
74344>>>>>>>        End
74344>>>>>>>>
74344>>>>>>>        Else Begin
74345>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
74346>>>>>>>>
74346>>>>>>>        End
74346>>>>>>>>
74346>>>>>>>    End_Procedure
74347>>>>>>>
74347>>>>>>>    // Load the skin preference. This requires an application object.
74347>>>>>>>    // Only do this if the application object allows it. 
74347>>>>>>>    // This is called during startup if pbLoadPreference is True
74347>>>>>>>    // Suitable for override
74347>>>>>>>    Procedure LoadSkinPreference 
74349>>>>>>>        String sSkin sIni
74349>>>>>>>        Boolean bExists
74349>>>>>>>        If ghoApplication Begin
74351>>>>>>>            If (pbPreserveEnvironment(ghoApplication)) Begin
74353>>>>>>>                Get ValueExists of ghoApplication "Preferences" "SkinFile" to bExists
74354>>>>>>>                If bExists Begin
74356>>>>>>>                    Get ReadString of ghoApplication "Preferences" "SkinFile" "" to sSkin
74357>>>>>>>                    Get ReadString of ghoApplication "Preferences" "SkinIni" "" to sIni
74358>>>>>>>                    Set psSkinFile to sSkin
74359>>>>>>>                    Set psSkinIni to sIni
74360>>>>>>>                End
74360>>>>>>>>
74360>>>>>>>            End
74360>>>>>>>>
74360>>>>>>>        End
74360>>>>>>>>
74360>>>>>>>        Else Begin
74361>>>>>>>            Error DFERR_PROGRAM C_$ApplicationObjectNotCreated
74362>>>>>>>>
74362>>>>>>>        End
74362>>>>>>>>
74362>>>>>>>    End_Procedure
74363>>>>>>>
74363>>>>>>>    // Can be called to apply the current skin.
74363>>>>>>>    Procedure ApplySkin
74365>>>>>>>        Boolean bOk
74365>>>>>>>        String sSkin sIni
74365>>>>>>>        If (IsComObjectCreated(Self)) Begin
74367>>>>>>>            Get SkinQFile to sSkin
74368>>>>>>>            Get psSkinIni to sIni
74369>>>>>>>            
74369>>>>>>>            Send NotifyPreApplySkin
74370>>>>>>>            // when skins are used we don't want to use built in Visual Styles
74370>>>>>>>            Send EnableVisualStyles of Desktop (sSkin="")
74371>>>>>>>            Get ComLoadSkin sSkin sIni to bOK
74372>>>>>>>            If (sSkin<>"" and not(bOk)) Begin
74374>>>>>>>                // if not ok, no skin was appied. Enable visual styles
74374>>>>>>>                Send EnableVisualStyles of Desktop True
74375>>>>>>>            End
74375>>>>>>>>
74375>>>>>>>            Send NotifyPostApplySkin
74376>>>>>>>        End
74376>>>>>>>>
74376>>>>>>>    End_Procedure
74377>>>>>>>
74377>>>>>>>
74377>>>>>>>End_Class
74378>>>>>
74378>>>>>Class cVDFD_CE_CJSkinFramework is a cCJSkinFramework
74379>>>>>    
74379>>>>>    Procedure Construct_Object
74381>>>>>        Forward Send Construct_Object
74383>>>>>
74383>>>>>    End_Procedure
74384>>>>>
74384>>>>>    Procedure End_Construct_Object
74386>>>>>        Forward Send End_Construct_Object
74388>>>>>
74388>>>>>    End_Procedure
74389>>>>>
74389>>>>>End_Class
74390>>>Use Base\cVDFD_CE_CJStatusbar.pkg
Including file: Base\cVDFD_CE_CJStatusbar.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_CJStatusbar.pkg)
74390>>>>>Use cCJCommandBarSystem.pkg
74390>>>>>
74390>>>>>Class cVDFD_CE_CJStatusbar is a cCJStatusbar
74391>>>>>    
74391>>>>>    Procedure Construct_Object
74393>>>>>        Forward Send Construct_Object
74395>>>>>
74395>>>>>    End_Procedure
74396>>>>>
74396>>>>>    Procedure End_Construct_Object
74398>>>>>        Forward Send End_Construct_Object
74400>>>>>
74400>>>>>    End_Procedure
74401>>>>>
74401>>>>>End_Class
74402>>>Use Base\cVDFD_CE_CJStatusbarPane.pkg
Including file: Base\cVDFD_CE_CJStatusbarPane.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_CJStatusbarPane.pkg)
74402>>>>>Use cCJCommandBarSystem.pkg
74402>>>>>
74402>>>>>Class cVDFD_CE_CJStatusbarPane is a cCJStatusbarPane
74403>>>>>    
74403>>>>>    Procedure Construct_Object
74405>>>>>        Forward Send Construct_Object
74407>>>>>
74407>>>>>    End_Procedure
74408>>>>>
74408>>>>>    Procedure End_Construct_Object
74410>>>>>        Forward Send End_Construct_Object
74412>>>>>
74412>>>>>    End_Procedure
74413>>>>>
74413>>>>>End_Class
74414>>>Use Base\cVDFD_CE_CJToolbar.pkg
Including file: Base\cVDFD_CE_CJToolbar.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_CJToolbar.pkg)
74414>>>>>Use cCJCommandBarSystem.pkg
74414>>>>>
74414>>>>>Class cVDFD_CE_CJToolbar is a cCJToolbar
74415>>>>>    
74415>>>>>    Procedure Construct_Object
74417>>>>>        Forward Send Construct_Object
74419>>>>>
74419>>>>>    End_Procedure
74420>>>>>
74420>>>>>    Procedure End_Construct_Object
74422>>>>>        Forward Send End_Construct_Object
74424>>>>>
74424>>>>>    End_Procedure
74425>>>>>
74425>>>>>End_Class
74426>>>Use Base\cVDFD_CE_Crystal.pkg
Including file: Base\cVDFD_CE_Crystal.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_Crystal.pkg)
74426>>>>>Use cCrystal.pkg
Including file: cCrystal.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cCrystal.pkg)
74426>>>>>>>// Package Version 1.0
74426>>>>>>>Use Windows.pkg
74426>>>>>>>Use ptrmodes.pkg
74426>>>>>>>Use LanguageText.Pkg
74426>>>>>>>Use cCrystalcraxddrt.pkg
Including file: cCrystalcraxddrt.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cCrystalcraxddrt.pkg)
74426>>>>>>>>>// Visual DataFlex COM proxy classes generated from C:\Program Files\Common Files\Business Objects\3.0\bin\craxddrt.dll
74426>>>>>>>>>Use FlexCom20.pkg
74426>>>>>>>>>
74426>>>>>>>>>
74426>>>>>>>>>Define CRConvertDateTimeType for Integer
74426>>>>>>>>>    Define crConvertDateTimeToString for 0
74426>>>>>>>>>    Define crConvertDateTimeToDate for 1
74426>>>>>>>>>    Define crKeepDateTimeType for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRPaperOrientation for Integer
74426>>>>>>>>>    Define crDefaultPaperOrientation for 0
74426>>>>>>>>>    Define crPortrait for 1
74426>>>>>>>>>    Define crLandscape for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRPaperSize for Integer
74426>>>>>>>>>    Define crDefaultPaperSize for 0
74426>>>>>>>>>    Define crPaperLetter for 1
74426>>>>>>>>>    Define crPaperLetterSmall for 2
74426>>>>>>>>>    Define crPaperTabloid for 3
74426>>>>>>>>>    Define crPaperLedger for 4
74426>>>>>>>>>    Define crPaperLegal for 5
74426>>>>>>>>>    Define crPaperStatement for 6
74426>>>>>>>>>    Define crPaperExecutive for 7
74426>>>>>>>>>    Define crPaperA3 for 8
74426>>>>>>>>>    Define crPaperA4 for 9
74426>>>>>>>>>    Define crPaperA4Small for 10
74426>>>>>>>>>    Define crPaperA5 for 11
74426>>>>>>>>>    Define crPaperB4 for 12
74426>>>>>>>>>    Define crPaperB5 for 13
74426>>>>>>>>>    Define crPaperFolio for 14
74426>>>>>>>>>    Define crPaperQuarto for 15
74426>>>>>>>>>    Define crPaper10x14 for 16
74426>>>>>>>>>    Define crPaper11x17 for 17
74426>>>>>>>>>    Define crPaperNote for 18
74426>>>>>>>>>    Define crPaperEnvelope9 for 19
74426>>>>>>>>>    Define crPaperEnvelope10 for 20
74426>>>>>>>>>    Define crPaperEnvelope11 for 21
74426>>>>>>>>>    Define crPaperEnvelope12 for 22
74426>>>>>>>>>    Define crPaperEnvelope14 for 23
74426>>>>>>>>>    Define crPaperCsheet for 24
74426>>>>>>>>>    Define crPaperDsheet for 25
74426>>>>>>>>>    Define crPaperEsheet for 26
74426>>>>>>>>>    Define crPaperEnvelopeDL for 27
74426>>>>>>>>>    Define crPaperEnvelopeC5 for 28
74426>>>>>>>>>    Define crPaperEnvelopeC3 for 29
74426>>>>>>>>>    Define crPaperEnvelopeC4 for 30
74426>>>>>>>>>    Define crPaperEnvelopeC6 for 31
74426>>>>>>>>>    Define crPaperEnvelopeC65 for 32
74426>>>>>>>>>    Define crPaperEnvelopeB4 for 33
74426>>>>>>>>>    Define crPaperEnvelopeB5 for 34
74426>>>>>>>>>    Define crPaperEnvelopeB6 for 35
74426>>>>>>>>>    Define crPaperEnvelopeItaly for 36
74426>>>>>>>>>    Define crPaperEnvelopeMonarch for 37
74426>>>>>>>>>    Define crPaperEnvelopePersonal for 38
74426>>>>>>>>>    Define crPaperFanfoldUS for 39
74426>>>>>>>>>    Define crPaperFanfoldStdGerman for 40
74426>>>>>>>>>    Define crPaperFanfoldLegalGerman for 41
74426>>>>>>>>>    Define crPaperUser for 256
74426>>>>>>>>>
74426>>>>>>>>>Define CRReportKind for Integer
74426>>>>>>>>>    Define crColumnarReport for 1
74426>>>>>>>>>    Define crLabelReport for 2
74426>>>>>>>>>    Define crMulColumnReport for 3
74426>>>>>>>>>
74426>>>>>>>>>Define CRGroupCondition for Integer
74426>>>>>>>>>    Define crGCDaily for 0
74426>>>>>>>>>    Define crGCWeekly for 1
74426>>>>>>>>>    Define crGCBiweekly for 2
74426>>>>>>>>>    Define crGCSemimonthly for 3
74426>>>>>>>>>    Define crGCMonthly for 4
74426>>>>>>>>>    Define crGCQuarterly for 5
74426>>>>>>>>>    Define crGCSemiAnnually for 6
74426>>>>>>>>>    Define crGCAnnually for 7
74426>>>>>>>>>    Define crGCToYes for 8
74426>>>>>>>>>    Define crGCToNo for 9
74426>>>>>>>>>    Define crGCEveryYes for 10
74426>>>>>>>>>    Define crGCEveryNo for 11
74426>>>>>>>>>    Define crGCNextIsYes for 12
74426>>>>>>>>>    Define crGCNextIsNo for 13
74426>>>>>>>>>    Define crGCAnyValue for 14
74426>>>>>>>>>    Define crGCBySecond for 15
74426>>>>>>>>>    Define crGCByMinute for 16
74426>>>>>>>>>    Define crGCByHour for 17
74426>>>>>>>>>    Define crGCByAMPM for 18
74426>>>>>>>>>
74426>>>>>>>>>Define CRSortDirection for Integer
74426>>>>>>>>>    Define crAscendingOrder for 0
74426>>>>>>>>>    Define crDescendingOrder for 1
74426>>>>>>>>>    Define crOriginalOrder for 2
74426>>>>>>>>>    Define crSpecifiedOrder for 3
74426>>>>>>>>>
74426>>>>>>>>>Define CRReportVariableValueType for Integer
74426>>>>>>>>>    Define crRVNumber for 0
74426>>>>>>>>>    Define crRVCurrency for 1
74426>>>>>>>>>    Define crRVBoolean for 2
74426>>>>>>>>>    Define crRVDate for 3
74426>>>>>>>>>    Define crRVTime for 4
74426>>>>>>>>>    Define crRVDateTime for 5
74426>>>>>>>>>    Define crRVString for 6
74426>>>>>>>>>
74426>>>>>>>>>Define CRReportFormatStyle for Integer
74426>>>>>>>>>    Define crRFStandardStyle for 0
74426>>>>>>>>>    Define crRFLeadingBreakStyle for 1
74426>>>>>>>>>    Define crRFTrailingBreakStyle for 2
74426>>>>>>>>>    Define crRFTableStyle for 3
74426>>>>>>>>>    Define crRFDropTableStyle for 4
74426>>>>>>>>>    Define crRFExecutiveLeadingBreakStyle for 5
74426>>>>>>>>>    Define crRFExecutiveTrailingBreakStyle for 6
74426>>>>>>>>>    Define crRFShadingStyle for 7
74426>>>>>>>>>    Define crRFRedBlueBorderStyle for 8
74426>>>>>>>>>    Define crRFMartoonTealBoxStyle for 9
74426>>>>>>>>>
74426>>>>>>>>>Define CRPrinterDuplexType for Integer
74426>>>>>>>>>    Define crPRDPDefault for 0
74426>>>>>>>>>    Define crPRDPSimplex for 1
74426>>>>>>>>>    Define crPRDPVertical for 2
74426>>>>>>>>>    Define crPRDPHorizontal for 3
74426>>>>>>>>>
74426>>>>>>>>>Define CRPaperSource for Integer
74426>>>>>>>>>    Define crPRBinUpper for 1
74426>>>>>>>>>    Define crPRBinLower for 2
74426>>>>>>>>>    Define crPRBinMiddle for 3
74426>>>>>>>>>    Define crPRBinManual for 4
74426>>>>>>>>>    Define crPRBinEnvelope for 5
74426>>>>>>>>>    Define crPRBinEnvManual for 6
74426>>>>>>>>>    Define crPRBinAuto for 7
74426>>>>>>>>>    Define crPRBinTractor for 8
74426>>>>>>>>>    Define crPRBinSmallFmt for 9
74426>>>>>>>>>    Define crPRBinLargeFmt for 10
74426>>>>>>>>>    Define crPRBinLargeCapacity for 11
74426>>>>>>>>>    Define crPRBinCassette for 14
74426>>>>>>>>>    Define crPRBinFormSource for 15
74426>>>>>>>>>
74426>>>>>>>>>Define CRBindingMatchType for Integer
74426>>>>>>>>>    Define crBMTName for 0
74426>>>>>>>>>    Define crBMTNameAndValue for 1
74426>>>>>>>>>
74426>>>>>>>>>Define CRReportFileFormat for Integer
74426>>>>>>>>>    Define crDefaultFileFormat for 0
74426>>>>>>>>>    Define cr70FileFormat for 1792
74426>>>>>>>>>    Define cr80FileFormat for 2048
74426>>>>>>>>>
74426>>>>>>>>>Define CRFieldMappingType for Integer
74426>>>>>>>>>    Define crAutoFieldMapping for 0
74426>>>>>>>>>    Define crPromptFieldMapping for 1
74426>>>>>>>>>    Define crEventFieldMapping for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRFormulaSyntax for Integer
74426>>>>>>>>>    Define crCrystalSyntaxFormula for 0
74426>>>>>>>>>    Define crBasicSyntaxFormula for 1
74426>>>>>>>>>
74426>>>>>>>>>Define CRAreaKind for Integer
74426>>>>>>>>>    Define crReportHeader for 1
74426>>>>>>>>>    Define crPageHeader for 2
74426>>>>>>>>>    Define crGroupHeader for 3
74426>>>>>>>>>    Define crDetail for 4
74426>>>>>>>>>    Define crGroupFooter for 5
74426>>>>>>>>>    Define crPageFooter for 7
74426>>>>>>>>>    Define crReportFooter for 8
74426>>>>>>>>>
74426>>>>>>>>>Define CRObjectKind for Integer
74426>>>>>>>>>    Define crFieldObject for 1
74426>>>>>>>>>    Define crTextObject for 2
74426>>>>>>>>>    Define crLineObject for 3
74426>>>>>>>>>    Define crBoxObject for 4
74426>>>>>>>>>    Define crSubreportObject for 5
74426>>>>>>>>>    Define crOleObject for 6
74426>>>>>>>>>    Define crGraphObject for 7
74426>>>>>>>>>    Define crCrossTabObject for 8
74426>>>>>>>>>    Define crBlobFieldObject for 9
74426>>>>>>>>>    Define crMapObject for 10
74426>>>>>>>>>    Define crOlapGridObject for 11
74426>>>>>>>>>
74426>>>>>>>>>Define CRLineStyle for Integer
74426>>>>>>>>>    Define crLSNoLine for 0
74426>>>>>>>>>    Define crLSSingleLine for 1
74426>>>>>>>>>    Define crLSDoubleLine for 2
74426>>>>>>>>>    Define crLSDashLine for 3
74426>>>>>>>>>    Define crLSDotLine for 4
74426>>>>>>>>>
74426>>>>>>>>>Define CRAlignment for Integer
74426>>>>>>>>>    Define crDefaultAlign for 0
74426>>>>>>>>>    Define crLeftAlign for 1
74426>>>>>>>>>    Define crHorCenterAlign for 2
74426>>>>>>>>>    Define crRightAlign for 3
74426>>>>>>>>>    Define crJustified for 4
74426>>>>>>>>>
74426>>>>>>>>>Define CRNegativeType for Integer
74426>>>>>>>>>    Define crNotNegative for 0
74426>>>>>>>>>    Define crLeadingMinus for 1
74426>>>>>>>>>    Define crTrailingMinus for 2
74426>>>>>>>>>    Define crBracketed for 3
74426>>>>>>>>>
74426>>>>>>>>>Define CRRoundingType for Integer
74426>>>>>>>>>    Define crRoundToTenBillionth for 1
74426>>>>>>>>>    Define crRoundToBillionth for 2
74426>>>>>>>>>    Define crRoundToHundredMillionth for 3
74426>>>>>>>>>    Define crRoundToTenMillionth for 4
74426>>>>>>>>>    Define crRoundToMillionth for 5
74426>>>>>>>>>    Define crRoundToHundredThousandth for 6
74426>>>>>>>>>    Define crRoundToTenThousandth for 7
74426>>>>>>>>>    Define crRoundToThousandth for 8
74426>>>>>>>>>    Define crRoundToHundredth for 9
74426>>>>>>>>>    Define crRoundToTenth for 10
74426>>>>>>>>>    Define crRoundToUnit for 11
74426>>>>>>>>>    Define crRoundToTen for 12
74426>>>>>>>>>    Define crRoundToHundred for 13
74426>>>>>>>>>    Define crRoundToThousand for 14
74426>>>>>>>>>    Define crRoundToTenThousand for 15
74426>>>>>>>>>    Define crRoundToHundredThousand for 16
74426>>>>>>>>>    Define crRoundToMillion for 17
74426>>>>>>>>>
74426>>>>>>>>>Define CRCurrencySymbolType for Integer
74426>>>>>>>>>    Define crCSTNoSymbol for 0
74426>>>>>>>>>    Define crCSTFixedSymbol for 1
74426>>>>>>>>>    Define crCSTFloatingSymbol for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRCurrencyPositionType for Integer
74426>>>>>>>>>    Define crLeadingCurrencyInsideNegative for 0
74426>>>>>>>>>    Define crLeadingCurrencyOutsideNegative for 1
74426>>>>>>>>>    Define crTrailingCurrencyInsideNegative for 2
74426>>>>>>>>>    Define crTrailingCurrencyOutsideNegative for 3
74426>>>>>>>>>
74426>>>>>>>>>Define CRBooleanOutputType for Integer
74426>>>>>>>>>    Define crTrueOrFalse for 0
74426>>>>>>>>>    Define crTOrF for 1
74426>>>>>>>>>    Define crYesOrNo for 2
74426>>>>>>>>>    Define crYOrN for 3
74426>>>>>>>>>    Define crOneOrZero for 4
74426>>>>>>>>>
74426>>>>>>>>>Define CRDateWindowsDefaultType for Integer
74426>>>>>>>>>    Define crUseWindowsLongDate for 0
74426>>>>>>>>>    Define crUseWindowsShortDate for 1
74426>>>>>>>>>    Define crNotUsingWindowsDefaults for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRDateOrder for Integer
74426>>>>>>>>>    Define crYearMonthDay for 0
74426>>>>>>>>>    Define crDayMonthYear for 1
74426>>>>>>>>>    Define crMonthDayYear for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRYearType for Integer
74426>>>>>>>>>    Define crShortYear for 0
74426>>>>>>>>>    Define crLongYear for 1
74426>>>>>>>>>    Define crNoYear for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRMonthType for Integer
74426>>>>>>>>>    Define crNumericMonth for 0
74426>>>>>>>>>    Define crLeadingZeroNumericMonth for 1
74426>>>>>>>>>    Define crShortMonth for 2
74426>>>>>>>>>    Define crLongMonth for 3
74426>>>>>>>>>    Define crNoMonth for 4
74426>>>>>>>>>
74426>>>>>>>>>Define CRDayType for Integer
74426>>>>>>>>>    Define crNumericDay for 0
74426>>>>>>>>>    Define crLeadingZeroNumericDay for 1
74426>>>>>>>>>    Define crNoDay for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRLeadingDayType for Integer
74426>>>>>>>>>    Define crShortLeadingDay for 0
74426>>>>>>>>>    Define crLongLeadingDay for 1
74426>>>>>>>>>    Define crNoLeadingDay for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRTimeBase for Integer
74426>>>>>>>>>    Define cr12Hour for 0
74426>>>>>>>>>    Define cr24Hour for 1
74426>>>>>>>>>
74426>>>>>>>>>Define CRAmPmType for Integer
74426>>>>>>>>>    Define crAmPmBefore for 0
74426>>>>>>>>>    Define crAmPmAfter for 1
74426>>>>>>>>>
74426>>>>>>>>>Define CRHourType for Integer
74426>>>>>>>>>    Define crNumericHour for 0
74426>>>>>>>>>    Define crNumericHourNoLeadingZero for 1
74426>>>>>>>>>    Define crNoHour for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRMinuteType for Integer
74426>>>>>>>>>    Define crNumericMinute for 0
74426>>>>>>>>>    Define crNumericMinuteNoLeadingZero for 1
74426>>>>>>>>>    Define crNoMinute for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRSecondType for Integer
74426>>>>>>>>>    Define crNumericSecond for 0
74426>>>>>>>>>    Define crNumericSecondNoLeadingZero for 1
74426>>>>>>>>>    Define crNumericNoSecond for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRLeadingDayPosition for Integer
74426>>>>>>>>>    Define crLeadingDayOfWeek for 0
74426>>>>>>>>>    Define crTrailingDayOfWeek for 1
74426>>>>>>>>>
74426>>>>>>>>>Define CRDateEraType for Integer
74426>>>>>>>>>    Define crShortEra for 0
74426>>>>>>>>>    Define crLongEra for 1
74426>>>>>>>>>    Define crNoEra for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRDateCalendarType for Integer
74426>>>>>>>>>    Define crGregorianCalendar for 1
74426>>>>>>>>>    Define crGregorianUSCalendar for 2
74426>>>>>>>>>    Define crJapaneseCalendar for 3
74426>>>>>>>>>    Define crTaiwaneseCalendar for 4
74426>>>>>>>>>    Define crKoreanCalendar for 5
74426>>>>>>>>>    Define crHijriCalendar for 6
74426>>>>>>>>>    Define crThaiCalendar for 7
74426>>>>>>>>>    Define crHebrewCalendar for 8
74426>>>>>>>>>    Define crGregorianMEFrenchCalendar for 9
74426>>>>>>>>>    Define crGregorianArabicCalendar for 10
74426>>>>>>>>>    Define crGregorianXlitEnglishCalendar for 11
74426>>>>>>>>>    Define crGregorianXlitFrenchCalendar for 12
74426>>>>>>>>>
74426>>>>>>>>>Define CRLineSpacingType for Integer
74426>>>>>>>>>    Define crMultipleSpacing for 0
74426>>>>>>>>>    Define crExactSpacing for 1
74426>>>>>>>>>
74426>>>>>>>>>Define CRRotationAngle for Integer
74426>>>>>>>>>    Define crRotate0 for 0
74426>>>>>>>>>    Define crRotate90 for 1
74426>>>>>>>>>    Define crRotate270 for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRTextFormat for Integer
74426>>>>>>>>>    Define crStandardText for 0
74426>>>>>>>>>    Define crRTFText for 1
74426>>>>>>>>>    Define crHTMLText for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRHyperlinkType for Integer
74426>>>>>>>>>    Define crHyperlinkWebsite for 0
74426>>>>>>>>>    Define crHyperlinkEmail for 1
74426>>>>>>>>>    Define crHyperlinkHtml for 2
74426>>>>>>>>>    Define crHyperlinkCrystalReport for 3
74426>>>>>>>>>    Define crHyperlinkWebsiteFieldValue for 4
74426>>>>>>>>>    Define crHyperlinkEmailFieldValue for 5
74426>>>>>>>>>    Define crHyperlinkUndefined for 6
74426>>>>>>>>>    Define crHyperlinkDrilldown for 7
74426>>>>>>>>>    Define crHyperlinkReportObject for 8
74426>>>>>>>>>
74426>>>>>>>>>Define CRFieldKind for Integer
74426>>>>>>>>>    Define crDatabaseField for 1
74426>>>>>>>>>    Define crFormulaField for 2
74426>>>>>>>>>    Define crSummaryField for 3
74426>>>>>>>>>    Define crSpecialVarField for 4
74426>>>>>>>>>    Define crGroupNameField for 5
74426>>>>>>>>>    Define crParameterField for 6
74426>>>>>>>>>    Define crRunningTotalField for 7
74426>>>>>>>>>    Define crSQLExpressionField for 8
74426>>>>>>>>>
74426>>>>>>>>>Define __MIDL___MIDL_itf_crvb60d_0280_0001 for Integer
74426>>>>>>>>>    Define crInt8sField for 1
74426>>>>>>>>>    Define crInt8uField for 2
74426>>>>>>>>>    Define crInt16sField for 3
74426>>>>>>>>>    Define crInt16uField for 4
74426>>>>>>>>>    Define crInt32sField for 5
74426>>>>>>>>>    Define crInt32uField for 6
74426>>>>>>>>>    Define crNumberField for 7
74426>>>>>>>>>    Define crCurrencyField for 8
74426>>>>>>>>>    Define crBooleanField for 9
74426>>>>>>>>>    Define crDateField for 10
74426>>>>>>>>>    Define crTimeField for 11
74426>>>>>>>>>    Define crStringField for 12
74426>>>>>>>>>    Define crTransientMemoField for 13
74426>>>>>>>>>    Define crPersistentMemoField for 14
74426>>>>>>>>>    Define crBlobField for 15
74426>>>>>>>>>    Define crDateTimeField for 16
74426>>>>>>>>>    Define crBitmapField for 17
74426>>>>>>>>>    Define crIconField for 18
74426>>>>>>>>>    Define crPictureField for 19
74426>>>>>>>>>    Define crOleField for 20
74426>>>>>>>>>    Define crChartField for 21
74426>>>>>>>>>    Define crUnknownField for 22
74426>>>>>>>>>
74426>>>>>>>>>Define CRSpecialVarType for Integer
74426>>>>>>>>>    Define crSVTPrintDate for 0
74426>>>>>>>>>    Define crSVTPrintTime for 1
74426>>>>>>>>>    Define crSVTModificationDate for 2
74426>>>>>>>>>    Define crSVTModificationTime for 3
74426>>>>>>>>>    Define crSVTDataDate for 4
74426>>>>>>>>>    Define crSVTDataTime for 5
74426>>>>>>>>>    Define crSVTRecordNumber for 6
74426>>>>>>>>>    Define crSVTPageNumber for 7
74426>>>>>>>>>    Define crSVTGroupNumber for 8
74426>>>>>>>>>    Define crSVTTotalPageCount for 9
74426>>>>>>>>>    Define crSVTReportTitle for 10
74426>>>>>>>>>    Define crSVTReportComments for 11
74426>>>>>>>>>    Define crSVTRecordSelection for 12
74426>>>>>>>>>    Define crSVTGroupSelection for 13
74426>>>>>>>>>    Define crSVTFilename for 14
74426>>>>>>>>>    Define crSVTFileAuthor for 15
74426>>>>>>>>>    Define crSVTFileCreationDate for 16
74426>>>>>>>>>    Define crSVTPageNofM for 17
74426>>>>>>>>>    Define crSVHPageNumber for 18
74426>>>>>>>>>    Define crSVCurrentUserName for 19
74426>>>>>>>>>    Define crSVCurrentUserID for 20
74426>>>>>>>>>    Define crSVCurrentUserTimeZone for 21
74426>>>>>>>>>    Define crSVPrintTimeZone for 22
74426>>>>>>>>>    Define crSVDataTimeZone for 23
74426>>>>>>>>>    Define crSVContentLocale for 24
74426>>>>>>>>>
74426>>>>>>>>>Define CRSummaryType for Integer
74426>>>>>>>>>    Define crSTSum for 0
74426>>>>>>>>>    Define crSTAverage for 1
74426>>>>>>>>>    Define crSTSampleVariance for 2
74426>>>>>>>>>    Define crSTSampleStandardDeviation for 3
74426>>>>>>>>>    Define crSTMaximum for 4
74426>>>>>>>>>    Define crSTMinimum for 5
74426>>>>>>>>>    Define crSTCount for 6
74426>>>>>>>>>    Define crSTPopVariance for 7
74426>>>>>>>>>    Define crSTPopStandardDeviation for 8
74426>>>>>>>>>    Define crSTDistinctCount for 9
74426>>>>>>>>>    Define crSTDCorrelation for 10
74426>>>>>>>>>    Define crSTDCovariance for 11
74426>>>>>>>>>    Define crSTDWeightedAvg for 12
74426>>>>>>>>>    Define crSTDMedian for 13
74426>>>>>>>>>    Define crSTDPercentile for 14
74426>>>>>>>>>    Define crSTDNthLargest for 15
74426>>>>>>>>>    Define crSTDNthSmallest for 16
74426>>>>>>>>>    Define crSTDMode for 17
74426>>>>>>>>>    Define crSTDNthMostFrequent for 18
74426>>>>>>>>>    Define crSTDPercentage for 19
74426>>>>>>>>>
74426>>>>>>>>>Define CRHierarchicalSummaryType for Integer
74426>>>>>>>>>    Define crHierarchicalSummaryNone for 0
74426>>>>>>>>>    Define crSummaryAcrossHierarchy for 1
74426>>>>>>>>>
74426>>>>>>>>>Define CRGraphDataType for Integer
74426>>>>>>>>>    Define crGroupGraph for 0
74426>>>>>>>>>    Define crDetailGraph for 1
74426>>>>>>>>>    Define crCrossTabGraph for 2
74426>>>>>>>>>    Define crOlapGraph for 3
74426>>>>>>>>>
74426>>>>>>>>>Define CRGraphType for Integer
74426>>>>>>>>>    Define crSideBySideBarGraph for 0
74426>>>>>>>>>    Define crStackedBarGraph for 1
74426>>>>>>>>>    Define crPercentBarGraph for 2
74426>>>>>>>>>    Define crFaked3DSideBySideBarGraph for 3
74426>>>>>>>>>    Define crFaked3DStackedBarGraph for 4
74426>>>>>>>>>    Define crFaked3DPercentBarGraph for 5
74426>>>>>>>>>    Define crRegularLineGraph for 10
74426>>>>>>>>>    Define crStackedLineGraph for 11
74426>>>>>>>>>    Define crPercentageLineGraph for 12
74426>>>>>>>>>    Define crLineGraphWithMarkers for 13
74426>>>>>>>>>    Define crStackedLineGraphWithMarkers for 14
74426>>>>>>>>>    Define crPercentageLineGraphWithMarkers for 15
74426>>>>>>>>>    Define crStackedAreaGraph for 21
74426>>>>>>>>>    Define crPercentAreaGraph for 22
74426>>>>>>>>>    Define crFaked3DStackedAreaGraph for 24
74426>>>>>>>>>    Define crFaked3DPercentAreaGraph for 25
74426>>>>>>>>>    Define crRegularPieGraph for 30
74426>>>>>>>>>    Define crFaked3DRegularPieGraph for 31
74426>>>>>>>>>    Define crMultiplePieGraph for 32
74426>>>>>>>>>    Define crMultipleProportionalPieGraph for 33
74426>>>>>>>>>    Define crRegularDoughnutGraph for 40
74426>>>>>>>>>    Define crMultipleDoughnutGraph for 41
74426>>>>>>>>>    Define crMultipleProportionalDoughnutGraph for 42
74426>>>>>>>>>    Define crThreeDRegularGraph for 50
74426>>>>>>>>>    Define crThreeDPyramidGraph for 51
74426>>>>>>>>>    Define crThreeDOctagonGraph for 52
74426>>>>>>>>>    Define crThreeDCutCornersGraph for 53
74426>>>>>>>>>    Define crThreeDSurfaceRegularGraph for 60
74426>>>>>>>>>    Define crThreeDSurfaceWithSidesGraph for 61
74426>>>>>>>>>    Define crThreeDSurfaceHoneycombGraph for 62
74426>>>>>>>>>    Define crXyScatterGraph for 70
74426>>>>>>>>>    Define crRegularRadarGraph for 80
74426>>>>>>>>>    Define crStackedRadarGraph for 81
74426>>>>>>>>>    Define crRegularBubbleGraph for 90
74426>>>>>>>>>    Define crHighLowGraph for 100
74426>>>>>>>>>    Define crHighLowOpenCloseGraph for 104
74426>>>>>>>>>    Define crUnknownGraph for 1000
74426>>>>>>>>>
74426>>>>>>>>>Define CRGraphDataPoint for Integer
74426>>>>>>>>>    Define crNone for 0
74426>>>>>>>>>    Define crShowLabel for 1
74426>>>>>>>>>    Define crShowValue for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRGridlineType for Integer
74426>>>>>>>>>    Define crNoGridlines for 0
74426>>>>>>>>>    Define crMinorGridlines for 1
74426>>>>>>>>>    Define crMajorGridlines for 2
74426>>>>>>>>>    Define crMajorAndMinorGridlines for 3
74426>>>>>>>>>
74426>>>>>>>>>Define CRLegendPosition for Integer
74426>>>>>>>>>    Define crPlaceRight for 4
74426>>>>>>>>>    Define crPlaceLeft for 5
74426>>>>>>>>>    Define crPlaceBottom for 6
74426>>>>>>>>>    Define crPlaceCustom for 7
74426>>>>>>>>>
74426>>>>>>>>>Define CRGraphDirection for Integer
74426>>>>>>>>>    Define crHorizontalGraph for 0
74426>>>>>>>>>    Define crVerticalGraph for 1
74426>>>>>>>>>
74426>>>>>>>>>Define CRPieSize for Integer
74426>>>>>>>>>    Define crMinimumPieSize for 64
74426>>>>>>>>>    Define crSmallPieSize for 48
74426>>>>>>>>>    Define crAveragePieSize for 32
74426>>>>>>>>>    Define crLargePieSize for 16
74426>>>>>>>>>    Define crMaximumPieSize for 0
74426>>>>>>>>>
74426>>>>>>>>>Define CRSliceDetachment for Integer
74426>>>>>>>>>    Define crNoDetachment for 0
74426>>>>>>>>>    Define crSmallestSlice for 1
74426>>>>>>>>>    Define crLargestSlice for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRBarSize for Integer
74426>>>>>>>>>    Define crMinimumBarSize for 0
74426>>>>>>>>>    Define crSmallBarSize for 1
74426>>>>>>>>>    Define crAverageBarSize for 2
74426>>>>>>>>>    Define crLargeBarSize for 3
74426>>>>>>>>>    Define crMaximumBarSize for 4
74426>>>>>>>>>
74426>>>>>>>>>Define CRMarkerSize for Integer
74426>>>>>>>>>    Define crSmallMarkers for 0
74426>>>>>>>>>    Define crMediumSmallMarkers for 1
74426>>>>>>>>>    Define crMediumMarkers for 2
74426>>>>>>>>>    Define crMediumLargeMarkers for 3
74426>>>>>>>>>    Define crLargeMarkers for 4
74426>>>>>>>>>
74426>>>>>>>>>Define CRMarkerShape for Integer
74426>>>>>>>>>    Define crRectangleShape for 1
74426>>>>>>>>>    Define crCircleShape for 4
74426>>>>>>>>>    Define crDiamondShape for 5
74426>>>>>>>>>    Define crTriangleShape for 8
74426>>>>>>>>>
74426>>>>>>>>>Define CRNumberFormat for Integer
74426>>>>>>>>>    Define crNoDecimal for 0
74426>>>>>>>>>    Define crOneDecimal for 1
74426>>>>>>>>>    Define crTwoDecimal for 2
74426>>>>>>>>>    Define crCurrencyNoDecimal for 3
74426>>>>>>>>>    Define crCurrencyTwoDecimal for 4
74426>>>>>>>>>    Define crPercentNoDecimal for 5
74426>>>>>>>>>    Define crPercentOneDecimal for 6
74426>>>>>>>>>    Define crPercentTwoDecimal for 7
74426>>>>>>>>>    Define crCustomNumberFormat for 8
74426>>>>>>>>>    Define crThousandsNoDecimal for 9
74426>>>>>>>>>    Define crMillionsNoDecimal for 10
74426>>>>>>>>>    Define crCurrencyThousands for 11
74426>>>>>>>>>    Define crCurrencyMillions for 12
74426>>>>>>>>>
74426>>>>>>>>>Define CRDivisionMethod for Integer
74426>>>>>>>>>    Define crAutomaticDivision for 0
74426>>>>>>>>>    Define crManualDivision for 1
74426>>>>>>>>>
74426>>>>>>>>>Define CRGraphColor for Integer
74426>>>>>>>>>    Define crColorGraph for 0
74426>>>>>>>>>    Define crBlackAndWhiteGraph for 1
74426>>>>>>>>>
74426>>>>>>>>>Define CRViewingAngle for Integer
74426>>>>>>>>>    Define crStandardView for 1
74426>>>>>>>>>    Define crTallView for 2
74426>>>>>>>>>    Define crTopView for 3
74426>>>>>>>>>    Define crDistortedView for 4
74426>>>>>>>>>    Define crShortView for 5
74426>>>>>>>>>    Define crGroupEyeView for 6
74426>>>>>>>>>    Define crGroupEmphasisView for 7
74426>>>>>>>>>    Define crFewSeriesView for 8
74426>>>>>>>>>    Define crFewGroupsView for 9
74426>>>>>>>>>    Define crDistortedStdView for 10
74426>>>>>>>>>    Define crThickGroupsView for 11
74426>>>>>>>>>    Define crShorterView for 12
74426>>>>>>>>>    Define crThickSeriesView for 13
74426>>>>>>>>>    Define crThickStdView for 14
74426>>>>>>>>>    Define crBirdsEyeView for 15
74426>>>>>>>>>    Define crMaxView for 16
74426>>>>>>>>>
74426>>>>>>>>>Define CRPieLegendLayout for Integer
74426>>>>>>>>>    Define crPercentLayout for 0
74426>>>>>>>>>    Define crAmountLayout for 1
74426>>>>>>>>>    Define crBothLayout for 2
74426>>>>>>>>>    Define crNoneLayout for 3
74426>>>>>>>>>
74426>>>>>>>>>Define CRTopBottomNGroupSortOrder for Integer
74426>>>>>>>>>    Define crAllGroupsUnsorted for 0
74426>>>>>>>>>    Define crAllGroupsSorted for 1
74426>>>>>>>>>    Define crTopNGroups for 2
74426>>>>>>>>>    Define crBottomNGroups for 3
74426>>>>>>>>>    Define crUnknownGroupsSortOrder for 10
74426>>>>>>>>>
74426>>>>>>>>>Define CRDatabaseType for Integer
74426>>>>>>>>>    Define crStandardDatabase for 1
74426>>>>>>>>>    Define crSQLDatabase for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRLinkJoinType for Integer
74426>>>>>>>>>    Define crJTEqual for 4
74426>>>>>>>>>    Define crJTLeftOuter for 5
74426>>>>>>>>>    Define crJTRightOutter for 6
74426>>>>>>>>>    Define crJROuter for 7
74426>>>>>>>>>    Define crJTGreaterThan for 8
74426>>>>>>>>>    Define crJTLessThan for 9
74426>>>>>>>>>    Define crJTGreaterOrEqual for 10
74426>>>>>>>>>    Define crJTLessOrEqual for 11
74426>>>>>>>>>    Define crJTNotEqual for 12
74426>>>>>>>>>    Define crJTAdvance for 13
74426>>>>>>>>>
74426>>>>>>>>>Define CRLinkLookUpType for Integer
74426>>>>>>>>>    Define crLTLookupParallel for 1
74426>>>>>>>>>    Define crLTLookupProduct for 2
74426>>>>>>>>>    Define crLTLookupSeries for 3
74426>>>>>>>>>
74426>>>>>>>>>Define CRParameterFieldType for Integer
74426>>>>>>>>>    Define crReportParameter for 0
74426>>>>>>>>>    Define crQueryParameter for 1
74426>>>>>>>>>    Define crStoreProcedureParameter for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRDiscreteOrRangeKind for Integer
74426>>>>>>>>>    Define crDiscreteValue for 0
74426>>>>>>>>>    Define crRangeValue for 1
74426>>>>>>>>>    Define crDiscreteAndRangeValue for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRRangeInfo for Integer
74426>>>>>>>>>    Define crRangeNotIncludeUpperLowerBound for 0
74426>>>>>>>>>    Define crRangeIncludeUpperBound for 1
74426>>>>>>>>>    Define crRangeIncludeLowerBound for 2
74426>>>>>>>>>    Define crRangeNoUpperBound for 4
74426>>>>>>>>>    Define crRangeNoLowerBound for 8
74426>>>>>>>>>
74426>>>>>>>>>Define CRParameterPicklistSortMethod for Integer
74426>>>>>>>>>    Define crNoSort for 0
74426>>>>>>>>>    Define crAlphanumericAscending for 1
74426>>>>>>>>>    Define crAlphanumericDescending for 2
74426>>>>>>>>>    Define crNumericAscending for 3
74426>>>>>>>>>    Define crNumericDescending for 4
74426>>>>>>>>>
74426>>>>>>>>>Define CRImageType for Integer
74426>>>>>>>>>    Define crImageUnknown for 0
74426>>>>>>>>>    Define crDIBImageType for 1
74426>>>>>>>>>    Define crJPEGImageType for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRRenderResultType for Integer
74426>>>>>>>>>    Define crUISafeArrayType for 8209
74426>>>>>>>>>    Define crBSTRType for 8
74426>>>>>>>>>
74426>>>>>>>>>Define CRHTMLPageStyle for Integer
74426>>>>>>>>>    Define crPlainPageStyle for 0
74426>>>>>>>>>    Define crToolbarPageStyle for 1
74426>>>>>>>>>    Define crFramePageStyle for 2
74426>>>>>>>>>    Define crToolbarAtTopPageStyle for 3
74426>>>>>>>>>    Define crToolbarAtBottomPageStyle for 4
74426>>>>>>>>>
74426>>>>>>>>>Define CRHTMLToolbarStyle for Integer
74426>>>>>>>>>    Define crToolbarRefreshButton for 1
74426>>>>>>>>>    Define crToolbarSearchBox for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRSearchDirection for Integer
74426>>>>>>>>>    Define crForward for 0
74426>>>>>>>>>    Define crBackward for 1
74426>>>>>>>>>
74426>>>>>>>>>Define CRPlaceHolderType for Integer
74426>>>>>>>>>    Define crDelayTotalPageCountCalc for 1
74426>>>>>>>>>    Define crAllowPlaceHolders for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRValueFormatType for Integer
74426>>>>>>>>>    Define crIncludeFieldValues for 1
74426>>>>>>>>>    Define crIncludeHiddenFields for 2
74426>>>>>>>>>    Define crAllowComplexFieldFormatting for 4
74426>>>>>>>>>
74426>>>>>>>>>Define CRExportFormatType for Integer
74426>>>>>>>>>    Define crEFTNoFormat for 0
74426>>>>>>>>>    Define crEFTCrystalReport for 1
74426>>>>>>>>>    Define crEFTDataInterchange for 2
74426>>>>>>>>>    Define crEFTRecordStyle for 3
74426>>>>>>>>>    Define crEFTRichText for 4
74426>>>>>>>>>    Define crEFTCommaSeparatedValues for 5
74426>>>>>>>>>    Define crEFTTabSeparatedValues for 6
74426>>>>>>>>>    Define crEFTCharSeparatedValues for 7
74426>>>>>>>>>    Define crEFTText for 8
74426>>>>>>>>>    Define crEFTTabSeparatedText for 9
74426>>>>>>>>>    Define crEFTPaginatedText for 10
74426>>>>>>>>>    Define crEFTLotus123WKS for 11
74426>>>>>>>>>    Define crEFTLotus123WK1 for 12
74426>>>>>>>>>    Define crEFTLotus123WK3 for 13
74426>>>>>>>>>    Define crEFTWordForWindows for 14
74426>>>>>>>>>    Define crEFTExcel21 for 18
74426>>>>>>>>>    Define crEFTExcel30 for 19
74426>>>>>>>>>    Define crEFTExcel40 for 20
74426>>>>>>>>>    Define crEFTExcel50 for 21
74426>>>>>>>>>    Define crEFTExcel50Tabular for 22
74426>>>>>>>>>    Define crEFTODBC for 23
74426>>>>>>>>>    Define crEFTHTML32Standard for 24
74426>>>>>>>>>    Define crEFTExplorer32Extend for 25
74426>>>>>>>>>    Define crEFTNetScape20 for 26
74426>>>>>>>>>    Define crEFTExcel70 for 27
74426>>>>>>>>>    Define crEFTExcel70Tabular for 28
74426>>>>>>>>>    Define crEFTExcel80 for 29
74426>>>>>>>>>    Define crEFTExcel80Tabular for 30
74426>>>>>>>>>    Define crEFTPortableDocFormat for 31
74426>>>>>>>>>    Define crEFTHTML40 for 32
74426>>>>>>>>>    Define crEFTCrystalReport70 for 33
74426>>>>>>>>>    Define crEFTReportDefinition for 34
74426>>>>>>>>>    Define crEFTExactRichText for 35
74426>>>>>>>>>    Define crEFTExcel97 for 36
74426>>>>>>>>>    Define crEFTXML for 37
74426>>>>>>>>>    Define crEFTExcelDataOnly for 38
74426>>>>>>>>>    Define crEFTEditableRichText for 39
74426>>>>>>>>>
74426>>>>>>>>>Define CRExportDestinationType for Integer
74426>>>>>>>>>    Define crEDTNoDestination for 0
74426>>>>>>>>>    Define crEDTDiskFile for 1
74426>>>>>>>>>    Define crEDTEMailMAPI for 2
74426>>>>>>>>>    Define crEDTEMailVIM for 3
74426>>>>>>>>>    Define crEDTMicrosoftExchange for 4
74426>>>>>>>>>    Define crEDTApplication for 5
74426>>>>>>>>>    Define crEDTLotusDomino for 6
74426>>>>>>>>>
74426>>>>>>>>>Define CRExchangeDestinationType for Integer
74426>>>>>>>>>    Define crExhangeFolderType for 0
74426>>>>>>>>>    Define crExchangePostDocMessage for 1011
74426>>>>>>>>>
74426>>>>>>>>>Define CRExcelExportPageAreaPair for Integer
74426>>>>>>>>>    Define crExportNoPageAreaPair for 0
74426>>>>>>>>>    Define crExportPageAreaPairOncePerReport for 1
74426>>>>>>>>>    Define crExportPageAreaPairForEachPage for 2
74426>>>>>>>>>
74426>>>>>>>>>Define CRPrintingProgress for Integer
74426>>>>>>>>>    Define crPrintingNotStarted for 1
74426>>>>>>>>>    Define crPrintingInProgress for 2
74426>>>>>>>>>    Define crPrintingCompleted for 3
74426>>>>>>>>>    Define crPrintingFailed for 4
74426>>>>>>>>>    Define crPrintingCancelled for 5
74426>>>>>>>>>    Define crPrintingHalted for 6
74426>>>>>>>>>
74426>>>>>>>>>Define CRRunningTotalCondition for Integer
74426>>>>>>>>>    Define crRTEvalNoCondition for 0
74426>>>>>>>>>    Define crRTEvalOnChangeOfField for 1
74426>>>>>>>>>    Define crRTEvalOnChangeOfGroup for 2
74426>>>>>>>>>    Define crRTEvalOnFormula for 3
74426>>>>>>>>>
74426>>>>>>>>>Define CRChangeObjectType for Integer
74426>>>>>>>>>
74426>>>>>>>>>Define CRChangeFontStyle for Integer
74426>>>>>>>>>
74426>>>>>>>>>Define CRWorkingEnvironment for Integer
74426>>>>>>>>>
74426>>>>>>>>>Define CRObjectMoveDirection for Integer
74426>>>>>>>>>
74426>>>>>>>>>Define CRGridObjectCursorHitType for Integer
74426>>>>>>>>>
74426>>>>>>>>>Define CROpenReportMethod for Integer
74426>>>>>>>>>    Define crOpenReportByDefault for 0
74426>>>>>>>>>    Define crOpenReportByTempCopy for 1
74426>>>>>>>>>
74426>>>>>>>>>Define CRSectionAreaFormatConditionFormulaType for Integer
74426>>>>>>>>>    Define crSectionAreaEnableSuppressConditionFormulaType for 0
74426>>>>>>>>>    Define crSectionAreaEnablePrintAtBottomOfPageConditionFormulaType for 1
74426>>>>>>>>>    Define crSectionAreaEnableNewPageAfterConditionFormulaType for 2
74426>>>>>>>>>    Define crSectionAreaEnableNewPageBeforeConditionFormulaType for 3
74426>>>>>>>>>    Define crSectionAreaEnableKeepTogetherConditionFormulaType for 4
74426>>>>>>>>>    Define crSectionAreaEnableSuppressIfBlankConditionFormulaType for 5
74426>>>>>>>>>    Define crSectionAreaEnableResetPageNumberAfterConditionFormulaType for 6
74426>>>>>>>>>    Define crSectionAreaEnableUnderlaySectionConditionFormulaType for 7
74426>>>>>>>>>    Define crSectionAreaBackgroundColorConditionFormulaType for 8
74426>>>>>>>>>    Define crSectionAreaShowAreaConditionFormulaType for 9
74426>>>>>>>>>    Define crSectionAreaEnableHideForDrillDownConditionFormulaType for 10
74426>>>>>>>>>    Define crSectionAreaCssClassConditionFormulaType for 11
74426>>>>>>>>>
74426>>>>>>>>>Define CRBooleanFieldFormatConditionFormulaType for Integer
74426>>>>>>>>>    Define crOutputFormatConditionFormulaType for 20
74426>>>>>>>>>
74426>>>>>>>>>Define CRBorderConditionFormulaType for Integer
74426>>>>>>>>>    Define crLeftLineStyleConditionFormulaType for 40
74426>>>>>>>>>    Define crRightLineStyleConditionFormulaType for 41
74426>>>>>>>>>    Define crTopLineStyleConditionFormulaType for 42
74426>>>>>>>>>    Define crBottomLineStyleConditionFormulaType for 43
74426>>>>>>>>>    Define crHasDropShadowConditionFormulaType for 44
74426>>>>>>>>>    Define crBackgroundColorConditionFormulaType for 45
74426>>>>>>>>>    Define crBorderColorConditionFormulaType for 46
74426>>>>>>>>>    Define crTightHorizontalConditionFormulaType for 47
74426>>>>>>>>>    Define crTightVerticalConditionFormulaType for 48
74426>>>>>>>>>
74426>>>>>>>>>Define CRObjectFormatConditionFormulaType for Integer
74426>>>>>>>>>    Define crEnableSuppressConditionFormulaType for 60
74426>>>>>>>>>    Define crEnableKeepTogetherConditionFormulaType for 61
74426>>>>>>>>>    Define crEnableCloseAtPageBreakConditionFormulaType for 62
74426>>>>>>>>>    Define crHorizontalAlignmentConditionFormulaType for 63
74426>>>>>>>>>    Define crEnableCanGrowConditionFormulaType for 64
74426>>>>>>>>>    Define crToolTipTextConditionFormulaType for 65
74426>>>>>>>>>    Define crRotationConditionFormulaType for 66
74426>>>>>>>>>    Define crHyperLinkConditionFormulaType for 67
74426>>>>>>>>>    Define crCssClassConditionFormulaType for 68
74426>>>>>>>>>    Define crDeltaXConditionFormulaType for 69
74426>>>>>>>>>    Define crDeltaWidthConditionFormulaType for 70
74426>>>>>>>>>
74426>>>>>>>>>Define CRCommonFieldFormatConditionFormulaType for Integer
74426>>>>>>>>>    Define crSuppressIfDuplicatedConditionFormulaType for 80
74426>>>>>>>>>    Define crUseSystemDefaultConditionFormulaType for 81
74426>>>>>>>>>
74426>>>>>>>>>Define CRNumericFieldFormatConditionFormulaType for Integer
74426>>>>>>>>>    Define crNDecimalPlacesConditionFormulaType for 100
74426>>>>>>>>>    Define crRoundingFormatConditionFormulaType for 101
74426>>>>>>>>>    Define crEnableUseLeadZeroConditionFormulaType for 102
74426>>>>>>>>>    Define crNegativeFormatConditionFormulaType for 103
74426>>>>>>>>>    Define crCurrencySymbolFormatConditionFormulaType for 104
74426>>>>>>>>>    Define crEnableSuppressIfZeroConditionFormulaType for 105
74426>>>>>>>>>    Define crThousandsSeparatorConditionFormulaType for 106
74426>>>>>>>>>    Define crThousandSymbolConditionFormulaType for 107
74426>>>>>>>>>    Define crDecimalSymbolConditionFormulaType for 108
74426>>>>>>>>>    Define crCurrencySymbolConditionFormulaType for 109
74426>>>>>>>>>    Define crHasOneSymbolPerPageConditionFormulaType for 110
74426>>>>>>>>>    Define crCurrencyPositionConditionFormulaType for 111
74426>>>>>>>>>    Define crDisplayReverseSignConditionFormulaType for 112
74426>>>>>>>>>    Define crZeroValueStringConditionFormulaType for 113
74426>>>>>>>>>    Define crAllowFieldClippingConditionFormulaType for 114
74426>>>>>>>>>
74426>>>>>>>>>Define CRDateFieldFormatConditionFormulaType for Integer
74426>>>>>>>>>    Define crYearFormatConditionFormulaType for 120
74426>>>>>>>>>    Define crMonthFormatConditionFormulaType for 121
74426>>>>>>>>>    Define crDayFormatConditionFormulaType for 122
74426>>>>>>>>>    Define crWindowsDefaultTypeConditionFormulaType for 123
74426>>>>>>>>>    Define crDateOrderConditionFormulaType for 124
74426>>>>>>>>>    Define crDayOfWeekTypeConditionFormulaType for 125
74426>>>>>>>>>    Define crDayOfWeekSeparatorConditionFormulaType for 126
74426>>>>>>>>>    Define crDayOfWeekPositionConditionFormulaType for 127
74426>>>>>>>>>    Define crDateFirstSeparatorConditionFormulaType for 128
74426>>>>>>>>>    Define crDateSecondSeparatorConditionFormulaType for 129
74426>>>>>>>>>    Define crEraTypeConditionFormulaType for 130
74426>>>>>>>>>    Define crCalendarTypeConditionFormulaType for 131
74426>>>>>>>>>    Define crDatePrefixSeparatorConditionFormulaType for 132
74426>>>>>>>>>    Define crDateSuffixSeparatorConditionFormulaType for 133
74426>>>>>>>>>    Define crDayOfWeekEnclosureConditionFormulaType for 134
74426>>>>>>>>>
74426>>>>>>>>>Define CRDateTimeFieldFormatConditionFormulaType for Integer
74426>>>>>>>>>    Define crDateTimeOrderConditionFormulaType for 140
74426>>>>>>>>>    Define crDateTimeSeparatorConditionFormulaType for 141
74426>>>>>>>>>
74426>>>>>>>>>Define CRTimeFieldFormatConditionFormulaType for Integer
74426>>>>>>>>>    Define crTimeBaseConditionFormulaType for 160
74426>>>>>>>>>    Define crAMPMFormatConditionFormulaType for 161
74426>>>>>>>>>    Define crHourFormatConditionFormulaType for 162
74426>>>>>>>>>    Define crMinuteFormatConditionFormulaType for 163
74426>>>>>>>>>    Define crSecondFormatConditionFormulaType for 164
74426>>>>>>>>>    Define crPMStringConditionFormulaType for 165
74426>>>>>>>>>    Define crAMStringConditionFormulaType for 166
74426>>>>>>>>>    Define crMinuteSecondSeparatorConditionFormulaType for 167
74426>>>>>>>>>    Define crHourMinuteSeparatorConditionFormulaType for 168
74426>>>>>>>>>
74426>>>>>>>>>Define CRFontColorConditionFormulaType for Integer
74426>>>>>>>>>    Define crColorConditionFormulaType for 180
74426>>>>>>>>>    Define crFontConditionFormulaType for 181
74426>>>>>>>>>    Define crFontStyleConditionFormulaType for 182
74426>>>>>>>>>    Define crFontSizeConditionFormulaType for 183
74426>>>>>>>>>    Define crFontStrikeOutConditionFormulaType for 184
74426>>>>>>>>>    Define crFontUnderLineConditionFormulaType for 185
74426>>>>>>>>>
74426>>>>>>>>>Define CRStringFieldConditionFormulaType for Integer
74426>>>>>>>>>    Define crTextInterpretationConditionFormulaType for 200
74426>>>>>>>>>
74426>>>>>>>>>Define CRSubreportConditionFormulaType for Integer
74426>>>>>>>>>    Define crCaptionConditionFormulaType for 220
74426>>>>>>>>>    Define crDrillDownTabTextConditionFormulaType for 221
74426>>>>>>>>>
74426>>>>>>>>>Define CRTableDifferences for Integer
74426>>>>>>>>>    Define crTDOK for 0
74426>>>>>>>>>    Define crTDDatabaseNotFound for 1
74426>>>>>>>>>    Define crTDServerNotFound for 2
74426>>>>>>>>>    Define crTDServerNotOpened for 4
74426>>>>>>>>>    Define crTDAliasChanged for 8
74426>>>>>>>>>    Define crTDIndexesChanged for 16
74426>>>>>>>>>    Define crTDDriverChanged for 32
74426>>>>>>>>>    Define crTDDictionaryChanged for 64
74426>>>>>>>>>    Define crTDFileTypeChanged for 128
74426>>>>>>>>>    Define crTDRecordSizeChanged for 256
74426>>>>>>>>>    Define crTDAccessChanged for 512
74426>>>>>>>>>    Define crTDParametersChanged for 1024
74426>>>>>>>>>    Define crTDLocationChanged for 2048
74426>>>>>>>>>    Define crTDDatabaseOtherChanges for 4096
74426>>>>>>>>>    Define crTDNumberFieldChanged for 65536
74426>>>>>>>>>    Define crTDFieldOtherChanges for 131072
74426>>>>>>>>>    Define crTDFieldNameChanged for 262144
74426>>>>>>>>>    Define crTDFieldDescChanged for 524288
74426>>>>>>>>>    Define crTDFieldTypeChanged for 1048576
74426>>>>>>>>>    Define crTDFieldSizeChanged for 2097152
74426>>>>>>>>>    Define crTDNativeFieldTypeChanged for 4194304
74426>>>>>>>>>    Define crTDNativeFieldOffsetChanged for 8388608
74426>>>>>>>>>    Define crTDNativeFieldSizeChanged for 16777216
74426>>>>>>>>>    Define crTDFieldDecimalPlacesChanged for 33554432
74426>>>>>>>>>
74426>>>>>>>>>Define CRFieldValueType for __MIDL___MIDL_itf_crvb60d_0280_0001
74426>>>>>>>>>
74426>>>>>>>>>// CLSID: {AF376800-6120-4E28-96DD-63FD2DC27B7A}
74426>>>>>>>>>Class cCrystalIReport is a Mixin
74427>>>>>>>>>
74427>>>>>>>>>    // Gets area collection.
74427>>>>>>>>>    Function ComAreas Returns Variant
74429>>>>>>>>>        Handle hDispatchDriver
74429>>>>>>>>>        Variant retVal
74429>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74430>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 166 OLE_VT_DISPATCH to retVal
74431>>>>>>>>>        Function_Return retVal
74432>>>>>>>>>    End_Function
74433>>>>>>>>>
74433>>>>>>>>>    // Gets section collection within the report.
74433>>>>>>>>>    Function ComSections Returns Variant
74435>>>>>>>>>        Handle hDispatchDriver
74435>>>>>>>>>        Variant retVal
74435>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74436>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 167 OLE_VT_DISPATCH to retVal
74437>>>>>>>>>        Function_Return retVal
74438>>>>>>>>>    End_Function
74439>>>>>>>>>
74439>>>>>>>>>    // Gets or sets print date.
74439>>>>>>>>>    Function ComPrintDate Returns DateTime
74441>>>>>>>>>        Handle hDispatchDriver
74441>>>>>>>>>        DateTime retVal
74441>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74442>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 170 OLE_VT_DATE to retVal
74443>>>>>>>>>        Function_Return retVal
74444>>>>>>>>>    End_Function
74445>>>>>>>>>
74445>>>>>>>>>    // Gets or sets print date.
74445>>>>>>>>>    Procedure Set ComPrintDate DateTime value
74447>>>>>>>>>        Handle hDispatchDriver
74447>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74448>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74449>>>>>>>>>        Set ComProperty of hDispatchDriver 170 OLE_VT_DATE to value
74450>>>>>>>>>    End_Procedure
74451>>>>>>>>>
74451>>>>>>>>>    // Gets or sets use index for speed report option.
74451>>>>>>>>>    Function ComUseIndexForSpeed Returns Boolean
74453>>>>>>>>>        Handle hDispatchDriver
74453>>>>>>>>>        Boolean retVal
74453>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74454>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 171 OLE_VT_BOOL to retVal
74455>>>>>>>>>        Function_Return retVal
74456>>>>>>>>>    End_Function
74457>>>>>>>>>
74457>>>>>>>>>    // Gets or sets use index for speed report option.
74457>>>>>>>>>    Procedure Set ComUseIndexForSpeed Boolean value
74459>>>>>>>>>        Handle hDispatchDriver
74459>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74460>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74461>>>>>>>>>        Set ComProperty of hDispatchDriver 171 OLE_VT_BOOL to value
74462>>>>>>>>>    End_Procedure
74463>>>>>>>>>
74463>>>>>>>>>    // Gets or sets convert date time to date report option.
74463>>>>>>>>>    Function ComConvertDateTimeType Returns CRConvertDateTimeType
74465>>>>>>>>>        Handle hDispatchDriver
74465>>>>>>>>>        CRConvertDateTimeType retVal
74465>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74466>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 174 OLE_VT_I4 to retVal
74467>>>>>>>>>        Function_Return retVal
74468>>>>>>>>>    End_Function
74469>>>>>>>>>
74469>>>>>>>>>    // Gets or sets convert date time to date report option.
74469>>>>>>>>>    Procedure Set ComConvertDateTimeType CRConvertDateTimeType value
74471>>>>>>>>>        Handle hDispatchDriver
74471>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74472>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74473>>>>>>>>>        Set ComProperty of hDispatchDriver 174 OLE_VT_I4 to value
74474>>>>>>>>>    End_Procedure
74475>>>>>>>>>
74475>>>>>>>>>    // Gets or sets convert Null field to default report option.
74475>>>>>>>>>    Function ComConvertNullFieldToDefault Returns Boolean
74477>>>>>>>>>        Handle hDispatchDriver
74477>>>>>>>>>        Boolean retVal
74477>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74478>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 175 OLE_VT_BOOL to retVal
74479>>>>>>>>>        Function_Return retVal
74480>>>>>>>>>    End_Function
74481>>>>>>>>>
74481>>>>>>>>>    // Gets or sets convert Null field to default report option.
74481>>>>>>>>>    Procedure Set ComConvertNullFieldToDefault Boolean value
74483>>>>>>>>>        Handle hDispatchDriver
74483>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74484>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74485>>>>>>>>>        Set ComProperty of hDispatchDriver 175 OLE_VT_BOOL to value
74486>>>>>>>>>    End_Procedure
74487>>>>>>>>>
74487>>>>>>>>>    // Gets or sets case insensitive  SQL data report option.
74487>>>>>>>>>    Function ComCaseInsensitiveSQLData Returns Boolean
74489>>>>>>>>>        Handle hDispatchDriver
74489>>>>>>>>>        Boolean retVal
74489>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74490>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 176 OLE_VT_BOOL to retVal
74491>>>>>>>>>        Function_Return retVal
74492>>>>>>>>>    End_Function
74493>>>>>>>>>
74493>>>>>>>>>    // Gets or sets case insensitive  SQL data report option.
74493>>>>>>>>>    Procedure Set ComCaseInsensitiveSQLData Boolean value
74495>>>>>>>>>        Handle hDispatchDriver
74495>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74496>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74497>>>>>>>>>        Set ComProperty of hDispatchDriver 176 OLE_VT_BOOL to value
74498>>>>>>>>>    End_Procedure
74499>>>>>>>>>
74499>>>>>>>>>    // Gets or sets verify on every print report option.
74499>>>>>>>>>    Function ComVerifyOnEveryPrint Returns Boolean
74501>>>>>>>>>        Handle hDispatchDriver
74501>>>>>>>>>        Boolean retVal
74501>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74502>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 177 OLE_VT_BOOL to retVal
74503>>>>>>>>>        Function_Return retVal
74504>>>>>>>>>    End_Function
74505>>>>>>>>>
74505>>>>>>>>>    // Gets or sets verify on every print report option.
74505>>>>>>>>>    Procedure Set ComVerifyOnEveryPrint Boolean value
74507>>>>>>>>>        Handle hDispatchDriver
74507>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74508>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74509>>>>>>>>>        Set ComProperty of hDispatchDriver 177 OLE_VT_BOOL to value
74510>>>>>>>>>    End_Procedure
74511>>>>>>>>>
74511>>>>>>>>>    // Gets database manager.
74511>>>>>>>>>    Function ComDatabase Returns Variant
74513>>>>>>>>>        Handle hDispatchDriver
74513>>>>>>>>>        Variant retVal
74513>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74514>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 178 OLE_VT_DISPATCH to retVal
74515>>>>>>>>>        Function_Return retVal
74516>>>>>>>>>    End_Function
74517>>>>>>>>>
74517>>>>>>>>>    // Gets current printer name.
74517>>>>>>>>>    Function ComPrinterName Returns String
74519>>>>>>>>>        Handle hDispatchDriver
74519>>>>>>>>>        String retVal
74519>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74520>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 179 OLE_VT_BSTR to retVal
74521>>>>>>>>>        Function_Return retVal
74522>>>>>>>>>    End_Function
74523>>>>>>>>>
74523>>>>>>>>>    // Gets driver name used by the current printer.
74523>>>>>>>>>    Function ComDriverName Returns String
74525>>>>>>>>>        Handle hDispatchDriver
74525>>>>>>>>>        String retVal
74525>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74526>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 180 OLE_VT_BSTR to retVal
74527>>>>>>>>>        Function_Return retVal
74528>>>>>>>>>    End_Function
74529>>>>>>>>>
74529>>>>>>>>>    // Gets port name used by the current printer.
74529>>>>>>>>>    Function ComPortName Returns String
74531>>>>>>>>>        Handle hDispatchDriver
74531>>>>>>>>>        String retVal
74531>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74532>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 181 OLE_VT_BSTR to retVal
74533>>>>>>>>>        Function_Return retVal
74534>>>>>>>>>    End_Function
74535>>>>>>>>>
74535>>>>>>>>>    // Gets or sets current printer paper orientation.
74535>>>>>>>>>    Function ComPaperOrientation Returns CRPaperOrientation
74537>>>>>>>>>        Handle hDispatchDriver
74537>>>>>>>>>        CRPaperOrientation retVal
74537>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74538>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 182 OLE_VT_I4 to retVal
74539>>>>>>>>>        Function_Return retVal
74540>>>>>>>>>    End_Function
74541>>>>>>>>>
74541>>>>>>>>>    // Gets or sets current printer paper orientation.
74541>>>>>>>>>    Procedure Set ComPaperOrientation CRPaperOrientation value
74543>>>>>>>>>        Handle hDispatchDriver
74543>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74544>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74545>>>>>>>>>        Set ComProperty of hDispatchDriver 182 OLE_VT_I4 to value
74546>>>>>>>>>    End_Procedure
74547>>>>>>>>>
74547>>>>>>>>>    // Gets or sets current printer paper size.
74547>>>>>>>>>    Function ComPaperSize Returns CRPaperSize
74549>>>>>>>>>        Handle hDispatchDriver
74549>>>>>>>>>        CRPaperSize retVal
74549>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74550>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 183 OLE_VT_I4 to retVal
74551>>>>>>>>>        Function_Return retVal
74552>>>>>>>>>    End_Function
74553>>>>>>>>>
74553>>>>>>>>>    // Gets or sets current printer paper size.
74553>>>>>>>>>    Procedure Set ComPaperSize CRPaperSize value
74555>>>>>>>>>        Handle hDispatchDriver
74555>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74556>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74557>>>>>>>>>        Set ComProperty of hDispatchDriver 183 OLE_VT_I4 to value
74558>>>>>>>>>    End_Procedure
74559>>>>>>>>>
74559>>>>>>>>>    // Prints the report to printer.
74559>>>>>>>>>    Procedure ComPrintOut Variant llpromptUser Variant llnumberOfCopy Variant llcollated Variant llstartPageN Variant llstopPageN
74561>>>>>>>>>        Handle hDispatchDriver
74561>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74562>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
74563>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpromptUser
74564>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llnumberOfCopy
74565>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llcollated
74566>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llstartPageN
74567>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llstopPageN
74568>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 185 OLE_VT_VOID
74569>>>>>>>>>    End_Procedure
74570>>>>>>>>>
74570>>>>>>>>>    // Selects a printer.
74570>>>>>>>>>    Procedure ComSelectPrinter String llpDriverName String llpPrinterName String llpPortName
74572>>>>>>>>>        Handle hDispatchDriver
74572>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74573>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
74574>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpDriverName
74575>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpPrinterName
74576>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpPortName
74577>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 186 OLE_VT_VOID
74578>>>>>>>>>    End_Procedure
74579>>>>>>>>>
74579>>>>>>>>>    // Gets formula field definition collection.
74579>>>>>>>>>    Function ComFormulaFields Returns Variant
74581>>>>>>>>>        Handle hDispatchDriver
74581>>>>>>>>>        Variant retVal
74581>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74582>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 187 OLE_VT_DISPATCH to retVal
74583>>>>>>>>>        Function_Return retVal
74584>>>>>>>>>    End_Function
74585>>>>>>>>>
74585>>>>>>>>>    // Gets parameter field definition collection.
74585>>>>>>>>>    Function ComParameterFields Returns Variant
74587>>>>>>>>>        Handle hDispatchDriver
74587>>>>>>>>>        Variant retVal
74587>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74588>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 189 OLE_VT_DISPATCH to retVal
74589>>>>>>>>>        Function_Return retVal
74590>>>>>>>>>    End_Function
74591>>>>>>>>>
74591>>>>>>>>>    // Gets group name field definition collection.
74591>>>>>>>>>    Function ComGroupNameFields Returns Variant
74593>>>>>>>>>        Handle hDispatchDriver
74593>>>>>>>>>        Variant retVal
74593>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74594>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 191 OLE_VT_DISPATCH to retVal
74595>>>>>>>>>        Function_Return retVal
74596>>>>>>>>>    End_Function
74597>>>>>>>>>
74597>>>>>>>>>    // Gets summary field definition collection.
74597>>>>>>>>>    Function ComSummaryFields Returns Variant
74599>>>>>>>>>        Handle hDispatchDriver
74599>>>>>>>>>        Variant retVal
74599>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74600>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 207 OLE_VT_DISPATCH to retVal
74601>>>>>>>>>        Function_Return retVal
74602>>>>>>>>>    End_Function
74603>>>>>>>>>
74603>>>>>>>>>    // Gets report kind.
74603>>>>>>>>>    Function ComKind Returns CRReportKind
74605>>>>>>>>>        Handle hDispatchDriver
74605>>>>>>>>>        CRReportKind retVal
74605>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74606>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
74607>>>>>>>>>        Function_Return retVal
74608>>>>>>>>>    End_Function
74609>>>>>>>>>
74609>>>>>>>>>    // Gets report parent. (NULL or Main Report)
74609>>>>>>>>>    Function ComParent Returns Variant
74611>>>>>>>>>        Handle hDispatchDriver
74611>>>>>>>>>        Variant retVal
74611>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74612>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
74613>>>>>>>>>        Function_Return retVal
74614>>>>>>>>>    End_Function
74615>>>>>>>>>
74615>>>>>>>>>    // Gets the number of groups in the report.
74615>>>>>>>>>    Function ComNumberOfGroup Returns Integer
74617>>>>>>>>>        Handle hDispatchDriver
74617>>>>>>>>>        Integer retVal
74617>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74618>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 211 OLE_VT_I4 to retVal
74619>>>>>>>>>        Function_Return retVal
74620>>>>>>>>>    End_Function
74621>>>>>>>>>
74621>>>>>>>>>    // Gets or sets page left margin (twips).
74621>>>>>>>>>    Function ComLeftMargin Returns Integer
74623>>>>>>>>>        Handle hDispatchDriver
74623>>>>>>>>>        Integer retVal
74623>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74624>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 215 OLE_VT_I4 to retVal
74625>>>>>>>>>        Function_Return retVal
74626>>>>>>>>>    End_Function
74627>>>>>>>>>
74627>>>>>>>>>    // Gets or sets page left margin (twips).
74627>>>>>>>>>    Procedure Set ComLeftMargin Integer value
74629>>>>>>>>>        Handle hDispatchDriver
74629>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74630>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74631>>>>>>>>>        Set ComProperty of hDispatchDriver 215 OLE_VT_I4 to value
74632>>>>>>>>>    End_Procedure
74633>>>>>>>>>
74633>>>>>>>>>    // Gets or sets page right margin (twips).
74633>>>>>>>>>    Function ComRightMargin Returns Integer
74635>>>>>>>>>        Handle hDispatchDriver
74635>>>>>>>>>        Integer retVal
74635>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74636>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 216 OLE_VT_I4 to retVal
74637>>>>>>>>>        Function_Return retVal
74638>>>>>>>>>    End_Function
74639>>>>>>>>>
74639>>>>>>>>>    // Gets or sets page right margin (twips).
74639>>>>>>>>>    Procedure Set ComRightMargin Integer value
74641>>>>>>>>>        Handle hDispatchDriver
74641>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74642>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74643>>>>>>>>>        Set ComProperty of hDispatchDriver 216 OLE_VT_I4 to value
74644>>>>>>>>>    End_Procedure
74645>>>>>>>>>
74645>>>>>>>>>    // Gets or sets page top margin (twips).
74645>>>>>>>>>    Function ComTopMargin Returns Integer
74647>>>>>>>>>        Handle hDispatchDriver
74647>>>>>>>>>        Integer retVal
74647>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74648>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 217 OLE_VT_I4 to retVal
74649>>>>>>>>>        Function_Return retVal
74650>>>>>>>>>    End_Function
74651>>>>>>>>>
74651>>>>>>>>>    // Gets or sets page top margin (twips).
74651>>>>>>>>>    Procedure Set ComTopMargin Integer value
74653>>>>>>>>>        Handle hDispatchDriver
74653>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74654>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74655>>>>>>>>>        Set ComProperty of hDispatchDriver 217 OLE_VT_I4 to value
74656>>>>>>>>>    End_Procedure
74657>>>>>>>>>
74657>>>>>>>>>    // Gets or sets page bottom margin (twips).
74657>>>>>>>>>    Function ComBottomMargin Returns Integer
74659>>>>>>>>>        Handle hDispatchDriver
74659>>>>>>>>>        Integer retVal
74659>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74660>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 218 OLE_VT_I4 to retVal
74661>>>>>>>>>        Function_Return retVal
74662>>>>>>>>>    End_Function
74663>>>>>>>>>
74663>>>>>>>>>    // Gets or sets page bottom margin (twips).
74663>>>>>>>>>    Procedure Set ComBottomMargin Integer value
74665>>>>>>>>>        Handle hDispatchDriver
74665>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74666>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74667>>>>>>>>>        Set ComProperty of hDispatchDriver 218 OLE_VT_I4 to value
74668>>>>>>>>>    End_Procedure
74669>>>>>>>>>
74669>>>>>>>>>    // Get pageEngine object.
74669>>>>>>>>>    Function ComPageEngine Returns Variant
74671>>>>>>>>>        Handle hDispatchDriver
74671>>>>>>>>>        Variant retVal
74671>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74672>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 243 OLE_VT_DISPATCH to retVal
74673>>>>>>>>>        Function_Return retVal
74674>>>>>>>>>    End_Function
74675>>>>>>>>>
74675>>>>>>>>>    // Exports the report to other formats.
74675>>>>>>>>>    Procedure ComExport Variant llpromptUser
74677>>>>>>>>>        Handle hDispatchDriver
74677>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74678>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74679>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpromptUser
74680>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 259 OLE_VT_VOID
74681>>>>>>>>>    End_Procedure
74682>>>>>>>>>
74682>>>>>>>>>    // Gets export options object.
74682>>>>>>>>>    Function ComExportOptions Returns Variant
74684>>>>>>>>>        Handle hDispatchDriver
74684>>>>>>>>>        Variant retVal
74684>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74685>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 260 OLE_VT_DISPATCH to retVal
74686>>>>>>>>>        Function_Return retVal
74687>>>>>>>>>    End_Function
74688>>>>>>>>>
74688>>>>>>>>>    // Gets application object)
74688>>>>>>>>>    Function ComApplication Returns Variant
74690>>>>>>>>>        Handle hDispatchDriver
74690>>>>>>>>>        Variant retVal
74690>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74691>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 289 OLE_VT_DISPATCH to retVal
74692>>>>>>>>>        Function_Return retVal
74693>>>>>>>>>    End_Function
74694>>>>>>>>>
74694>>>>>>>>>    // Enables or disables prompting for parameter field
74694>>>>>>>>>    Function ComEnableParameterPrompting Returns Boolean
74696>>>>>>>>>        Handle hDispatchDriver
74696>>>>>>>>>        Boolean retVal
74696>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74697>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 306 OLE_VT_BOOL to retVal
74698>>>>>>>>>        Function_Return retVal
74699>>>>>>>>>    End_Function
74700>>>>>>>>>
74700>>>>>>>>>    // Enables or disables prompting for parameter field
74700>>>>>>>>>    Procedure Set ComEnableParameterPrompting Boolean value
74702>>>>>>>>>        Handle hDispatchDriver
74702>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74703>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74704>>>>>>>>>        Set ComProperty of hDispatchDriver 306 OLE_VT_BOOL to value
74705>>>>>>>>>    End_Procedure
74706>>>>>>>>>
74706>>>>>>>>>    // Enables or disables progress dialog
74706>>>>>>>>>    Function ComDisplayProgressDialog Returns Boolean
74708>>>>>>>>>        Handle hDispatchDriver
74708>>>>>>>>>        Boolean retVal
74708>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74709>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 307 OLE_VT_BOOL to retVal
74710>>>>>>>>>        Function_Return retVal
74711>>>>>>>>>    End_Function
74712>>>>>>>>>
74712>>>>>>>>>    // Enables or disables progress dialog
74712>>>>>>>>>    Procedure Set ComDisplayProgressDialog Boolean value
74714>>>>>>>>>        Handle hDispatchDriver
74714>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74715>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74716>>>>>>>>>        Set ComProperty of hDispatchDriver 307 OLE_VT_BOOL to value
74717>>>>>>>>>    End_Procedure
74718>>>>>>>>>
74718>>>>>>>>>    // Gets or sets record selection formula.
74718>>>>>>>>>    Function ComRecordSelectionFormula Returns String
74720>>>>>>>>>        Handle hDispatchDriver
74720>>>>>>>>>        String retVal
74720>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74721>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 308 OLE_VT_BSTR to retVal
74722>>>>>>>>>        Function_Return retVal
74723>>>>>>>>>    End_Function
74724>>>>>>>>>
74724>>>>>>>>>    // Gets or sets record selection formula.
74724>>>>>>>>>    Procedure Set ComRecordSelectionFormula String value
74726>>>>>>>>>        Handle hDispatchDriver
74726>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74727>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74728>>>>>>>>>        Set ComProperty of hDispatchDriver 308 OLE_VT_BSTR to value
74729>>>>>>>>>    End_Procedure
74730>>>>>>>>>
74730>>>>>>>>>    // Gets or sets group selection formula.
74730>>>>>>>>>    Function ComGroupSelectionFormula Returns String
74732>>>>>>>>>        Handle hDispatchDriver
74732>>>>>>>>>        String retVal
74732>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74733>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 309 OLE_VT_BSTR to retVal
74734>>>>>>>>>        Function_Return retVal
74735>>>>>>>>>    End_Function
74736>>>>>>>>>
74736>>>>>>>>>    // Gets or sets group selection formula.
74736>>>>>>>>>    Procedure Set ComGroupSelectionFormula String value
74738>>>>>>>>>        Handle hDispatchDriver
74738>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74739>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74740>>>>>>>>>        Set ComProperty of hDispatchDriver 309 OLE_VT_BSTR to value
74741>>>>>>>>>    End_Procedure
74742>>>>>>>>>
74742>>>>>>>>>    // Gets reocord sort field collection.
74742>>>>>>>>>    Function ComRecordSortFields Returns Variant
74744>>>>>>>>>        Handle hDispatchDriver
74744>>>>>>>>>        Variant retVal
74744>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74745>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 310 OLE_VT_DISPATCH to retVal
74746>>>>>>>>>        Function_Return retVal
74747>>>>>>>>>    End_Function
74748>>>>>>>>>
74748>>>>>>>>>    // Cancels exporting/printing.
74748>>>>>>>>>    Procedure ComCancelPrinting
74750>>>>>>>>>        Handle hDispatchDriver
74750>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74751>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 323 OLE_VT_VOID
74752>>>>>>>>>    End_Procedure
74753>>>>>>>>>
74753>>>>>>>>>    // Checks whether the report has saved data in memory.
74753>>>>>>>>>    Function ComHasSavedData Returns Boolean
74755>>>>>>>>>        Handle hDispatchDriver
74755>>>>>>>>>        Boolean retVal
74755>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74756>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 324 OLE_VT_BOOL to retVal
74757>>>>>>>>>        Function_Return retVal
74758>>>>>>>>>    End_Function
74759>>>>>>>>>
74759>>>>>>>>>    // Discards report saved data.
74759>>>>>>>>>    Procedure ComDiscardSavedData
74761>>>>>>>>>        Handle hDispatchDriver
74761>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74762>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 325 OLE_VT_VOID
74763>>>>>>>>>    End_Procedure
74764>>>>>>>>>
74764>>>>>>>>>    // Gets printing status object.
74764>>>>>>>>>    Function ComPrintingStatus Returns Variant
74766>>>>>>>>>        Handle hDispatchDriver
74766>>>>>>>>>        Variant retVal
74766>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74767>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 326 OLE_VT_DISPATCH to retVal
74768>>>>>>>>>        Function_Return retVal
74769>>>>>>>>>    End_Function
74770>>>>>>>>>
74770>>>>>>>>>    // Gets or sets report title.
74770>>>>>>>>>    Function ComReportTitle Returns String
74772>>>>>>>>>        Handle hDispatchDriver
74772>>>>>>>>>        String retVal
74772>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74773>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 331 OLE_VT_BSTR to retVal
74774>>>>>>>>>        Function_Return retVal
74775>>>>>>>>>    End_Function
74776>>>>>>>>>
74776>>>>>>>>>    // Gets or sets report title.
74776>>>>>>>>>    Procedure Set ComReportTitle String value
74778>>>>>>>>>        Handle hDispatchDriver
74778>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74779>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74780>>>>>>>>>        Set ComProperty of hDispatchDriver 331 OLE_VT_BSTR to value
74781>>>>>>>>>    End_Procedure
74782>>>>>>>>>
74782>>>>>>>>>    // Gets or sets report subject.
74782>>>>>>>>>    Function ComReportSubject Returns String
74784>>>>>>>>>        Handle hDispatchDriver
74784>>>>>>>>>        String retVal
74784>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74785>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 332 OLE_VT_BSTR to retVal
74786>>>>>>>>>        Function_Return retVal
74787>>>>>>>>>    End_Function
74788>>>>>>>>>
74788>>>>>>>>>    // Gets or sets report subject.
74788>>>>>>>>>    Procedure Set ComReportSubject String value
74790>>>>>>>>>        Handle hDispatchDriver
74790>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74791>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74792>>>>>>>>>        Set ComProperty of hDispatchDriver 332 OLE_VT_BSTR to value
74793>>>>>>>>>    End_Procedure
74794>>>>>>>>>
74794>>>>>>>>>    // Gets or sets report author.
74794>>>>>>>>>    Function ComReportAuthor Returns String
74796>>>>>>>>>        Handle hDispatchDriver
74796>>>>>>>>>        String retVal
74796>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74797>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 333 OLE_VT_BSTR to retVal
74798>>>>>>>>>        Function_Return retVal
74799>>>>>>>>>    End_Function
74800>>>>>>>>>
74800>>>>>>>>>    // Gets or sets report author.
74800>>>>>>>>>    Procedure Set ComReportAuthor String value
74802>>>>>>>>>        Handle hDispatchDriver
74802>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74803>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74804>>>>>>>>>        Set ComProperty of hDispatchDriver 333 OLE_VT_BSTR to value
74805>>>>>>>>>    End_Procedure
74806>>>>>>>>>
74806>>>>>>>>>    // Gets or sets report comments.
74806>>>>>>>>>    Function ComReportComments Returns String
74808>>>>>>>>>        Handle hDispatchDriver
74808>>>>>>>>>        String retVal
74808>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74809>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 334 OLE_VT_BSTR to retVal
74810>>>>>>>>>        Function_Return retVal
74811>>>>>>>>>    End_Function
74812>>>>>>>>>
74812>>>>>>>>>    // Gets or sets report comments.
74812>>>>>>>>>    Procedure Set ComReportComments String value
74814>>>>>>>>>        Handle hDispatchDriver
74814>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74815>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74816>>>>>>>>>        Set ComProperty of hDispatchDriver 334 OLE_VT_BSTR to value
74817>>>>>>>>>    End_Procedure
74818>>>>>>>>>
74818>>>>>>>>>    // Gets or sets report template.
74818>>>>>>>>>    Function ComReportTemplate Returns String
74820>>>>>>>>>        Handle hDispatchDriver
74820>>>>>>>>>        String retVal
74820>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74821>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 335 OLE_VT_BSTR to retVal
74822>>>>>>>>>        Function_Return retVal
74823>>>>>>>>>    End_Function
74824>>>>>>>>>
74824>>>>>>>>>    // Gets or sets report template.
74824>>>>>>>>>    Procedure Set ComReportTemplate String value
74826>>>>>>>>>        Handle hDispatchDriver
74826>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74827>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74828>>>>>>>>>        Set ComProperty of hDispatchDriver 335 OLE_VT_BSTR to value
74829>>>>>>>>>    End_Procedure
74830>>>>>>>>>
74830>>>>>>>>>    // Gets or sets keywords in report.
74830>>>>>>>>>    Function ComKeywordsInReport Returns String
74832>>>>>>>>>        Handle hDispatchDriver
74832>>>>>>>>>        String retVal
74832>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74833>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 336 OLE_VT_BSTR to retVal
74834>>>>>>>>>        Function_Return retVal
74835>>>>>>>>>    End_Function
74836>>>>>>>>>
74836>>>>>>>>>    // Gets or sets keywords in report.
74836>>>>>>>>>    Procedure Set ComKeywordsInReport String value
74838>>>>>>>>>        Handle hDispatchDriver
74838>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74839>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74840>>>>>>>>>        Set ComProperty of hDispatchDriver 336 OLE_VT_BSTR to value
74841>>>>>>>>>    End_Procedure
74842>>>>>>>>>
74842>>>>>>>>>    // Gets or sets application name.
74842>>>>>>>>>    Function ComApplicationName Returns String
74844>>>>>>>>>        Handle hDispatchDriver
74844>>>>>>>>>        String retVal
74844>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74845>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 337 OLE_VT_BSTR to retVal
74846>>>>>>>>>        Function_Return retVal
74847>>>>>>>>>    End_Function
74848>>>>>>>>>
74848>>>>>>>>>    // Gets or sets application name.
74848>>>>>>>>>    Procedure Set ComApplicationName String value
74850>>>>>>>>>        Handle hDispatchDriver
74850>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74851>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74852>>>>>>>>>        Set ComProperty of hDispatchDriver 337 OLE_VT_BSTR to value
74853>>>>>>>>>    End_Procedure
74854>>>>>>>>>
74854>>>>>>>>>    // Forces to read in data.
74854>>>>>>>>>    Procedure ComReadRecords
74856>>>>>>>>>        Handle hDispatchDriver
74856>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74857>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 341 OLE_VT_VOID
74858>>>>>>>>>    End_Procedure
74859>>>>>>>>>
74859>>>>>>>>>    // Get Rowset.
74859>>>>>>>>>    Function ComGetNextRows Integer llstartRowN Integer ByRef llpRowN Returns Variant
74861>>>>>>>>>        Handle hDispatchDriver
74861>>>>>>>>>        Variant retVal
74861>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74862>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
74863>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llstartRowN
74864>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llpRowN
74865>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 292 OLE_VT_VARIANT to retVal
74866>>>>>>>>>        Function_Return retVal
74867>>>>>>>>>    End_Function
74868>>>>>>>>>
74868>>>>>>>>>    // Gets running total field collection.
74868>>>>>>>>>    Function ComRunningTotalFields Returns Variant
74870>>>>>>>>>        Handle hDispatchDriver
74870>>>>>>>>>        Variant retVal
74870>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74871>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 343 OLE_VT_DISPATCH to retVal
74872>>>>>>>>>        Function_Return retVal
74873>>>>>>>>>    End_Function
74874>>>>>>>>>
74874>>>>>>>>>    // Gets or sets performing grouping on server option.
74874>>>>>>>>>    Function ComPerformGroupingOnServer Returns Boolean
74876>>>>>>>>>        Handle hDispatchDriver
74876>>>>>>>>>        Boolean retVal
74876>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74877>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 346 OLE_VT_BOOL to retVal
74878>>>>>>>>>        Function_Return retVal
74879>>>>>>>>>    End_Function
74880>>>>>>>>>
74880>>>>>>>>>    // Gets or sets performing grouping on server option.
74880>>>>>>>>>    Procedure Set ComPerformGroupingOnServer Boolean value
74882>>>>>>>>>        Handle hDispatchDriver
74882>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74883>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74884>>>>>>>>>        Set ComProperty of hDispatchDriver 346 OLE_VT_BOOL to value
74885>>>>>>>>>    End_Procedure
74886>>>>>>>>>
74886>>>>>>>>>    // Checks whether the report can perform grouping on the server.
74886>>>>>>>>>    Function ComCanPerformGroupingOnServer Returns Boolean
74888>>>>>>>>>        Handle hDispatchDriver
74888>>>>>>>>>        Boolean retVal
74888>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74889>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 347 OLE_VT_BOOL to retVal
74890>>>>>>>>>        Function_Return retVal
74891>>>>>>>>>    End_Function
74892>>>>>>>>>
74892>>>>>>>>>    // Gets or sets SQL query string.
74892>>>>>>>>>    Function ComSQLQueryString Returns String
74894>>>>>>>>>        Handle hDispatchDriver
74894>>>>>>>>>        String retVal
74894>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74895>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 349 OLE_VT_BSTR to retVal
74896>>>>>>>>>        Function_Return retVal
74897>>>>>>>>>    End_Function
74898>>>>>>>>>
74898>>>>>>>>>    // Gets or sets SQL query string.
74898>>>>>>>>>    Procedure Set ComSQLQueryString String value
74900>>>>>>>>>        Handle hDispatchDriver
74900>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74901>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74902>>>>>>>>>        Set ComProperty of hDispatchDriver 349 OLE_VT_BSTR to value
74903>>>>>>>>>    End_Procedure
74904>>>>>>>>>
74904>>>>>>>>>    // Gets SQL expression field collection.
74904>>>>>>>>>    Function ComSQLExpressionFields Returns Variant
74906>>>>>>>>>        Handle hDispatchDriver
74906>>>>>>>>>        Variant retVal
74906>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74907>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 350 OLE_VT_DISPATCH to retVal
74908>>>>>>>>>        Function_Return retVal
74909>>>>>>>>>    End_Function
74910>>>>>>>>>
74910>>>>>>>>>    // Gets specified subreport.
74910>>>>>>>>>    Function ComOpenSubreport String llpSubreportName Returns Variant
74912>>>>>>>>>        Handle hDispatchDriver
74912>>>>>>>>>        Variant retVal
74912>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74913>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74914>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpSubreportName
74915>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 159 OLE_VT_DISPATCH to retVal
74916>>>>>>>>>        Function_Return retVal
74917>>>>>>>>>    End_Function
74918>>>>>>>>>
74918>>>>>>>>>    // Gets group sort field collection.
74918>>>>>>>>>    Function ComGroupSortFields Returns Variant
74920>>>>>>>>>        Handle hDispatchDriver
74920>>>>>>>>>        Variant retVal
74920>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74921>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 376 OLE_VT_DISPATCH to retVal
74922>>>>>>>>>        Function_Return retVal
74923>>>>>>>>>    End_Function
74924>>>>>>>>>
74924>>>>>>>>>    // Adds a group.
74924>>>>>>>>>    Procedure ComAddGroup Short llGroupNumber Variant llpConditionField CRGroupCondition llCondition CRSortDirection llSortDirection
74926>>>>>>>>>        Handle hDispatchDriver
74926>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74927>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
74928>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llGroupNumber
74929>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpConditionField
74930>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llCondition
74931>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llSortDirection
74932>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 380 OLE_VT_VOID
74933>>>>>>>>>    End_Procedure
74934>>>>>>>>>
74934>>>>>>>>>    // Sets dialog parent window.
74934>>>>>>>>>    Procedure ComSetDialogParentWindow Integer llhWnd
74936>>>>>>>>>        Handle hDispatchDriver
74936>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74937>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74938>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
74939>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 381 OLE_VT_VOID
74940>>>>>>>>>    End_Procedure
74941>>>>>>>>>
74941>>>>>>>>>    // Gets or sets perform queries asynchronously option.
74941>>>>>>>>>    Function ComEnablePerformQueriesAsynchronously Returns Boolean
74943>>>>>>>>>        Handle hDispatchDriver
74943>>>>>>>>>        Boolean retVal
74943>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74944>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 464 OLE_VT_BOOL to retVal
74945>>>>>>>>>        Function_Return retVal
74946>>>>>>>>>    End_Function
74947>>>>>>>>>
74947>>>>>>>>>    // Gets or sets perform queries asynchronously option.
74947>>>>>>>>>    Procedure Set ComEnablePerformQueriesAsynchronously Boolean value
74949>>>>>>>>>        Handle hDispatchDriver
74949>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74950>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74951>>>>>>>>>        Set ComProperty of hDispatchDriver 464 OLE_VT_BOOL to value
74952>>>>>>>>>    End_Procedure
74953>>>>>>>>>
74953>>>>>>>>>    // Gets or sets select distinct records option.
74953>>>>>>>>>    Function ComEnableSelectDistinctRecords Returns Boolean
74955>>>>>>>>>        Handle hDispatchDriver
74955>>>>>>>>>        Boolean retVal
74955>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74956>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 465 OLE_VT_BOOL to retVal
74957>>>>>>>>>        Function_Return retVal
74958>>>>>>>>>    End_Function
74959>>>>>>>>>
74959>>>>>>>>>    // Gets or sets select distinct records option.
74959>>>>>>>>>    Procedure Set ComEnableSelectDistinctRecords Boolean value
74961>>>>>>>>>        Handle hDispatchDriver
74961>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74962>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74963>>>>>>>>>        Set ComProperty of hDispatchDriver 465 OLE_VT_BOOL to value
74964>>>>>>>>>    End_Procedure
74965>>>>>>>>>
74965>>>>>>>>>    // Adds a report variable
74965>>>>>>>>>    Procedure ComAddReportVariable CRReportVariableValueType lltype String llpName Integer llarraySize Variant llreserved
74967>>>>>>>>>        Handle hDispatchDriver
74967>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74968>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
74969>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lltype
74970>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpName
74971>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llarraySize
74972>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llreserved
74973>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 471 OLE_VT_VOID
74974>>>>>>>>>    End_Procedure
74975>>>>>>>>>
74975>>>>>>>>>    // Gets a report variable
74975>>>>>>>>>    Function ComGetReportVariableValue String llpName Returns Variant
74977>>>>>>>>>        Handle hDispatchDriver
74977>>>>>>>>>        Variant retVal
74977>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74978>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
74979>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpName
74980>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 472 OLE_VT_VARIANT to retVal
74981>>>>>>>>>        Function_Return retVal
74982>>>>>>>>>    End_Function
74983>>>>>>>>>
74983>>>>>>>>>    // Sets a report variable value
74983>>>>>>>>>    Procedure ComSetReportVariableValue String llpName Variant llvar
74985>>>>>>>>>        Handle hDispatchDriver
74985>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74986>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
74987>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpName
74988>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llvar
74989>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 473 OLE_VT_VOID
74990>>>>>>>>>    End_Procedure
74991>>>>>>>>>
74991>>>>>>>>>    // Gets or sets a report format style.
74991>>>>>>>>>    Function ComReportFormatStyle Returns CRReportFormatStyle
74993>>>>>>>>>        Handle hDispatchDriver
74993>>>>>>>>>        CRReportFormatStyle retVal
74993>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
74994>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 476 OLE_VT_I4 to retVal
74995>>>>>>>>>        Function_Return retVal
74996>>>>>>>>>    End_Function
74997>>>>>>>>>
74997>>>>>>>>>    // Gets or sets a report format style.
74997>>>>>>>>>    Procedure Set ComReportFormatStyle CRReportFormatStyle value
74999>>>>>>>>>        Handle hDispatchDriver
74999>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75000>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75001>>>>>>>>>        Set ComProperty of hDispatchDriver 476 OLE_VT_I4 to value
75002>>>>>>>>>    End_Procedure
75003>>>>>>>>>
75003>>>>>>>>>    // Delete a group
75003>>>>>>>>>    Procedure ComDeleteGroup Short llGroupNumber
75005>>>>>>>>>        Handle hDispatchDriver
75005>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75006>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75007>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llGroupNumber
75008>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 550 OLE_VT_VOID
75009>>>>>>>>>    End_Procedure
75010>>>>>>>>>
75010>>>>>>>>>    // Gets or sets enable AsyncQuery.
75010>>>>>>>>>    Function ComEnableAsyncQuery Returns Boolean
75012>>>>>>>>>        Handle hDispatchDriver
75012>>>>>>>>>        Boolean retVal
75012>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75013>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 551 OLE_VT_BOOL to retVal
75014>>>>>>>>>        Function_Return retVal
75015>>>>>>>>>    End_Function
75016>>>>>>>>>
75016>>>>>>>>>    // Gets or sets enable AsyncQuery.
75016>>>>>>>>>    Procedure Set ComEnableAsyncQuery Boolean value
75018>>>>>>>>>        Handle hDispatchDriver
75018>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75019>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75020>>>>>>>>>        Set ComProperty of hDispatchDriver 551 OLE_VT_BOOL to value
75021>>>>>>>>>    End_Procedure
75022>>>>>>>>>
75022>>>>>>>>>    // Gets or sets Enable Generating Data For Hidden Object.
75022>>>>>>>>>    Function ComEnableGeneratingDataForHiddenObject Returns Boolean
75024>>>>>>>>>        Handle hDispatchDriver
75024>>>>>>>>>        Boolean retVal
75024>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75025>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 552 OLE_VT_BOOL to retVal
75026>>>>>>>>>        Function_Return retVal
75027>>>>>>>>>    End_Function
75028>>>>>>>>>
75028>>>>>>>>>    // Gets or sets Enable Generating Data For Hidden Object.
75028>>>>>>>>>    Procedure Set ComEnableGeneratingDataForHiddenObject Boolean value
75030>>>>>>>>>        Handle hDispatchDriver
75030>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75031>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75032>>>>>>>>>        Set ComProperty of hDispatchDriver 552 OLE_VT_BOOL to value
75033>>>>>>>>>    End_Procedure
75034>>>>>>>>>
75034>>>>>>>>>    // Gets or Sets the current printer duplex option.
75034>>>>>>>>>    Procedure Set ComPrinterDuplex CRPrinterDuplexType value
75036>>>>>>>>>        Handle hDispatchDriver
75036>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75037>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75038>>>>>>>>>        Set ComProperty of hDispatchDriver 477 OLE_VT_I4 to value
75039>>>>>>>>>    End_Procedure
75040>>>>>>>>>
75040>>>>>>>>>    // Gets or Sets the current printer duplex option.
75040>>>>>>>>>    Function ComPrinterDuplex Returns CRPrinterDuplexType
75042>>>>>>>>>        Handle hDispatchDriver
75042>>>>>>>>>        CRPrinterDuplexType retVal
75042>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75043>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 477 OLE_VT_I4 to retVal
75044>>>>>>>>>        Function_Return retVal
75045>>>>>>>>>    End_Function
75046>>>>>>>>>
75046>>>>>>>>>    // Gets or Sets the current printer paper source.
75046>>>>>>>>>    Procedure Set ComPaperSource CRPaperSource value
75048>>>>>>>>>        Handle hDispatchDriver
75048>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75049>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75050>>>>>>>>>        Set ComProperty of hDispatchDriver 478 OLE_VT_I4 to value
75051>>>>>>>>>    End_Procedure
75052>>>>>>>>>
75052>>>>>>>>>    // Gets or Sets the current printer paper source.
75052>>>>>>>>>    Function ComPaperSource Returns CRPaperSource
75054>>>>>>>>>        Handle hDispatchDriver
75054>>>>>>>>>        CRPaperSource retVal
75054>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75055>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 478 OLE_VT_I4 to retVal
75056>>>>>>>>>        Function_Return retVal
75057>>>>>>>>>    End_Function
75058>>>>>>>>>
75058>>>>>>>>>    // Gets or sets save preview picture with report option.
75058>>>>>>>>>    Function ComSavePreviewPicture Returns Boolean
75060>>>>>>>>>        Handle hDispatchDriver
75060>>>>>>>>>        Boolean retVal
75060>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75061>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 480 OLE_VT_BOOL to retVal
75062>>>>>>>>>        Function_Return retVal
75063>>>>>>>>>    End_Function
75064>>>>>>>>>
75064>>>>>>>>>    // Gets or sets save preview picture with report option.
75064>>>>>>>>>    Procedure Set ComSavePreviewPicture Boolean value
75066>>>>>>>>>        Handle hDispatchDriver
75066>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75067>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75068>>>>>>>>>        Set ComProperty of hDispatchDriver 480 OLE_VT_BOOL to value
75069>>>>>>>>>    End_Procedure
75070>>>>>>>>>
75070>>>>>>>>>    // Set up current printer.
75070>>>>>>>>>    Procedure ComPrinterSetup Integer llhWnd
75072>>>>>>>>>        Handle hDispatchDriver
75072>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75073>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75074>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
75075>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 481 OLE_VT_VOID
75076>>>>>>>>>    End_Procedure
75077>>>>>>>>>
75077>>>>>>>>>    // Automatically bind unbound fields to database fields.
75077>>>>>>>>>    Procedure ComAutoSetUnboundFieldSource CRBindingMatchType llmatchType Variant llbindSubReports
75079>>>>>>>>>        Handle hDispatchDriver
75079>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75080>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
75081>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llmatchType
75082>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llbindSubReports
75083>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 482 OLE_VT_VOID
75084>>>>>>>>>    End_Procedure
75085>>>>>>>>>
75085>>>>>>>>>    // Saves the report to another file.
75085>>>>>>>>>    Procedure ComSaveAs String llpFilePath CRReportFileFormat llfileFormat
75087>>>>>>>>>        Handle hDispatchDriver
75087>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75088>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
75089>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpFilePath
75090>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llfileFormat
75091>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 483 OLE_VT_VOID
75092>>>>>>>>>    End_Procedure
75093>>>>>>>>>
75093>>>>>>>>>    // Gets or Sets field mapping type.
75093>>>>>>>>>    Procedure Set ComFieldMappingType CRFieldMappingType value
75095>>>>>>>>>        Handle hDispatchDriver
75095>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75096>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75097>>>>>>>>>        Set ComProperty of hDispatchDriver 485 OLE_VT_I4 to value
75098>>>>>>>>>    End_Procedure
75099>>>>>>>>>
75099>>>>>>>>>    // Gets or Sets field mapping type.
75099>>>>>>>>>    Function ComFieldMappingType Returns CRFieldMappingType
75101>>>>>>>>>        Handle hDispatchDriver
75101>>>>>>>>>        CRFieldMappingType retVal
75101>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75102>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 485 OLE_VT_I4 to retVal
75103>>>>>>>>>        Function_Return retVal
75104>>>>>>>>>    End_Function
75105>>>>>>>>>
75105>>>>>>>>>    // Gets or sets report formula syntax.
75105>>>>>>>>>    Function ComFormulaSyntax Returns CRFormulaSyntax
75107>>>>>>>>>        Handle hDispatchDriver
75107>>>>>>>>>        CRFormulaSyntax retVal
75107>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75108>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 533 OLE_VT_I4 to retVal
75109>>>>>>>>>        Function_Return retVal
75110>>>>>>>>>    End_Function
75111>>>>>>>>>
75111>>>>>>>>>    // Gets or sets report formula syntax.
75111>>>>>>>>>    Procedure Set ComFormulaSyntax CRFormulaSyntax value
75113>>>>>>>>>        Handle hDispatchDriver
75113>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75114>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75115>>>>>>>>>        Set ComProperty of hDispatchDriver 533 OLE_VT_I4 to value
75116>>>>>>>>>    End_Procedure
75117>>>>>>>>>
75117>>>>>>>>>    // Gets formula syntax of last formula text returned.
75117>>>>>>>>>    Function ComLastGetFormulaSyntax Returns CRFormulaSyntax
75119>>>>>>>>>        Handle hDispatchDriver
75119>>>>>>>>>        CRFormulaSyntax retVal
75119>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75120>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 534 OLE_VT_I4 to retVal
75121>>>>>>>>>        Function_Return retVal
75122>>>>>>>>>    End_Function
75123>>>>>>>>>
75123>>>>>>>>>    // Gets whether the user needs to reget pages for display because of the changes in the report.
75123>>>>>>>>>    Function ComNeedUpdatePages Returns Boolean
75125>>>>>>>>>        Handle hDispatchDriver
75125>>>>>>>>>        Boolean retVal
75125>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75126>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 548 OLE_VT_BOOL to retVal
75127>>>>>>>>>        Function_Return retVal
75128>>>>>>>>>    End_Function
75129>>>>>>>>>
75129>>>>>>>>>    // Gets report alert.
75129>>>>>>>>>    Function ComReportAlerts Returns Variant
75131>>>>>>>>>        Handle hDispatchDriver
75131>>>>>>>>>        Variant retVal
75131>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75132>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 742 OLE_VT_DISPATCH to retVal
75133>>>>>>>>>        Function_Return retVal
75134>>>>>>>>>    End_Function
75135>>>>>>>>>
75135>>>>>>>>>    // sets customer printer paper size.
75135>>>>>>>>>    Procedure ComSetUserPaperSize Short lllength Short llWidth
75137>>>>>>>>>        Handle hDispatchDriver
75137>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75138>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
75139>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 lllength
75140>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llWidth
75141>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 778 OLE_VT_VOID
75142>>>>>>>>>    End_Procedure
75143>>>>>>>>>
75143>>>>>>>>>    // Prints the report to printer or file.
75143>>>>>>>>>    Procedure ComPrintOutEx Variant llpromptUser Variant llnumberOfCopy Variant llcollated Variant llstartPageN Variant llstopPageN String llprintFileName
75145>>>>>>>>>        Handle hDispatchDriver
75145>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75146>>>>>>>>>        Send PrepareParams to hDispatchDriver 6
75147>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpromptUser
75148>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llnumberOfCopy
75149>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llcollated
75150>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llstartPageN
75151>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llstopPageN
75152>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llprintFileName
75153>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 779 OLE_VT_VOID
75154>>>>>>>>>    End_Procedure
75155>>>>>>>>>
75155>>>>>>>>>    // Set up current printer.
75155>>>>>>>>>    Function ComPrinterSetupEx Integer llhWnd Returns Integer
75157>>>>>>>>>        Handle hDispatchDriver
75157>>>>>>>>>        Integer retVal
75157>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75158>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75159>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llhWnd
75160>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 791 OLE_VT_I4 to retVal
75161>>>>>>>>>        Function_Return retVal
75162>>>>>>>>>    End_Function
75163>>>>>>>>>End_Class
75164>>>>>>>>>
75164>>>>>>>>>// CLSID: {AF376802-6120-4E28-96DD-63FD2DC27B7A}
75164>>>>>>>>>Class cCrystalIReportEvent is a Mixin
75165>>>>>>>>>
75165>>>>>>>>>    // Fires this event when there is no data
75165>>>>>>>>>    Procedure OnComNoData Boolean ByRef llpCancel
75167>>>>>>>>>    End_Procedure
75168>>>>>>>>>
75168>>>>>>>>>    // Fires this event before formatting a page
75168>>>>>>>>>    Procedure OnComBeforeFormatPage Integer llPageNumber
75170>>>>>>>>>    End_Procedure
75171>>>>>>>>>
75171>>>>>>>>>    // Fires this event after formatting a page
75171>>>>>>>>>    Procedure OnComAfterFormatPage Integer llPageNumber
75173>>>>>>>>>    End_Procedure
75174>>>>>>>>>
75174>>>>>>>>>    // Fires this event if database is changed while verifing database
75174>>>>>>>>>    Procedure OnComFieldMapping Variant llreportFieldArray Variant lldatabaseFieldArray Boolean ByRef lluseDefault
75176>>>>>>>>>    End_Procedure
75177>>>>>>>>>
75177>>>>>>>>>    Procedure RegisterComEvents
75179>>>>>>>>>        Send RegisterComEvent 1 msg_OnComNoData
75180>>>>>>>>>        Send RegisterComEvent 2 msg_OnComBeforeFormatPage
75181>>>>>>>>>        Send RegisterComEvent 3 msg_OnComAfterFormatPage
75182>>>>>>>>>        Send RegisterComEvent 484 msg_OnComFieldMapping
75183>>>>>>>>>    End_Procedure
75184>>>>>>>>>End_Class
75185>>>>>>>>>
75185>>>>>>>>>// Moved to cCrystal.com
75185>>>>>>>>>// CoClass
75185>>>>>>>>>// ProgID: CrystalDesignRunTime.Report.11
75185>>>>>>>>>// CLSID: {B6174AF7-30D5-4ED1-B0B4-959B153D3E54}
75185>>>>>>>>>//Class cCrystalReport is a cComAutomationObject
75185>>>>>>>>>//    Import_Class_Protocol cCrystalIReport
75185>>>>>>>>>//    Import_Class_Protocol cCrystalIReportEvent
75185>>>>>>>>>
75185>>>>>>>>>//    Procedure Construct_Object
75185>>>>>>>>>//        Forward Send Construct_Object
75185>>>>>>>>>//        Set psProgID to "CrystalDesignRunTime.Report"
75185>>>>>>>>>//        Set psEventId to "{AF376802-6120-4E28-96DD-63FD2DC27B7A}"
75185>>>>>>>>>//        Set peAutoCreate to acNoAutoCreate
75185>>>>>>>>>//    End_Procedure
75185>>>>>>>>>//End_Class
75185>>>>>>>>>
75185>>>>>>>>>// CLSID: {AF376803-6120-4E28-96DD-63FD2DC27B7A}
75185>>>>>>>>>Class cCrystalIAreas is a Mixin
75186>>>>>>>>>
75186>>>>>>>>>    Function Com_NewEnum Returns Variant
75188>>>>>>>>>        Handle hDispatchDriver
75188>>>>>>>>>        Variant retVal
75188>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75189>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
75190>>>>>>>>>        Function_Return retVal
75191>>>>>>>>>    End_Function
75192>>>>>>>>>
75192>>>>>>>>>    // Gets collection item.
75192>>>>>>>>>    Function ComItem Variant llindex Returns Variant
75194>>>>>>>>>        Handle hDispatchDriver
75194>>>>>>>>>        Variant retVal
75194>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75195>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75196>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llindex
75197>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
75198>>>>>>>>>        Function_Return retVal
75199>>>>>>>>>    End_Function
75200>>>>>>>>>
75200>>>>>>>>>    // Gets collection count.
75200>>>>>>>>>    Function ComCount Returns Integer
75202>>>>>>>>>        Handle hDispatchDriver
75202>>>>>>>>>        Integer retVal
75202>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75203>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
75204>>>>>>>>>        Function_Return retVal
75205>>>>>>>>>    End_Function
75206>>>>>>>>>
75206>>>>>>>>>    // Gets areas parent.(report)
75206>>>>>>>>>    Function ComParent Returns Variant
75208>>>>>>>>>        Handle hDispatchDriver
75208>>>>>>>>>        Variant retVal
75208>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75209>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
75210>>>>>>>>>        Function_Return retVal
75211>>>>>>>>>    End_Function
75212>>>>>>>>>End_Class
75213>>>>>>>>>
75213>>>>>>>>>// CoClass
75213>>>>>>>>>// CLSID: {043B51FA-EEDD-4128-B9B1-649AEB90259C}
75213>>>>>>>>>Class cCrystalAreas is a cComAutomationObject
75214>>>>>>>>>    Import_Class_Protocol cCrystalIAreas
75215>>>>>>>>>
75215>>>>>>>>>    Procedure Construct_Object
75217>>>>>>>>>        Forward Send Construct_Object
75219>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
75220>>>>>>>>>    End_Procedure
75221>>>>>>>>>End_Class
75222>>>>>>>>>
75222>>>>>>>>>// CLSID: {AF376804-6120-4E28-96DD-63FD2DC27B7A}
75222>>>>>>>>>Class cCrystalISections is a Mixin
75223>>>>>>>>>
75223>>>>>>>>>    Function Com_NewEnum Returns Variant
75225>>>>>>>>>        Handle hDispatchDriver
75225>>>>>>>>>        Variant retVal
75225>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75226>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
75227>>>>>>>>>        Function_Return retVal
75228>>>>>>>>>    End_Function
75229>>>>>>>>>
75229>>>>>>>>>    // Gets collection item.
75229>>>>>>>>>    Function ComItem Variant llindex Returns Variant
75231>>>>>>>>>        Handle hDispatchDriver
75231>>>>>>>>>        Variant retVal
75231>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75232>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75233>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llindex
75234>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
75235>>>>>>>>>        Function_Return retVal
75236>>>>>>>>>    End_Function
75237>>>>>>>>>
75237>>>>>>>>>    // Gets collection count.
75237>>>>>>>>>    Function ComCount Returns Integer
75239>>>>>>>>>        Handle hDispatchDriver
75239>>>>>>>>>        Integer retVal
75239>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75240>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
75241>>>>>>>>>        Function_Return retVal
75242>>>>>>>>>    End_Function
75243>>>>>>>>>
75243>>>>>>>>>    // Gets section collection parent (report or area).
75243>>>>>>>>>    Function ComParent Returns Variant
75245>>>>>>>>>        Handle hDispatchDriver
75245>>>>>>>>>        Variant retVal
75245>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75246>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
75247>>>>>>>>>        Function_Return retVal
75248>>>>>>>>>    End_Function
75249>>>>>>>>>
75249>>>>>>>>>    // Adds a section.
75249>>>>>>>>>    Function ComAdd Variant llindex Returns Variant
75251>>>>>>>>>        Handle hDispatchDriver
75251>>>>>>>>>        Variant retVal
75251>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75252>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75253>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llindex
75254>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 230 OLE_VT_DISPATCH to retVal
75255>>>>>>>>>        Function_Return retVal
75256>>>>>>>>>    End_Function
75257>>>>>>>>>
75257>>>>>>>>>    // Delete collection item.
75257>>>>>>>>>    Procedure ComDelete Variant llindex
75259>>>>>>>>>        Handle hDispatchDriver
75259>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75260>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75261>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llindex
75262>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
75263>>>>>>>>>    End_Procedure
75264>>>>>>>>>End_Class
75265>>>>>>>>>
75265>>>>>>>>>// CoClass
75265>>>>>>>>>// CLSID: {BEF9C3EE-0BDC-4016-9CB3-87512CC6B89F}
75265>>>>>>>>>Class cCrystalSections is a cComAutomationObject
75266>>>>>>>>>    Import_Class_Protocol cCrystalISections
75267>>>>>>>>>
75267>>>>>>>>>    Procedure Construct_Object
75269>>>>>>>>>        Forward Send Construct_Object
75271>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
75272>>>>>>>>>    End_Procedure
75273>>>>>>>>>End_Class
75274>>>>>>>>>
75274>>>>>>>>>// CLSID: {AF376805-6120-4E28-96DD-63FD2DC27B7A}
75274>>>>>>>>>Class cCrystalIArea is a Mixin
75275>>>>>>>>>
75275>>>>>>>>>    // Gets or sets area name.
75275>>>>>>>>>    Function ComName Returns String
75277>>>>>>>>>        Handle hDispatchDriver
75277>>>>>>>>>        String retVal
75277>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75278>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
75279>>>>>>>>>        Function_Return retVal
75280>>>>>>>>>    End_Function
75281>>>>>>>>>
75281>>>>>>>>>    // Gets or sets area name.
75281>>>>>>>>>    Procedure Set ComName String value
75283>>>>>>>>>        Handle hDispatchDriver
75283>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75284>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75285>>>>>>>>>        Set ComProperty of hDispatchDriver -800 OLE_VT_BSTR to value
75286>>>>>>>>>    End_Procedure
75287>>>>>>>>>
75287>>>>>>>>>    // Gets area kind.
75287>>>>>>>>>    Function ComKind Returns CRAreaKind
75289>>>>>>>>>        Handle hDispatchDriver
75289>>>>>>>>>        CRAreaKind retVal
75289>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75290>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
75291>>>>>>>>>        Function_Return retVal
75292>>>>>>>>>    End_Function
75293>>>>>>>>>
75293>>>>>>>>>    // Gets section collection within the area.
75293>>>>>>>>>    Function ComSections Returns Variant
75295>>>>>>>>>        Handle hDispatchDriver
75295>>>>>>>>>        Variant retVal
75295>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75296>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 167 OLE_VT_DISPATCH to retVal
75297>>>>>>>>>        Function_Return retVal
75298>>>>>>>>>    End_Function
75299>>>>>>>>>
75299>>>>>>>>>    // Gets parent object(Report).
75299>>>>>>>>>    Function ComParent Returns Variant
75301>>>>>>>>>        Handle hDispatchDriver
75301>>>>>>>>>        Variant retVal
75301>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75302>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
75303>>>>>>>>>        Function_Return retVal
75304>>>>>>>>>    End_Function
75305>>>>>>>>>
75305>>>>>>>>>    // Gets or sets area visibility.
75305>>>>>>>>>    Function ComSuppress Returns Boolean
75307>>>>>>>>>        Handle hDispatchDriver
75307>>>>>>>>>        Boolean retVal
75307>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75308>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 114 OLE_VT_BOOL to retVal
75309>>>>>>>>>        Function_Return retVal
75310>>>>>>>>>    End_Function
75311>>>>>>>>>
75311>>>>>>>>>    // Gets or sets area visibility.
75311>>>>>>>>>    Procedure Set ComSuppress Boolean value
75313>>>>>>>>>        Handle hDispatchDriver
75313>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75314>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75315>>>>>>>>>        Set ComProperty of hDispatchDriver 114 OLE_VT_BOOL to value
75316>>>>>>>>>    End_Procedure
75317>>>>>>>>>
75317>>>>>>>>>    // Gets or sets hide for drill down option.
75317>>>>>>>>>    Function ComHideForDrillDown Returns Boolean
75319>>>>>>>>>        Handle hDispatchDriver
75319>>>>>>>>>        Boolean retVal
75319>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75320>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 219 OLE_VT_BOOL to retVal
75321>>>>>>>>>        Function_Return retVal
75322>>>>>>>>>    End_Function
75323>>>>>>>>>
75323>>>>>>>>>    // Gets or sets hide for drill down option.
75323>>>>>>>>>    Procedure Set ComHideForDrillDown Boolean value
75325>>>>>>>>>        Handle hDispatchDriver
75325>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75326>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75327>>>>>>>>>        Set ComProperty of hDispatchDriver 219 OLE_VT_BOOL to value
75328>>>>>>>>>    End_Procedure
75329>>>>>>>>>
75329>>>>>>>>>    // Gets group number for this area if it is a group area.
75329>>>>>>>>>    Function ComGroupNumber Returns Short
75331>>>>>>>>>        Handle hDispatchDriver
75331>>>>>>>>>        Short retVal
75331>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75332>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 220 OLE_VT_I2 to retVal
75333>>>>>>>>>        Function_Return retVal
75334>>>>>>>>>    End_Function
75335>>>>>>>>>
75335>>>>>>>>>    // Gets or sets number of copy instance to print.
75335>>>>>>>>>    Function ComCopiesToPrint Returns Short
75337>>>>>>>>>        Handle hDispatchDriver
75337>>>>>>>>>        Short retVal
75337>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75338>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 221 OLE_VT_I2 to retVal
75339>>>>>>>>>        Function_Return retVal
75340>>>>>>>>>    End_Function
75341>>>>>>>>>
75341>>>>>>>>>    // Gets or sets number of copy instance to print.
75341>>>>>>>>>    Procedure Set ComCopiesToPrint Short value
75343>>>>>>>>>        Handle hDispatchDriver
75343>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75344>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75345>>>>>>>>>        Set ComProperty of hDispatchDriver 221 OLE_VT_I2 to value
75346>>>>>>>>>    End_Procedure
75347>>>>>>>>>
75347>>>>>>>>>    // Gets or sets keeping area together option.
75347>>>>>>>>>    Function ComKeepTogether Returns Boolean
75349>>>>>>>>>        Handle hDispatchDriver
75349>>>>>>>>>        Boolean retVal
75349>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75350>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 116 OLE_VT_BOOL to retVal
75351>>>>>>>>>        Function_Return retVal
75352>>>>>>>>>    End_Function
75353>>>>>>>>>
75353>>>>>>>>>    // Gets or sets keeping area together option.
75353>>>>>>>>>    Procedure Set ComKeepTogether Boolean value
75355>>>>>>>>>        Handle hDispatchDriver
75355>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75356>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75357>>>>>>>>>        Set ComProperty of hDispatchDriver 116 OLE_VT_BOOL to value
75358>>>>>>>>>    End_Procedure
75359>>>>>>>>>
75359>>>>>>>>>    // Gets or sets new page after option.
75359>>>>>>>>>    Function ComNewPageAfter Returns Boolean
75361>>>>>>>>>        Handle hDispatchDriver
75361>>>>>>>>>        Boolean retVal
75361>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75362>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 194 OLE_VT_BOOL to retVal
75363>>>>>>>>>        Function_Return retVal
75364>>>>>>>>>    End_Function
75365>>>>>>>>>
75365>>>>>>>>>    // Gets or sets new page after option.
75365>>>>>>>>>    Procedure Set ComNewPageAfter Boolean value
75367>>>>>>>>>        Handle hDispatchDriver
75367>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75368>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75369>>>>>>>>>        Set ComProperty of hDispatchDriver 194 OLE_VT_BOOL to value
75370>>>>>>>>>    End_Procedure
75371>>>>>>>>>
75371>>>>>>>>>    // Gets or sets new page before option.
75371>>>>>>>>>    Function ComNewPageBefore Returns Boolean
75373>>>>>>>>>        Handle hDispatchDriver
75373>>>>>>>>>        Boolean retVal
75373>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75374>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 193 OLE_VT_BOOL to retVal
75375>>>>>>>>>        Function_Return retVal
75376>>>>>>>>>    End_Function
75377>>>>>>>>>
75377>>>>>>>>>    // Gets or sets new page before option.
75377>>>>>>>>>    Procedure Set ComNewPageBefore Boolean value
75379>>>>>>>>>        Handle hDispatchDriver
75379>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75380>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75381>>>>>>>>>        Set ComProperty of hDispatchDriver 193 OLE_VT_BOOL to value
75382>>>>>>>>>    End_Procedure
75383>>>>>>>>>
75383>>>>>>>>>    // Gets or sets printing at bottom of page option.
75383>>>>>>>>>    Function ComPrintAtBottomOfPage Returns Boolean
75385>>>>>>>>>        Handle hDispatchDriver
75385>>>>>>>>>        Boolean retVal
75385>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75386>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 196 OLE_VT_BOOL to retVal
75387>>>>>>>>>        Function_Return retVal
75388>>>>>>>>>    End_Function
75389>>>>>>>>>
75389>>>>>>>>>    // Gets or sets printing at bottom of page option.
75389>>>>>>>>>    Procedure Set ComPrintAtBottomOfPage Boolean value
75391>>>>>>>>>        Handle hDispatchDriver
75391>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75392>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75393>>>>>>>>>        Set ComProperty of hDispatchDriver 196 OLE_VT_BOOL to value
75394>>>>>>>>>    End_Procedure
75395>>>>>>>>>
75395>>>>>>>>>    // Gets or sets reset page number after option.
75395>>>>>>>>>    Function ComResetPageNumberAfter Returns Boolean
75397>>>>>>>>>        Handle hDispatchDriver
75397>>>>>>>>>        Boolean retVal
75397>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75398>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 195 OLE_VT_BOOL to retVal
75399>>>>>>>>>        Function_Return retVal
75400>>>>>>>>>    End_Function
75401>>>>>>>>>
75401>>>>>>>>>    // Gets or sets reset page number after option.
75401>>>>>>>>>    Procedure Set ComResetPageNumberAfter Boolean value
75403>>>>>>>>>        Handle hDispatchDriver
75403>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75404>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75405>>>>>>>>>        Set ComProperty of hDispatchDriver 195 OLE_VT_BOOL to value
75406>>>>>>>>>    End_Procedure
75407>>>>>>>>>
75407>>>>>>>>>    // Gets or sets group sort direction.
75407>>>>>>>>>    Function ComSortDirection Returns CRSortDirection
75409>>>>>>>>>        Handle hDispatchDriver
75409>>>>>>>>>        CRSortDirection retVal
75409>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75410>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 222 OLE_VT_I4 to retVal
75411>>>>>>>>>        Function_Return retVal
75412>>>>>>>>>    End_Function
75413>>>>>>>>>
75413>>>>>>>>>    // Gets or sets group sort direction.
75413>>>>>>>>>    Procedure Set ComSortDirection CRSortDirection value
75415>>>>>>>>>        Handle hDispatchDriver
75415>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75416>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75417>>>>>>>>>        Set ComProperty of hDispatchDriver 222 OLE_VT_I4 to value
75418>>>>>>>>>    End_Procedure
75419>>>>>>>>>
75419>>>>>>>>>    // Gets or sets repeating  group header option.
75419>>>>>>>>>    Function ComRepeatGroupHeader Returns Boolean
75421>>>>>>>>>        Handle hDispatchDriver
75421>>>>>>>>>        Boolean retVal
75421>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75422>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 223 OLE_VT_BOOL to retVal
75423>>>>>>>>>        Function_Return retVal
75424>>>>>>>>>    End_Function
75425>>>>>>>>>
75425>>>>>>>>>    // Gets or sets repeating  group header option.
75425>>>>>>>>>    Procedure Set ComRepeatGroupHeader Boolean value
75427>>>>>>>>>        Handle hDispatchDriver
75427>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75428>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75429>>>>>>>>>        Set ComProperty of hDispatchDriver 223 OLE_VT_BOOL to value
75430>>>>>>>>>    End_Procedure
75431>>>>>>>>>
75431>>>>>>>>>    // Gets or sets keeping group together option.
75431>>>>>>>>>    Function ComKeepGroupTogether Returns Boolean
75433>>>>>>>>>        Handle hDispatchDriver
75433>>>>>>>>>        Boolean retVal
75433>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75434>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 224 OLE_VT_BOOL to retVal
75435>>>>>>>>>        Function_Return retVal
75436>>>>>>>>>    End_Function
75437>>>>>>>>>
75437>>>>>>>>>    // Gets or sets keeping group together option.
75437>>>>>>>>>    Procedure Set ComKeepGroupTogether Boolean value
75439>>>>>>>>>        Handle hDispatchDriver
75439>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75440>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75441>>>>>>>>>        Set ComProperty of hDispatchDriver 224 OLE_VT_BOOL to value
75442>>>>>>>>>    End_Procedure
75443>>>>>>>>>
75443>>>>>>>>>    // Gets or sets group condition.
75443>>>>>>>>>    Function ComGroupCondition Returns CRGroupCondition
75445>>>>>>>>>        Handle hDispatchDriver
75445>>>>>>>>>        CRGroupCondition retVal
75445>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75446>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 225 OLE_VT_I4 to retVal
75447>>>>>>>>>        Function_Return retVal
75448>>>>>>>>>    End_Function
75449>>>>>>>>>
75449>>>>>>>>>    // Gets or sets group condition.
75449>>>>>>>>>    Procedure Set ComGroupCondition CRGroupCondition value
75451>>>>>>>>>        Handle hDispatchDriver
75451>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75452>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75453>>>>>>>>>        Set ComProperty of hDispatchDriver 225 OLE_VT_I4 to value
75454>>>>>>>>>    End_Procedure
75455>>>>>>>>>
75455>>>>>>>>>    // Gets or sets group condition field.
75455>>>>>>>>>    Function ComGroupConditionField Returns Variant
75457>>>>>>>>>        Handle hDispatchDriver
75457>>>>>>>>>        Variant retVal
75457>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75458>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 226 OLE_VT_DISPATCH to retVal
75459>>>>>>>>>        Function_Return retVal
75460>>>>>>>>>    End_Function
75461>>>>>>>>>
75461>>>>>>>>>    // Gets or sets group condition field.
75461>>>>>>>>>    Procedure Set ComGroupConditionField Variant value
75463>>>>>>>>>        Handle hDispatchDriver
75463>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75464>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75465>>>>>>>>>        Set ComProperty of hDispatchDriver 226 OLE_VT_DISPATCH to value
75466>>>>>>>>>    End_Procedure
75467>>>>>>>>>
75467>>>>>>>>>    // Gets multilple column report detail area width (Twips).
75467>>>>>>>>>    Function ComDetailWidth Returns Integer
75469>>>>>>>>>        Handle hDispatchDriver
75469>>>>>>>>>        Integer retVal
75469>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75470>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 338 OLE_VT_I4 to retVal
75471>>>>>>>>>        Function_Return retVal
75472>>>>>>>>>    End_Function
75473>>>>>>>>>
75473>>>>>>>>>    // Gets mailling label report detail area height (Twips).
75473>>>>>>>>>    Function ComDetailHeight Returns Integer
75475>>>>>>>>>        Handle hDispatchDriver
75475>>>>>>>>>        Integer retVal
75475>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75476>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 339 OLE_VT_I4 to retVal
75477>>>>>>>>>        Function_Return retVal
75478>>>>>>>>>    End_Function
75479>>>>>>>>>
75479>>>>>>>>>    // Gets multiple column report horizontal gaps going across page.
75479>>>>>>>>>    Function ComHorizontalGap Returns Integer
75481>>>>>>>>>        Handle hDispatchDriver
75481>>>>>>>>>        Integer retVal
75481>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75482>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 340 OLE_VT_I4 to retVal
75483>>>>>>>>>        Function_Return retVal
75484>>>>>>>>>    End_Function
75485>>>>>>>>>
75485>>>>>>>>>    // Gets or set top or bottom n group sort order
75485>>>>>>>>>    Function ComTopOrBottomNGroupSortOrder Returns CRTopBottomNGroupSortOrder
75487>>>>>>>>>        Handle hDispatchDriver
75487>>>>>>>>>        CRTopBottomNGroupSortOrder retVal
75487>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75488>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 373 OLE_VT_I4 to retVal
75489>>>>>>>>>        Function_Return retVal
75490>>>>>>>>>    End_Function
75491>>>>>>>>>
75491>>>>>>>>>    // Gets or set top or bottom n group sort order
75491>>>>>>>>>    Procedure Set ComTopOrBottomNGroupSortOrder CRTopBottomNGroupSortOrder value
75493>>>>>>>>>        Handle hDispatchDriver
75493>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75494>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75495>>>>>>>>>        Set ComProperty of hDispatchDriver 373 OLE_VT_I4 to value
75496>>>>>>>>>    End_Procedure
75497>>>>>>>>>
75497>>>>>>>>>    // Gets or sets number of top or bottom groups
75497>>>>>>>>>    Function ComNumberOfTopOrBottomNGroups Returns Short
75499>>>>>>>>>        Handle hDispatchDriver
75499>>>>>>>>>        Short retVal
75499>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75500>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 374 OLE_VT_I2 to retVal
75501>>>>>>>>>        Function_Return retVal
75502>>>>>>>>>    End_Function
75503>>>>>>>>>
75503>>>>>>>>>    // Gets or sets number of top or bottom groups
75503>>>>>>>>>    Procedure Set ComNumberOfTopOrBottomNGroups Short value
75505>>>>>>>>>        Handle hDispatchDriver
75505>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75506>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75507>>>>>>>>>        Set ComProperty of hDispatchDriver 374 OLE_VT_I2 to value
75508>>>>>>>>>    End_Procedure
75509>>>>>>>>>
75509>>>>>>>>>    // Gets or sets discard other groups option.
75509>>>>>>>>>    Function ComDiscardOtherGroups Returns Boolean
75511>>>>>>>>>        Handle hDispatchDriver
75511>>>>>>>>>        Boolean retVal
75511>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75512>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 375 OLE_VT_BOOL to retVal
75513>>>>>>>>>        Function_Return retVal
75514>>>>>>>>>    End_Function
75515>>>>>>>>>
75515>>>>>>>>>    // Gets or sets discard other groups option.
75515>>>>>>>>>    Procedure Set ComDiscardOtherGroups Boolean value
75517>>>>>>>>>        Handle hDispatchDriver
75517>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75518>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75519>>>>>>>>>        Set ComProperty of hDispatchDriver 375 OLE_VT_BOOL to value
75520>>>>>>>>>    End_Procedure
75521>>>>>>>>>
75521>>>>>>>>>    // Gets or sets top or bottom n sort field.
75521>>>>>>>>>    Function ComTopOrBottomNSortField Returns Variant
75523>>>>>>>>>        Handle hDispatchDriver
75523>>>>>>>>>        Variant retVal
75523>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75524>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 376 OLE_VT_DISPATCH to retVal
75525>>>>>>>>>        Function_Return retVal
75526>>>>>>>>>    End_Function
75527>>>>>>>>>
75527>>>>>>>>>    // Gets or sets top or bottom n sort field.
75527>>>>>>>>>    Procedure Set ComTopOrBottomNSortField Variant value
75529>>>>>>>>>        Handle hDispatchDriver
75529>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75530>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75531>>>>>>>>>        Set ComProperty of hDispatchDriver 376 OLE_VT_DISPATCH to value
75532>>>>>>>>>    End_Procedure
75533>>>>>>>>>
75533>>>>>>>>>    // Gets or sets group hierarchically flag.
75533>>>>>>>>>    Function ComEnableHierarchicalGroupSorting Returns Boolean
75535>>>>>>>>>        Handle hDispatchDriver
75535>>>>>>>>>        Boolean retVal
75535>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75536>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 535 OLE_VT_BOOL to retVal
75537>>>>>>>>>        Function_Return retVal
75538>>>>>>>>>    End_Function
75539>>>>>>>>>
75539>>>>>>>>>    // Gets or sets group hierarchically flag.
75539>>>>>>>>>    Procedure Set ComEnableHierarchicalGroupSorting Boolean value
75541>>>>>>>>>        Handle hDispatchDriver
75541>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75542>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75543>>>>>>>>>        Set ComProperty of hDispatchDriver 535 OLE_VT_BOOL to value
75544>>>>>>>>>    End_Procedure
75545>>>>>>>>>
75545>>>>>>>>>    // Gets parent ID field.
75545>>>>>>>>>    Function ComParentIDField Returns Variant
75547>>>>>>>>>        Handle hDispatchDriver
75547>>>>>>>>>        Variant retVal
75547>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75548>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 536 OLE_VT_DISPATCH to retVal
75549>>>>>>>>>        Function_Return retVal
75550>>>>>>>>>    End_Function
75551>>>>>>>>>
75551>>>>>>>>>    // Sets parent ID field.
75551>>>>>>>>>    Procedure ComSetParentIDField Variant llParentIDField
75553>>>>>>>>>        Handle hDispatchDriver
75553>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75554>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75555>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llParentIDField
75556>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 704 OLE_VT_VOID
75557>>>>>>>>>    End_Procedure
75558>>>>>>>>>
75558>>>>>>>>>    // Gets instance ID field.
75558>>>>>>>>>    Function ComInstanceIDField Returns Variant
75560>>>>>>>>>        Handle hDispatchDriver
75560>>>>>>>>>        Variant retVal
75560>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75561>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 537 OLE_VT_DISPATCH to retVal
75562>>>>>>>>>        Function_Return retVal
75563>>>>>>>>>    End_Function
75564>>>>>>>>>
75564>>>>>>>>>    // Sets instance ID field.
75564>>>>>>>>>    Procedure ComSetInstanceIDField Variant llInstanceIDField
75566>>>>>>>>>        Handle hDispatchDriver
75566>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75567>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75568>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llInstanceIDField
75569>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 705 OLE_VT_VOID
75570>>>>>>>>>    End_Procedure
75571>>>>>>>>>
75571>>>>>>>>>    // Gets or sets group indent (twips).
75571>>>>>>>>>    Function ComGroupIndent Returns Integer
75573>>>>>>>>>        Handle hDispatchDriver
75573>>>>>>>>>        Integer retVal
75573>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75574>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 538 OLE_VT_I4 to retVal
75575>>>>>>>>>        Function_Return retVal
75576>>>>>>>>>    End_Function
75577>>>>>>>>>
75577>>>>>>>>>    // Gets or sets group indent (twips).
75577>>>>>>>>>    Procedure Set ComGroupIndent Integer value
75579>>>>>>>>>        Handle hDispatchDriver
75579>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75580>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75581>>>>>>>>>        Set ComProperty of hDispatchDriver 538 OLE_VT_I4 to value
75582>>>>>>>>>    End_Procedure
75583>>>>>>>>>
75583>>>>>>>>>    // Gets or sets the specifed groups
75583>>>>>>>>>    Function ComSpecifiedGroups Returns Variant
75585>>>>>>>>>        Handle hDispatchDriver
75585>>>>>>>>>        Variant retVal
75585>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75586>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 722 OLE_VT_VARIANT to retVal
75587>>>>>>>>>        Function_Return retVal
75588>>>>>>>>>    End_Function
75589>>>>>>>>>
75589>>>>>>>>>    // Gets or sets the specifed groups
75589>>>>>>>>>    Procedure Set ComSpecifiedGroups Variant value
75591>>>>>>>>>        Handle hDispatchDriver
75591>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75592>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75593>>>>>>>>>        Set ComProperty of hDispatchDriver 722 (OLE_VT_BYREF ior OLE_VT_VARIANT) to value
75594>>>>>>>>>    End_Procedure
75595>>>>>>>>>
75595>>>>>>>>>    // Gets or sets section conditional formula.
75595>>>>>>>>>    Function ComConditionFormula Variant llFormulaName Returns String
75597>>>>>>>>>        Handle hDispatchDriver
75597>>>>>>>>>        String retVal
75597>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75598>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75599>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaName
75600>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 759 OLE_VT_BSTR to retVal
75601>>>>>>>>>        Function_Return retVal
75602>>>>>>>>>    End_Function
75603>>>>>>>>>
75603>>>>>>>>>    // Gets or sets section conditional formula.
75603>>>>>>>>>    Procedure Set ComConditionFormula Variant llFormulaName String value
75605>>>>>>>>>        Handle hDispatchDriver
75605>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75606>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
75607>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaName
75608>>>>>>>>>        Set ComProperty of hDispatchDriver 759 OLE_VT_BSTR to value
75609>>>>>>>>>    End_Procedure
75610>>>>>>>>>End_Class
75611>>>>>>>>>
75611>>>>>>>>>// CoClass
75611>>>>>>>>>// CLSID: {E41248E1-2AB7-457C-999F-893C6432BA33}
75611>>>>>>>>>Class cCrystalArea is a cComAutomationObject
75612>>>>>>>>>    Import_Class_Protocol cCrystalIArea
75613>>>>>>>>>
75613>>>>>>>>>    Procedure Construct_Object
75615>>>>>>>>>        Forward Send Construct_Object
75617>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
75618>>>>>>>>>    End_Procedure
75619>>>>>>>>>End_Class
75620>>>>>>>>>
75620>>>>>>>>>// CLSID: {AF376806-6120-4E28-96DD-63FD2DC27B7A}
75620>>>>>>>>>Class cCrystalISection is a Mixin
75621>>>>>>>>>
75621>>>>>>>>>    // Gets or sets section name.
75621>>>>>>>>>    Function ComName Returns String
75623>>>>>>>>>        Handle hDispatchDriver
75623>>>>>>>>>        String retVal
75623>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75624>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
75625>>>>>>>>>        Function_Return retVal
75626>>>>>>>>>    End_Function
75627>>>>>>>>>
75627>>>>>>>>>    // Gets or sets section name.
75627>>>>>>>>>    Procedure Set ComName String value
75629>>>>>>>>>        Handle hDispatchDriver
75629>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75630>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75631>>>>>>>>>        Set ComProperty of hDispatchDriver -800 OLE_VT_BSTR to value
75632>>>>>>>>>    End_Procedure
75633>>>>>>>>>
75633>>>>>>>>>    // Gets or sets section height (twips).
75633>>>>>>>>>    Function ComHeight Returns Integer
75635>>>>>>>>>        Handle hDispatchDriver
75635>>>>>>>>>        Integer retVal
75635>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75636>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_I4 to retVal
75637>>>>>>>>>        Function_Return retVal
75638>>>>>>>>>    End_Function
75639>>>>>>>>>
75639>>>>>>>>>    // Gets or sets section height (twips).
75639>>>>>>>>>    Procedure Set ComHeight Integer value
75641>>>>>>>>>        Handle hDispatchDriver
75641>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75642>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75643>>>>>>>>>        Set ComProperty of hDispatchDriver 105 OLE_VT_I4 to value
75644>>>>>>>>>    End_Procedure
75645>>>>>>>>>
75645>>>>>>>>>    // Gets report object collection within the section.
75645>>>>>>>>>    Function ComReportObjects Returns Variant
75647>>>>>>>>>        Handle hDispatchDriver
75647>>>>>>>>>        Variant retVal
75647>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75648>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 160 OLE_VT_DISPATCH to retVal
75649>>>>>>>>>        Function_Return retVal
75650>>>>>>>>>    End_Function
75651>>>>>>>>>
75651>>>>>>>>>    // Gets section width (twips).
75651>>>>>>>>>    Function ComWidth Returns Integer
75653>>>>>>>>>        Handle hDispatchDriver
75653>>>>>>>>>        Integer retVal
75653>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75654>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
75655>>>>>>>>>        Function_Return retVal
75656>>>>>>>>>    End_Function
75657>>>>>>>>>
75657>>>>>>>>>    // Gets or sets section background color.
75657>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
75659>>>>>>>>>        Handle hDispatchDriver
75659>>>>>>>>>        OLE_COLOR retVal
75659>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75660>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_I4 to retVal
75661>>>>>>>>>        Function_Return retVal
75662>>>>>>>>>    End_Function
75663>>>>>>>>>
75663>>>>>>>>>    // Gets or sets section background color.
75663>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
75665>>>>>>>>>        Handle hDispatchDriver
75665>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75666>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75667>>>>>>>>>        Set ComProperty of hDispatchDriver 112 OLE_VT_I4 to value
75668>>>>>>>>>    End_Procedure
75669>>>>>>>>>
75669>>>>>>>>>    // Gets or sets section visibility.
75669>>>>>>>>>    Function ComSuppress Returns Boolean
75671>>>>>>>>>        Handle hDispatchDriver
75671>>>>>>>>>        Boolean retVal
75671>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75672>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 114 OLE_VT_BOOL to retVal
75673>>>>>>>>>        Function_Return retVal
75674>>>>>>>>>    End_Function
75675>>>>>>>>>
75675>>>>>>>>>    // Gets or sets section visibility.
75675>>>>>>>>>    Procedure Set ComSuppress Boolean value
75677>>>>>>>>>        Handle hDispatchDriver
75677>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75678>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75679>>>>>>>>>        Set ComProperty of hDispatchDriver 114 OLE_VT_BOOL to value
75680>>>>>>>>>    End_Procedure
75681>>>>>>>>>
75681>>>>>>>>>    // Gets the section parent (Report or Area).
75681>>>>>>>>>    Function ComParent Returns Variant
75683>>>>>>>>>        Handle hDispatchDriver
75683>>>>>>>>>        Variant retVal
75683>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75684>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
75685>>>>>>>>>        Function_Return retVal
75686>>>>>>>>>    End_Function
75687>>>>>>>>>
75687>>>>>>>>>    // Gets the section index within the report.
75687>>>>>>>>>    Function ComNumber Returns Short
75689>>>>>>>>>        Handle hDispatchDriver
75689>>>>>>>>>        Short retVal
75689>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75690>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 192 OLE_VT_I2 to retVal
75691>>>>>>>>>        Function_Return retVal
75692>>>>>>>>>    End_Function
75693>>>>>>>>>
75693>>>>>>>>>    // Gets or sets new page before option.
75693>>>>>>>>>    Function ComNewPageBefore Returns Boolean
75695>>>>>>>>>        Handle hDispatchDriver
75695>>>>>>>>>        Boolean retVal
75695>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75696>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 193 OLE_VT_BOOL to retVal
75697>>>>>>>>>        Function_Return retVal
75698>>>>>>>>>    End_Function
75699>>>>>>>>>
75699>>>>>>>>>    // Gets or sets new page before option.
75699>>>>>>>>>    Procedure Set ComNewPageBefore Boolean value
75701>>>>>>>>>        Handle hDispatchDriver
75701>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75702>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75703>>>>>>>>>        Set ComProperty of hDispatchDriver 193 OLE_VT_BOOL to value
75704>>>>>>>>>    End_Procedure
75705>>>>>>>>>
75705>>>>>>>>>    // Gets or sets new page after option.
75705>>>>>>>>>    Function ComNewPageAfter Returns Boolean
75707>>>>>>>>>        Handle hDispatchDriver
75707>>>>>>>>>        Boolean retVal
75707>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75708>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 194 OLE_VT_BOOL to retVal
75709>>>>>>>>>        Function_Return retVal
75710>>>>>>>>>    End_Function
75711>>>>>>>>>
75711>>>>>>>>>    // Gets or sets new page after option.
75711>>>>>>>>>    Procedure Set ComNewPageAfter Boolean value
75713>>>>>>>>>        Handle hDispatchDriver
75713>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75714>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75715>>>>>>>>>        Set ComProperty of hDispatchDriver 194 OLE_VT_BOOL to value
75716>>>>>>>>>    End_Procedure
75717>>>>>>>>>
75717>>>>>>>>>    // Gets or sets keeping section together option.
75717>>>>>>>>>    Function ComKeepTogether Returns Boolean
75719>>>>>>>>>        Handle hDispatchDriver
75719>>>>>>>>>        Boolean retVal
75719>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75720>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 116 OLE_VT_BOOL to retVal
75721>>>>>>>>>        Function_Return retVal
75722>>>>>>>>>    End_Function
75723>>>>>>>>>
75723>>>>>>>>>    // Gets or sets keeping section together option.
75723>>>>>>>>>    Procedure Set ComKeepTogether Boolean value
75725>>>>>>>>>        Handle hDispatchDriver
75725>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75726>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75727>>>>>>>>>        Set ComProperty of hDispatchDriver 116 OLE_VT_BOOL to value
75728>>>>>>>>>    End_Procedure
75729>>>>>>>>>
75729>>>>>>>>>    // Gets or sets reset page after option.
75729>>>>>>>>>    Function ComResetPageNumberAfter Returns Boolean
75731>>>>>>>>>        Handle hDispatchDriver
75731>>>>>>>>>        Boolean retVal
75731>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75732>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 195 OLE_VT_BOOL to retVal
75733>>>>>>>>>        Function_Return retVal
75734>>>>>>>>>    End_Function
75735>>>>>>>>>
75735>>>>>>>>>    // Gets or sets reset page after option.
75735>>>>>>>>>    Procedure Set ComResetPageNumberAfter Boolean value
75737>>>>>>>>>        Handle hDispatchDriver
75737>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75738>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75739>>>>>>>>>        Set ComProperty of hDispatchDriver 195 OLE_VT_BOOL to value
75740>>>>>>>>>    End_Procedure
75741>>>>>>>>>
75741>>>>>>>>>    // Gets or sets print at bottom of page option.
75741>>>>>>>>>    Function ComPrintAtBottomOfPage Returns Boolean
75743>>>>>>>>>        Handle hDispatchDriver
75743>>>>>>>>>        Boolean retVal
75743>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75744>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 196 OLE_VT_BOOL to retVal
75745>>>>>>>>>        Function_Return retVal
75746>>>>>>>>>    End_Function
75747>>>>>>>>>
75747>>>>>>>>>    // Gets or sets print at bottom of page option.
75747>>>>>>>>>    Procedure Set ComPrintAtBottomOfPage Boolean value
75749>>>>>>>>>        Handle hDispatchDriver
75749>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75750>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75751>>>>>>>>>        Set ComProperty of hDispatchDriver 196 OLE_VT_BOOL to value
75752>>>>>>>>>    End_Procedure
75753>>>>>>>>>
75753>>>>>>>>>    // Gets or sets underlay following section option.
75753>>>>>>>>>    Function ComUnderlaySection Returns Boolean
75755>>>>>>>>>        Handle hDispatchDriver
75755>>>>>>>>>        Boolean retVal
75755>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75756>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 197 OLE_VT_BOOL to retVal
75757>>>>>>>>>        Function_Return retVal
75758>>>>>>>>>    End_Function
75759>>>>>>>>>
75759>>>>>>>>>    // Gets or sets underlay following section option.
75759>>>>>>>>>    Procedure Set ComUnderlaySection Boolean value
75761>>>>>>>>>        Handle hDispatchDriver
75761>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75762>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75763>>>>>>>>>        Set ComProperty of hDispatchDriver 197 OLE_VT_BOOL to value
75764>>>>>>>>>    End_Procedure
75765>>>>>>>>>
75765>>>>>>>>>    // Gets or sets suppress section if blank option.
75765>>>>>>>>>    Function ComSuppressIfBlank Returns Boolean
75767>>>>>>>>>        Handle hDispatchDriver
75767>>>>>>>>>        Boolean retVal
75767>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75768>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 198 OLE_VT_BOOL to retVal
75769>>>>>>>>>        Function_Return retVal
75770>>>>>>>>>    End_Function
75771>>>>>>>>>
75771>>>>>>>>>    // Gets or sets suppress section if blank option.
75771>>>>>>>>>    Procedure Set ComSuppressIfBlank Boolean value
75773>>>>>>>>>        Handle hDispatchDriver
75773>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75774>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75775>>>>>>>>>        Set ComProperty of hDispatchDriver 198 OLE_VT_BOOL to value
75776>>>>>>>>>    End_Procedure
75777>>>>>>>>>
75777>>>>>>>>>    // Gets minimum section height (twips).
75777>>>>>>>>>    Function ComMinimumHeight Returns Integer
75779>>>>>>>>>        Handle hDispatchDriver
75779>>>>>>>>>        Integer retVal
75779>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75780>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 235 OLE_VT_I4 to retVal
75781>>>>>>>>>        Function_Return retVal
75782>>>>>>>>>    End_Function
75783>>>>>>>>>
75783>>>>>>>>>    // Adds a field object into the section.
75783>>>>>>>>>    Function ComAddFieldObject Variant llField Integer llLeft Integer llTop Returns Variant
75785>>>>>>>>>        Handle hDispatchDriver
75785>>>>>>>>>        Variant retVal
75785>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75786>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
75787>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llField
75788>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
75789>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
75790>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 462 OLE_VT_DISPATCH to retVal
75791>>>>>>>>>        Function_Return retVal
75792>>>>>>>>>    End_Function
75793>>>>>>>>>
75793>>>>>>>>>    // Adds a text object into the section.
75793>>>>>>>>>    Function ComAddTextObject String llpText Integer llLeft Integer llTop Variant llformatText Returns Variant
75795>>>>>>>>>        Handle hDispatchDriver
75795>>>>>>>>>        Variant retVal
75795>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75796>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
75797>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpText
75798>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
75799>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
75800>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llformatText
75801>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 463 OLE_VT_DISPATCH to retVal
75802>>>>>>>>>        Function_Return retVal
75803>>>>>>>>>    End_Function
75804>>>>>>>>>
75804>>>>>>>>>    // Adds a blob field object into the section.
75804>>>>>>>>>    Function ComAddBlobFieldObject Variant llField Integer llLeft Integer llTop Returns Variant
75806>>>>>>>>>        Handle hDispatchDriver
75806>>>>>>>>>        Variant retVal
75806>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75807>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
75808>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llField
75809>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
75810>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
75811>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 553 OLE_VT_DISPATCH to retVal
75812>>>>>>>>>        Function_Return retVal
75813>>>>>>>>>    End_Function
75814>>>>>>>>>
75814>>>>>>>>>    // Adds a special var field object into the section.
75814>>>>>>>>>    Function ComAddSpecialVarFieldObject CRSpecialVarType llspecialVarType Integer llLeft Integer llTop Returns Variant
75816>>>>>>>>>        Handle hDispatchDriver
75816>>>>>>>>>        Variant retVal
75816>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75817>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
75818>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llspecialVarType
75819>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
75820>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
75821>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 555 OLE_VT_DISPATCH to retVal
75822>>>>>>>>>        Function_Return retVal
75823>>>>>>>>>    End_Function
75824>>>>>>>>>
75824>>>>>>>>>    // Adds a subreport object into the section.
75824>>>>>>>>>    Function ComAddSubreportObject String llpSubreportName Integer llLeft Integer llTop Returns Variant
75826>>>>>>>>>        Handle hDispatchDriver
75826>>>>>>>>>        Variant retVal
75826>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75827>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
75828>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpSubreportName
75829>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
75830>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
75831>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 560 OLE_VT_DISPATCH to retVal
75832>>>>>>>>>        Function_Return retVal
75833>>>>>>>>>    End_Function
75834>>>>>>>>>
75834>>>>>>>>>    // Imports a subreport into the section.
75834>>>>>>>>>    Function ComImportSubreport String llsubreportFileName Integer llLeft Integer llTop Returns Variant
75836>>>>>>>>>        Handle hDispatchDriver
75836>>>>>>>>>        Variant retVal
75836>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75837>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
75838>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llsubreportFileName
75839>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
75840>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
75841>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 561 OLE_VT_DISPATCH to retVal
75842>>>>>>>>>        Function_Return retVal
75843>>>>>>>>>    End_Function
75844>>>>>>>>>
75844>>>>>>>>>    // Deletes an object into the section.
75844>>>>>>>>>    Procedure ComDeleteObject Variant llreportObject
75846>>>>>>>>>        Handle hDispatchDriver
75846>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75847>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75848>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llreportObject
75849>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 554 OLE_VT_VOID
75850>>>>>>>>>    End_Procedure
75851>>>>>>>>>
75851>>>>>>>>>    // Adds a line object into the section.
75851>>>>>>>>>    Function ComAddLineObject Integer llLeft Integer llTop Integer llRight Integer llBottom Variant llpEndSection Returns Variant
75853>>>>>>>>>        Handle hDispatchDriver
75853>>>>>>>>>        Variant retVal
75853>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75854>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
75855>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
75856>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
75857>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
75858>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
75859>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpEndSection
75860>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 558 OLE_VT_DISPATCH to retVal
75861>>>>>>>>>        Function_Return retVal
75862>>>>>>>>>    End_Function
75863>>>>>>>>>
75863>>>>>>>>>    // Adds a box object into the section.
75863>>>>>>>>>    Function ComAddBoxObject Integer llLeft Integer llTop Integer llRight Integer llBottom Variant llpEndSection Returns Variant
75865>>>>>>>>>        Handle hDispatchDriver
75865>>>>>>>>>        Variant retVal
75865>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75866>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
75867>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
75868>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
75869>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llRight
75870>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llBottom
75871>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpEndSection
75872>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 559 OLE_VT_DISPATCH to retVal
75873>>>>>>>>>        Function_Return retVal
75874>>>>>>>>>    End_Function
75875>>>>>>>>>
75875>>>>>>>>>    // Adds a crosstab object into the section.
75875>>>>>>>>>    Function ComAddCrossTabObject Integer llLeft Integer llTop Returns Variant
75877>>>>>>>>>        Handle hDispatchDriver
75877>>>>>>>>>        Variant retVal
75877>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75878>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
75879>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
75880>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
75881>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 557 OLE_VT_DISPATCH to retVal
75882>>>>>>>>>        Function_Return retVal
75883>>>>>>>>>    End_Function
75884>>>>>>>>>
75884>>>>>>>>>    // Adds a picture field object into the section.
75884>>>>>>>>>    Function ComAddPictureObject String llpImageFilePath Integer llLeft Integer llTop Returns Variant
75886>>>>>>>>>        Handle hDispatchDriver
75886>>>>>>>>>        Variant retVal
75886>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75887>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
75888>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpImageFilePath
75889>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
75890>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
75891>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 556 OLE_VT_DISPATCH to retVal
75892>>>>>>>>>        Function_Return retVal
75893>>>>>>>>>    End_Function
75894>>>>>>>>>
75894>>>>>>>>>    // Adds a graph object into the section.
75894>>>>>>>>>    Function ComAddGraphObject CRGraphDataType llgraphDataType Integer llLeft Integer llTop Variant llpCrossTabObject Returns Variant
75896>>>>>>>>>        Handle hDispatchDriver
75896>>>>>>>>>        Variant retVal
75896>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75897>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
75898>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llgraphDataType
75899>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
75900>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
75901>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpCrossTabObject
75902>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 562 OLE_VT_DISPATCH to retVal
75903>>>>>>>>>        Function_Return retVal
75904>>>>>>>>>    End_Function
75905>>>>>>>>>
75905>>>>>>>>>    // Adds a summary field object into the section
75905>>>>>>>>>    Function ComAddSummaryFieldObject Variant llField CRSummaryType llSummaryType Integer llLeft Integer llTop Variant llsecondSummaryFieldOrFactor Returns Variant
75907>>>>>>>>>        Handle hDispatchDriver
75907>>>>>>>>>        Variant retVal
75907>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75908>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
75909>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llField
75910>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llSummaryType
75911>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
75912>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
75913>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llsecondSummaryFieldOrFactor
75914>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 479 OLE_VT_DISPATCH to retVal
75915>>>>>>>>>        Function_Return retVal
75916>>>>>>>>>    End_Function
75917>>>>>>>>>
75917>>>>>>>>>    // Adds an unbound field object into the report.
75917>>>>>>>>>    Function ComAddUnboundFieldObject CRFieldValueType llValueType Integer llLeft Integer llTop Returns Variant
75919>>>>>>>>>        Handle hDispatchDriver
75919>>>>>>>>>        Variant retVal
75919>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75920>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
75921>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llValueType
75922>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLeft
75923>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llTop
75924>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 532 OLE_VT_DISPATCH to retVal
75925>>>>>>>>>        Function_Return retVal
75926>>>>>>>>>    End_Function
75927>>>>>>>>>
75927>>>>>>>>>    // Gets or sets section conditional formula.
75927>>>>>>>>>    Function ComConditionFormula Variant llFormulaName Returns String
75929>>>>>>>>>        Handle hDispatchDriver
75929>>>>>>>>>        String retVal
75929>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75930>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75931>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaName
75932>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 759 OLE_VT_BSTR to retVal
75933>>>>>>>>>        Function_Return retVal
75934>>>>>>>>>    End_Function
75935>>>>>>>>>
75935>>>>>>>>>    // Gets or sets section conditional formula.
75935>>>>>>>>>    Procedure Set ComConditionFormula Variant llFormulaName String value
75937>>>>>>>>>        Handle hDispatchDriver
75937>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75938>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
75939>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaName
75940>>>>>>>>>        Set ComProperty of hDispatchDriver 759 OLE_VT_BSTR to value
75941>>>>>>>>>    End_Procedure
75942>>>>>>>>>
75942>>>>>>>>>    // Gets or sets CSS class.
75942>>>>>>>>>    Function ComCssClass Returns String
75944>>>>>>>>>        Handle hDispatchDriver
75944>>>>>>>>>        String retVal
75944>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75945>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 549 OLE_VT_BSTR to retVal
75946>>>>>>>>>        Function_Return retVal
75947>>>>>>>>>    End_Function
75948>>>>>>>>>
75948>>>>>>>>>    // Gets or sets CSS class.
75948>>>>>>>>>    Procedure Set ComCssClass String value
75950>>>>>>>>>        Handle hDispatchDriver
75950>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75951>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75952>>>>>>>>>        Set ComProperty of hDispatchDriver 549 OLE_VT_BSTR to value
75953>>>>>>>>>    End_Procedure
75954>>>>>>>>>End_Class
75955>>>>>>>>>
75955>>>>>>>>>// CLSID: {AF37684B-6120-4E28-96DD-63FD2DC27B7A}
75955>>>>>>>>>Class cCrystalISectionEvent is a Mixin
75956>>>>>>>>>
75956>>>>>>>>>    // Fires this event before starting to format a section
75956>>>>>>>>>    Procedure OnComFormat Variant llpFormattingInfo
75958>>>>>>>>>    End_Procedure
75959>>>>>>>>>
75959>>>>>>>>>    Procedure RegisterComEvents
75961>>>>>>>>>        Send RegisterComEvent 1 msg_OnComFormat
75962>>>>>>>>>    End_Procedure
75963>>>>>>>>>End_Class
75964>>>>>>>>>
75964>>>>>>>>>// CoClass
75964>>>>>>>>>// CLSID: {A8C79148-52F7-4B0B-9FD8-E230740227C2}
75964>>>>>>>>>Class cCrystalSection is a cComAutomationObject
75965>>>>>>>>>    Import_Class_Protocol cCrystalISection
75966>>>>>>>>>    Import_Class_Protocol cCrystalISectionEvent
75967>>>>>>>>>
75967>>>>>>>>>    Procedure Construct_Object
75969>>>>>>>>>        Forward Send Construct_Object
75971>>>>>>>>>        Set psEventId to "{AF37684B-6120-4E28-96DD-63FD2DC27B7A}"
75972>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
75973>>>>>>>>>    End_Procedure
75974>>>>>>>>>End_Class
75975>>>>>>>>>
75975>>>>>>>>>// CLSID: {AF376807-6120-4E28-96DD-63FD2DC27B7A}
75975>>>>>>>>>Class cCrystalIReportObjects is a Mixin
75976>>>>>>>>>
75976>>>>>>>>>    Function Com_NewEnum Returns Variant
75978>>>>>>>>>        Handle hDispatchDriver
75978>>>>>>>>>        Variant retVal
75978>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75979>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
75980>>>>>>>>>        Function_Return retVal
75981>>>>>>>>>    End_Function
75982>>>>>>>>>
75982>>>>>>>>>    // Gets collection item.
75982>>>>>>>>>    Function ComItem Variant llindex Returns Variant
75984>>>>>>>>>        Handle hDispatchDriver
75984>>>>>>>>>        Variant retVal
75984>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75985>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
75986>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llindex
75987>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
75988>>>>>>>>>        Function_Return retVal
75989>>>>>>>>>    End_Function
75990>>>>>>>>>
75990>>>>>>>>>    // Gets collection count.
75990>>>>>>>>>    Function ComCount Returns Integer
75992>>>>>>>>>        Handle hDispatchDriver
75992>>>>>>>>>        Integer retVal
75992>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75993>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
75994>>>>>>>>>        Function_Return retVal
75995>>>>>>>>>    End_Function
75996>>>>>>>>>
75996>>>>>>>>>    // Gets report object collection parent (section)
75996>>>>>>>>>    Function ComParent Returns Variant
75998>>>>>>>>>        Handle hDispatchDriver
75998>>>>>>>>>        Variant retVal
75998>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
75999>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
76000>>>>>>>>>        Function_Return retVal
76001>>>>>>>>>    End_Function
76002>>>>>>>>>End_Class
76003>>>>>>>>>
76003>>>>>>>>>// CoClass
76003>>>>>>>>>// CLSID: {F6EE0DF0-F538-4415-8D8F-D034910A5BD9}
76003>>>>>>>>>Class cCrystalReportObjects is a cComAutomationObject
76004>>>>>>>>>    Import_Class_Protocol cCrystalIReportObjects
76005>>>>>>>>>
76005>>>>>>>>>    Procedure Construct_Object
76007>>>>>>>>>        Forward Send Construct_Object
76009>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
76010>>>>>>>>>    End_Procedure
76011>>>>>>>>>End_Class
76012>>>>>>>>>
76012>>>>>>>>>// CLSID: {AF376809-6120-4E28-96DD-63FD2DC27B7A}
76012>>>>>>>>>Class cCrystalIFieldObject is a Mixin
76013>>>>>>>>>
76013>>>>>>>>>    // Gets or sets object name.
76013>>>>>>>>>    Function ComName Returns String
76015>>>>>>>>>        Handle hDispatchDriver
76015>>>>>>>>>        String retVal
76015>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76016>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
76017>>>>>>>>>        Function_Return retVal
76018>>>>>>>>>    End_Function
76019>>>>>>>>>
76019>>>>>>>>>    // Gets or sets object name.
76019>>>>>>>>>    Procedure Set ComName String value
76021>>>>>>>>>        Handle hDispatchDriver
76021>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76022>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76023>>>>>>>>>        Set ComProperty of hDispatchDriver -800 OLE_VT_BSTR to value
76024>>>>>>>>>    End_Procedure
76025>>>>>>>>>
76025>>>>>>>>>    // Gets report object kind.
76025>>>>>>>>>    Function ComKind Returns CRObjectKind
76027>>>>>>>>>        Handle hDispatchDriver
76027>>>>>>>>>        CRObjectKind retVal
76027>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76028>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
76029>>>>>>>>>        Function_Return retVal
76030>>>>>>>>>    End_Function
76031>>>>>>>>>
76031>>>>>>>>>    // Gets or sets object upper left position (twips).
76031>>>>>>>>>    Function ComLeft Returns Integer
76033>>>>>>>>>        Handle hDispatchDriver
76033>>>>>>>>>        Integer retVal
76033>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76034>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_I4 to retVal
76035>>>>>>>>>        Function_Return retVal
76036>>>>>>>>>    End_Function
76037>>>>>>>>>
76037>>>>>>>>>    // Gets or sets object upper left position (twips).
76037>>>>>>>>>    Procedure Set ComLeft Integer value
76039>>>>>>>>>        Handle hDispatchDriver
76039>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76040>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76041>>>>>>>>>        Set ComProperty of hDispatchDriver 102 OLE_VT_I4 to value
76042>>>>>>>>>    End_Procedure
76043>>>>>>>>>
76043>>>>>>>>>    // Gets or sets object upper top position (twips).
76043>>>>>>>>>    Function ComTop Returns Integer
76045>>>>>>>>>        Handle hDispatchDriver
76045>>>>>>>>>        Integer retVal
76045>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76046>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_I4 to retVal
76047>>>>>>>>>        Function_Return retVal
76048>>>>>>>>>    End_Function
76049>>>>>>>>>
76049>>>>>>>>>    // Gets or sets object upper top position (twips).
76049>>>>>>>>>    Procedure Set ComTop Integer value
76051>>>>>>>>>        Handle hDispatchDriver
76051>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76052>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76053>>>>>>>>>        Set ComProperty of hDispatchDriver 103 OLE_VT_I4 to value
76054>>>>>>>>>    End_Procedure
76055>>>>>>>>>
76055>>>>>>>>>    // Gets or sets object width (twips).
76055>>>>>>>>>    Function ComWidth Returns Integer
76057>>>>>>>>>        Handle hDispatchDriver
76057>>>>>>>>>        Integer retVal
76057>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76058>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
76059>>>>>>>>>        Function_Return retVal
76060>>>>>>>>>    End_Function
76061>>>>>>>>>
76061>>>>>>>>>    // Gets or sets object width (twips).
76061>>>>>>>>>    Procedure Set ComWidth Integer value
76063>>>>>>>>>        Handle hDispatchDriver
76063>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76064>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76065>>>>>>>>>        Set ComProperty of hDispatchDriver 104 OLE_VT_I4 to value
76066>>>>>>>>>    End_Procedure
76067>>>>>>>>>
76067>>>>>>>>>    // Gets or sets object height (twips).
76067>>>>>>>>>    Function ComHeight Returns Integer
76069>>>>>>>>>        Handle hDispatchDriver
76069>>>>>>>>>        Integer retVal
76069>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76070>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_I4 to retVal
76071>>>>>>>>>        Function_Return retVal
76072>>>>>>>>>    End_Function
76073>>>>>>>>>
76073>>>>>>>>>    // Gets or sets object height (twips).
76073>>>>>>>>>    Procedure Set ComHeight Integer value
76075>>>>>>>>>        Handle hDispatchDriver
76075>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76076>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76077>>>>>>>>>        Set ComProperty of hDispatchDriver 105 OLE_VT_I4 to value
76078>>>>>>>>>    End_Procedure
76079>>>>>>>>>
76079>>>>>>>>>    // Gets or sets left line style.
76079>>>>>>>>>    Function ComLeftLineStyle Returns CRLineStyle
76081>>>>>>>>>        Handle hDispatchDriver
76081>>>>>>>>>        CRLineStyle retVal
76081>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76082>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_I4 to retVal
76083>>>>>>>>>        Function_Return retVal
76084>>>>>>>>>    End_Function
76085>>>>>>>>>
76085>>>>>>>>>    // Gets or sets left line style.
76085>>>>>>>>>    Procedure Set ComLeftLineStyle CRLineStyle value
76087>>>>>>>>>        Handle hDispatchDriver
76087>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76088>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76089>>>>>>>>>        Set ComProperty of hDispatchDriver 106 OLE_VT_I4 to value
76090>>>>>>>>>    End_Procedure
76091>>>>>>>>>
76091>>>>>>>>>    // Gets or sets right line style.
76091>>>>>>>>>    Function ComRightLineStyle Returns CRLineStyle
76093>>>>>>>>>        Handle hDispatchDriver
76093>>>>>>>>>        CRLineStyle retVal
76093>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76094>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 107 OLE_VT_I4 to retVal
76095>>>>>>>>>        Function_Return retVal
76096>>>>>>>>>    End_Function
76097>>>>>>>>>
76097>>>>>>>>>    // Gets or sets right line style.
76097>>>>>>>>>    Procedure Set ComRightLineStyle CRLineStyle value
76099>>>>>>>>>        Handle hDispatchDriver
76099>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76100>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76101>>>>>>>>>        Set ComProperty of hDispatchDriver 107 OLE_VT_I4 to value
76102>>>>>>>>>    End_Procedure
76103>>>>>>>>>
76103>>>>>>>>>    // Gets or sets top line style.
76103>>>>>>>>>    Function ComTopLineStyle Returns CRLineStyle
76105>>>>>>>>>        Handle hDispatchDriver
76105>>>>>>>>>        CRLineStyle retVal
76105>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76106>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_I4 to retVal
76107>>>>>>>>>        Function_Return retVal
76108>>>>>>>>>    End_Function
76109>>>>>>>>>
76109>>>>>>>>>    // Gets or sets top line style.
76109>>>>>>>>>    Procedure Set ComTopLineStyle CRLineStyle value
76111>>>>>>>>>        Handle hDispatchDriver
76111>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76112>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76113>>>>>>>>>        Set ComProperty of hDispatchDriver 108 OLE_VT_I4 to value
76114>>>>>>>>>    End_Procedure
76115>>>>>>>>>
76115>>>>>>>>>    // Gets or sets bottom line style.
76115>>>>>>>>>    Function ComBottomLineStyle Returns CRLineStyle
76117>>>>>>>>>        Handle hDispatchDriver
76117>>>>>>>>>        CRLineStyle retVal
76117>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76118>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 109 OLE_VT_I4 to retVal
76119>>>>>>>>>        Function_Return retVal
76120>>>>>>>>>    End_Function
76121>>>>>>>>>
76121>>>>>>>>>    // Gets or sets bottom line style.
76121>>>>>>>>>    Procedure Set ComBottomLineStyle CRLineStyle value
76123>>>>>>>>>        Handle hDispatchDriver
76123>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76124>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76125>>>>>>>>>        Set ComProperty of hDispatchDriver 109 OLE_VT_I4 to value
76126>>>>>>>>>    End_Procedure
76127>>>>>>>>>
76127>>>>>>>>>    // Gets or sets tight horizontal.
76127>>>>>>>>>    Function ComEnableTightHorizontal Returns Boolean
76129>>>>>>>>>        Handle hDispatchDriver
76129>>>>>>>>>        Boolean retVal
76129>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76130>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 110 OLE_VT_BOOL to retVal
76131>>>>>>>>>        Function_Return retVal
76132>>>>>>>>>    End_Function
76133>>>>>>>>>
76133>>>>>>>>>    // Gets or sets tight horizontal.
76133>>>>>>>>>    Procedure Set ComEnableTightHorizontal Boolean value
76135>>>>>>>>>        Handle hDispatchDriver
76135>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76136>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76137>>>>>>>>>        Set ComProperty of hDispatchDriver 110 OLE_VT_BOOL to value
76138>>>>>>>>>    End_Procedure
76139>>>>>>>>>
76139>>>>>>>>>    // Gets or sets border drop shadow.
76139>>>>>>>>>    Function ComHasDropShadow Returns Boolean
76141>>>>>>>>>        Handle hDispatchDriver
76141>>>>>>>>>        Boolean retVal
76141>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76142>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_BOOL to retVal
76143>>>>>>>>>        Function_Return retVal
76144>>>>>>>>>    End_Function
76145>>>>>>>>>
76145>>>>>>>>>    // Gets or sets border drop shadow.
76145>>>>>>>>>    Procedure Set ComHasDropShadow Boolean value
76147>>>>>>>>>        Handle hDispatchDriver
76147>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76148>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76149>>>>>>>>>        Set ComProperty of hDispatchDriver 111 OLE_VT_BOOL to value
76150>>>>>>>>>    End_Procedure
76151>>>>>>>>>
76151>>>>>>>>>    // Gets or sets object background color.
76151>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
76153>>>>>>>>>        Handle hDispatchDriver
76153>>>>>>>>>        OLE_COLOR retVal
76153>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76154>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_I4 to retVal
76155>>>>>>>>>        Function_Return retVal
76156>>>>>>>>>    End_Function
76157>>>>>>>>>
76157>>>>>>>>>    // Gets or sets object background color.
76157>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
76159>>>>>>>>>        Handle hDispatchDriver
76159>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76160>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76161>>>>>>>>>        Set ComProperty of hDispatchDriver 112 OLE_VT_I4 to value
76162>>>>>>>>>    End_Procedure
76163>>>>>>>>>
76163>>>>>>>>>    // Gets or sets object border color.
76163>>>>>>>>>    Function ComBorderColor Returns OLE_COLOR
76165>>>>>>>>>        Handle hDispatchDriver
76165>>>>>>>>>        OLE_COLOR retVal
76165>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76166>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 113 OLE_VT_I4 to retVal
76167>>>>>>>>>        Function_Return retVal
76168>>>>>>>>>    End_Function
76169>>>>>>>>>
76169>>>>>>>>>    // Gets or sets object border color.
76169>>>>>>>>>    Procedure Set ComBorderColor OLE_COLOR value
76171>>>>>>>>>        Handle hDispatchDriver
76171>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76172>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76173>>>>>>>>>        Set ComProperty of hDispatchDriver 113 OLE_VT_I4 to value
76174>>>>>>>>>    End_Procedure
76175>>>>>>>>>
76175>>>>>>>>>    // Gets object parent (Section).
76175>>>>>>>>>    Function ComParent Returns Variant
76177>>>>>>>>>        Handle hDispatchDriver
76177>>>>>>>>>        Variant retVal
76177>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76178>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
76179>>>>>>>>>        Function_Return retVal
76180>>>>>>>>>    End_Function
76181>>>>>>>>>
76181>>>>>>>>>    // Gets or sets object visibility.
76181>>>>>>>>>    Function ComSuppress Returns Boolean
76183>>>>>>>>>        Handle hDispatchDriver
76183>>>>>>>>>        Boolean retVal
76183>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76184>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 114 OLE_VT_BOOL to retVal
76185>>>>>>>>>        Function_Return retVal
76186>>>>>>>>>    End_Function
76187>>>>>>>>>
76187>>>>>>>>>    // Gets or sets object visibility.
76187>>>>>>>>>    Procedure Set ComSuppress Boolean value
76189>>>>>>>>>        Handle hDispatchDriver
76189>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76190>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76191>>>>>>>>>        Set ComProperty of hDispatchDriver 114 OLE_VT_BOOL to value
76192>>>>>>>>>    End_Procedure
76193>>>>>>>>>
76193>>>>>>>>>    // Gets or sets close border on page break.
76193>>>>>>>>>    Function ComCloseAtPageBreak Returns Boolean
76195>>>>>>>>>        Handle hDispatchDriver
76195>>>>>>>>>        Boolean retVal
76195>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76196>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 115 OLE_VT_BOOL to retVal
76197>>>>>>>>>        Function_Return retVal
76198>>>>>>>>>    End_Function
76199>>>>>>>>>
76199>>>>>>>>>    // Gets or sets close border on page break.
76199>>>>>>>>>    Procedure Set ComCloseAtPageBreak Boolean value
76201>>>>>>>>>        Handle hDispatchDriver
76201>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76202>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76203>>>>>>>>>        Set ComProperty of hDispatchDriver 115 OLE_VT_BOOL to value
76204>>>>>>>>>    End_Procedure
76205>>>>>>>>>
76205>>>>>>>>>    // Gets or sets keep object together.
76205>>>>>>>>>    Function ComKeepTogether Returns Boolean
76207>>>>>>>>>        Handle hDispatchDriver
76207>>>>>>>>>        Boolean retVal
76207>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76208>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 116 OLE_VT_BOOL to retVal
76209>>>>>>>>>        Function_Return retVal
76210>>>>>>>>>    End_Function
76211>>>>>>>>>
76211>>>>>>>>>    // Gets or sets keep object together.
76211>>>>>>>>>    Procedure Set ComKeepTogether Boolean value
76213>>>>>>>>>        Handle hDispatchDriver
76213>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76214>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76215>>>>>>>>>        Set ComProperty of hDispatchDriver 116 OLE_VT_BOOL to value
76216>>>>>>>>>    End_Procedure
76217>>>>>>>>>
76217>>>>>>>>>    // Gets or sets object text color.
76217>>>>>>>>>    Function ComTextColor Returns OLE_COLOR
76219>>>>>>>>>        Handle hDispatchDriver
76219>>>>>>>>>        OLE_COLOR retVal
76219>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76220>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 117 OLE_VT_I4 to retVal
76221>>>>>>>>>        Function_Return retVal
76222>>>>>>>>>    End_Function
76223>>>>>>>>>
76223>>>>>>>>>    // Gets or sets object text color.
76223>>>>>>>>>    Procedure Set ComTextColor OLE_COLOR value
76225>>>>>>>>>        Handle hDispatchDriver
76225>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76226>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76227>>>>>>>>>        Set ComProperty of hDispatchDriver 117 OLE_VT_I4 to value
76228>>>>>>>>>    End_Procedure
76229>>>>>>>>>
76229>>>>>>>>>    // Gets or sets standard OLE font.
76229>>>>>>>>>    Function ComFont Returns Variant
76231>>>>>>>>>        Handle hDispatchDriver
76231>>>>>>>>>        Variant retVal
76231>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76232>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 118 OLE_VT_DISPATCH to retVal
76233>>>>>>>>>        Function_Return retVal
76234>>>>>>>>>    End_Function
76235>>>>>>>>>
76235>>>>>>>>>    // Gets or sets standard OLE font.
76235>>>>>>>>>    Procedure Set ComFont Variant value
76237>>>>>>>>>        Handle hDispatchDriver
76237>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76238>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76239>>>>>>>>>        Set ComProperty of hDispatchDriver 118 OLE_VT_DISPATCH to value
76240>>>>>>>>>    End_Procedure
76241>>>>>>>>>
76241>>>>>>>>>    // Gets field definition.
76241>>>>>>>>>    Function ComField Returns Variant
76243>>>>>>>>>        Handle hDispatchDriver
76243>>>>>>>>>        Variant retVal
76243>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76244>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 119 OLE_VT_DISPATCH to retVal
76245>>>>>>>>>        Function_Return retVal
76246>>>>>>>>>    End_Function
76247>>>>>>>>>
76247>>>>>>>>>    // Gets or sets horizontal alignment.
76247>>>>>>>>>    Function ComHorAlignment Returns CRAlignment
76249>>>>>>>>>        Handle hDispatchDriver
76249>>>>>>>>>        CRAlignment retVal
76249>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76250>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 120 OLE_VT_I4 to retVal
76251>>>>>>>>>        Function_Return retVal
76252>>>>>>>>>    End_Function
76253>>>>>>>>>
76253>>>>>>>>>    // Gets or sets horizontal alignment.
76253>>>>>>>>>    Procedure Set ComHorAlignment CRAlignment value
76255>>>>>>>>>        Handle hDispatchDriver
76255>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76256>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76257>>>>>>>>>        Set ComProperty of hDispatchDriver 120 OLE_VT_I4 to value
76258>>>>>>>>>    End_Procedure
76259>>>>>>>>>
76259>>>>>>>>>    // Gets field value.
76259>>>>>>>>>    Function ComValue Returns Variant
76261>>>>>>>>>        Handle hDispatchDriver
76261>>>>>>>>>        Variant retVal
76261>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76262>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 121 OLE_VT_VARIANT to retVal
76263>>>>>>>>>        Function_Return retVal
76264>>>>>>>>>    End_Function
76265>>>>>>>>>
76265>>>>>>>>>    // Gets or sets can grow option.
76265>>>>>>>>>    Function ComCanGrow Returns Boolean
76267>>>>>>>>>        Handle hDispatchDriver
76267>>>>>>>>>        Boolean retVal
76267>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76268>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 122 OLE_VT_BOOL to retVal
76269>>>>>>>>>        Function_Return retVal
76270>>>>>>>>>    End_Function
76271>>>>>>>>>
76271>>>>>>>>>    // Gets or sets can grow option.
76271>>>>>>>>>    Procedure Set ComCanGrow Boolean value
76273>>>>>>>>>        Handle hDispatchDriver
76273>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76274>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76275>>>>>>>>>        Set ComProperty of hDispatchDriver 122 OLE_VT_BOOL to value
76276>>>>>>>>>    End_Procedure
76277>>>>>>>>>
76277>>>>>>>>>    // Gets or sets suppress if duplicated option.
76277>>>>>>>>>    Function ComSuppressIfDuplicated Returns Boolean
76279>>>>>>>>>        Handle hDispatchDriver
76279>>>>>>>>>        Boolean retVal
76279>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76280>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 123 OLE_VT_BOOL to retVal
76281>>>>>>>>>        Function_Return retVal
76282>>>>>>>>>    End_Function
76283>>>>>>>>>
76283>>>>>>>>>    // Gets or sets suppress if duplicated option.
76283>>>>>>>>>    Procedure Set ComSuppressIfDuplicated Boolean value
76285>>>>>>>>>        Handle hDispatchDriver
76285>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76286>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76287>>>>>>>>>        Set ComProperty of hDispatchDriver 123 OLE_VT_BOOL to value
76288>>>>>>>>>    End_Procedure
76289>>>>>>>>>
76289>>>>>>>>>    // Gets or sets use system defaults formatting option.
76289>>>>>>>>>    Function ComUseSystemDefaults Returns Boolean
76291>>>>>>>>>        Handle hDispatchDriver
76291>>>>>>>>>        Boolean retVal
76291>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76292>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 125 OLE_VT_BOOL to retVal
76293>>>>>>>>>        Function_Return retVal
76294>>>>>>>>>    End_Function
76295>>>>>>>>>
76295>>>>>>>>>    // Gets or sets use system defaults formatting option.
76295>>>>>>>>>    Procedure Set ComUseSystemDefaults Boolean value
76297>>>>>>>>>        Handle hDispatchDriver
76297>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76298>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76299>>>>>>>>>        Set ComProperty of hDispatchDriver 125 OLE_VT_BOOL to value
76300>>>>>>>>>    End_Procedure
76301>>>>>>>>>
76301>>>>>>>>>    // Gets or sets suppress if zero option.
76301>>>>>>>>>    Function ComSuppressIfZero Returns Boolean
76303>>>>>>>>>        Handle hDispatchDriver
76303>>>>>>>>>        Boolean retVal
76303>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76304>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 124 OLE_VT_BOOL to retVal
76305>>>>>>>>>        Function_Return retVal
76306>>>>>>>>>    End_Function
76307>>>>>>>>>
76307>>>>>>>>>    // Gets or sets suppress if zero option.
76307>>>>>>>>>    Procedure Set ComSuppressIfZero Boolean value
76309>>>>>>>>>        Handle hDispatchDriver
76309>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76310>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76311>>>>>>>>>        Set ComProperty of hDispatchDriver 124 OLE_VT_BOOL to value
76312>>>>>>>>>    End_Procedure
76313>>>>>>>>>
76313>>>>>>>>>    // Gets or sets number negative type.
76313>>>>>>>>>    Function ComNegativeType Returns CRNegativeType
76315>>>>>>>>>        Handle hDispatchDriver
76315>>>>>>>>>        CRNegativeType retVal
76315>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76316>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 126 OLE_VT_I4 to retVal
76317>>>>>>>>>        Function_Return retVal
76318>>>>>>>>>    End_Function
76319>>>>>>>>>
76319>>>>>>>>>    // Gets or sets number negative type.
76319>>>>>>>>>    Procedure Set ComNegativeType CRNegativeType value
76321>>>>>>>>>        Handle hDispatchDriver
76321>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76322>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76323>>>>>>>>>        Set ComProperty of hDispatchDriver 126 OLE_VT_I4 to value
76324>>>>>>>>>    End_Procedure
76325>>>>>>>>>
76325>>>>>>>>>    // Gets or sets enable number thousands separators.
76325>>>>>>>>>    Function ComThousandsSeparators Returns Boolean
76327>>>>>>>>>        Handle hDispatchDriver
76327>>>>>>>>>        Boolean retVal
76327>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76328>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 127 OLE_VT_BOOL to retVal
76329>>>>>>>>>        Function_Return retVal
76330>>>>>>>>>    End_Function
76331>>>>>>>>>
76331>>>>>>>>>    // Gets or sets enable number thousands separators.
76331>>>>>>>>>    Procedure Set ComThousandsSeparators Boolean value
76333>>>>>>>>>        Handle hDispatchDriver
76333>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76334>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76335>>>>>>>>>        Set ComProperty of hDispatchDriver 127 OLE_VT_BOOL to value
76336>>>>>>>>>    End_Procedure
76337>>>>>>>>>
76337>>>>>>>>>    // Gets or sets number uses leading zero option.
76337>>>>>>>>>    Function ComUseLeadingZero Returns Boolean
76339>>>>>>>>>        Handle hDispatchDriver
76339>>>>>>>>>        Boolean retVal
76339>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76340>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 128 OLE_VT_BOOL to retVal
76341>>>>>>>>>        Function_Return retVal
76342>>>>>>>>>    End_Function
76343>>>>>>>>>
76343>>>>>>>>>    // Gets or sets number uses leading zero option.
76343>>>>>>>>>    Procedure Set ComUseLeadingZero Boolean value
76345>>>>>>>>>        Handle hDispatchDriver
76345>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76346>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76347>>>>>>>>>        Set ComProperty of hDispatchDriver 128 OLE_VT_BOOL to value
76348>>>>>>>>>    End_Procedure
76349>>>>>>>>>
76349>>>>>>>>>    // Gets or sets number decimal places.
76349>>>>>>>>>    Function ComDecimalPlaces Returns Short
76351>>>>>>>>>        Handle hDispatchDriver
76351>>>>>>>>>        Short retVal
76351>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76352>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 129 OLE_VT_I2 to retVal
76353>>>>>>>>>        Function_Return retVal
76354>>>>>>>>>    End_Function
76355>>>>>>>>>
76355>>>>>>>>>    // Gets or sets number decimal places.
76355>>>>>>>>>    Procedure Set ComDecimalPlaces Short value
76357>>>>>>>>>        Handle hDispatchDriver
76357>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76358>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76359>>>>>>>>>        Set ComProperty of hDispatchDriver 129 OLE_VT_I2 to value
76360>>>>>>>>>    End_Procedure
76361>>>>>>>>>
76361>>>>>>>>>    // Gets or sets number rounding type.
76361>>>>>>>>>    Function ComRoundingType Returns CRRoundingType
76363>>>>>>>>>        Handle hDispatchDriver
76363>>>>>>>>>        CRRoundingType retVal
76363>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76364>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 130 OLE_VT_I4 to retVal
76365>>>>>>>>>        Function_Return retVal
76366>>>>>>>>>    End_Function
76367>>>>>>>>>
76367>>>>>>>>>    // Gets or sets number rounding type.
76367>>>>>>>>>    Procedure Set ComRoundingType CRRoundingType value
76369>>>>>>>>>        Handle hDispatchDriver
76369>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76370>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76371>>>>>>>>>        Set ComProperty of hDispatchDriver 130 OLE_VT_I4 to value
76372>>>>>>>>>    End_Procedure
76373>>>>>>>>>
76373>>>>>>>>>    // Gets or sets thousand symbol.
76373>>>>>>>>>    Function ComThousandSymbol Returns String
76375>>>>>>>>>        Handle hDispatchDriver
76375>>>>>>>>>        String retVal
76375>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76376>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 131 OLE_VT_BSTR to retVal
76377>>>>>>>>>        Function_Return retVal
76378>>>>>>>>>    End_Function
76379>>>>>>>>>
76379>>>>>>>>>    // Gets or sets thousand symbol.
76379>>>>>>>>>    Procedure Set ComThousandSymbol String value
76381>>>>>>>>>        Handle hDispatchDriver
76381>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76382>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76383>>>>>>>>>        Set ComProperty of hDispatchDriver 131 OLE_VT_BSTR to value
76384>>>>>>>>>    End_Procedure
76385>>>>>>>>>
76385>>>>>>>>>    // Gets or sets decimal symbol.
76385>>>>>>>>>    Function ComDecimalSymbol Returns String
76387>>>>>>>>>        Handle hDispatchDriver
76387>>>>>>>>>        String retVal
76387>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76388>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 132 OLE_VT_BSTR to retVal
76389>>>>>>>>>        Function_Return retVal
76390>>>>>>>>>    End_Function
76391>>>>>>>>>
76391>>>>>>>>>    // Gets or sets decimal symbol.
76391>>>>>>>>>    Procedure Set ComDecimalSymbol String value
76393>>>>>>>>>        Handle hDispatchDriver
76393>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76394>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76395>>>>>>>>>        Set ComProperty of hDispatchDriver 132 OLE_VT_BSTR to value
76396>>>>>>>>>    End_Procedure
76397>>>>>>>>>
76397>>>>>>>>>    // Gets or sets currency symbol type.
76397>>>>>>>>>    Function ComCurrencySymbolType Returns CRCurrencySymbolType
76399>>>>>>>>>        Handle hDispatchDriver
76399>>>>>>>>>        CRCurrencySymbolType retVal
76399>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76400>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 133 OLE_VT_I4 to retVal
76401>>>>>>>>>        Function_Return retVal
76402>>>>>>>>>    End_Function
76403>>>>>>>>>
76403>>>>>>>>>    // Gets or sets currency symbol type.
76403>>>>>>>>>    Procedure Set ComCurrencySymbolType CRCurrencySymbolType value
76405>>>>>>>>>        Handle hDispatchDriver
76405>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76406>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76407>>>>>>>>>        Set ComProperty of hDispatchDriver 133 OLE_VT_I4 to value
76408>>>>>>>>>    End_Procedure
76409>>>>>>>>>
76409>>>>>>>>>    // Gets or sets use one symbol per page option.
76409>>>>>>>>>    Function ComUseOneSymbolPerPage Returns Boolean
76411>>>>>>>>>        Handle hDispatchDriver
76411>>>>>>>>>        Boolean retVal
76411>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76412>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 134 OLE_VT_BOOL to retVal
76413>>>>>>>>>        Function_Return retVal
76414>>>>>>>>>    End_Function
76415>>>>>>>>>
76415>>>>>>>>>    // Gets or sets use one symbol per page option.
76415>>>>>>>>>    Procedure Set ComUseOneSymbolPerPage Boolean value
76417>>>>>>>>>        Handle hDispatchDriver
76417>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76418>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76419>>>>>>>>>        Set ComProperty of hDispatchDriver 134 OLE_VT_BOOL to value
76420>>>>>>>>>    End_Procedure
76421>>>>>>>>>
76421>>>>>>>>>    // Gets or sets currency position type.
76421>>>>>>>>>    Function ComCurrencyPositionType Returns CRCurrencyPositionType
76423>>>>>>>>>        Handle hDispatchDriver
76423>>>>>>>>>        CRCurrencyPositionType retVal
76423>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76424>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 135 OLE_VT_I4 to retVal
76425>>>>>>>>>        Function_Return retVal
76426>>>>>>>>>    End_Function
76427>>>>>>>>>
76427>>>>>>>>>    // Gets or sets currency position type.
76427>>>>>>>>>    Procedure Set ComCurrencyPositionType CRCurrencyPositionType value
76429>>>>>>>>>        Handle hDispatchDriver
76429>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76430>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76431>>>>>>>>>        Set ComProperty of hDispatchDriver 135 OLE_VT_I4 to value
76432>>>>>>>>>    End_Procedure
76433>>>>>>>>>
76433>>>>>>>>>    // Gets or sets currency symbol.
76433>>>>>>>>>    Function ComCurrencySymbol Returns String
76435>>>>>>>>>        Handle hDispatchDriver
76435>>>>>>>>>        String retVal
76435>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76436>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 136 OLE_VT_BSTR to retVal
76437>>>>>>>>>        Function_Return retVal
76438>>>>>>>>>    End_Function
76439>>>>>>>>>
76439>>>>>>>>>    // Gets or sets currency symbol.
76439>>>>>>>>>    Procedure Set ComCurrencySymbol String value
76441>>>>>>>>>        Handle hDispatchDriver
76441>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76442>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76443>>>>>>>>>        Set ComProperty of hDispatchDriver 136 OLE_VT_BSTR to value
76444>>>>>>>>>    End_Procedure
76445>>>>>>>>>
76445>>>>>>>>>    // Gets or sets boolean  output type.
76445>>>>>>>>>    Function ComBooleanOutputType Returns CRBooleanOutputType
76447>>>>>>>>>        Handle hDispatchDriver
76447>>>>>>>>>        CRBooleanOutputType retVal
76447>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76448>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 137 OLE_VT_I4 to retVal
76449>>>>>>>>>        Function_Return retVal
76450>>>>>>>>>    End_Function
76451>>>>>>>>>
76451>>>>>>>>>    // Gets or sets boolean  output type.
76451>>>>>>>>>    Procedure Set ComBooleanOutputType CRBooleanOutputType value
76453>>>>>>>>>        Handle hDispatchDriver
76453>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76454>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76455>>>>>>>>>        Set ComProperty of hDispatchDriver 137 OLE_VT_I4 to value
76456>>>>>>>>>    End_Procedure
76457>>>>>>>>>
76457>>>>>>>>>    // Gets or sets date windows default type.
76457>>>>>>>>>    Function ComDateWindowsDefaultType Returns CRDateWindowsDefaultType
76459>>>>>>>>>        Handle hDispatchDriver
76459>>>>>>>>>        CRDateWindowsDefaultType retVal
76459>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76460>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 138 OLE_VT_I4 to retVal
76461>>>>>>>>>        Function_Return retVal
76462>>>>>>>>>    End_Function
76463>>>>>>>>>
76463>>>>>>>>>    // Gets or sets date windows default type.
76463>>>>>>>>>    Procedure Set ComDateWindowsDefaultType CRDateWindowsDefaultType value
76465>>>>>>>>>        Handle hDispatchDriver
76465>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76466>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76467>>>>>>>>>        Set ComProperty of hDispatchDriver 138 OLE_VT_I4 to value
76468>>>>>>>>>    End_Procedure
76469>>>>>>>>>
76469>>>>>>>>>    // Gets or sets date order.
76469>>>>>>>>>    Function ComDateOrder Returns CRDateOrder
76471>>>>>>>>>        Handle hDispatchDriver
76471>>>>>>>>>        CRDateOrder retVal
76471>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76472>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 139 OLE_VT_I4 to retVal
76473>>>>>>>>>        Function_Return retVal
76474>>>>>>>>>    End_Function
76475>>>>>>>>>
76475>>>>>>>>>    // Gets or sets date order.
76475>>>>>>>>>    Procedure Set ComDateOrder CRDateOrder value
76477>>>>>>>>>        Handle hDispatchDriver
76477>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76478>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76479>>>>>>>>>        Set ComProperty of hDispatchDriver 139 OLE_VT_I4 to value
76480>>>>>>>>>    End_Procedure
76481>>>>>>>>>
76481>>>>>>>>>    // Gets or sets year type.
76481>>>>>>>>>    Function ComYearType Returns CRYearType
76483>>>>>>>>>        Handle hDispatchDriver
76483>>>>>>>>>        CRYearType retVal
76483>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76484>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 140 OLE_VT_I4 to retVal
76485>>>>>>>>>        Function_Return retVal
76486>>>>>>>>>    End_Function
76487>>>>>>>>>
76487>>>>>>>>>    // Gets or sets year type.
76487>>>>>>>>>    Procedure Set ComYearType CRYearType value
76489>>>>>>>>>        Handle hDispatchDriver
76489>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76490>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76491>>>>>>>>>        Set ComProperty of hDispatchDriver 140 OLE_VT_I4 to value
76492>>>>>>>>>    End_Procedure
76493>>>>>>>>>
76493>>>>>>>>>    // Gets or sets month type.
76493>>>>>>>>>    Function ComMonthType Returns CRMonthType
76495>>>>>>>>>        Handle hDispatchDriver
76495>>>>>>>>>        CRMonthType retVal
76495>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76496>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 141 OLE_VT_I4 to retVal
76497>>>>>>>>>        Function_Return retVal
76498>>>>>>>>>    End_Function
76499>>>>>>>>>
76499>>>>>>>>>    // Gets or sets month type.
76499>>>>>>>>>    Procedure Set ComMonthType CRMonthType value
76501>>>>>>>>>        Handle hDispatchDriver
76501>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76502>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76503>>>>>>>>>        Set ComProperty of hDispatchDriver 141 OLE_VT_I4 to value
76504>>>>>>>>>    End_Procedure
76505>>>>>>>>>
76505>>>>>>>>>    // Gets or sets day type.
76505>>>>>>>>>    Function ComDayType Returns CRDayType
76507>>>>>>>>>        Handle hDispatchDriver
76507>>>>>>>>>        CRDayType retVal
76507>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76508>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 142 OLE_VT_I4 to retVal
76509>>>>>>>>>        Function_Return retVal
76510>>>>>>>>>    End_Function
76511>>>>>>>>>
76511>>>>>>>>>    // Gets or sets day type.
76511>>>>>>>>>    Procedure Set ComDayType CRDayType value
76513>>>>>>>>>        Handle hDispatchDriver
76513>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76514>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76515>>>>>>>>>        Set ComProperty of hDispatchDriver 142 OLE_VT_I4 to value
76516>>>>>>>>>    End_Procedure
76517>>>>>>>>>
76517>>>>>>>>>    // Gets or sets leading day type.
76517>>>>>>>>>    Function ComLeadingDayType Returns CRLeadingDayType
76519>>>>>>>>>        Handle hDispatchDriver
76519>>>>>>>>>        CRLeadingDayType retVal
76519>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76520>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 143 OLE_VT_I4 to retVal
76521>>>>>>>>>        Function_Return retVal
76522>>>>>>>>>    End_Function
76523>>>>>>>>>
76523>>>>>>>>>    // Gets or sets leading day type.
76523>>>>>>>>>    Procedure Set ComLeadingDayType CRLeadingDayType value
76525>>>>>>>>>        Handle hDispatchDriver
76525>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76526>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76527>>>>>>>>>        Set ComProperty of hDispatchDriver 143 OLE_VT_I4 to value
76528>>>>>>>>>    End_Procedure
76529>>>>>>>>>
76529>>>>>>>>>    // Gets or sets leading day separator.
76529>>>>>>>>>    Function ComLeadingDaySeparator Returns String
76531>>>>>>>>>        Handle hDispatchDriver
76531>>>>>>>>>        String retVal
76531>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76532>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 144 OLE_VT_BSTR to retVal
76533>>>>>>>>>        Function_Return retVal
76534>>>>>>>>>    End_Function
76535>>>>>>>>>
76535>>>>>>>>>    // Gets or sets leading day separator.
76535>>>>>>>>>    Procedure Set ComLeadingDaySeparator String value
76537>>>>>>>>>        Handle hDispatchDriver
76537>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76538>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76539>>>>>>>>>        Set ComProperty of hDispatchDriver 144 OLE_VT_BSTR to value
76540>>>>>>>>>    End_Procedure
76541>>>>>>>>>
76541>>>>>>>>>    // Gets or sets date first separator.
76541>>>>>>>>>    Function ComDateFirstSeparator Returns String
76543>>>>>>>>>        Handle hDispatchDriver
76543>>>>>>>>>        String retVal
76543>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76544>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 145 OLE_VT_BSTR to retVal
76545>>>>>>>>>        Function_Return retVal
76546>>>>>>>>>    End_Function
76547>>>>>>>>>
76547>>>>>>>>>    // Gets or sets date first separator.
76547>>>>>>>>>    Procedure Set ComDateFirstSeparator String value
76549>>>>>>>>>        Handle hDispatchDriver
76549>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76550>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76551>>>>>>>>>        Set ComProperty of hDispatchDriver 145 OLE_VT_BSTR to value
76552>>>>>>>>>    End_Procedure
76553>>>>>>>>>
76553>>>>>>>>>    // Gets or sets date second separator.
76553>>>>>>>>>    Function ComDateSecondSeparator Returns String
76555>>>>>>>>>        Handle hDispatchDriver
76555>>>>>>>>>        String retVal
76555>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76556>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 146 OLE_VT_BSTR to retVal
76557>>>>>>>>>        Function_Return retVal
76558>>>>>>>>>    End_Function
76559>>>>>>>>>
76559>>>>>>>>>    // Gets or sets date second separator.
76559>>>>>>>>>    Procedure Set ComDateSecondSeparator String value
76561>>>>>>>>>        Handle hDispatchDriver
76561>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76562>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76563>>>>>>>>>        Set ComProperty of hDispatchDriver 146 OLE_VT_BSTR to value
76564>>>>>>>>>    End_Procedure
76565>>>>>>>>>
76565>>>>>>>>>    // Gets or sets time base.
76565>>>>>>>>>    Function ComTimeBase Returns CRTimeBase
76567>>>>>>>>>        Handle hDispatchDriver
76567>>>>>>>>>        CRTimeBase retVal
76567>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76568>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 147 OLE_VT_I4 to retVal
76569>>>>>>>>>        Function_Return retVal
76570>>>>>>>>>    End_Function
76571>>>>>>>>>
76571>>>>>>>>>    // Gets or sets time base.
76571>>>>>>>>>    Procedure Set ComTimeBase CRTimeBase value
76573>>>>>>>>>        Handle hDispatchDriver
76573>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76574>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76575>>>>>>>>>        Set ComProperty of hDispatchDriver 147 OLE_VT_I4 to value
76576>>>>>>>>>    End_Procedure
76577>>>>>>>>>
76577>>>>>>>>>    // Gets or sets AM/PM type.
76577>>>>>>>>>    Function ComAmPmType Returns CRAmPmType
76579>>>>>>>>>        Handle hDispatchDriver
76579>>>>>>>>>        CRAmPmType retVal
76579>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76580>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 148 OLE_VT_I4 to retVal
76581>>>>>>>>>        Function_Return retVal
76582>>>>>>>>>    End_Function
76583>>>>>>>>>
76583>>>>>>>>>    // Gets or sets AM/PM type.
76583>>>>>>>>>    Procedure Set ComAmPmType CRAmPmType value
76585>>>>>>>>>        Handle hDispatchDriver
76585>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76586>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76587>>>>>>>>>        Set ComProperty of hDispatchDriver 148 OLE_VT_I4 to value
76588>>>>>>>>>    End_Procedure
76589>>>>>>>>>
76589>>>>>>>>>    // Gets or sets hour type.
76589>>>>>>>>>    Function ComHourType Returns CRHourType
76591>>>>>>>>>        Handle hDispatchDriver
76591>>>>>>>>>        CRHourType retVal
76591>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76592>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 149 OLE_VT_I4 to retVal
76593>>>>>>>>>        Function_Return retVal
76594>>>>>>>>>    End_Function
76595>>>>>>>>>
76595>>>>>>>>>    // Gets or sets hour type.
76595>>>>>>>>>    Procedure Set ComHourType CRHourType value
76597>>>>>>>>>        Handle hDispatchDriver
76597>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76598>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76599>>>>>>>>>        Set ComProperty of hDispatchDriver 149 OLE_VT_I4 to value
76600>>>>>>>>>    End_Procedure
76601>>>>>>>>>
76601>>>>>>>>>    // Gets or sets minute type.
76601>>>>>>>>>    Function ComMinuteType Returns CRMinuteType
76603>>>>>>>>>        Handle hDispatchDriver
76603>>>>>>>>>        CRMinuteType retVal
76603>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76604>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 150 OLE_VT_I4 to retVal
76605>>>>>>>>>        Function_Return retVal
76606>>>>>>>>>    End_Function
76607>>>>>>>>>
76607>>>>>>>>>    // Gets or sets minute type.
76607>>>>>>>>>    Procedure Set ComMinuteType CRMinuteType value
76609>>>>>>>>>        Handle hDispatchDriver
76609>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76610>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76611>>>>>>>>>        Set ComProperty of hDispatchDriver 150 OLE_VT_I4 to value
76612>>>>>>>>>    End_Procedure
76613>>>>>>>>>
76613>>>>>>>>>    // Gets or sets second type.
76613>>>>>>>>>    Function ComSecondType Returns CRSecondType
76615>>>>>>>>>        Handle hDispatchDriver
76615>>>>>>>>>        CRSecondType retVal
76615>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76616>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 151 OLE_VT_I4 to retVal
76617>>>>>>>>>        Function_Return retVal
76618>>>>>>>>>    End_Function
76619>>>>>>>>>
76619>>>>>>>>>    // Gets or sets second type.
76619>>>>>>>>>    Procedure Set ComSecondType CRSecondType value
76621>>>>>>>>>        Handle hDispatchDriver
76621>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76622>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76623>>>>>>>>>        Set ComProperty of hDispatchDriver 151 OLE_VT_I4 to value
76624>>>>>>>>>    End_Procedure
76625>>>>>>>>>
76625>>>>>>>>>    // Gets or sets PM string.
76625>>>>>>>>>    Function ComPmString Returns String
76627>>>>>>>>>        Handle hDispatchDriver
76627>>>>>>>>>        String retVal
76627>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76628>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 152 OLE_VT_BSTR to retVal
76629>>>>>>>>>        Function_Return retVal
76630>>>>>>>>>    End_Function
76631>>>>>>>>>
76631>>>>>>>>>    // Gets or sets PM string.
76631>>>>>>>>>    Procedure Set ComPmString String value
76633>>>>>>>>>        Handle hDispatchDriver
76633>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76634>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76635>>>>>>>>>        Set ComProperty of hDispatchDriver 152 OLE_VT_BSTR to value
76636>>>>>>>>>    End_Procedure
76637>>>>>>>>>
76637>>>>>>>>>    // Gets or sets AM string.
76637>>>>>>>>>    Function ComAmString Returns String
76639>>>>>>>>>        Handle hDispatchDriver
76639>>>>>>>>>        String retVal
76639>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76640>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 153 OLE_VT_BSTR to retVal
76641>>>>>>>>>        Function_Return retVal
76642>>>>>>>>>    End_Function
76643>>>>>>>>>
76643>>>>>>>>>    // Gets or sets AM string.
76643>>>>>>>>>    Procedure Set ComAmString String value
76645>>>>>>>>>        Handle hDispatchDriver
76645>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76646>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76647>>>>>>>>>        Set ComProperty of hDispatchDriver 153 OLE_VT_BSTR to value
76648>>>>>>>>>    End_Procedure
76649>>>>>>>>>
76649>>>>>>>>>    // Gets or sets minute second separator.
76649>>>>>>>>>    Function ComMinuteSecondSeparator Returns String
76651>>>>>>>>>        Handle hDispatchDriver
76651>>>>>>>>>        String retVal
76651>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76652>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 154 OLE_VT_BSTR to retVal
76653>>>>>>>>>        Function_Return retVal
76654>>>>>>>>>    End_Function
76655>>>>>>>>>
76655>>>>>>>>>    // Gets or sets minute second separator.
76655>>>>>>>>>    Procedure Set ComMinuteSecondSeparator String value
76657>>>>>>>>>        Handle hDispatchDriver
76657>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76658>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76659>>>>>>>>>        Set ComProperty of hDispatchDriver 154 OLE_VT_BSTR to value
76660>>>>>>>>>    End_Procedure
76661>>>>>>>>>
76661>>>>>>>>>    // Gets or sets hour minute separator.
76661>>>>>>>>>    Function ComHourMinuteSeparator Returns String
76663>>>>>>>>>        Handle hDispatchDriver
76663>>>>>>>>>        String retVal
76663>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76664>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 155 OLE_VT_BSTR to retVal
76665>>>>>>>>>        Function_Return retVal
76666>>>>>>>>>    End_Function
76667>>>>>>>>>
76667>>>>>>>>>    // Gets or sets hour minute separator.
76667>>>>>>>>>    Procedure Set ComHourMinuteSeparator String value
76669>>>>>>>>>        Handle hDispatchDriver
76669>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76670>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76671>>>>>>>>>        Set ComProperty of hDispatchDriver 155 OLE_VT_BSTR to value
76672>>>>>>>>>    End_Procedure
76673>>>>>>>>>
76673>>>>>>>>>    // Gets or sets max of number of line for string memo field.
76673>>>>>>>>>    Function ComMaxNumberOfLines Returns Short
76675>>>>>>>>>        Handle hDispatchDriver
76675>>>>>>>>>        Short retVal
76675>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76676>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 156 OLE_VT_I2 to retVal
76677>>>>>>>>>        Function_Return retVal
76678>>>>>>>>>    End_Function
76679>>>>>>>>>
76679>>>>>>>>>    // Gets or sets max of number of line for string memo field.
76679>>>>>>>>>    Procedure Set ComMaxNumberOfLines Short value
76681>>>>>>>>>        Handle hDispatchDriver
76681>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76682>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76683>>>>>>>>>        Set ComProperty of hDispatchDriver 156 OLE_VT_I2 to value
76684>>>>>>>>>    End_Procedure
76685>>>>>>>>>
76685>>>>>>>>>    // Gets field previous value.
76685>>>>>>>>>    Function ComPreviousValue Returns Variant
76687>>>>>>>>>        Handle hDispatchDriver
76687>>>>>>>>>        Variant retVal
76687>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76688>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 290 OLE_VT_VARIANT to retVal
76689>>>>>>>>>        Function_Return retVal
76690>>>>>>>>>    End_Function
76691>>>>>>>>>
76691>>>>>>>>>    // Gets field next value.
76691>>>>>>>>>    Function ComNextValue Returns Variant
76693>>>>>>>>>        Handle hDispatchDriver
76693>>>>>>>>>        Variant retVal
76693>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76694>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 291 OLE_VT_VARIANT to retVal
76695>>>>>>>>>        Function_Return retVal
76696>>>>>>>>>    End_Function
76697>>>>>>>>>
76697>>>>>>>>>    // Gets or sets leading day position type.
76697>>>>>>>>>    Function ComLeadingDayPosition Returns CRLeadingDayPosition
76699>>>>>>>>>        Handle hDispatchDriver
76699>>>>>>>>>        CRLeadingDayPosition retVal
76699>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76700>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 399 OLE_VT_I4 to retVal
76701>>>>>>>>>        Function_Return retVal
76702>>>>>>>>>    End_Function
76703>>>>>>>>>
76703>>>>>>>>>    // Gets or sets leading day position type.
76703>>>>>>>>>    Procedure Set ComLeadingDayPosition CRLeadingDayPosition value
76705>>>>>>>>>        Handle hDispatchDriver
76705>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76706>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76707>>>>>>>>>        Set ComProperty of hDispatchDriver 399 OLE_VT_I4 to value
76708>>>>>>>>>    End_Procedure
76709>>>>>>>>>
76709>>>>>>>>>    // Gets or sets date era type.
76709>>>>>>>>>    Function ComDateEraType Returns CRDateEraType
76711>>>>>>>>>        Handle hDispatchDriver
76711>>>>>>>>>        CRDateEraType retVal
76711>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76712>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 400 OLE_VT_I4 to retVal
76713>>>>>>>>>        Function_Return retVal
76714>>>>>>>>>    End_Function
76715>>>>>>>>>
76715>>>>>>>>>    // Gets or sets date era type.
76715>>>>>>>>>    Procedure Set ComDateEraType CRDateEraType value
76717>>>>>>>>>        Handle hDispatchDriver
76717>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76718>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76719>>>>>>>>>        Set ComProperty of hDispatchDriver 400 OLE_VT_I4 to value
76720>>>>>>>>>    End_Procedure
76721>>>>>>>>>
76721>>>>>>>>>    // Gets or sets date calendar type.
76721>>>>>>>>>    Function ComDateCalendarType Returns CRDateCalendarType
76723>>>>>>>>>        Handle hDispatchDriver
76723>>>>>>>>>        CRDateCalendarType retVal
76723>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76724>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 401 OLE_VT_I4 to retVal
76725>>>>>>>>>        Function_Return retVal
76726>>>>>>>>>    End_Function
76727>>>>>>>>>
76727>>>>>>>>>    // Gets or sets date calendar type.
76727>>>>>>>>>    Procedure Set ComDateCalendarType CRDateCalendarType value
76729>>>>>>>>>        Handle hDispatchDriver
76729>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76730>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76731>>>>>>>>>        Set ComProperty of hDispatchDriver 401 OLE_VT_I4 to value
76732>>>>>>>>>    End_Procedure
76733>>>>>>>>>
76733>>>>>>>>>    // Gets or sets date prefix separator.
76733>>>>>>>>>    Function ComDatePrefixSeparator Returns String
76735>>>>>>>>>        Handle hDispatchDriver
76735>>>>>>>>>        String retVal
76735>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76736>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 402 OLE_VT_BSTR to retVal
76737>>>>>>>>>        Function_Return retVal
76738>>>>>>>>>    End_Function
76739>>>>>>>>>
76739>>>>>>>>>    // Gets or sets date prefix separator.
76739>>>>>>>>>    Procedure Set ComDatePrefixSeparator String value
76741>>>>>>>>>        Handle hDispatchDriver
76741>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76742>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76743>>>>>>>>>        Set ComProperty of hDispatchDriver 402 OLE_VT_BSTR to value
76744>>>>>>>>>    End_Procedure
76745>>>>>>>>>
76745>>>>>>>>>    // Gets or sets date suffix separator.
76745>>>>>>>>>    Function ComDateSuffixSeparator Returns String
76747>>>>>>>>>        Handle hDispatchDriver
76747>>>>>>>>>        String retVal
76747>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76748>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 403 OLE_VT_BSTR to retVal
76749>>>>>>>>>        Function_Return retVal
76750>>>>>>>>>    End_Function
76751>>>>>>>>>
76751>>>>>>>>>    // Gets or sets date suffix separator.
76751>>>>>>>>>    Procedure Set ComDateSuffixSeparator String value
76753>>>>>>>>>        Handle hDispatchDriver
76753>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76754>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76755>>>>>>>>>        Set ComProperty of hDispatchDriver 403 OLE_VT_BSTR to value
76756>>>>>>>>>    End_Procedure
76757>>>>>>>>>
76757>>>>>>>>>    // Sets unbound field formula text
76757>>>>>>>>>    Procedure ComSetUnboundFieldSource String llpUnboundFieldSource
76759>>>>>>>>>        Handle hDispatchDriver
76759>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76760>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76761>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpUnboundFieldSource
76762>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 474 OLE_VT_VOID
76763>>>>>>>>>    End_Procedure
76764>>>>>>>>>
76764>>>>>>>>>    // Gets or sets reverse sign option.
76764>>>>>>>>>    Function ComDisplayReverseSign Returns Boolean
76766>>>>>>>>>        Handle hDispatchDriver
76766>>>>>>>>>        Boolean retVal
76766>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76767>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 497 OLE_VT_BOOL to retVal
76768>>>>>>>>>        Function_Return retVal
76769>>>>>>>>>    End_Function
76770>>>>>>>>>
76770>>>>>>>>>    // Gets or sets reverse sign option.
76770>>>>>>>>>    Procedure Set ComDisplayReverseSign Boolean value
76772>>>>>>>>>        Handle hDispatchDriver
76772>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76773>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76774>>>>>>>>>        Set ComProperty of hDispatchDriver 497 OLE_VT_BOOL to value
76775>>>>>>>>>    End_Procedure
76776>>>>>>>>>
76776>>>>>>>>>    // Gets or sets zero value string for number field format.
76776>>>>>>>>>    Function ComZeroValueString Returns String
76778>>>>>>>>>        Handle hDispatchDriver
76778>>>>>>>>>        String retVal
76778>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76779>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 498 OLE_VT_BSTR to retVal
76780>>>>>>>>>        Function_Return retVal
76781>>>>>>>>>    End_Function
76782>>>>>>>>>
76782>>>>>>>>>    // Gets or sets zero value string for number field format.
76782>>>>>>>>>    Procedure Set ComZeroValueString String value
76784>>>>>>>>>        Handle hDispatchDriver
76784>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76785>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76786>>>>>>>>>        Set ComProperty of hDispatchDriver 498 OLE_VT_BSTR to value
76787>>>>>>>>>    End_Procedure
76788>>>>>>>>>
76788>>>>>>>>>    // Gets or sets character spacing.
76788>>>>>>>>>    Function ComCharacterSpacing Returns Integer
76790>>>>>>>>>        Handle hDispatchDriver
76790>>>>>>>>>        Integer retVal
76790>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76791>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 499 OLE_VT_I4 to retVal
76792>>>>>>>>>        Function_Return retVal
76793>>>>>>>>>    End_Function
76794>>>>>>>>>
76794>>>>>>>>>    // Gets or sets character spacing.
76794>>>>>>>>>    Procedure Set ComCharacterSpacing Integer value
76796>>>>>>>>>        Handle hDispatchDriver
76796>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76797>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76798>>>>>>>>>        Set ComProperty of hDispatchDriver 499 OLE_VT_I4 to value
76799>>>>>>>>>    End_Procedure
76800>>>>>>>>>
76800>>>>>>>>>    // Gets or sets line spacing.
76800>>>>>>>>>    Function ComLineSpacing Returns Real
76802>>>>>>>>>        Handle hDispatchDriver
76802>>>>>>>>>        Real retVal
76802>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76803>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 500 OLE_VT_R8 to retVal
76804>>>>>>>>>        Function_Return retVal
76805>>>>>>>>>    End_Function
76806>>>>>>>>>
76806>>>>>>>>>    // Gets or sets line spacing type.
76806>>>>>>>>>    Function ComLineSpacingType Returns CRLineSpacingType
76808>>>>>>>>>        Handle hDispatchDriver
76808>>>>>>>>>        CRLineSpacingType retVal
76808>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76809>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 501 OLE_VT_I4 to retVal
76810>>>>>>>>>        Function_Return retVal
76811>>>>>>>>>    End_Function
76812>>>>>>>>>
76812>>>>>>>>>    // Sets line spacing type and line spacing.
76812>>>>>>>>>    Procedure ComSetLineSpacing Real llLineSpacing CRLineSpacingType llLineSpacingType
76814>>>>>>>>>        Handle hDispatchDriver
76814>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76815>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
76816>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_R8 llLineSpacing
76817>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLineSpacingType
76818>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 503 OLE_VT_VOID
76819>>>>>>>>>    End_Procedure
76820>>>>>>>>>
76820>>>>>>>>>    // Gets or sets text rotation angle.
76820>>>>>>>>>    Function ComTextRotationAngle Returns CRRotationAngle
76822>>>>>>>>>        Handle hDispatchDriver
76822>>>>>>>>>        CRRotationAngle retVal
76822>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76823>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 502 OLE_VT_I4 to retVal
76824>>>>>>>>>        Function_Return retVal
76825>>>>>>>>>    End_Function
76826>>>>>>>>>
76826>>>>>>>>>    // Gets or sets text rotation angle.
76826>>>>>>>>>    Procedure Set ComTextRotationAngle CRRotationAngle value
76828>>>>>>>>>        Handle hDispatchDriver
76828>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76829>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76830>>>>>>>>>        Set ComProperty of hDispatchDriver 502 OLE_VT_I4 to value
76831>>>>>>>>>    End_Procedure
76832>>>>>>>>>
76832>>>>>>>>>    // Gets or sets first line indent.
76832>>>>>>>>>    Function ComFirstLineIndent Returns Integer
76834>>>>>>>>>        Handle hDispatchDriver
76834>>>>>>>>>        Integer retVal
76834>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76835>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 504 OLE_VT_I4 to retVal
76836>>>>>>>>>        Function_Return retVal
76837>>>>>>>>>    End_Function
76838>>>>>>>>>
76838>>>>>>>>>    // Gets or sets first line indent.
76838>>>>>>>>>    Procedure Set ComFirstLineIndent Integer value
76840>>>>>>>>>        Handle hDispatchDriver
76840>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76841>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76842>>>>>>>>>        Set ComProperty of hDispatchDriver 504 OLE_VT_I4 to value
76843>>>>>>>>>    End_Procedure
76844>>>>>>>>>
76844>>>>>>>>>    // Gets or sets left indent.
76844>>>>>>>>>    Function ComLeftIndent Returns Integer
76846>>>>>>>>>        Handle hDispatchDriver
76846>>>>>>>>>        Integer retVal
76846>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76847>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 505 OLE_VT_I4 to retVal
76848>>>>>>>>>        Function_Return retVal
76849>>>>>>>>>    End_Function
76850>>>>>>>>>
76850>>>>>>>>>    // Gets or sets left indent.
76850>>>>>>>>>    Procedure Set ComLeftIndent Integer value
76852>>>>>>>>>        Handle hDispatchDriver
76852>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76853>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76854>>>>>>>>>        Set ComProperty of hDispatchDriver 505 OLE_VT_I4 to value
76855>>>>>>>>>    End_Procedure
76856>>>>>>>>>
76856>>>>>>>>>    // Gets or sets right indent.
76856>>>>>>>>>    Function ComRightIndent Returns Integer
76858>>>>>>>>>        Handle hDispatchDriver
76858>>>>>>>>>        Integer retVal
76858>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76859>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 506 OLE_VT_I4 to retVal
76860>>>>>>>>>        Function_Return retVal
76861>>>>>>>>>    End_Function
76862>>>>>>>>>
76862>>>>>>>>>    // Gets or sets right indent.
76862>>>>>>>>>    Procedure Set ComRightIndent Integer value
76864>>>>>>>>>        Handle hDispatchDriver
76864>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76865>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76866>>>>>>>>>        Set ComProperty of hDispatchDriver 506 OLE_VT_I4 to value
76867>>>>>>>>>    End_Procedure
76868>>>>>>>>>
76868>>>>>>>>>    // Gets or sets text format option for string memo field.
76868>>>>>>>>>    Function ComTextFormat Returns CRTextFormat
76870>>>>>>>>>        Handle hDispatchDriver
76870>>>>>>>>>        CRTextFormat retVal
76870>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76871>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 507 OLE_VT_I4 to retVal
76872>>>>>>>>>        Function_Return retVal
76873>>>>>>>>>    End_Function
76874>>>>>>>>>
76874>>>>>>>>>    // Gets or sets text format option for string memo field.
76874>>>>>>>>>    Procedure Set ComTextFormat CRTextFormat value
76876>>>>>>>>>        Handle hDispatchDriver
76876>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76877>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76878>>>>>>>>>        Set ComProperty of hDispatchDriver 507 OLE_VT_I4 to value
76879>>>>>>>>>    End_Procedure
76880>>>>>>>>>
76880>>>>>>>>>    // Gets or sets conditional formula.
76880>>>>>>>>>    Function ComConditionFormula Variant llFormulaType Returns String
76882>>>>>>>>>        Handle hDispatchDriver
76882>>>>>>>>>        String retVal
76882>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76883>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76884>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
76885>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 760 OLE_VT_BSTR to retVal
76886>>>>>>>>>        Function_Return retVal
76887>>>>>>>>>    End_Function
76888>>>>>>>>>
76888>>>>>>>>>    // Gets or sets conditional formula.
76888>>>>>>>>>    Procedure Set ComConditionFormula Variant llFormulaType String value
76890>>>>>>>>>        Handle hDispatchDriver
76890>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76891>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
76892>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
76893>>>>>>>>>        Set ComProperty of hDispatchDriver 760 OLE_VT_BSTR to value
76894>>>>>>>>>    End_Procedure
76895>>>>>>>>>
76895>>>>>>>>>    // Gets or sets CSS class.
76895>>>>>>>>>    Function ComCssClass Returns String
76897>>>>>>>>>        Handle hDispatchDriver
76897>>>>>>>>>        String retVal
76897>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76898>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 549 OLE_VT_BSTR to retVal
76899>>>>>>>>>        Function_Return retVal
76900>>>>>>>>>    End_Function
76901>>>>>>>>>
76901>>>>>>>>>    // Gets or sets CSS class.
76901>>>>>>>>>    Procedure Set ComCssClass String value
76903>>>>>>>>>        Handle hDispatchDriver
76903>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76904>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76905>>>>>>>>>        Set ComProperty of hDispatchDriver 549 OLE_VT_BSTR to value
76906>>>>>>>>>    End_Procedure
76907>>>>>>>>>
76907>>>>>>>>>    // Gets or sets hyperlink type.
76907>>>>>>>>>    Function ComHyperlinkType Returns CRHyperlinkType
76909>>>>>>>>>        Handle hDispatchDriver
76909>>>>>>>>>        CRHyperlinkType retVal
76909>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76910>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 901 OLE_VT_I4 to retVal
76911>>>>>>>>>        Function_Return retVal
76912>>>>>>>>>    End_Function
76913>>>>>>>>>
76913>>>>>>>>>    // Gets or sets hyperlink type.
76913>>>>>>>>>    Procedure Set ComHyperlinkType CRHyperlinkType value
76915>>>>>>>>>        Handle hDispatchDriver
76915>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76916>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76917>>>>>>>>>        Set ComProperty of hDispatchDriver 901 OLE_VT_I4 to value
76918>>>>>>>>>    End_Procedure
76919>>>>>>>>>
76919>>>>>>>>>    // Gets or sets hyperlink text.
76919>>>>>>>>>    Function ComHyperlinkText Returns String
76921>>>>>>>>>        Handle hDispatchDriver
76921>>>>>>>>>        String retVal
76921>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76922>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 902 OLE_VT_BSTR to retVal
76923>>>>>>>>>        Function_Return retVal
76924>>>>>>>>>    End_Function
76925>>>>>>>>>
76925>>>>>>>>>    // Gets or sets hyperlink text.
76925>>>>>>>>>    Procedure Set ComHyperlinkText String value
76927>>>>>>>>>        Handle hDispatchDriver
76927>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76928>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76929>>>>>>>>>        Set ComProperty of hDispatchDriver 902 OLE_VT_BSTR to value
76930>>>>>>>>>    End_Procedure
76931>>>>>>>>>End_Class
76932>>>>>>>>>
76932>>>>>>>>>// CoClass
76932>>>>>>>>>// CLSID: {49147C15-4E4B-429E-B00A-B95CC65E31AF}
76932>>>>>>>>>Class cCrystalFieldObject is a cComAutomationObject
76933>>>>>>>>>    Import_Class_Protocol cCrystalIFieldObject
76934>>>>>>>>>
76934>>>>>>>>>    Procedure Construct_Object
76936>>>>>>>>>        Forward Send Construct_Object
76938>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
76939>>>>>>>>>    End_Procedure
76940>>>>>>>>>End_Class
76941>>>>>>>>>
76941>>>>>>>>>// CLSID: {AF37680C-6120-4E28-96DD-63FD2DC27B7A}
76941>>>>>>>>>Class cCrystalITextObject is a Mixin
76942>>>>>>>>>
76942>>>>>>>>>    // Gets or sets object name.
76942>>>>>>>>>    Function ComName Returns String
76944>>>>>>>>>        Handle hDispatchDriver
76944>>>>>>>>>        String retVal
76944>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76945>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
76946>>>>>>>>>        Function_Return retVal
76947>>>>>>>>>    End_Function
76948>>>>>>>>>
76948>>>>>>>>>    // Gets or sets object name.
76948>>>>>>>>>    Procedure Set ComName String value
76950>>>>>>>>>        Handle hDispatchDriver
76950>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76951>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76952>>>>>>>>>        Set ComProperty of hDispatchDriver -800 OLE_VT_BSTR to value
76953>>>>>>>>>    End_Procedure
76954>>>>>>>>>
76954>>>>>>>>>    // Gets report object kind.
76954>>>>>>>>>    Function ComKind Returns CRObjectKind
76956>>>>>>>>>        Handle hDispatchDriver
76956>>>>>>>>>        CRObjectKind retVal
76956>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76957>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
76958>>>>>>>>>        Function_Return retVal
76959>>>>>>>>>    End_Function
76960>>>>>>>>>
76960>>>>>>>>>    // Gets or sets object upper left position (twips).
76960>>>>>>>>>    Function ComLeft Returns Integer
76962>>>>>>>>>        Handle hDispatchDriver
76962>>>>>>>>>        Integer retVal
76962>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76963>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_I4 to retVal
76964>>>>>>>>>        Function_Return retVal
76965>>>>>>>>>    End_Function
76966>>>>>>>>>
76966>>>>>>>>>    // Gets or sets object upper left position (twips).
76966>>>>>>>>>    Procedure Set ComLeft Integer value
76968>>>>>>>>>        Handle hDispatchDriver
76968>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76969>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76970>>>>>>>>>        Set ComProperty of hDispatchDriver 102 OLE_VT_I4 to value
76971>>>>>>>>>    End_Procedure
76972>>>>>>>>>
76972>>>>>>>>>    // Gets or sets object upper top position (twips).
76972>>>>>>>>>    Function ComTop Returns Integer
76974>>>>>>>>>        Handle hDispatchDriver
76974>>>>>>>>>        Integer retVal
76974>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76975>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_I4 to retVal
76976>>>>>>>>>        Function_Return retVal
76977>>>>>>>>>    End_Function
76978>>>>>>>>>
76978>>>>>>>>>    // Gets or sets object upper top position (twips).
76978>>>>>>>>>    Procedure Set ComTop Integer value
76980>>>>>>>>>        Handle hDispatchDriver
76980>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76981>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76982>>>>>>>>>        Set ComProperty of hDispatchDriver 103 OLE_VT_I4 to value
76983>>>>>>>>>    End_Procedure
76984>>>>>>>>>
76984>>>>>>>>>    // Gets or sets object width (twips).
76984>>>>>>>>>    Function ComWidth Returns Integer
76986>>>>>>>>>        Handle hDispatchDriver
76986>>>>>>>>>        Integer retVal
76986>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76987>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
76988>>>>>>>>>        Function_Return retVal
76989>>>>>>>>>    End_Function
76990>>>>>>>>>
76990>>>>>>>>>    // Gets or sets object width (twips).
76990>>>>>>>>>    Procedure Set ComWidth Integer value
76992>>>>>>>>>        Handle hDispatchDriver
76992>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76993>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
76994>>>>>>>>>        Set ComProperty of hDispatchDriver 104 OLE_VT_I4 to value
76995>>>>>>>>>    End_Procedure
76996>>>>>>>>>
76996>>>>>>>>>    // Gets or sets object height (twips).
76996>>>>>>>>>    Function ComHeight Returns Integer
76998>>>>>>>>>        Handle hDispatchDriver
76998>>>>>>>>>        Integer retVal
76998>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
76999>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_I4 to retVal
77000>>>>>>>>>        Function_Return retVal
77001>>>>>>>>>    End_Function
77002>>>>>>>>>
77002>>>>>>>>>    // Gets or sets object height (twips).
77002>>>>>>>>>    Procedure Set ComHeight Integer value
77004>>>>>>>>>        Handle hDispatchDriver
77004>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77005>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77006>>>>>>>>>        Set ComProperty of hDispatchDriver 105 OLE_VT_I4 to value
77007>>>>>>>>>    End_Procedure
77008>>>>>>>>>
77008>>>>>>>>>    // Gets or sets left line style.
77008>>>>>>>>>    Function ComLeftLineStyle Returns CRLineStyle
77010>>>>>>>>>        Handle hDispatchDriver
77010>>>>>>>>>        CRLineStyle retVal
77010>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77011>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_I4 to retVal
77012>>>>>>>>>        Function_Return retVal
77013>>>>>>>>>    End_Function
77014>>>>>>>>>
77014>>>>>>>>>    // Gets or sets left line style.
77014>>>>>>>>>    Procedure Set ComLeftLineStyle CRLineStyle value
77016>>>>>>>>>        Handle hDispatchDriver
77016>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77017>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77018>>>>>>>>>        Set ComProperty of hDispatchDriver 106 OLE_VT_I4 to value
77019>>>>>>>>>    End_Procedure
77020>>>>>>>>>
77020>>>>>>>>>    // Gets or sets right line style.
77020>>>>>>>>>    Function ComRightLineStyle Returns CRLineStyle
77022>>>>>>>>>        Handle hDispatchDriver
77022>>>>>>>>>        CRLineStyle retVal
77022>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77023>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 107 OLE_VT_I4 to retVal
77024>>>>>>>>>        Function_Return retVal
77025>>>>>>>>>    End_Function
77026>>>>>>>>>
77026>>>>>>>>>    // Gets or sets right line style.
77026>>>>>>>>>    Procedure Set ComRightLineStyle CRLineStyle value
77028>>>>>>>>>        Handle hDispatchDriver
77028>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77029>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77030>>>>>>>>>        Set ComProperty of hDispatchDriver 107 OLE_VT_I4 to value
77031>>>>>>>>>    End_Procedure
77032>>>>>>>>>
77032>>>>>>>>>    // Gets or sets top line style.
77032>>>>>>>>>    Function ComTopLineStyle Returns CRLineStyle
77034>>>>>>>>>        Handle hDispatchDriver
77034>>>>>>>>>        CRLineStyle retVal
77034>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77035>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_I4 to retVal
77036>>>>>>>>>        Function_Return retVal
77037>>>>>>>>>    End_Function
77038>>>>>>>>>
77038>>>>>>>>>    // Gets or sets top line style.
77038>>>>>>>>>    Procedure Set ComTopLineStyle CRLineStyle value
77040>>>>>>>>>        Handle hDispatchDriver
77040>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77041>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77042>>>>>>>>>        Set ComProperty of hDispatchDriver 108 OLE_VT_I4 to value
77043>>>>>>>>>    End_Procedure
77044>>>>>>>>>
77044>>>>>>>>>    // Gets or sets bottom line style.
77044>>>>>>>>>    Function ComBottomLineStyle Returns CRLineStyle
77046>>>>>>>>>        Handle hDispatchDriver
77046>>>>>>>>>        CRLineStyle retVal
77046>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77047>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 109 OLE_VT_I4 to retVal
77048>>>>>>>>>        Function_Return retVal
77049>>>>>>>>>    End_Function
77050>>>>>>>>>
77050>>>>>>>>>    // Gets or sets bottom line style.
77050>>>>>>>>>    Procedure Set ComBottomLineStyle CRLineStyle value
77052>>>>>>>>>        Handle hDispatchDriver
77052>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77053>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77054>>>>>>>>>        Set ComProperty of hDispatchDriver 109 OLE_VT_I4 to value
77055>>>>>>>>>    End_Procedure
77056>>>>>>>>>
77056>>>>>>>>>    // Gets or sets border drop shadow.
77056>>>>>>>>>    Function ComHasDropShadow Returns Boolean
77058>>>>>>>>>        Handle hDispatchDriver
77058>>>>>>>>>        Boolean retVal
77058>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77059>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_BOOL to retVal
77060>>>>>>>>>        Function_Return retVal
77061>>>>>>>>>    End_Function
77062>>>>>>>>>
77062>>>>>>>>>    // Gets or sets border drop shadow.
77062>>>>>>>>>    Procedure Set ComHasDropShadow Boolean value
77064>>>>>>>>>        Handle hDispatchDriver
77064>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77065>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77066>>>>>>>>>        Set ComProperty of hDispatchDriver 111 OLE_VT_BOOL to value
77067>>>>>>>>>    End_Procedure
77068>>>>>>>>>
77068>>>>>>>>>    // Gets or sets object background color.
77068>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
77070>>>>>>>>>        Handle hDispatchDriver
77070>>>>>>>>>        OLE_COLOR retVal
77070>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77071>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_I4 to retVal
77072>>>>>>>>>        Function_Return retVal
77073>>>>>>>>>    End_Function
77074>>>>>>>>>
77074>>>>>>>>>    // Gets or sets object background color.
77074>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
77076>>>>>>>>>        Handle hDispatchDriver
77076>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77077>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77078>>>>>>>>>        Set ComProperty of hDispatchDriver 112 OLE_VT_I4 to value
77079>>>>>>>>>    End_Procedure
77080>>>>>>>>>
77080>>>>>>>>>    // Gets or sets object border color.
77080>>>>>>>>>    Function ComBorderColor Returns OLE_COLOR
77082>>>>>>>>>        Handle hDispatchDriver
77082>>>>>>>>>        OLE_COLOR retVal
77082>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77083>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 113 OLE_VT_I4 to retVal
77084>>>>>>>>>        Function_Return retVal
77085>>>>>>>>>    End_Function
77086>>>>>>>>>
77086>>>>>>>>>    // Gets or sets object border color.
77086>>>>>>>>>    Procedure Set ComBorderColor OLE_COLOR value
77088>>>>>>>>>        Handle hDispatchDriver
77088>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77089>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77090>>>>>>>>>        Set ComProperty of hDispatchDriver 113 OLE_VT_I4 to value
77091>>>>>>>>>    End_Procedure
77092>>>>>>>>>
77092>>>>>>>>>    // Gets object parent (Section).
77092>>>>>>>>>    Function ComParent Returns Variant
77094>>>>>>>>>        Handle hDispatchDriver
77094>>>>>>>>>        Variant retVal
77094>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77095>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
77096>>>>>>>>>        Function_Return retVal
77097>>>>>>>>>    End_Function
77098>>>>>>>>>
77098>>>>>>>>>    // Gets or sets object visibility.
77098>>>>>>>>>    Function ComSuppress Returns Boolean
77100>>>>>>>>>        Handle hDispatchDriver
77100>>>>>>>>>        Boolean retVal
77100>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77101>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 114 OLE_VT_BOOL to retVal
77102>>>>>>>>>        Function_Return retVal
77103>>>>>>>>>    End_Function
77104>>>>>>>>>
77104>>>>>>>>>    // Gets or sets object visibility.
77104>>>>>>>>>    Procedure Set ComSuppress Boolean value
77106>>>>>>>>>        Handle hDispatchDriver
77106>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77107>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77108>>>>>>>>>        Set ComProperty of hDispatchDriver 114 OLE_VT_BOOL to value
77109>>>>>>>>>    End_Procedure
77110>>>>>>>>>
77110>>>>>>>>>    // Gets or sets close border on page break.
77110>>>>>>>>>    Function ComCloseAtPageBreak Returns Boolean
77112>>>>>>>>>        Handle hDispatchDriver
77112>>>>>>>>>        Boolean retVal
77112>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77113>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 115 OLE_VT_BOOL to retVal
77114>>>>>>>>>        Function_Return retVal
77115>>>>>>>>>    End_Function
77116>>>>>>>>>
77116>>>>>>>>>    // Gets or sets close border on page break.
77116>>>>>>>>>    Procedure Set ComCloseAtPageBreak Boolean value
77118>>>>>>>>>        Handle hDispatchDriver
77118>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77119>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77120>>>>>>>>>        Set ComProperty of hDispatchDriver 115 OLE_VT_BOOL to value
77121>>>>>>>>>    End_Procedure
77122>>>>>>>>>
77122>>>>>>>>>    // Gets or sets keep object together.
77122>>>>>>>>>    Function ComKeepTogether Returns Boolean
77124>>>>>>>>>        Handle hDispatchDriver
77124>>>>>>>>>        Boolean retVal
77124>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77125>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 116 OLE_VT_BOOL to retVal
77126>>>>>>>>>        Function_Return retVal
77127>>>>>>>>>    End_Function
77128>>>>>>>>>
77128>>>>>>>>>    // Gets or sets keep object together.
77128>>>>>>>>>    Procedure Set ComKeepTogether Boolean value
77130>>>>>>>>>        Handle hDispatchDriver
77130>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77131>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77132>>>>>>>>>        Set ComProperty of hDispatchDriver 116 OLE_VT_BOOL to value
77133>>>>>>>>>    End_Procedure
77134>>>>>>>>>
77134>>>>>>>>>    // Gets or sets object text color.
77134>>>>>>>>>    Function ComTextColor Returns OLE_COLOR
77136>>>>>>>>>        Handle hDispatchDriver
77136>>>>>>>>>        OLE_COLOR retVal
77136>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77137>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 117 OLE_VT_I4 to retVal
77138>>>>>>>>>        Function_Return retVal
77139>>>>>>>>>    End_Function
77140>>>>>>>>>
77140>>>>>>>>>    // Gets or sets object text color.
77140>>>>>>>>>    Procedure Set ComTextColor OLE_COLOR value
77142>>>>>>>>>        Handle hDispatchDriver
77142>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77143>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77144>>>>>>>>>        Set ComProperty of hDispatchDriver 117 OLE_VT_I4 to value
77145>>>>>>>>>    End_Procedure
77146>>>>>>>>>
77146>>>>>>>>>    // Gets or sets standard OLE font.
77146>>>>>>>>>    Function ComFont Returns Variant
77148>>>>>>>>>        Handle hDispatchDriver
77148>>>>>>>>>        Variant retVal
77148>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77149>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 118 OLE_VT_DISPATCH to retVal
77150>>>>>>>>>        Function_Return retVal
77151>>>>>>>>>    End_Function
77152>>>>>>>>>
77152>>>>>>>>>    // Gets or sets standard OLE font.
77152>>>>>>>>>    Procedure Set ComFont Variant value
77154>>>>>>>>>        Handle hDispatchDriver
77154>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77155>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77156>>>>>>>>>        Set ComProperty of hDispatchDriver 118 OLE_VT_DISPATCH to value
77157>>>>>>>>>    End_Procedure
77158>>>>>>>>>
77158>>>>>>>>>    // Gets whole text string.
77158>>>>>>>>>    Function ComText Returns String
77160>>>>>>>>>        Handle hDispatchDriver
77160>>>>>>>>>        String retVal
77160>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77161>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 157 OLE_VT_BSTR to retVal
77162>>>>>>>>>        Function_Return retVal
77163>>>>>>>>>    End_Function
77164>>>>>>>>>
77164>>>>>>>>>    // Gets or sets horizontal alignment.
77164>>>>>>>>>    Function ComHorAlignment Returns CRAlignment
77166>>>>>>>>>        Handle hDispatchDriver
77166>>>>>>>>>        CRAlignment retVal
77166>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77167>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 120 OLE_VT_I4 to retVal
77168>>>>>>>>>        Function_Return retVal
77169>>>>>>>>>    End_Function
77170>>>>>>>>>
77170>>>>>>>>>    // Gets or sets horizontal alignment.
77170>>>>>>>>>    Procedure Set ComHorAlignment CRAlignment value
77172>>>>>>>>>        Handle hDispatchDriver
77172>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77173>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77174>>>>>>>>>        Set ComProperty of hDispatchDriver 120 OLE_VT_I4 to value
77175>>>>>>>>>    End_Procedure
77176>>>>>>>>>
77176>>>>>>>>>    // Gets or sets suppress if duplicated option.
77176>>>>>>>>>    Function ComSuppressIfDuplicated Returns Boolean
77178>>>>>>>>>        Handle hDispatchDriver
77178>>>>>>>>>        Boolean retVal
77178>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77179>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 123 OLE_VT_BOOL to retVal
77180>>>>>>>>>        Function_Return retVal
77181>>>>>>>>>    End_Function
77182>>>>>>>>>
77182>>>>>>>>>    // Gets or sets suppress if duplicated option.
77182>>>>>>>>>    Procedure Set ComSuppressIfDuplicated Boolean value
77184>>>>>>>>>        Handle hDispatchDriver
77184>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77185>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77186>>>>>>>>>        Set ComProperty of hDispatchDriver 123 OLE_VT_BOOL to value
77187>>>>>>>>>    End_Procedure
77188>>>>>>>>>
77188>>>>>>>>>    // Gets or sets max of number of line option.
77188>>>>>>>>>    Function ComMaxNumberOfLines Returns Short
77190>>>>>>>>>        Handle hDispatchDriver
77190>>>>>>>>>        Short retVal
77190>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77191>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 156 OLE_VT_I2 to retVal
77192>>>>>>>>>        Function_Return retVal
77193>>>>>>>>>    End_Function
77194>>>>>>>>>
77194>>>>>>>>>    // Gets or sets max of number of line option.
77194>>>>>>>>>    Procedure Set ComMaxNumberOfLines Short value
77196>>>>>>>>>        Handle hDispatchDriver
77196>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77197>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77198>>>>>>>>>        Set ComProperty of hDispatchDriver 156 OLE_VT_I2 to value
77199>>>>>>>>>    End_Procedure
77200>>>>>>>>>
77200>>>>>>>>>    // Gets or sets can grow option.
77200>>>>>>>>>    Function ComCanGrow Returns Boolean
77202>>>>>>>>>        Handle hDispatchDriver
77202>>>>>>>>>        Boolean retVal
77202>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77203>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 122 OLE_VT_BOOL to retVal
77204>>>>>>>>>        Function_Return retVal
77205>>>>>>>>>    End_Function
77206>>>>>>>>>
77206>>>>>>>>>    // Gets or sets can grow option.
77206>>>>>>>>>    Procedure Set ComCanGrow Boolean value
77208>>>>>>>>>        Handle hDispatchDriver
77208>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77209>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77210>>>>>>>>>        Set ComProperty of hDispatchDriver 122 OLE_VT_BOOL to value
77211>>>>>>>>>    End_Procedure
77212>>>>>>>>>
77212>>>>>>>>>    // Sets text object text to be the specified text.
77212>>>>>>>>>    Procedure ComSetText String llpText
77214>>>>>>>>>        Handle hDispatchDriver
77214>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77215>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77216>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpText
77217>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 236 OLE_VT_VOID
77218>>>>>>>>>    End_Procedure
77219>>>>>>>>>
77219>>>>>>>>>    // Gets or sets character spacing.
77219>>>>>>>>>    Function ComCharacterSpacing Returns Integer
77221>>>>>>>>>        Handle hDispatchDriver
77221>>>>>>>>>        Integer retVal
77221>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77222>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 499 OLE_VT_I4 to retVal
77223>>>>>>>>>        Function_Return retVal
77224>>>>>>>>>    End_Function
77225>>>>>>>>>
77225>>>>>>>>>    // Gets or sets character spacing.
77225>>>>>>>>>    Procedure Set ComCharacterSpacing Integer value
77227>>>>>>>>>        Handle hDispatchDriver
77227>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77228>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77229>>>>>>>>>        Set ComProperty of hDispatchDriver 499 OLE_VT_I4 to value
77230>>>>>>>>>    End_Procedure
77231>>>>>>>>>
77231>>>>>>>>>    // Gets line spacing.
77231>>>>>>>>>    Function ComLineSpacing Returns Real
77233>>>>>>>>>        Handle hDispatchDriver
77233>>>>>>>>>        Real retVal
77233>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77234>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 500 OLE_VT_R8 to retVal
77235>>>>>>>>>        Function_Return retVal
77236>>>>>>>>>    End_Function
77237>>>>>>>>>
77237>>>>>>>>>    // Gets line spacing type.
77237>>>>>>>>>    Function ComLineSpacingType Returns CRLineSpacingType
77239>>>>>>>>>        Handle hDispatchDriver
77239>>>>>>>>>        CRLineSpacingType retVal
77239>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77240>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 501 OLE_VT_I4 to retVal
77241>>>>>>>>>        Function_Return retVal
77242>>>>>>>>>    End_Function
77243>>>>>>>>>
77243>>>>>>>>>    // Sets line spacing type and line spacing.
77243>>>>>>>>>    Procedure ComSetLineSpacing Real llLineSpacing CRLineSpacingType llLineSpacingType
77245>>>>>>>>>        Handle hDispatchDriver
77245>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77246>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
77247>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_R8 llLineSpacing
77248>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLineSpacingType
77249>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 503 OLE_VT_VOID
77250>>>>>>>>>    End_Procedure
77251>>>>>>>>>
77251>>>>>>>>>    // Gets or sets text rotation angle.
77251>>>>>>>>>    Function ComTextRotationAngle Returns CRRotationAngle
77253>>>>>>>>>        Handle hDispatchDriver
77253>>>>>>>>>        CRRotationAngle retVal
77253>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77254>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 502 OLE_VT_I4 to retVal
77255>>>>>>>>>        Function_Return retVal
77256>>>>>>>>>    End_Function
77257>>>>>>>>>
77257>>>>>>>>>    // Gets or sets text rotation angle.
77257>>>>>>>>>    Procedure Set ComTextRotationAngle CRRotationAngle value
77259>>>>>>>>>        Handle hDispatchDriver
77259>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77260>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77261>>>>>>>>>        Set ComProperty of hDispatchDriver 502 OLE_VT_I4 to value
77262>>>>>>>>>    End_Procedure
77263>>>>>>>>>
77263>>>>>>>>>    // Gets or sets first line indent.
77263>>>>>>>>>    Function ComFirstLineIndent Returns Integer
77265>>>>>>>>>        Handle hDispatchDriver
77265>>>>>>>>>        Integer retVal
77265>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77266>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 504 OLE_VT_I4 to retVal
77267>>>>>>>>>        Function_Return retVal
77268>>>>>>>>>    End_Function
77269>>>>>>>>>
77269>>>>>>>>>    // Gets or sets first line indent.
77269>>>>>>>>>    Procedure Set ComFirstLineIndent Integer value
77271>>>>>>>>>        Handle hDispatchDriver
77271>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77272>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77273>>>>>>>>>        Set ComProperty of hDispatchDriver 504 OLE_VT_I4 to value
77274>>>>>>>>>    End_Procedure
77275>>>>>>>>>
77275>>>>>>>>>    // Gets or sets left indent.
77275>>>>>>>>>    Function ComLeftIndent Returns Integer
77277>>>>>>>>>        Handle hDispatchDriver
77277>>>>>>>>>        Integer retVal
77277>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77278>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 505 OLE_VT_I4 to retVal
77279>>>>>>>>>        Function_Return retVal
77280>>>>>>>>>    End_Function
77281>>>>>>>>>
77281>>>>>>>>>    // Gets or sets left indent.
77281>>>>>>>>>    Procedure Set ComLeftIndent Integer value
77283>>>>>>>>>        Handle hDispatchDriver
77283>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77284>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77285>>>>>>>>>        Set ComProperty of hDispatchDriver 505 OLE_VT_I4 to value
77286>>>>>>>>>    End_Procedure
77287>>>>>>>>>
77287>>>>>>>>>    // Gets or sets right indent.
77287>>>>>>>>>    Function ComRightIndent Returns Integer
77289>>>>>>>>>        Handle hDispatchDriver
77289>>>>>>>>>        Integer retVal
77289>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77290>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 506 OLE_VT_I4 to retVal
77291>>>>>>>>>        Function_Return retVal
77292>>>>>>>>>    End_Function
77293>>>>>>>>>
77293>>>>>>>>>    // Gets or sets right indent.
77293>>>>>>>>>    Procedure Set ComRightIndent Integer value
77295>>>>>>>>>        Handle hDispatchDriver
77295>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77296>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77297>>>>>>>>>        Set ComProperty of hDispatchDriver 506 OLE_VT_I4 to value
77298>>>>>>>>>    End_Procedure
77299>>>>>>>>>
77299>>>>>>>>>    // Gets or sets conditional formula.
77299>>>>>>>>>    Function ComConditionFormula Variant llFormulaType Returns String
77301>>>>>>>>>        Handle hDispatchDriver
77301>>>>>>>>>        String retVal
77301>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77302>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77303>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
77304>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 760 OLE_VT_BSTR to retVal
77305>>>>>>>>>        Function_Return retVal
77306>>>>>>>>>    End_Function
77307>>>>>>>>>
77307>>>>>>>>>    // Gets or sets conditional formula.
77307>>>>>>>>>    Procedure Set ComConditionFormula Variant llFormulaType String value
77309>>>>>>>>>        Handle hDispatchDriver
77309>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77310>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
77311>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
77312>>>>>>>>>        Set ComProperty of hDispatchDriver 760 OLE_VT_BSTR to value
77313>>>>>>>>>    End_Procedure
77314>>>>>>>>>
77314>>>>>>>>>    // Gets or sets embedded field elements.
77314>>>>>>>>>    Function ComFieldElements Returns Variant
77316>>>>>>>>>        Handle hDispatchDriver
77316>>>>>>>>>        Variant retVal
77316>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77317>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 765 OLE_VT_DISPATCH to retVal
77318>>>>>>>>>        Function_Return retVal
77319>>>>>>>>>    End_Function
77320>>>>>>>>>
77320>>>>>>>>>    // Gets or sets CSS class.
77320>>>>>>>>>    Function ComCssClass Returns String
77322>>>>>>>>>        Handle hDispatchDriver
77322>>>>>>>>>        String retVal
77322>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77323>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 549 OLE_VT_BSTR to retVal
77324>>>>>>>>>        Function_Return retVal
77325>>>>>>>>>    End_Function
77326>>>>>>>>>
77326>>>>>>>>>    // Gets or sets CSS class.
77326>>>>>>>>>    Procedure Set ComCssClass String value
77328>>>>>>>>>        Handle hDispatchDriver
77328>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77329>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77330>>>>>>>>>        Set ComProperty of hDispatchDriver 549 OLE_VT_BSTR to value
77331>>>>>>>>>    End_Procedure
77332>>>>>>>>>
77332>>>>>>>>>    // Gets or sets hyperlink type.
77332>>>>>>>>>    Function ComHyperlinkType Returns CRHyperlinkType
77334>>>>>>>>>        Handle hDispatchDriver
77334>>>>>>>>>        CRHyperlinkType retVal
77334>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77335>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 901 OLE_VT_I4 to retVal
77336>>>>>>>>>        Function_Return retVal
77337>>>>>>>>>    End_Function
77338>>>>>>>>>
77338>>>>>>>>>    // Gets or sets hyperlink type.
77338>>>>>>>>>    Procedure Set ComHyperlinkType CRHyperlinkType value
77340>>>>>>>>>        Handle hDispatchDriver
77340>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77341>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77342>>>>>>>>>        Set ComProperty of hDispatchDriver 901 OLE_VT_I4 to value
77343>>>>>>>>>    End_Procedure
77344>>>>>>>>>
77344>>>>>>>>>    // Gets or sets hyperlink text.
77344>>>>>>>>>    Function ComHyperlinkText Returns String
77346>>>>>>>>>        Handle hDispatchDriver
77346>>>>>>>>>        String retVal
77346>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77347>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 902 OLE_VT_BSTR to retVal
77348>>>>>>>>>        Function_Return retVal
77349>>>>>>>>>    End_Function
77350>>>>>>>>>
77350>>>>>>>>>    // Gets or sets hyperlink text.
77350>>>>>>>>>    Procedure Set ComHyperlinkText String value
77352>>>>>>>>>        Handle hDispatchDriver
77352>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77353>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77354>>>>>>>>>        Set ComProperty of hDispatchDriver 902 OLE_VT_BSTR to value
77355>>>>>>>>>    End_Procedure
77356>>>>>>>>>End_Class
77357>>>>>>>>>
77357>>>>>>>>>// CoClass
77357>>>>>>>>>// CLSID: {559967D6-3C42-4C00-AF81-205923EE88B5}
77357>>>>>>>>>Class cCrystalTextObject is a cComAutomationObject
77358>>>>>>>>>    Import_Class_Protocol cCrystalITextObject
77359>>>>>>>>>
77359>>>>>>>>>    Procedure Construct_Object
77361>>>>>>>>>        Forward Send Construct_Object
77363>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
77364>>>>>>>>>    End_Procedure
77365>>>>>>>>>End_Class
77366>>>>>>>>>
77366>>>>>>>>>// CLSID: {AF376810-6120-4E28-96DD-63FD2DC27B7A}
77366>>>>>>>>>Class cCrystalISubreportObject is a Mixin
77367>>>>>>>>>
77367>>>>>>>>>    // Gets or sets object name.
77367>>>>>>>>>    Function ComName Returns String
77369>>>>>>>>>        Handle hDispatchDriver
77369>>>>>>>>>        String retVal
77369>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77370>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
77371>>>>>>>>>        Function_Return retVal
77372>>>>>>>>>    End_Function
77373>>>>>>>>>
77373>>>>>>>>>    // Gets or sets object name.
77373>>>>>>>>>    Procedure Set ComName String value
77375>>>>>>>>>        Handle hDispatchDriver
77375>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77376>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77377>>>>>>>>>        Set ComProperty of hDispatchDriver -800 OLE_VT_BSTR to value
77378>>>>>>>>>    End_Procedure
77379>>>>>>>>>
77379>>>>>>>>>    // Gets report object kind.
77379>>>>>>>>>    Function ComKind Returns CRObjectKind
77381>>>>>>>>>        Handle hDispatchDriver
77381>>>>>>>>>        CRObjectKind retVal
77381>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77382>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
77383>>>>>>>>>        Function_Return retVal
77384>>>>>>>>>    End_Function
77385>>>>>>>>>
77385>>>>>>>>>    // Gets or sets object upper left position (twips).
77385>>>>>>>>>    Function ComLeft Returns Integer
77387>>>>>>>>>        Handle hDispatchDriver
77387>>>>>>>>>        Integer retVal
77387>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77388>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_I4 to retVal
77389>>>>>>>>>        Function_Return retVal
77390>>>>>>>>>    End_Function
77391>>>>>>>>>
77391>>>>>>>>>    // Gets or sets object upper left position (twips).
77391>>>>>>>>>    Procedure Set ComLeft Integer value
77393>>>>>>>>>        Handle hDispatchDriver
77393>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77394>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77395>>>>>>>>>        Set ComProperty of hDispatchDriver 102 OLE_VT_I4 to value
77396>>>>>>>>>    End_Procedure
77397>>>>>>>>>
77397>>>>>>>>>    // Gets or sets object upper top position (twips).
77397>>>>>>>>>    Function ComTop Returns Integer
77399>>>>>>>>>        Handle hDispatchDriver
77399>>>>>>>>>        Integer retVal
77399>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77400>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_I4 to retVal
77401>>>>>>>>>        Function_Return retVal
77402>>>>>>>>>    End_Function
77403>>>>>>>>>
77403>>>>>>>>>    // Gets or sets object upper top position (twips).
77403>>>>>>>>>    Procedure Set ComTop Integer value
77405>>>>>>>>>        Handle hDispatchDriver
77405>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77406>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77407>>>>>>>>>        Set ComProperty of hDispatchDriver 103 OLE_VT_I4 to value
77408>>>>>>>>>    End_Procedure
77409>>>>>>>>>
77409>>>>>>>>>    // Gets or sets object width (twips).
77409>>>>>>>>>    Function ComWidth Returns Integer
77411>>>>>>>>>        Handle hDispatchDriver
77411>>>>>>>>>        Integer retVal
77411>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77412>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
77413>>>>>>>>>        Function_Return retVal
77414>>>>>>>>>    End_Function
77415>>>>>>>>>
77415>>>>>>>>>    // Gets or sets object width (twips).
77415>>>>>>>>>    Procedure Set ComWidth Integer value
77417>>>>>>>>>        Handle hDispatchDriver
77417>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77418>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77419>>>>>>>>>        Set ComProperty of hDispatchDriver 104 OLE_VT_I4 to value
77420>>>>>>>>>    End_Procedure
77421>>>>>>>>>
77421>>>>>>>>>    // Gets or sets object height (twips).
77421>>>>>>>>>    Function ComHeight Returns Integer
77423>>>>>>>>>        Handle hDispatchDriver
77423>>>>>>>>>        Integer retVal
77423>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77424>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_I4 to retVal
77425>>>>>>>>>        Function_Return retVal
77426>>>>>>>>>    End_Function
77427>>>>>>>>>
77427>>>>>>>>>    // Gets or sets object height (twips).
77427>>>>>>>>>    Procedure Set ComHeight Integer value
77429>>>>>>>>>        Handle hDispatchDriver
77429>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77430>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77431>>>>>>>>>        Set ComProperty of hDispatchDriver 105 OLE_VT_I4 to value
77432>>>>>>>>>    End_Procedure
77433>>>>>>>>>
77433>>>>>>>>>    // Gets or sets left line style.
77433>>>>>>>>>    Function ComLeftLineStyle Returns CRLineStyle
77435>>>>>>>>>        Handle hDispatchDriver
77435>>>>>>>>>        CRLineStyle retVal
77435>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77436>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_I4 to retVal
77437>>>>>>>>>        Function_Return retVal
77438>>>>>>>>>    End_Function
77439>>>>>>>>>
77439>>>>>>>>>    // Gets or sets left line style.
77439>>>>>>>>>    Procedure Set ComLeftLineStyle CRLineStyle value
77441>>>>>>>>>        Handle hDispatchDriver
77441>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77442>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77443>>>>>>>>>        Set ComProperty of hDispatchDriver 106 OLE_VT_I4 to value
77444>>>>>>>>>    End_Procedure
77445>>>>>>>>>
77445>>>>>>>>>    // Gets or sets right line style.
77445>>>>>>>>>    Function ComRightLineStyle Returns CRLineStyle
77447>>>>>>>>>        Handle hDispatchDriver
77447>>>>>>>>>        CRLineStyle retVal
77447>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77448>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 107 OLE_VT_I4 to retVal
77449>>>>>>>>>        Function_Return retVal
77450>>>>>>>>>    End_Function
77451>>>>>>>>>
77451>>>>>>>>>    // Gets or sets right line style.
77451>>>>>>>>>    Procedure Set ComRightLineStyle CRLineStyle value
77453>>>>>>>>>        Handle hDispatchDriver
77453>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77454>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77455>>>>>>>>>        Set ComProperty of hDispatchDriver 107 OLE_VT_I4 to value
77456>>>>>>>>>    End_Procedure
77457>>>>>>>>>
77457>>>>>>>>>    // Gets or sets top line style.
77457>>>>>>>>>    Function ComTopLineStyle Returns CRLineStyle
77459>>>>>>>>>        Handle hDispatchDriver
77459>>>>>>>>>        CRLineStyle retVal
77459>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77460>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_I4 to retVal
77461>>>>>>>>>        Function_Return retVal
77462>>>>>>>>>    End_Function
77463>>>>>>>>>
77463>>>>>>>>>    // Gets or sets top line style.
77463>>>>>>>>>    Procedure Set ComTopLineStyle CRLineStyle value
77465>>>>>>>>>        Handle hDispatchDriver
77465>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77466>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77467>>>>>>>>>        Set ComProperty of hDispatchDriver 108 OLE_VT_I4 to value
77468>>>>>>>>>    End_Procedure
77469>>>>>>>>>
77469>>>>>>>>>    // Gets or sets bottom line style.
77469>>>>>>>>>    Function ComBottomLineStyle Returns CRLineStyle
77471>>>>>>>>>        Handle hDispatchDriver
77471>>>>>>>>>        CRLineStyle retVal
77471>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77472>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 109 OLE_VT_I4 to retVal
77473>>>>>>>>>        Function_Return retVal
77474>>>>>>>>>    End_Function
77475>>>>>>>>>
77475>>>>>>>>>    // Gets or sets bottom line style.
77475>>>>>>>>>    Procedure Set ComBottomLineStyle CRLineStyle value
77477>>>>>>>>>        Handle hDispatchDriver
77477>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77478>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77479>>>>>>>>>        Set ComProperty of hDispatchDriver 109 OLE_VT_I4 to value
77480>>>>>>>>>    End_Procedure
77481>>>>>>>>>
77481>>>>>>>>>    // Gets or sets border drop shadow.
77481>>>>>>>>>    Function ComHasDropShadow Returns Boolean
77483>>>>>>>>>        Handle hDispatchDriver
77483>>>>>>>>>        Boolean retVal
77483>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77484>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_BOOL to retVal
77485>>>>>>>>>        Function_Return retVal
77486>>>>>>>>>    End_Function
77487>>>>>>>>>
77487>>>>>>>>>    // Gets or sets border drop shadow.
77487>>>>>>>>>    Procedure Set ComHasDropShadow Boolean value
77489>>>>>>>>>        Handle hDispatchDriver
77489>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77490>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77491>>>>>>>>>        Set ComProperty of hDispatchDriver 111 OLE_VT_BOOL to value
77492>>>>>>>>>    End_Procedure
77493>>>>>>>>>
77493>>>>>>>>>    // Gets or sets object background color.
77493>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
77495>>>>>>>>>        Handle hDispatchDriver
77495>>>>>>>>>        OLE_COLOR retVal
77495>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77496>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_I4 to retVal
77497>>>>>>>>>        Function_Return retVal
77498>>>>>>>>>    End_Function
77499>>>>>>>>>
77499>>>>>>>>>    // Gets or sets object background color.
77499>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
77501>>>>>>>>>        Handle hDispatchDriver
77501>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77502>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77503>>>>>>>>>        Set ComProperty of hDispatchDriver 112 OLE_VT_I4 to value
77504>>>>>>>>>    End_Procedure
77505>>>>>>>>>
77505>>>>>>>>>    // Gets or sets object border color.
77505>>>>>>>>>    Function ComBorderColor Returns OLE_COLOR
77507>>>>>>>>>        Handle hDispatchDriver
77507>>>>>>>>>        OLE_COLOR retVal
77507>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77508>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 113 OLE_VT_I4 to retVal
77509>>>>>>>>>        Function_Return retVal
77510>>>>>>>>>    End_Function
77511>>>>>>>>>
77511>>>>>>>>>    // Gets or sets object border color.
77511>>>>>>>>>    Procedure Set ComBorderColor OLE_COLOR value
77513>>>>>>>>>        Handle hDispatchDriver
77513>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77514>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77515>>>>>>>>>        Set ComProperty of hDispatchDriver 113 OLE_VT_I4 to value
77516>>>>>>>>>    End_Procedure
77517>>>>>>>>>
77517>>>>>>>>>    // Gets object parent (Section).
77517>>>>>>>>>    Function ComParent Returns Variant
77519>>>>>>>>>        Handle hDispatchDriver
77519>>>>>>>>>        Variant retVal
77519>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77520>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
77521>>>>>>>>>        Function_Return retVal
77522>>>>>>>>>    End_Function
77523>>>>>>>>>
77523>>>>>>>>>    // Gets or sets object visibility.
77523>>>>>>>>>    Function ComSuppress Returns Boolean
77525>>>>>>>>>        Handle hDispatchDriver
77525>>>>>>>>>        Boolean retVal
77525>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77526>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 114 OLE_VT_BOOL to retVal
77527>>>>>>>>>        Function_Return retVal
77528>>>>>>>>>    End_Function
77529>>>>>>>>>
77529>>>>>>>>>    // Gets or sets object visibility.
77529>>>>>>>>>    Procedure Set ComSuppress Boolean value
77531>>>>>>>>>        Handle hDispatchDriver
77531>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77532>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77533>>>>>>>>>        Set ComProperty of hDispatchDriver 114 OLE_VT_BOOL to value
77534>>>>>>>>>    End_Procedure
77535>>>>>>>>>
77535>>>>>>>>>    // Gets or sets close border on page break.
77535>>>>>>>>>    Function ComCloseAtPageBreak Returns Boolean
77537>>>>>>>>>        Handle hDispatchDriver
77537>>>>>>>>>        Boolean retVal
77537>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77538>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 115 OLE_VT_BOOL to retVal
77539>>>>>>>>>        Function_Return retVal
77540>>>>>>>>>    End_Function
77541>>>>>>>>>
77541>>>>>>>>>    // Gets or sets close border on page break.
77541>>>>>>>>>    Procedure Set ComCloseAtPageBreak Boolean value
77543>>>>>>>>>        Handle hDispatchDriver
77543>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77544>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77545>>>>>>>>>        Set ComProperty of hDispatchDriver 115 OLE_VT_BOOL to value
77546>>>>>>>>>    End_Procedure
77547>>>>>>>>>
77547>>>>>>>>>    // Gets or sets keep object together.
77547>>>>>>>>>    Function ComKeepTogether Returns Boolean
77549>>>>>>>>>        Handle hDispatchDriver
77549>>>>>>>>>        Boolean retVal
77549>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77550>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 116 OLE_VT_BOOL to retVal
77551>>>>>>>>>        Function_Return retVal
77552>>>>>>>>>    End_Function
77553>>>>>>>>>
77553>>>>>>>>>    // Gets or sets keep object together.
77553>>>>>>>>>    Procedure Set ComKeepTogether Boolean value
77555>>>>>>>>>        Handle hDispatchDriver
77555>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77556>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77557>>>>>>>>>        Set ComProperty of hDispatchDriver 116 OLE_VT_BOOL to value
77558>>>>>>>>>    End_Procedure
77559>>>>>>>>>
77559>>>>>>>>>    // Gets or sets subreport name.
77559>>>>>>>>>    Function ComSubreportName Returns String
77561>>>>>>>>>        Handle hDispatchDriver
77561>>>>>>>>>        String retVal
77561>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77562>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 158 OLE_VT_BSTR to retVal
77563>>>>>>>>>        Function_Return retVal
77564>>>>>>>>>    End_Function
77565>>>>>>>>>
77565>>>>>>>>>    // Gets or sets subreport name.
77565>>>>>>>>>    Procedure Set ComSubreportName String value
77567>>>>>>>>>        Handle hDispatchDriver
77567>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77568>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77569>>>>>>>>>        Set ComProperty of hDispatchDriver 158 OLE_VT_BSTR to value
77570>>>>>>>>>    End_Procedure
77571>>>>>>>>>
77571>>>>>>>>>    // Opens the subreport object.
77571>>>>>>>>>    Function ComOpenSubreport Returns Variant
77573>>>>>>>>>        Handle hDispatchDriver
77573>>>>>>>>>        Variant retVal
77573>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77574>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 159 OLE_VT_DISPATCH to retVal
77575>>>>>>>>>        Function_Return retVal
77576>>>>>>>>>    End_Function
77577>>>>>>>>>
77577>>>>>>>>>    // Gets or sets can grow option.
77577>>>>>>>>>    Function ComCanGrow Returns Boolean
77579>>>>>>>>>        Handle hDispatchDriver
77579>>>>>>>>>        Boolean retVal
77579>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77580>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 122 OLE_VT_BOOL to retVal
77581>>>>>>>>>        Function_Return retVal
77582>>>>>>>>>    End_Function
77583>>>>>>>>>
77583>>>>>>>>>    // Gets or sets can grow option.
77583>>>>>>>>>    Procedure Set ComCanGrow Boolean value
77585>>>>>>>>>        Handle hDispatchDriver
77585>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77586>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77587>>>>>>>>>        Set ComProperty of hDispatchDriver 122 OLE_VT_BOOL to value
77588>>>>>>>>>    End_Procedure
77589>>>>>>>>>
77589>>>>>>>>>    // Gets on-demand subreport option.
77589>>>>>>>>>    Function ComEnableOnDemand Returns Boolean
77591>>>>>>>>>        Handle hDispatchDriver
77591>>>>>>>>>        Boolean retVal
77591>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77592>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 385 OLE_VT_BOOL to retVal
77593>>>>>>>>>        Function_Return retVal
77594>>>>>>>>>    End_Function
77595>>>>>>>>>
77595>>>>>>>>>    // Gets subreport links.
77595>>>>>>>>>    Function ComLinks Returns Variant
77597>>>>>>>>>        Handle hDispatchDriver
77597>>>>>>>>>        Variant retVal
77597>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77598>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 563 OLE_VT_DISPATCH to retVal
77599>>>>>>>>>        Function_Return retVal
77600>>>>>>>>>    End_Function
77601>>>>>>>>>
77601>>>>>>>>>    // Reimport subreport object.
77601>>>>>>>>>    Procedure ComReimportSubreport Boolean ByRef llpReimported
77603>>>>>>>>>        Handle hDispatchDriver
77603>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77604>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77605>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_BOOL) llpReimported
77606>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 720 OLE_VT_VOID
77607>>>>>>>>>    End_Procedure
77608>>>>>>>>>
77608>>>>>>>>>    // Gets or sets conditional formula.
77608>>>>>>>>>    Function ComConditionFormula Variant llFormulaType Returns String
77610>>>>>>>>>        Handle hDispatchDriver
77610>>>>>>>>>        String retVal
77610>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77611>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77612>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
77613>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 760 OLE_VT_BSTR to retVal
77614>>>>>>>>>        Function_Return retVal
77615>>>>>>>>>    End_Function
77616>>>>>>>>>
77616>>>>>>>>>    // Gets or sets conditional formula.
77616>>>>>>>>>    Procedure Set ComConditionFormula Variant llFormulaType String value
77618>>>>>>>>>        Handle hDispatchDriver
77618>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77619>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
77620>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
77621>>>>>>>>>        Set ComProperty of hDispatchDriver 760 OLE_VT_BSTR to value
77622>>>>>>>>>    End_Procedure
77623>>>>>>>>>
77623>>>>>>>>>    // Gets or sets CSS class.
77623>>>>>>>>>    Function ComCssClass Returns String
77625>>>>>>>>>        Handle hDispatchDriver
77625>>>>>>>>>        String retVal
77625>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77626>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 549 OLE_VT_BSTR to retVal
77627>>>>>>>>>        Function_Return retVal
77628>>>>>>>>>    End_Function
77629>>>>>>>>>
77629>>>>>>>>>    // Gets or sets CSS class.
77629>>>>>>>>>    Procedure Set ComCssClass String value
77631>>>>>>>>>        Handle hDispatchDriver
77631>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77632>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77633>>>>>>>>>        Set ComProperty of hDispatchDriver 549 OLE_VT_BSTR to value
77634>>>>>>>>>    End_Procedure
77635>>>>>>>>>End_Class
77636>>>>>>>>>
77636>>>>>>>>>// CoClass
77636>>>>>>>>>// CLSID: {4FE94D63-0BCA-411E-92E4-25B1F266E4C4}
77636>>>>>>>>>Class cCrystalSubreportObject is a cComAutomationObject
77637>>>>>>>>>    Import_Class_Protocol cCrystalISubreportObject
77638>>>>>>>>>
77638>>>>>>>>>    Procedure Construct_Object
77640>>>>>>>>>        Forward Send Construct_Object
77642>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
77643>>>>>>>>>    End_Procedure
77644>>>>>>>>>End_Class
77645>>>>>>>>>
77645>>>>>>>>>// CLSID: {AF37680E-6120-4E28-96DD-63FD2DC27B7A}
77645>>>>>>>>>Class cCrystalIDatabaseFieldDefinition is a Mixin
77646>>>>>>>>>
77646>>>>>>>>>    // Gets field definition kind.
77646>>>>>>>>>    Function ComKind Returns CRFieldKind
77648>>>>>>>>>        Handle hDispatchDriver
77648>>>>>>>>>        CRFieldKind retVal
77648>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77649>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
77650>>>>>>>>>        Function_Return retVal
77651>>>>>>>>>    End_Function
77652>>>>>>>>>
77652>>>>>>>>>    // Gets field value type.
77652>>>>>>>>>    Function ComValueType Returns CRFieldValueType
77654>>>>>>>>>        Handle hDispatchDriver
77654>>>>>>>>>        CRFieldValueType retVal
77654>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77655>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 162 OLE_VT_I4 to retVal
77656>>>>>>>>>        Function_Return retVal
77657>>>>>>>>>    End_Function
77658>>>>>>>>>
77658>>>>>>>>>    // Gets field number of bytes.
77658>>>>>>>>>    Function ComNumberOfBytes Returns Short
77660>>>>>>>>>        Handle hDispatchDriver
77660>>>>>>>>>        Short retVal
77660>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77661>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 163 OLE_VT_I2 to retVal
77662>>>>>>>>>        Function_Return retVal
77663>>>>>>>>>    End_Function
77664>>>>>>>>>
77664>>>>>>>>>    // Gets field definition unique formula name.
77664>>>>>>>>>    Function ComName Returns String
77666>>>>>>>>>        Handle hDispatchDriver
77666>>>>>>>>>        String retVal
77666>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77667>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
77668>>>>>>>>>        Function_Return retVal
77669>>>>>>>>>    End_Function
77670>>>>>>>>>
77670>>>>>>>>>    // Gets field value.
77670>>>>>>>>>    Function ComValue Returns Variant
77672>>>>>>>>>        Handle hDispatchDriver
77672>>>>>>>>>        Variant retVal
77672>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77673>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 121 OLE_VT_VARIANT to retVal
77674>>>>>>>>>        Function_Return retVal
77675>>>>>>>>>    End_Function
77676>>>>>>>>>
77676>>>>>>>>>    // Gets database field name.
77676>>>>>>>>>    Function ComDatabaseFieldName Returns String
77678>>>>>>>>>        Handle hDispatchDriver
77678>>>>>>>>>        String retVal
77678>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77679>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 165 OLE_VT_BSTR to retVal
77680>>>>>>>>>        Function_Return retVal
77681>>>>>>>>>    End_Function
77682>>>>>>>>>
77682>>>>>>>>>    // Gets database field parent (Report).
77682>>>>>>>>>    Function ComParent Returns Variant
77684>>>>>>>>>        Handle hDispatchDriver
77684>>>>>>>>>        Variant retVal
77684>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77685>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
77686>>>>>>>>>        Function_Return retVal
77687>>>>>>>>>    End_Function
77688>>>>>>>>>
77688>>>>>>>>>    // Gets field previous value.
77688>>>>>>>>>    Function ComPreviousValue Returns Variant
77690>>>>>>>>>        Handle hDispatchDriver
77690>>>>>>>>>        Variant retVal
77690>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77691>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 290 OLE_VT_VARIANT to retVal
77692>>>>>>>>>        Function_Return retVal
77693>>>>>>>>>    End_Function
77694>>>>>>>>>
77694>>>>>>>>>    // Gets field next value.
77694>>>>>>>>>    Function ComNextValue Returns Variant
77696>>>>>>>>>        Handle hDispatchDriver
77696>>>>>>>>>        Variant retVal
77696>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77697>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 291 OLE_VT_VARIANT to retVal
77698>>>>>>>>>        Function_Return retVal
77699>>>>>>>>>    End_Function
77700>>>>>>>>>
77700>>>>>>>>>    // Gets table alias name the field is in.
77700>>>>>>>>>    Function ComTableAliasName Returns String
77702>>>>>>>>>        Handle hDispatchDriver
77702>>>>>>>>>        String retVal
77702>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77703>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 351 OLE_VT_BSTR to retVal
77704>>>>>>>>>        Function_Return retVal
77705>>>>>>>>>    End_Function
77706>>>>>>>>>
77706>>>>>>>>>    // Gets database field display name.
77706>>>>>>>>>    Function ComDatabaseFieldDisplayName Returns String
77708>>>>>>>>>        Handle hDispatchDriver
77708>>>>>>>>>        String retVal
77708>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77709>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 369 OLE_VT_BSTR to retVal
77710>>>>>>>>>        Function_Return retVal
77711>>>>>>>>>    End_Function
77712>>>>>>>>>End_Class
77713>>>>>>>>>
77713>>>>>>>>>// CoClass
77713>>>>>>>>>// CLSID: {6DB8D2EB-EA7F-4712-B727-0B02587F67D4}
77713>>>>>>>>>Class cCrystalDatabaseFieldDefinition is a cComAutomationObject
77714>>>>>>>>>    Import_Class_Protocol cCrystalIDatabaseFieldDefinition
77715>>>>>>>>>
77715>>>>>>>>>    Procedure Construct_Object
77717>>>>>>>>>        Forward Send Construct_Object
77719>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
77720>>>>>>>>>    End_Procedure
77721>>>>>>>>>End_Class
77722>>>>>>>>>
77722>>>>>>>>>// CLSID: {AF37680F-6120-4E28-96DD-63FD2DC27B7A}
77722>>>>>>>>>Class cCrystalIFormulaFieldDefinition is a Mixin
77723>>>>>>>>>
77723>>>>>>>>>    // Gets field definition kind.
77723>>>>>>>>>    Function ComKind Returns CRFieldKind
77725>>>>>>>>>        Handle hDispatchDriver
77725>>>>>>>>>        CRFieldKind retVal
77725>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77726>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
77727>>>>>>>>>        Function_Return retVal
77728>>>>>>>>>    End_Function
77729>>>>>>>>>
77729>>>>>>>>>    // Gets field value type.
77729>>>>>>>>>    Function ComValueType Returns CRFieldValueType
77731>>>>>>>>>        Handle hDispatchDriver
77731>>>>>>>>>        CRFieldValueType retVal
77731>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77732>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 162 OLE_VT_I4 to retVal
77733>>>>>>>>>        Function_Return retVal
77734>>>>>>>>>    End_Function
77735>>>>>>>>>
77735>>>>>>>>>    // Gets field number of bytes.
77735>>>>>>>>>    Function ComNumberOfBytes Returns Short
77737>>>>>>>>>        Handle hDispatchDriver
77737>>>>>>>>>        Short retVal
77737>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77738>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 163 OLE_VT_I2 to retVal
77739>>>>>>>>>        Function_Return retVal
77740>>>>>>>>>    End_Function
77741>>>>>>>>>
77741>>>>>>>>>    // Gets field definition unique formula name.
77741>>>>>>>>>    Function ComName Returns String
77743>>>>>>>>>        Handle hDispatchDriver
77743>>>>>>>>>        String retVal
77743>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77744>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
77745>>>>>>>>>        Function_Return retVal
77746>>>>>>>>>    End_Function
77747>>>>>>>>>
77747>>>>>>>>>    // Gets field value.
77747>>>>>>>>>    Function ComValue Returns Variant
77749>>>>>>>>>        Handle hDispatchDriver
77749>>>>>>>>>        Variant retVal
77749>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77750>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 121 OLE_VT_VARIANT to retVal
77751>>>>>>>>>        Function_Return retVal
77752>>>>>>>>>    End_Function
77753>>>>>>>>>
77753>>>>>>>>>    // Gets formula field name.
77753>>>>>>>>>    Function ComFormulaFieldName Returns String
77755>>>>>>>>>        Handle hDispatchDriver
77755>>>>>>>>>        String retVal
77755>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77756>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 164 OLE_VT_BSTR to retVal
77757>>>>>>>>>        Function_Return retVal
77758>>>>>>>>>    End_Function
77759>>>>>>>>>
77759>>>>>>>>>    // Gets or sets formula field text.
77759>>>>>>>>>    Function ComText Returns String
77761>>>>>>>>>        Handle hDispatchDriver
77761>>>>>>>>>        String retVal
77761>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77762>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 157 OLE_VT_BSTR to retVal
77763>>>>>>>>>        Function_Return retVal
77764>>>>>>>>>    End_Function
77765>>>>>>>>>
77765>>>>>>>>>    // Gets or sets formula field text.
77765>>>>>>>>>    Procedure Set ComText String value
77767>>>>>>>>>        Handle hDispatchDriver
77767>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77768>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77769>>>>>>>>>        Set ComProperty of hDispatchDriver 157 OLE_VT_BSTR to value
77770>>>>>>>>>    End_Procedure
77771>>>>>>>>>
77771>>>>>>>>>    // Gets formula field parent (Report).
77771>>>>>>>>>    Function ComParent Returns Variant
77773>>>>>>>>>        Handle hDispatchDriver
77773>>>>>>>>>        Variant retVal
77773>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77774>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
77775>>>>>>>>>        Function_Return retVal
77776>>>>>>>>>    End_Function
77777>>>>>>>>>
77777>>>>>>>>>    // Gets field previous value.
77777>>>>>>>>>    Function ComPreviousValue Returns Variant
77779>>>>>>>>>        Handle hDispatchDriver
77779>>>>>>>>>        Variant retVal
77779>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77780>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 290 OLE_VT_VARIANT to retVal
77781>>>>>>>>>        Function_Return retVal
77782>>>>>>>>>    End_Function
77783>>>>>>>>>
77783>>>>>>>>>    // Gets field next value.
77783>>>>>>>>>    Function ComNextValue Returns Variant
77785>>>>>>>>>        Handle hDispatchDriver
77785>>>>>>>>>        Variant retVal
77785>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77786>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 291 OLE_VT_VARIANT to retVal
77787>>>>>>>>>        Function_Return retVal
77788>>>>>>>>>    End_Function
77789>>>>>>>>>
77789>>>>>>>>>    // Checks formula.
77789>>>>>>>>>    Procedure ComCheck Boolean ByRef llpBool String ByRef llppErrorString
77791>>>>>>>>>        Handle hDispatchDriver
77791>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77792>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
77793>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_BOOL) llpBool
77794>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_BSTR) llppErrorString
77795>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 352 OLE_VT_VOID
77796>>>>>>>>>    End_Procedure
77797>>>>>>>>>End_Class
77798>>>>>>>>>
77798>>>>>>>>>// CoClass
77798>>>>>>>>>// CLSID: {DE775F95-0697-4C4E-B33F-95A75661777C}
77798>>>>>>>>>Class cCrystalFormulaFieldDefinition is a cComAutomationObject
77799>>>>>>>>>    Import_Class_Protocol cCrystalIFormulaFieldDefinition
77800>>>>>>>>>
77800>>>>>>>>>    Procedure Construct_Object
77802>>>>>>>>>        Forward Send Construct_Object
77804>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
77805>>>>>>>>>    End_Procedure
77806>>>>>>>>>End_Class
77807>>>>>>>>>
77807>>>>>>>>>// CLSID: {AF376812-6120-4E28-96DD-63FD2DC27B7A}
77807>>>>>>>>>Class cCrystalIParameterFieldDefinition is a Mixin
77808>>>>>>>>>
77808>>>>>>>>>    // Gets field definition kind.
77808>>>>>>>>>    Function ComKind Returns CRFieldKind
77810>>>>>>>>>        Handle hDispatchDriver
77810>>>>>>>>>        CRFieldKind retVal
77810>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77811>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
77812>>>>>>>>>        Function_Return retVal
77813>>>>>>>>>    End_Function
77814>>>>>>>>>
77814>>>>>>>>>    // Gets field value type.
77814>>>>>>>>>    Function ComValueType Returns CRFieldValueType
77816>>>>>>>>>        Handle hDispatchDriver
77816>>>>>>>>>        CRFieldValueType retVal
77816>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77817>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 162 OLE_VT_I4 to retVal
77818>>>>>>>>>        Function_Return retVal
77819>>>>>>>>>    End_Function
77820>>>>>>>>>
77820>>>>>>>>>    // Gets field number of bytes.
77820>>>>>>>>>    Function ComNumberOfBytes Returns Short
77822>>>>>>>>>        Handle hDispatchDriver
77822>>>>>>>>>        Short retVal
77822>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77823>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 163 OLE_VT_I2 to retVal
77824>>>>>>>>>        Function_Return retVal
77825>>>>>>>>>    End_Function
77826>>>>>>>>>
77826>>>>>>>>>    // Gets field definition unique formula name.
77826>>>>>>>>>    Function ComName Returns String
77828>>>>>>>>>        Handle hDispatchDriver
77828>>>>>>>>>        String retVal
77828>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77829>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
77830>>>>>>>>>        Function_Return retVal
77831>>>>>>>>>    End_Function
77832>>>>>>>>>
77832>>>>>>>>>    // Gets field value.
77832>>>>>>>>>    Function ComValue Returns Variant
77834>>>>>>>>>        Handle hDispatchDriver
77834>>>>>>>>>        Variant retVal
77834>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77835>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 121 OLE_VT_VARIANT to retVal
77836>>>>>>>>>        Function_Return retVal
77837>>>>>>>>>    End_Function
77838>>>>>>>>>
77838>>>>>>>>>    // Gets parameter field name.
77838>>>>>>>>>    Function ComParameterFieldName Returns String
77840>>>>>>>>>        Handle hDispatchDriver
77840>>>>>>>>>        String retVal
77840>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77841>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 188 OLE_VT_BSTR to retVal
77842>>>>>>>>>        Function_Return retVal
77843>>>>>>>>>    End_Function
77844>>>>>>>>>
77844>>>>>>>>>    // Gets parameter field parent (Report).
77844>>>>>>>>>    Function ComParent Returns Variant
77846>>>>>>>>>        Handle hDispatchDriver
77846>>>>>>>>>        Variant retVal
77846>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77847>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
77848>>>>>>>>>        Function_Return retVal
77849>>>>>>>>>    End_Function
77850>>>>>>>>>
77850>>>>>>>>>    // Gets field previous value.
77850>>>>>>>>>    Function ComPreviousValue Returns Variant
77852>>>>>>>>>        Handle hDispatchDriver
77852>>>>>>>>>        Variant retVal
77852>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77853>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 290 OLE_VT_VARIANT to retVal
77854>>>>>>>>>        Function_Return retVal
77855>>>>>>>>>    End_Function
77856>>>>>>>>>
77856>>>>>>>>>    // Gets field next value.
77856>>>>>>>>>    Function ComNextValue Returns Variant
77858>>>>>>>>>        Handle hDispatchDriver
77858>>>>>>>>>        Variant retVal
77858>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77859>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 291 OLE_VT_VARIANT to retVal
77860>>>>>>>>>        Function_Return retVal
77861>>>>>>>>>    End_Function
77862>>>>>>>>>
77862>>>>>>>>>    // Gets or sets parameter field prompting string.
77862>>>>>>>>>    Function ComPrompt Returns String
77864>>>>>>>>>        Handle hDispatchDriver
77864>>>>>>>>>        String retVal
77864>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77865>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 296 OLE_VT_BSTR to retVal
77866>>>>>>>>>        Function_Return retVal
77867>>>>>>>>>    End_Function
77868>>>>>>>>>
77868>>>>>>>>>    // Gets or sets parameter field prompting string.
77868>>>>>>>>>    Procedure Set ComPrompt String value
77870>>>>>>>>>        Handle hDispatchDriver
77870>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77871>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77872>>>>>>>>>        Set ComProperty of hDispatchDriver 296 OLE_VT_BSTR to value
77873>>>>>>>>>    End_Procedure
77874>>>>>>>>>
77874>>>>>>>>>    // Gets whether the default value has been set.
77874>>>>>>>>>    Function ComIsDefaultValueSet Returns Boolean
77876>>>>>>>>>        Handle hDispatchDriver
77876>>>>>>>>>        Boolean retVal
77876>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77877>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 297 OLE_VT_BOOL to retVal
77878>>>>>>>>>        Function_Return retVal
77879>>>>>>>>>    End_Function
77880>>>>>>>>>
77880>>>>>>>>>    // Gets the report name the parameter field is in.
77880>>>>>>>>>    Function ComReportName Returns String
77882>>>>>>>>>        Handle hDispatchDriver
77882>>>>>>>>>        String retVal
77882>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77883>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 298 OLE_VT_BSTR to retVal
77884>>>>>>>>>        Function_Return retVal
77885>>>>>>>>>    End_Function
77886>>>>>>>>>
77886>>>>>>>>>    // Gets whether the parameter field needs current value.
77886>>>>>>>>>    Function ComNeedsCurrentValue Returns Boolean
77888>>>>>>>>>        Handle hDispatchDriver
77888>>>>>>>>>        Boolean retVal
77888>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77889>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 299 OLE_VT_BOOL to retVal
77890>>>>>>>>>        Function_Return retVal
77891>>>>>>>>>    End_Function
77892>>>>>>>>>
77892>>>>>>>>>    // Gets whether the current value has been set.
77892>>>>>>>>>    Function ComIsCurrentValueSet Returns Boolean
77894>>>>>>>>>        Handle hDispatchDriver
77894>>>>>>>>>        Boolean retVal
77894>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77895>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 300 OLE_VT_BOOL to retVal
77896>>>>>>>>>        Function_Return retVal
77897>>>>>>>>>    End_Function
77898>>>>>>>>>
77898>>>>>>>>>    // Gets or sets the option which specifies if this parameter field value should be in the specified range.
77898>>>>>>>>>    Function ComEnableRangeLimit Returns Boolean
77900>>>>>>>>>        Handle hDispatchDriver
77900>>>>>>>>>        Boolean retVal
77900>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77901>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 387 OLE_VT_BOOL to retVal
77902>>>>>>>>>        Function_Return retVal
77903>>>>>>>>>    End_Function
77904>>>>>>>>>
77904>>>>>>>>>    // Gets or sets the option which specifies if this parameter field value should be in the specified range.
77904>>>>>>>>>    Procedure Set ComEnableRangeLimit Boolean value
77906>>>>>>>>>        Handle hDispatchDriver
77906>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77907>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77908>>>>>>>>>        Set ComProperty of hDispatchDriver 387 OLE_VT_BOOL to value
77909>>>>>>>>>    End_Procedure
77910>>>>>>>>>
77910>>>>>>>>>    // Gets or sets minimum value.
77910>>>>>>>>>    Function ComMinimumValue Returns Variant
77912>>>>>>>>>        Handle hDispatchDriver
77912>>>>>>>>>        Variant retVal
77912>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77913>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 388 OLE_VT_VARIANT to retVal
77914>>>>>>>>>        Function_Return retVal
77915>>>>>>>>>    End_Function
77916>>>>>>>>>
77916>>>>>>>>>    // Gets or sets minimum value.
77916>>>>>>>>>    Procedure Set ComMinimumValue Variant value
77918>>>>>>>>>        Handle hDispatchDriver
77918>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77919>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77920>>>>>>>>>        Set ComProperty of hDispatchDriver 388 OLE_VT_VARIANT to value
77921>>>>>>>>>    End_Procedure
77922>>>>>>>>>
77922>>>>>>>>>    // Gets or sets maximum value.
77922>>>>>>>>>    Function ComMaximumValue Returns Variant
77924>>>>>>>>>        Handle hDispatchDriver
77924>>>>>>>>>        Variant retVal
77924>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77925>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 389 OLE_VT_VARIANT to retVal
77926>>>>>>>>>        Function_Return retVal
77927>>>>>>>>>    End_Function
77928>>>>>>>>>
77928>>>>>>>>>    // Gets or sets maximum value.
77928>>>>>>>>>    Procedure Set ComMaximumValue Variant value
77930>>>>>>>>>        Handle hDispatchDriver
77930>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77931>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77932>>>>>>>>>        Set ComProperty of hDispatchDriver 389 OLE_VT_VARIANT to value
77933>>>>>>>>>    End_Procedure
77934>>>>>>>>>
77934>>>>>>>>>    // Gets or sets edit mask for string parameter.
77934>>>>>>>>>    Function ComEditMask Returns String
77936>>>>>>>>>        Handle hDispatchDriver
77936>>>>>>>>>        String retVal
77936>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77937>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 390 OLE_VT_BSTR to retVal
77938>>>>>>>>>        Function_Return retVal
77939>>>>>>>>>    End_Function
77940>>>>>>>>>
77940>>>>>>>>>    // Gets or sets edit mask for string parameter.
77940>>>>>>>>>    Procedure Set ComEditMask String value
77942>>>>>>>>>        Handle hDispatchDriver
77942>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77943>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77944>>>>>>>>>        Set ComProperty of hDispatchDriver 390 OLE_VT_BSTR to value
77945>>>>>>>>>    End_Procedure
77946>>>>>>>>>
77946>>>>>>>>>    // Gets parameter type
77946>>>>>>>>>    Function ComParameterType Returns CRParameterFieldType
77948>>>>>>>>>        Handle hDispatchDriver
77948>>>>>>>>>        CRParameterFieldType retVal
77948>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77949>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 391 OLE_VT_I4 to retVal
77950>>>>>>>>>        Function_Return retVal
77951>>>>>>>>>    End_Function
77952>>>>>>>>>
77952>>>>>>>>>    // Gets or sets disallowing editing option.
77952>>>>>>>>>    Function ComDisallowEditing Returns Boolean
77954>>>>>>>>>        Handle hDispatchDriver
77954>>>>>>>>>        Boolean retVal
77954>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77955>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 392 OLE_VT_BOOL to retVal
77956>>>>>>>>>        Function_Return retVal
77957>>>>>>>>>    End_Function
77958>>>>>>>>>
77958>>>>>>>>>    // Gets or sets disallowing editing option.
77958>>>>>>>>>    Procedure Set ComDisallowEditing Boolean value
77960>>>>>>>>>        Handle hDispatchDriver
77960>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77961>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77962>>>>>>>>>        Set ComProperty of hDispatchDriver 392 OLE_VT_BOOL to value
77963>>>>>>>>>    End_Procedure
77964>>>>>>>>>
77964>>>>>>>>>    // Gets total number of default values.
77964>>>>>>>>>    Function ComNumberOfDefaultValues Returns Short
77966>>>>>>>>>        Handle hDispatchDriver
77966>>>>>>>>>        Short retVal
77966>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77967>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 393 OLE_VT_I2 to retVal
77968>>>>>>>>>        Function_Return retVal
77969>>>>>>>>>    End_Function
77970>>>>>>>>>
77970>>>>>>>>>    // Gets nth default value
77970>>>>>>>>>    Function ComGetNthDefaultValue Short llindex Returns Variant
77972>>>>>>>>>        Handle hDispatchDriver
77972>>>>>>>>>        Variant retVal
77972>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77973>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77974>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llindex
77975>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 397 OLE_VT_VARIANT to retVal
77976>>>>>>>>>        Function_Return retVal
77977>>>>>>>>>    End_Function
77978>>>>>>>>>
77978>>>>>>>>>    // Sets nth default value
77978>>>>>>>>>    Procedure ComSetNthDefaultValue Short llindex Variant llnthDefaultValue
77980>>>>>>>>>        Handle hDispatchDriver
77980>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77981>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
77982>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llindex
77983>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llnthDefaultValue
77984>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 394 OLE_VT_VOID
77985>>>>>>>>>    End_Procedure
77986>>>>>>>>>
77986>>>>>>>>>    // Adds a default value.
77986>>>>>>>>>    Procedure ComAddDefaultValue Variant llDefaultValue
77988>>>>>>>>>        Handle hDispatchDriver
77988>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77989>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77990>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llDefaultValue
77991>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 395 OLE_VT_VOID
77992>>>>>>>>>    End_Procedure
77993>>>>>>>>>
77993>>>>>>>>>    // Deletes nth default value.
77993>>>>>>>>>    Procedure ComDeleteNthDefaultValue Short llindex
77995>>>>>>>>>        Handle hDispatchDriver
77995>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
77996>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
77997>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llindex
77998>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 396 OLE_VT_VOID
77999>>>>>>>>>    End_Procedure
78000>>>>>>>>>
78000>>>>>>>>>    // Gets or sets value nullable.
78000>>>>>>>>>    Function ComEnableNullValue Returns Boolean
78002>>>>>>>>>        Handle hDispatchDriver
78002>>>>>>>>>        Boolean retVal
78002>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78003>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 439 OLE_VT_BOOL to retVal
78004>>>>>>>>>        Function_Return retVal
78005>>>>>>>>>    End_Function
78006>>>>>>>>>
78006>>>>>>>>>    // Gets or sets value nullable.
78006>>>>>>>>>    Procedure Set ComEnableNullValue Boolean value
78008>>>>>>>>>        Handle hDispatchDriver
78008>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78009>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78010>>>>>>>>>        Set ComProperty of hDispatchDriver 439 OLE_VT_BOOL to value
78011>>>>>>>>>    End_Procedure
78012>>>>>>>>>
78012>>>>>>>>>    // Gets or sets allowing multiple values.
78012>>>>>>>>>    Function ComEnableMultipleValues Returns Boolean
78014>>>>>>>>>        Handle hDispatchDriver
78014>>>>>>>>>        Boolean retVal
78014>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78015>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 440 OLE_VT_BOOL to retVal
78016>>>>>>>>>        Function_Return retVal
78017>>>>>>>>>    End_Function
78018>>>>>>>>>
78018>>>>>>>>>    // Gets or sets allowing multiple values.
78018>>>>>>>>>    Procedure Set ComEnableMultipleValues Boolean value
78020>>>>>>>>>        Handle hDispatchDriver
78020>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78021>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78022>>>>>>>>>        Set ComProperty of hDispatchDriver 440 OLE_VT_BOOL to value
78023>>>>>>>>>    End_Procedure
78024>>>>>>>>>
78024>>>>>>>>>    // Gets or sets parameter value kind (discrete or range).
78024>>>>>>>>>    Function ComDiscreteOrRangeKind Returns CRDiscreteOrRangeKind
78026>>>>>>>>>        Handle hDispatchDriver
78026>>>>>>>>>        CRDiscreteOrRangeKind retVal
78026>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78027>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 441 OLE_VT_I4 to retVal
78028>>>>>>>>>        Function_Return retVal
78029>>>>>>>>>    End_Function
78030>>>>>>>>>
78030>>>>>>>>>    // Gets or sets parameter value kind (discrete or range).
78030>>>>>>>>>    Procedure Set ComDiscreteOrRangeKind CRDiscreteOrRangeKind value
78032>>>>>>>>>        Handle hDispatchDriver
78032>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78033>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78034>>>>>>>>>        Set ComProperty of hDispatchDriver 441 OLE_VT_I4 to value
78035>>>>>>>>>    End_Procedure
78036>>>>>>>>>
78036>>>>>>>>>    // Gets or sets boolean place in group option.
78036>>>>>>>>>    Function ComPlaceInGroup Returns Boolean
78038>>>>>>>>>        Handle hDispatchDriver
78038>>>>>>>>>        Boolean retVal
78038>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78039>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 442 OLE_VT_BOOL to retVal
78040>>>>>>>>>        Function_Return retVal
78041>>>>>>>>>    End_Function
78042>>>>>>>>>
78042>>>>>>>>>    // Gets or sets boolean place in group option.
78042>>>>>>>>>    Procedure Set ComPlaceInGroup Boolean value
78044>>>>>>>>>        Handle hDispatchDriver
78044>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78045>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78046>>>>>>>>>        Set ComProperty of hDispatchDriver 442 OLE_VT_BOOL to value
78047>>>>>>>>>    End_Procedure
78048>>>>>>>>>
78048>>>>>>>>>    // Gets or sets boolean group number.
78048>>>>>>>>>    Function ComGroupNumber Returns Short
78050>>>>>>>>>        Handle hDispatchDriver
78050>>>>>>>>>        Short retVal
78050>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78051>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 220 OLE_VT_I2 to retVal
78052>>>>>>>>>        Function_Return retVal
78053>>>>>>>>>    End_Function
78054>>>>>>>>>
78054>>>>>>>>>    // Gets or sets boolean group number.
78054>>>>>>>>>    Procedure Set ComGroupNumber Short value
78056>>>>>>>>>        Handle hDispatchDriver
78056>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78057>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78058>>>>>>>>>        Set ComProperty of hDispatchDriver 220 OLE_VT_I2 to value
78059>>>>>>>>>    End_Procedure
78060>>>>>>>>>
78060>>>>>>>>>    // Gets or sets boolean mutuallyExclusiveGroup.
78060>>>>>>>>>    Function ComEnableExclusiveGroup Returns Boolean
78062>>>>>>>>>        Handle hDispatchDriver
78062>>>>>>>>>        Boolean retVal
78062>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78063>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 443 OLE_VT_BOOL to retVal
78064>>>>>>>>>        Function_Return retVal
78065>>>>>>>>>    End_Function
78066>>>>>>>>>
78066>>>>>>>>>    // Gets or sets boolean mutuallyExclusiveGroup.
78066>>>>>>>>>    Procedure Set ComEnableExclusiveGroup Boolean value
78068>>>>>>>>>        Handle hDispatchDriver
78068>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78069>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78070>>>>>>>>>        Set ComProperty of hDispatchDriver 443 OLE_VT_BOOL to value
78071>>>>>>>>>    End_Procedure
78072>>>>>>>>>
78072>>>>>>>>>    // Gets total number of current values.
78072>>>>>>>>>    Function ComNumberOfCurrentValues Returns Short
78074>>>>>>>>>        Handle hDispatchDriver
78074>>>>>>>>>        Short retVal
78074>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78075>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 444 OLE_VT_I2 to retVal
78076>>>>>>>>>        Function_Return retVal
78077>>>>>>>>>    End_Function
78078>>>>>>>>>
78078>>>>>>>>>    // Gets total number of ranges.
78078>>>>>>>>>    Function ComNumberOfCurrentRanges Returns Short
78080>>>>>>>>>        Handle hDispatchDriver
78080>>>>>>>>>        Short retVal
78080>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78081>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 445 OLE_VT_I2 to retVal
78082>>>>>>>>>        Function_Return retVal
78083>>>>>>>>>    End_Function
78084>>>>>>>>>
78084>>>>>>>>>    // Gets nth current value.
78084>>>>>>>>>    Function ComGetNthCurrentValue Short llindex Returns Variant
78086>>>>>>>>>        Handle hDispatchDriver
78086>>>>>>>>>        Variant retVal
78086>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78087>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78088>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llindex
78089>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 446 OLE_VT_VARIANT to retVal
78090>>>>>>>>>        Function_Return retVal
78091>>>>>>>>>    End_Function
78092>>>>>>>>>
78092>>>>>>>>>    // Adds current value.
78092>>>>>>>>>    Procedure ComAddCurrentValue Variant llCurrentValue
78094>>>>>>>>>        Handle hDispatchDriver
78094>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78095>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78096>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llCurrentValue
78097>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 447 OLE_VT_VOID
78098>>>>>>>>>    End_Procedure
78099>>>>>>>>>
78099>>>>>>>>>    // Gets nth current range.
78099>>>>>>>>>    Procedure ComGetNthCurrentRange Short llindex Variant llpStart Variant llpEnd CRRangeInfo ByRef llpRangeInfo
78101>>>>>>>>>        Handle hDispatchDriver
78101>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78102>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
78103>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llindex
78104>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_VARIANT) llpStart
78105>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_VARIANT) llpEnd
78106>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llpRangeInfo
78107>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 448 OLE_VT_VOID
78108>>>>>>>>>    End_Procedure
78109>>>>>>>>>
78109>>>>>>>>>    // Adds current range.
78109>>>>>>>>>    Procedure ComAddCurrentRange Variant llstart Variant llend CRRangeInfo llrangeInfo
78111>>>>>>>>>        Handle hDispatchDriver
78111>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78112>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
78113>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llstart
78114>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llend
78115>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llrangeInfo
78116>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 449 OLE_VT_VOID
78117>>>>>>>>>    End_Procedure
78118>>>>>>>>>
78118>>>>>>>>>    // Clears all the current values and ranges.
78118>>>>>>>>>    Procedure ComClearCurrentValueAndRange
78120>>>>>>>>>        Handle hDispatchDriver
78120>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78121>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 450 OLE_VT_VOID
78122>>>>>>>>>    End_Procedure
78123>>>>>>>>>
78123>>>>>>>>>    // Gets or sets nth value description.
78123>>>>>>>>>    Function ComNthValueDescription Short llindex Returns String
78125>>>>>>>>>        Handle hDispatchDriver
78125>>>>>>>>>        String retVal
78125>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78126>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78127>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llindex
78128>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 466 OLE_VT_BSTR to retVal
78129>>>>>>>>>        Function_Return retVal
78130>>>>>>>>>    End_Function
78131>>>>>>>>>
78131>>>>>>>>>    // Gets or sets nth value description.
78131>>>>>>>>>    Procedure Set ComNthValueDescription Short llindex String value
78133>>>>>>>>>        Handle hDispatchDriver
78133>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78134>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
78135>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llindex
78136>>>>>>>>>        Set ComProperty of hDispatchDriver 466 OLE_VT_BSTR to value
78137>>>>>>>>>    End_Procedure
78138>>>>>>>>>
78138>>>>>>>>>    // Gets or sets show description only in pick list option.
78138>>>>>>>>>    Function ComEnableShowDescriptionOnly Returns Boolean
78140>>>>>>>>>        Handle hDispatchDriver
78140>>>>>>>>>        Boolean retVal
78140>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78141>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 467 OLE_VT_BOOL to retVal
78142>>>>>>>>>        Function_Return retVal
78143>>>>>>>>>    End_Function
78144>>>>>>>>>
78144>>>>>>>>>    // Gets or sets show description only in pick list option.
78144>>>>>>>>>    Procedure Set ComEnableShowDescriptionOnly Boolean value
78146>>>>>>>>>        Handle hDispatchDriver
78146>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78147>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78148>>>>>>>>>        Set ComProperty of hDispatchDriver 467 OLE_VT_BOOL to value
78149>>>>>>>>>    End_Procedure
78150>>>>>>>>>
78150>>>>>>>>>    // Gets or sets sort method in pick list option.
78150>>>>>>>>>    Function ComPicklistSortMethod Returns CRParameterPicklistSortMethod
78152>>>>>>>>>        Handle hDispatchDriver
78152>>>>>>>>>        CRParameterPicklistSortMethod retVal
78152>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78153>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 468 OLE_VT_I4 to retVal
78154>>>>>>>>>        Function_Return retVal
78155>>>>>>>>>    End_Function
78156>>>>>>>>>
78156>>>>>>>>>    // Gets or sets sort method in pick list option.
78156>>>>>>>>>    Procedure Set ComPicklistSortMethod CRParameterPicklistSortMethod value
78158>>>>>>>>>        Handle hDispatchDriver
78158>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78159>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78160>>>>>>>>>        Set ComProperty of hDispatchDriver 468 OLE_VT_I4 to value
78161>>>>>>>>>    End_Procedure
78162>>>>>>>>>
78162>>>>>>>>>    // Gets or sets sort based on description in pick list option.
78162>>>>>>>>>    Function ComEnableSortBasedOnDesc Returns Boolean
78164>>>>>>>>>        Handle hDispatchDriver
78164>>>>>>>>>        Boolean retVal
78164>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78165>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 469 OLE_VT_BOOL to retVal
78166>>>>>>>>>        Function_Return retVal
78167>>>>>>>>>    End_Function
78168>>>>>>>>>
78168>>>>>>>>>    // Gets or sets sort based on description in pick list option.
78168>>>>>>>>>    Procedure Set ComEnableSortBasedOnDesc Boolean value
78170>>>>>>>>>        Handle hDispatchDriver
78170>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78171>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78172>>>>>>>>>        Set ComProperty of hDispatchDriver 469 OLE_VT_BOOL to value
78173>>>>>>>>>    End_Procedure
78174>>>>>>>>>End_Class
78175>>>>>>>>>
78175>>>>>>>>>// CoClass
78175>>>>>>>>>// CLSID: {2C201524-A185-4905-86A6-47A597447D8C}
78175>>>>>>>>>Class cCrystalParameterFieldDefinition is a cComAutomationObject
78176>>>>>>>>>    Import_Class_Protocol cCrystalIParameterFieldDefinition
78177>>>>>>>>>
78177>>>>>>>>>    Procedure Construct_Object
78179>>>>>>>>>        Forward Send Construct_Object
78181>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
78182>>>>>>>>>    End_Procedure
78183>>>>>>>>>End_Class
78184>>>>>>>>>
78184>>>>>>>>>// CLSID: {AF376813-6120-4E28-96DD-63FD2DC27B7A}
78184>>>>>>>>>Class cCrystalIGroupNameFieldDefinition is a Mixin
78185>>>>>>>>>
78185>>>>>>>>>    // Gets field definition kind.
78185>>>>>>>>>    Function ComKind Returns CRFieldKind
78187>>>>>>>>>        Handle hDispatchDriver
78187>>>>>>>>>        CRFieldKind retVal
78187>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78188>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
78189>>>>>>>>>        Function_Return retVal
78190>>>>>>>>>    End_Function
78191>>>>>>>>>
78191>>>>>>>>>    // Gets field value type.
78191>>>>>>>>>    Function ComValueType Returns CRFieldValueType
78193>>>>>>>>>        Handle hDispatchDriver
78193>>>>>>>>>        CRFieldValueType retVal
78193>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78194>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 162 OLE_VT_I4 to retVal
78195>>>>>>>>>        Function_Return retVal
78196>>>>>>>>>    End_Function
78197>>>>>>>>>
78197>>>>>>>>>    // Gets field number of bytes.
78197>>>>>>>>>    Function ComNumberOfBytes Returns Short
78199>>>>>>>>>        Handle hDispatchDriver
78199>>>>>>>>>        Short retVal
78199>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78200>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 163 OLE_VT_I2 to retVal
78201>>>>>>>>>        Function_Return retVal
78202>>>>>>>>>    End_Function
78203>>>>>>>>>
78203>>>>>>>>>    // Gets field definition unique formula name.
78203>>>>>>>>>    Function ComName Returns String
78205>>>>>>>>>        Handle hDispatchDriver
78205>>>>>>>>>        String retVal
78205>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78206>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
78207>>>>>>>>>        Function_Return retVal
78208>>>>>>>>>    End_Function
78209>>>>>>>>>
78209>>>>>>>>>    // Gets field value.
78209>>>>>>>>>    Function ComValue Returns Variant
78211>>>>>>>>>        Handle hDispatchDriver
78211>>>>>>>>>        Variant retVal
78211>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78212>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 121 OLE_VT_VARIANT to retVal
78213>>>>>>>>>        Function_Return retVal
78214>>>>>>>>>    End_Function
78215>>>>>>>>>
78215>>>>>>>>>    // Gets group name field name.
78215>>>>>>>>>    Function ComGroupNameFieldName Returns String
78217>>>>>>>>>        Handle hDispatchDriver
78217>>>>>>>>>        String retVal
78217>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78218>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 190 OLE_VT_BSTR to retVal
78219>>>>>>>>>        Function_Return retVal
78220>>>>>>>>>    End_Function
78221>>>>>>>>>
78221>>>>>>>>>    // Gets group name field parent (Report).
78221>>>>>>>>>    Function ComParent Returns Variant
78223>>>>>>>>>        Handle hDispatchDriver
78223>>>>>>>>>        Variant retVal
78223>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78224>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
78225>>>>>>>>>        Function_Return retVal
78226>>>>>>>>>    End_Function
78227>>>>>>>>>
78227>>>>>>>>>    // Gets field previous value.
78227>>>>>>>>>    Function ComPreviousValue Returns Variant
78229>>>>>>>>>        Handle hDispatchDriver
78229>>>>>>>>>        Variant retVal
78229>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78230>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 290 OLE_VT_VARIANT to retVal
78231>>>>>>>>>        Function_Return retVal
78232>>>>>>>>>    End_Function
78233>>>>>>>>>
78233>>>>>>>>>    // Gets field next value.
78233>>>>>>>>>    Function ComNextValue Returns Variant
78235>>>>>>>>>        Handle hDispatchDriver
78235>>>>>>>>>        Variant retVal
78235>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78236>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 291 OLE_VT_VARIANT to retVal
78237>>>>>>>>>        Function_Return retVal
78238>>>>>>>>>    End_Function
78239>>>>>>>>>
78239>>>>>>>>>    // Gets group number the group name fields represents.
78239>>>>>>>>>    Function ComGroupNumber Returns Short
78241>>>>>>>>>        Handle hDispatchDriver
78241>>>>>>>>>        Short retVal
78241>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78242>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 220 OLE_VT_I2 to retVal
78243>>>>>>>>>        Function_Return retVal
78244>>>>>>>>>    End_Function
78245>>>>>>>>>
78245>>>>>>>>>    // Gets or sets conditional formula.
78245>>>>>>>>>    Function ComGroupNameConditionFormula Returns String
78247>>>>>>>>>        Handle hDispatchDriver
78247>>>>>>>>>        String retVal
78247>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78248>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 760 OLE_VT_BSTR to retVal
78249>>>>>>>>>        Function_Return retVal
78250>>>>>>>>>    End_Function
78251>>>>>>>>>
78251>>>>>>>>>    // Gets or sets conditional formula.
78251>>>>>>>>>    Procedure Set ComGroupNameConditionFormula String value
78253>>>>>>>>>        Handle hDispatchDriver
78253>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78254>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78255>>>>>>>>>        Set ComProperty of hDispatchDriver 760 OLE_VT_BSTR to value
78256>>>>>>>>>    End_Procedure
78257>>>>>>>>>End_Class
78258>>>>>>>>>
78258>>>>>>>>>// CoClass
78258>>>>>>>>>// CLSID: {A40F0172-C1E2-47F3-BFD7-C2702BD8FB5E}
78258>>>>>>>>>Class cCrystalGroupNameFieldDefinition is a cComAutomationObject
78259>>>>>>>>>    Import_Class_Protocol cCrystalIGroupNameFieldDefinition
78260>>>>>>>>>
78260>>>>>>>>>    Procedure Construct_Object
78262>>>>>>>>>        Forward Send Construct_Object
78264>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
78265>>>>>>>>>    End_Procedure
78266>>>>>>>>>End_Class
78267>>>>>>>>>
78267>>>>>>>>>// CLSID: {AF376814-6120-4E28-96DD-63FD2DC27B7A}
78267>>>>>>>>>Class cCrystalISpecialVarFieldDefinition is a Mixin
78268>>>>>>>>>
78268>>>>>>>>>    // Gets field definition kind.
78268>>>>>>>>>    Function ComKind Returns CRFieldKind
78270>>>>>>>>>        Handle hDispatchDriver
78270>>>>>>>>>        CRFieldKind retVal
78270>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78271>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
78272>>>>>>>>>        Function_Return retVal
78273>>>>>>>>>    End_Function
78274>>>>>>>>>
78274>>>>>>>>>    // Gets field value type.
78274>>>>>>>>>    Function ComValueType Returns CRFieldValueType
78276>>>>>>>>>        Handle hDispatchDriver
78276>>>>>>>>>        CRFieldValueType retVal
78276>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78277>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 162 OLE_VT_I4 to retVal
78278>>>>>>>>>        Function_Return retVal
78279>>>>>>>>>    End_Function
78280>>>>>>>>>
78280>>>>>>>>>    // Gets field number of bytes.
78280>>>>>>>>>    Function ComNumberOfBytes Returns Short
78282>>>>>>>>>        Handle hDispatchDriver
78282>>>>>>>>>        Short retVal
78282>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78283>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 163 OLE_VT_I2 to retVal
78284>>>>>>>>>        Function_Return retVal
78285>>>>>>>>>    End_Function
78286>>>>>>>>>
78286>>>>>>>>>    // Gets field definition unique formula name.
78286>>>>>>>>>    Function ComName Returns String
78288>>>>>>>>>        Handle hDispatchDriver
78288>>>>>>>>>        String retVal
78288>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78289>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
78290>>>>>>>>>        Function_Return retVal
78291>>>>>>>>>    End_Function
78292>>>>>>>>>
78292>>>>>>>>>    // Gets field value.
78292>>>>>>>>>    Function ComValue Returns Variant
78294>>>>>>>>>        Handle hDispatchDriver
78294>>>>>>>>>        Variant retVal
78294>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78295>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 121 OLE_VT_VARIANT to retVal
78296>>>>>>>>>        Function_Return retVal
78297>>>>>>>>>    End_Function
78298>>>>>>>>>
78298>>>>>>>>>    // Gets special variable type.
78298>>>>>>>>>    Function ComSpecialVarType Returns CRSpecialVarType
78300>>>>>>>>>        Handle hDispatchDriver
78300>>>>>>>>>        CRSpecialVarType retVal
78300>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78301>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 205 OLE_VT_I4 to retVal
78302>>>>>>>>>        Function_Return retVal
78303>>>>>>>>>    End_Function
78304>>>>>>>>>
78304>>>>>>>>>    // Gets special variable field parent (report).
78304>>>>>>>>>    Function ComParent Returns Variant
78306>>>>>>>>>        Handle hDispatchDriver
78306>>>>>>>>>        Variant retVal
78306>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78307>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
78308>>>>>>>>>        Function_Return retVal
78309>>>>>>>>>    End_Function
78310>>>>>>>>>
78310>>>>>>>>>    // Gets field previous value.
78310>>>>>>>>>    Function ComPreviousValue Returns Variant
78312>>>>>>>>>        Handle hDispatchDriver
78312>>>>>>>>>        Variant retVal
78312>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78313>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 290 OLE_VT_VARIANT to retVal
78314>>>>>>>>>        Function_Return retVal
78315>>>>>>>>>    End_Function
78316>>>>>>>>>
78316>>>>>>>>>    // Gets field next value.
78316>>>>>>>>>    Function ComNextValue Returns Variant
78318>>>>>>>>>        Handle hDispatchDriver
78318>>>>>>>>>        Variant retVal
78318>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78319>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 291 OLE_VT_VARIANT to retVal
78320>>>>>>>>>        Function_Return retVal
78321>>>>>>>>>    End_Function
78322>>>>>>>>>End_Class
78323>>>>>>>>>
78323>>>>>>>>>// CoClass
78323>>>>>>>>>// CLSID: {9989648C-5A3E-42DE-9E8A-21637B6DE21E}
78323>>>>>>>>>Class cCrystalSpecialVarFieldDefinition is a cComAutomationObject
78324>>>>>>>>>    Import_Class_Protocol cCrystalISpecialVarFieldDefinition
78325>>>>>>>>>
78325>>>>>>>>>    Procedure Construct_Object
78327>>>>>>>>>        Forward Send Construct_Object
78329>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
78330>>>>>>>>>    End_Procedure
78331>>>>>>>>>End_Class
78332>>>>>>>>>
78332>>>>>>>>>// CLSID: {AF376815-6120-4E28-96DD-63FD2DC27B7A}
78332>>>>>>>>>Class cCrystalISummaryFieldDefinition is a Mixin
78333>>>>>>>>>
78333>>>>>>>>>    // Gets field definition kind.
78333>>>>>>>>>    Function ComKind Returns CRFieldKind
78335>>>>>>>>>        Handle hDispatchDriver
78335>>>>>>>>>        CRFieldKind retVal
78335>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78336>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
78337>>>>>>>>>        Function_Return retVal
78338>>>>>>>>>    End_Function
78339>>>>>>>>>
78339>>>>>>>>>    // Gets field value type.
78339>>>>>>>>>    Function ComValueType Returns CRFieldValueType
78341>>>>>>>>>        Handle hDispatchDriver
78341>>>>>>>>>        CRFieldValueType retVal
78341>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78342>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 162 OLE_VT_I4 to retVal
78343>>>>>>>>>        Function_Return retVal
78344>>>>>>>>>    End_Function
78345>>>>>>>>>
78345>>>>>>>>>    // Gets field number of bytes.
78345>>>>>>>>>    Function ComNumberOfBytes Returns Short
78347>>>>>>>>>        Handle hDispatchDriver
78347>>>>>>>>>        Short retVal
78347>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78348>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 163 OLE_VT_I2 to retVal
78349>>>>>>>>>        Function_Return retVal
78350>>>>>>>>>    End_Function
78351>>>>>>>>>
78351>>>>>>>>>    // Gets field definition unique formula name.
78351>>>>>>>>>    Function ComName Returns String
78353>>>>>>>>>        Handle hDispatchDriver
78353>>>>>>>>>        String retVal
78353>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78354>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
78355>>>>>>>>>        Function_Return retVal
78356>>>>>>>>>    End_Function
78357>>>>>>>>>
78357>>>>>>>>>    // Gets field value.
78357>>>>>>>>>    Function ComValue Returns Variant
78359>>>>>>>>>        Handle hDispatchDriver
78359>>>>>>>>>        Variant retVal
78359>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78360>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 121 OLE_VT_VARIANT to retVal
78361>>>>>>>>>        Function_Return retVal
78362>>>>>>>>>    End_Function
78363>>>>>>>>>
78363>>>>>>>>>    // Gets or sets summary type
78363>>>>>>>>>    Function ComSummaryType Returns CRSummaryType
78365>>>>>>>>>        Handle hDispatchDriver
78365>>>>>>>>>        CRSummaryType retVal
78365>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78366>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 206 OLE_VT_I4 to retVal
78367>>>>>>>>>        Function_Return retVal
78368>>>>>>>>>    End_Function
78369>>>>>>>>>
78369>>>>>>>>>    // Gets summary field parent (report).
78369>>>>>>>>>    Function ComParent Returns Variant
78371>>>>>>>>>        Handle hDispatchDriver
78371>>>>>>>>>        Variant retVal
78371>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78372>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
78373>>>>>>>>>        Function_Return retVal
78374>>>>>>>>>    End_Function
78375>>>>>>>>>
78375>>>>>>>>>    // Gets field previous value.
78375>>>>>>>>>    Function ComPreviousValue Returns Variant
78377>>>>>>>>>        Handle hDispatchDriver
78377>>>>>>>>>        Variant retVal
78377>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78378>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 290 OLE_VT_VARIANT to retVal
78379>>>>>>>>>        Function_Return retVal
78380>>>>>>>>>    End_Function
78381>>>>>>>>>
78381>>>>>>>>>    // Gets field next value.
78381>>>>>>>>>    Function ComNextValue Returns Variant
78383>>>>>>>>>        Handle hDispatchDriver
78383>>>>>>>>>        Variant retVal
78383>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78384>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 291 OLE_VT_VARIANT to retVal
78385>>>>>>>>>        Function_Return retVal
78386>>>>>>>>>    End_Function
78387>>>>>>>>>
78387>>>>>>>>>    // Gets the area pair the summary is in
78387>>>>>>>>>    Function ComHeaderArea Returns Variant
78389>>>>>>>>>        Handle hDispatchDriver
78389>>>>>>>>>        Variant retVal
78389>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78390>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 378 OLE_VT_DISPATCH to retVal
78391>>>>>>>>>        Function_Return retVal
78392>>>>>>>>>    End_Function
78393>>>>>>>>>
78393>>>>>>>>>    // Get the area pair the summary is in.
78393>>>>>>>>>    Function ComFooterArea Returns Variant
78395>>>>>>>>>        Handle hDispatchDriver
78395>>>>>>>>>        Variant retVal
78395>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78396>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 379 OLE_VT_DISPATCH to retVal
78397>>>>>>>>>        Function_Return retVal
78398>>>>>>>>>    End_Function
78399>>>>>>>>>
78399>>>>>>>>>    // Gets summarized field
78399>>>>>>>>>    Function ComSummarizedField Returns Variant
78401>>>>>>>>>        Handle hDispatchDriver
78401>>>>>>>>>        Variant retVal
78401>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78402>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 371 OLE_VT_DISPATCH to retVal
78403>>>>>>>>>        Function_Return retVal
78404>>>>>>>>>    End_Function
78405>>>>>>>>>
78405>>>>>>>>>    // Sets summarized field
78405>>>>>>>>>    Procedure ComSetSummarizedField Variant llSummarizedField
78407>>>>>>>>>        Handle hDispatchDriver
78407>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78408>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78409>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSummarizedField
78410>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 700 OLE_VT_VOID
78411>>>>>>>>>    End_Procedure
78412>>>>>>>>>
78412>>>>>>>>>    // Gets secondary summarized field
78412>>>>>>>>>    Function ComSecondarySummarizedField Returns Variant
78414>>>>>>>>>        Handle hDispatchDriver
78414>>>>>>>>>        Variant retVal
78414>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78415>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 663 OLE_VT_DISPATCH to retVal
78416>>>>>>>>>        Function_Return retVal
78417>>>>>>>>>    End_Function
78418>>>>>>>>>
78418>>>>>>>>>    // Sets secondary summarized field
78418>>>>>>>>>    Procedure ComSetSecondarySummarizedField Variant llsecondarySummariedField
78420>>>>>>>>>        Handle hDispatchDriver
78420>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78421>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78422>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llsecondarySummariedField
78423>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 701 OLE_VT_VOID
78424>>>>>>>>>    End_Procedure
78425>>>>>>>>>
78425>>>>>>>>>    // Gets or sets summary operation parameter
78425>>>>>>>>>    Function ComSummaryOperationParameter Returns Integer
78427>>>>>>>>>        Handle hDispatchDriver
78427>>>>>>>>>        Integer retVal
78427>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78428>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 664 OLE_VT_I4 to retVal
78429>>>>>>>>>        Function_Return retVal
78430>>>>>>>>>    End_Function
78431>>>>>>>>>
78431>>>>>>>>>    // Gets or sets summary operation parameter
78431>>>>>>>>>    Procedure Set ComSummaryOperationParameter Integer value
78433>>>>>>>>>        Handle hDispatchDriver
78433>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78434>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78435>>>>>>>>>        Set ComProperty of hDispatchDriver 664 OLE_VT_I4 to value
78436>>>>>>>>>    End_Procedure
78437>>>>>>>>>
78437>>>>>>>>>    // Gets or sets summary type
78437>>>>>>>>>    Procedure Set ComSummaryType CRSummaryType value
78439>>>>>>>>>        Handle hDispatchDriver
78439>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78440>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78441>>>>>>>>>        Set ComProperty of hDispatchDriver 206 OLE_VT_I4 to value
78442>>>>>>>>>    End_Procedure
78443>>>>>>>>>
78443>>>>>>>>>    // Gets for-cross-tab
78443>>>>>>>>>    Function ComForCrossTab Returns Boolean
78445>>>>>>>>>        Handle hDispatchDriver
78445>>>>>>>>>        Boolean retVal
78445>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78446>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 665 OLE_VT_BOOL to retVal
78447>>>>>>>>>        Function_Return retVal
78448>>>>>>>>>    End_Function
78449>>>>>>>>>
78449>>>>>>>>>    // Gets or sets summary hierarchical type
78449>>>>>>>>>    Function ComHierarchicalSummaryType Returns CRHierarchicalSummaryType
78451>>>>>>>>>        Handle hDispatchDriver
78451>>>>>>>>>        CRHierarchicalSummaryType retVal
78451>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78452>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 749 OLE_VT_I4 to retVal
78453>>>>>>>>>        Function_Return retVal
78454>>>>>>>>>    End_Function
78455>>>>>>>>>
78455>>>>>>>>>    // Gets or sets summary hierarchical type
78455>>>>>>>>>    Procedure Set ComHierarchicalSummaryType CRHierarchicalSummaryType value
78457>>>>>>>>>        Handle hDispatchDriver
78457>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78458>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78459>>>>>>>>>        Set ComProperty of hDispatchDriver 749 OLE_VT_I4 to value
78460>>>>>>>>>    End_Procedure
78461>>>>>>>>>End_Class
78462>>>>>>>>>
78462>>>>>>>>>// CoClass
78462>>>>>>>>>// CLSID: {A27B58A6-BCE1-46C3-A3EB-5E98879F3823}
78462>>>>>>>>>Class cCrystalSummaryFieldDefinition is a cComAutomationObject
78463>>>>>>>>>    Import_Class_Protocol cCrystalISummaryFieldDefinition
78464>>>>>>>>>
78464>>>>>>>>>    Procedure Construct_Object
78466>>>>>>>>>        Forward Send Construct_Object
78468>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
78469>>>>>>>>>    End_Procedure
78470>>>>>>>>>End_Class
78471>>>>>>>>>
78471>>>>>>>>>// CLSID: {AF376816-6120-4E28-96DD-63FD2DC27B7A}
78471>>>>>>>>>Class cCrystalIRunningTotalFieldDefinition is a Mixin
78472>>>>>>>>>
78472>>>>>>>>>    // Gets field definition kind.
78472>>>>>>>>>    Function ComKind Returns CRFieldKind
78474>>>>>>>>>        Handle hDispatchDriver
78474>>>>>>>>>        CRFieldKind retVal
78474>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78475>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
78476>>>>>>>>>        Function_Return retVal
78477>>>>>>>>>    End_Function
78478>>>>>>>>>
78478>>>>>>>>>    // Gets field value type.
78478>>>>>>>>>    Function ComValueType Returns CRFieldValueType
78480>>>>>>>>>        Handle hDispatchDriver
78480>>>>>>>>>        CRFieldValueType retVal
78480>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78481>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 162 OLE_VT_I4 to retVal
78482>>>>>>>>>        Function_Return retVal
78483>>>>>>>>>    End_Function
78484>>>>>>>>>
78484>>>>>>>>>    // Gets field number of bytes.
78484>>>>>>>>>    Function ComNumberOfBytes Returns Short
78486>>>>>>>>>        Handle hDispatchDriver
78486>>>>>>>>>        Short retVal
78486>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78487>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 163 OLE_VT_I2 to retVal
78488>>>>>>>>>        Function_Return retVal
78489>>>>>>>>>    End_Function
78490>>>>>>>>>
78490>>>>>>>>>    // Gets field definition unique formula name.
78490>>>>>>>>>    Function ComName Returns String
78492>>>>>>>>>        Handle hDispatchDriver
78492>>>>>>>>>        String retVal
78492>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78493>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
78494>>>>>>>>>        Function_Return retVal
78495>>>>>>>>>    End_Function
78496>>>>>>>>>
78496>>>>>>>>>    // Gets field value.
78496>>>>>>>>>    Function ComValue Returns Variant
78498>>>>>>>>>        Handle hDispatchDriver
78498>>>>>>>>>        Variant retVal
78498>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78499>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 121 OLE_VT_VARIANT to retVal
78500>>>>>>>>>        Function_Return retVal
78501>>>>>>>>>    End_Function
78502>>>>>>>>>
78502>>>>>>>>>    // Gets summary field parent (report).
78502>>>>>>>>>    Function ComParent Returns Variant
78504>>>>>>>>>        Handle hDispatchDriver
78504>>>>>>>>>        Variant retVal
78504>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78505>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
78506>>>>>>>>>        Function_Return retVal
78507>>>>>>>>>    End_Function
78508>>>>>>>>>
78508>>>>>>>>>    // Gets field previous value.
78508>>>>>>>>>    Function ComPreviousValue Returns Variant
78510>>>>>>>>>        Handle hDispatchDriver
78510>>>>>>>>>        Variant retVal
78510>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78511>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 290 OLE_VT_VARIANT to retVal
78512>>>>>>>>>        Function_Return retVal
78513>>>>>>>>>    End_Function
78514>>>>>>>>>
78514>>>>>>>>>    // Gets field next value.
78514>>>>>>>>>    Function ComNextValue Returns Variant
78516>>>>>>>>>        Handle hDispatchDriver
78516>>>>>>>>>        Variant retVal
78516>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78517>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 291 OLE_VT_VARIANT to retVal
78518>>>>>>>>>        Function_Return retVal
78519>>>>>>>>>    End_Function
78520>>>>>>>>>
78520>>>>>>>>>    // Gets running total field name.
78520>>>>>>>>>    Function ComRunningTotalFieldName Returns String
78522>>>>>>>>>        Handle hDispatchDriver
78522>>>>>>>>>        String retVal
78522>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78523>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 386 OLE_VT_BSTR to retVal
78524>>>>>>>>>        Function_Return retVal
78525>>>>>>>>>    End_Function
78526>>>>>>>>>
78526>>>>>>>>>    // Gets summarized field
78526>>>>>>>>>    Function ComSummarizedField Returns Variant
78528>>>>>>>>>        Handle hDispatchDriver
78528>>>>>>>>>        Variant retVal
78528>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78529>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 371 OLE_VT_DISPATCH to retVal
78530>>>>>>>>>        Function_Return retVal
78531>>>>>>>>>    End_Function
78532>>>>>>>>>
78532>>>>>>>>>    // Sets summarized field
78532>>>>>>>>>    Procedure ComSetSummarizedField Variant llSummarizedField
78534>>>>>>>>>        Handle hDispatchDriver
78534>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78535>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78536>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSummarizedField
78537>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 700 OLE_VT_VOID
78538>>>>>>>>>    End_Procedure
78539>>>>>>>>>
78539>>>>>>>>>    // Gets secondary summarized field
78539>>>>>>>>>    Function ComSecondarySummarizedField Returns Variant
78541>>>>>>>>>        Handle hDispatchDriver
78541>>>>>>>>>        Variant retVal
78541>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78542>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 663 OLE_VT_DISPATCH to retVal
78543>>>>>>>>>        Function_Return retVal
78544>>>>>>>>>    End_Function
78545>>>>>>>>>
78545>>>>>>>>>    // Sets secondary summarized field
78545>>>>>>>>>    Procedure ComSetSecondarySummarizedField Variant llsecondarySummariedField
78547>>>>>>>>>        Handle hDispatchDriver
78547>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78548>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78549>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llsecondarySummariedField
78550>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 701 OLE_VT_VOID
78551>>>>>>>>>    End_Procedure
78552>>>>>>>>>
78552>>>>>>>>>    // Gets or sets summary operation parameter
78552>>>>>>>>>    Function ComSummaryOperationParameter Returns Integer
78554>>>>>>>>>        Handle hDispatchDriver
78554>>>>>>>>>        Integer retVal
78554>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78555>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 664 OLE_VT_I4 to retVal
78556>>>>>>>>>        Function_Return retVal
78557>>>>>>>>>    End_Function
78558>>>>>>>>>
78558>>>>>>>>>    // Gets or sets summary operation parameter
78558>>>>>>>>>    Procedure Set ComSummaryOperationParameter Integer value
78560>>>>>>>>>        Handle hDispatchDriver
78560>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78561>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78562>>>>>>>>>        Set ComProperty of hDispatchDriver 664 OLE_VT_I4 to value
78563>>>>>>>>>    End_Procedure
78564>>>>>>>>>
78564>>>>>>>>>    // Gets or sets summary type
78564>>>>>>>>>    Function ComSummaryType Returns CRSummaryType
78566>>>>>>>>>        Handle hDispatchDriver
78566>>>>>>>>>        CRSummaryType retVal
78566>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78567>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 206 OLE_VT_I4 to retVal
78568>>>>>>>>>        Function_Return retVal
78569>>>>>>>>>    End_Function
78570>>>>>>>>>
78570>>>>>>>>>    // Gets or sets summary type
78570>>>>>>>>>    Procedure Set ComSummaryType CRSummaryType value
78572>>>>>>>>>        Handle hDispatchDriver
78572>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78573>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78574>>>>>>>>>        Set ComProperty of hDispatchDriver 206 OLE_VT_I4 to value
78575>>>>>>>>>    End_Procedure
78576>>>>>>>>>
78576>>>>>>>>>    // Gets evaluate condition
78576>>>>>>>>>    Function ComEvaluateCondition Returns CRRunningTotalCondition
78578>>>>>>>>>        Handle hDispatchDriver
78578>>>>>>>>>        CRRunningTotalCondition retVal
78578>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78579>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 666 OLE_VT_I4 to retVal
78580>>>>>>>>>        Function_Return retVal
78581>>>>>>>>>    End_Function
78582>>>>>>>>>
78582>>>>>>>>>    // Sets to no evaluate condition
78582>>>>>>>>>    Procedure ComSetNoEvaluateCondition
78584>>>>>>>>>        Handle hDispatchDriver
78584>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78585>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 541 OLE_VT_VOID
78586>>>>>>>>>    End_Procedure
78587>>>>>>>>>
78587>>>>>>>>>    // Gets reset condition
78587>>>>>>>>>    Function ComResetCondition Returns CRRunningTotalCondition
78589>>>>>>>>>        Handle hDispatchDriver
78589>>>>>>>>>        CRRunningTotalCondition retVal
78589>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78590>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 667 OLE_VT_I4 to retVal
78591>>>>>>>>>        Function_Return retVal
78592>>>>>>>>>    End_Function
78593>>>>>>>>>
78593>>>>>>>>>    // Sets to no reset condition
78593>>>>>>>>>    Procedure ComSetNoResetCondition
78595>>>>>>>>>        Handle hDispatchDriver
78595>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78596>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 542 OLE_VT_VOID
78597>>>>>>>>>    End_Procedure
78598>>>>>>>>>
78598>>>>>>>>>    // Gets or sets evaluate group number
78598>>>>>>>>>    Function ComEvaluateGroupNumber Returns Short
78600>>>>>>>>>        Handle hDispatchDriver
78600>>>>>>>>>        Short retVal
78600>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78601>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 668 OLE_VT_I2 to retVal
78602>>>>>>>>>        Function_Return retVal
78603>>>>>>>>>    End_Function
78604>>>>>>>>>
78604>>>>>>>>>    // Gets or sets evaluate group number
78604>>>>>>>>>    Procedure Set ComEvaluateGroupNumber Short value
78606>>>>>>>>>        Handle hDispatchDriver
78606>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78607>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78608>>>>>>>>>        Set ComProperty of hDispatchDriver 668 OLE_VT_I2 to value
78609>>>>>>>>>    End_Procedure
78610>>>>>>>>>
78610>>>>>>>>>    // Gets or sets reset group number
78610>>>>>>>>>    Function ComResetGroupNumber Returns Short
78612>>>>>>>>>        Handle hDispatchDriver
78612>>>>>>>>>        Short retVal
78612>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78613>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 669 OLE_VT_I2 to retVal
78614>>>>>>>>>        Function_Return retVal
78615>>>>>>>>>    End_Function
78616>>>>>>>>>
78616>>>>>>>>>    // Gets or sets reset group number
78616>>>>>>>>>    Procedure Set ComResetGroupNumber Short value
78618>>>>>>>>>        Handle hDispatchDriver
78618>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78619>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78620>>>>>>>>>        Set ComProperty of hDispatchDriver 669 OLE_VT_I2 to value
78621>>>>>>>>>    End_Procedure
78622>>>>>>>>>
78622>>>>>>>>>    // Gets evaluate condition field
78622>>>>>>>>>    Function ComEvaluateConditionField Returns Variant
78624>>>>>>>>>        Handle hDispatchDriver
78624>>>>>>>>>        Variant retVal
78624>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78625>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 670 OLE_VT_DISPATCH to retVal
78626>>>>>>>>>        Function_Return retVal
78627>>>>>>>>>    End_Function
78628>>>>>>>>>
78628>>>>>>>>>    // Sets evaluate condition field
78628>>>>>>>>>    Procedure ComSetEvaluateConditionField Variant llpEvaluateConditionField
78630>>>>>>>>>        Handle hDispatchDriver
78630>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78631>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78632>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpEvaluateConditionField
78633>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 702 OLE_VT_VOID
78634>>>>>>>>>    End_Procedure
78635>>>>>>>>>
78635>>>>>>>>>    // Gets reset condition field
78635>>>>>>>>>    Function ComResetConditionField Returns Variant
78637>>>>>>>>>        Handle hDispatchDriver
78637>>>>>>>>>        Variant retVal
78637>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78638>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 671 OLE_VT_DISPATCH to retVal
78639>>>>>>>>>        Function_Return retVal
78640>>>>>>>>>    End_Function
78641>>>>>>>>>
78641>>>>>>>>>    // Sets reset condition field
78641>>>>>>>>>    Procedure ComSetResetConditionField Variant llpResetConditionField
78643>>>>>>>>>        Handle hDispatchDriver
78643>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78644>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78645>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpResetConditionField
78646>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 703 OLE_VT_VOID
78647>>>>>>>>>    End_Procedure
78648>>>>>>>>>
78648>>>>>>>>>    // Gets or sets evaluate condition formula
78648>>>>>>>>>    Function ComEvaluateConditionFormula Returns String
78650>>>>>>>>>        Handle hDispatchDriver
78650>>>>>>>>>        String retVal
78650>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78651>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 672 OLE_VT_BSTR to retVal
78652>>>>>>>>>        Function_Return retVal
78653>>>>>>>>>    End_Function
78654>>>>>>>>>
78654>>>>>>>>>    // Gets or sets evaluate condition formula
78654>>>>>>>>>    Procedure Set ComEvaluateConditionFormula String value
78656>>>>>>>>>        Handle hDispatchDriver
78656>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78657>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78658>>>>>>>>>        Set ComProperty of hDispatchDriver 672 OLE_VT_BSTR to value
78659>>>>>>>>>    End_Procedure
78660>>>>>>>>>
78660>>>>>>>>>    // Gets or sets reset condition formula
78660>>>>>>>>>    Function ComResetConditionFormula Returns String
78662>>>>>>>>>        Handle hDispatchDriver
78662>>>>>>>>>        String retVal
78662>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78663>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 673 OLE_VT_BSTR to retVal
78664>>>>>>>>>        Function_Return retVal
78665>>>>>>>>>    End_Function
78666>>>>>>>>>
78666>>>>>>>>>    // Gets or sets reset condition formula
78666>>>>>>>>>    Procedure Set ComResetConditionFormula String value
78668>>>>>>>>>        Handle hDispatchDriver
78668>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78669>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78670>>>>>>>>>        Set ComProperty of hDispatchDriver 673 OLE_VT_BSTR to value
78671>>>>>>>>>    End_Procedure
78672>>>>>>>>>
78672>>>>>>>>>    // Gets or sets summary hierarchical type
78672>>>>>>>>>    Function ComHierarchicalSummaryType Returns CRHierarchicalSummaryType
78674>>>>>>>>>        Handle hDispatchDriver
78674>>>>>>>>>        CRHierarchicalSummaryType retVal
78674>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78675>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 749 OLE_VT_I4 to retVal
78676>>>>>>>>>        Function_Return retVal
78677>>>>>>>>>    End_Function
78678>>>>>>>>>
78678>>>>>>>>>    // Gets or sets summary hierarchical type
78678>>>>>>>>>    Procedure Set ComHierarchicalSummaryType CRHierarchicalSummaryType value
78680>>>>>>>>>        Handle hDispatchDriver
78680>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78681>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78682>>>>>>>>>        Set ComProperty of hDispatchDriver 749 OLE_VT_I4 to value
78683>>>>>>>>>    End_Procedure
78684>>>>>>>>>End_Class
78685>>>>>>>>>
78685>>>>>>>>>// CoClass
78685>>>>>>>>>// CLSID: {ABBF3869-FA3A-4D0E-89D2-68589338DA2C}
78685>>>>>>>>>Class cCrystalRunningTotalFieldDefinition is a cComAutomationObject
78686>>>>>>>>>    Import_Class_Protocol cCrystalIRunningTotalFieldDefinition
78687>>>>>>>>>
78687>>>>>>>>>    Procedure Construct_Object
78689>>>>>>>>>        Forward Send Construct_Object
78691>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
78692>>>>>>>>>    End_Procedure
78693>>>>>>>>>End_Class
78694>>>>>>>>>
78694>>>>>>>>>// CLSID: {AF376817-6120-4E28-96DD-63FD2DC27B7A}
78694>>>>>>>>>Class cCrystalISQLExpressionFieldDefinition is a Mixin
78695>>>>>>>>>
78695>>>>>>>>>    // Gets field definition kind.
78695>>>>>>>>>    Function ComKind Returns CRFieldKind
78697>>>>>>>>>        Handle hDispatchDriver
78697>>>>>>>>>        CRFieldKind retVal
78697>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78698>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
78699>>>>>>>>>        Function_Return retVal
78700>>>>>>>>>    End_Function
78701>>>>>>>>>
78701>>>>>>>>>    // Gets field value type.
78701>>>>>>>>>    Function ComValueType Returns CRFieldValueType
78703>>>>>>>>>        Handle hDispatchDriver
78703>>>>>>>>>        CRFieldValueType retVal
78703>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78704>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 162 OLE_VT_I4 to retVal
78705>>>>>>>>>        Function_Return retVal
78706>>>>>>>>>    End_Function
78707>>>>>>>>>
78707>>>>>>>>>    // Gets field number of bytes.
78707>>>>>>>>>    Function ComNumberOfBytes Returns Short
78709>>>>>>>>>        Handle hDispatchDriver
78709>>>>>>>>>        Short retVal
78709>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78710>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 163 OLE_VT_I2 to retVal
78711>>>>>>>>>        Function_Return retVal
78712>>>>>>>>>    End_Function
78713>>>>>>>>>
78713>>>>>>>>>    // Gets field definition unique formula name.
78713>>>>>>>>>    Function ComName Returns String
78715>>>>>>>>>        Handle hDispatchDriver
78715>>>>>>>>>        String retVal
78715>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78716>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
78717>>>>>>>>>        Function_Return retVal
78718>>>>>>>>>    End_Function
78719>>>>>>>>>
78719>>>>>>>>>    // Gets field value.
78719>>>>>>>>>    Function ComValue Returns Variant
78721>>>>>>>>>        Handle hDispatchDriver
78721>>>>>>>>>        Variant retVal
78721>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78722>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 121 OLE_VT_VARIANT to retVal
78723>>>>>>>>>        Function_Return retVal
78724>>>>>>>>>    End_Function
78725>>>>>>>>>
78725>>>>>>>>>    // Gets summary field parent (report).
78725>>>>>>>>>    Function ComParent Returns Variant
78727>>>>>>>>>        Handle hDispatchDriver
78727>>>>>>>>>        Variant retVal
78727>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78728>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
78729>>>>>>>>>        Function_Return retVal
78730>>>>>>>>>    End_Function
78731>>>>>>>>>
78731>>>>>>>>>    // Gets field previous value.
78731>>>>>>>>>    Function ComPreviousValue Returns Variant
78733>>>>>>>>>        Handle hDispatchDriver
78733>>>>>>>>>        Variant retVal
78733>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78734>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 290 OLE_VT_VARIANT to retVal
78735>>>>>>>>>        Function_Return retVal
78736>>>>>>>>>    End_Function
78737>>>>>>>>>
78737>>>>>>>>>    // Gets field next value.
78737>>>>>>>>>    Function ComNextValue Returns Variant
78739>>>>>>>>>        Handle hDispatchDriver
78739>>>>>>>>>        Variant retVal
78739>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78740>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 291 OLE_VT_VARIANT to retVal
78741>>>>>>>>>        Function_Return retVal
78742>>>>>>>>>    End_Function
78743>>>>>>>>>
78743>>>>>>>>>    // Gets SQL expression field name.
78743>>>>>>>>>    Function ComSQLExpressionFieldName Returns String
78745>>>>>>>>>        Handle hDispatchDriver
78745>>>>>>>>>        String retVal
78745>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78746>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 383 OLE_VT_BSTR to retVal
78747>>>>>>>>>        Function_Return retVal
78748>>>>>>>>>    End_Function
78749>>>>>>>>>
78749>>>>>>>>>    // Gets or sets SQL expression text.
78749>>>>>>>>>    Function ComText Returns String
78751>>>>>>>>>        Handle hDispatchDriver
78751>>>>>>>>>        String retVal
78751>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78752>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 157 OLE_VT_BSTR to retVal
78753>>>>>>>>>        Function_Return retVal
78754>>>>>>>>>    End_Function
78755>>>>>>>>>
78755>>>>>>>>>    // Gets or sets SQL expression text.
78755>>>>>>>>>    Procedure Set ComText String value
78757>>>>>>>>>        Handle hDispatchDriver
78757>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78758>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78759>>>>>>>>>        Set ComProperty of hDispatchDriver 157 OLE_VT_BSTR to value
78760>>>>>>>>>    End_Procedure
78761>>>>>>>>>
78761>>>>>>>>>    // Checks whether the SQL expression is valid
78761>>>>>>>>>    Procedure ComCheck Boolean ByRef llpBool String ByRef llppErrorString
78763>>>>>>>>>        Handle hDispatchDriver
78763>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78764>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
78765>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_BOOL) llpBool
78766>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_BSTR) llppErrorString
78767>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 384 OLE_VT_VOID
78768>>>>>>>>>    End_Procedure
78769>>>>>>>>>End_Class
78770>>>>>>>>>
78770>>>>>>>>>// CoClass
78770>>>>>>>>>// CLSID: {4E675E93-4EF5-4569-B2DB-C4E0B24B46EA}
78770>>>>>>>>>Class cCrystalSQLExpressionFieldDefinition is a cComAutomationObject
78771>>>>>>>>>    Import_Class_Protocol cCrystalISQLExpressionFieldDefinition
78772>>>>>>>>>
78772>>>>>>>>>    Procedure Construct_Object
78774>>>>>>>>>        Forward Send Construct_Object
78776>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
78777>>>>>>>>>    End_Procedure
78778>>>>>>>>>End_Class
78779>>>>>>>>>
78779>>>>>>>>>// CLSID: {AF376818-6120-4E28-96DD-63FD2DC27B7A}
78779>>>>>>>>>Class cCrystalIDatabase is a Mixin
78780>>>>>>>>>
78780>>>>>>>>>    // Gets database table collection.
78780>>>>>>>>>    Function ComTables Returns Variant
78782>>>>>>>>>        Handle hDispatchDriver
78782>>>>>>>>>        Variant retVal
78782>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78783>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 227 OLE_VT_DISPATCH to retVal
78784>>>>>>>>>        Function_Return retVal
78785>>>>>>>>>    End_Function
78786>>>>>>>>>
78786>>>>>>>>>    // Gets database parent (Report).
78786>>>>>>>>>    Function ComParent Returns Variant
78788>>>>>>>>>        Handle hDispatchDriver
78788>>>>>>>>>        Variant retVal
78788>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78789>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
78790>>>>>>>>>        Function_Return retVal
78791>>>>>>>>>    End_Function
78792>>>>>>>>>
78792>>>>>>>>>    // Log on server.
78792>>>>>>>>>    Procedure ComLogOnServer String llpDllName String llpServerName Variant llpDatabaseName Variant llpUserID Variant llpPassword
78794>>>>>>>>>        Handle hDispatchDriver
78794>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78795>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
78796>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpDllName
78797>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpServerName
78798>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpDatabaseName
78799>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpUserID
78800>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpPassword
78801>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 228 OLE_VT_VOID
78802>>>>>>>>>    End_Procedure
78803>>>>>>>>>
78803>>>>>>>>>    // Log off server.
78803>>>>>>>>>    Procedure ComLogOffServer String llpDllName String llpServerName Variant llpDatabaseName Variant llpUserID Variant llpPassword
78805>>>>>>>>>        Handle hDispatchDriver
78805>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78806>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
78807>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpDllName
78808>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpServerName
78809>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpDatabaseName
78810>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpUserID
78811>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpPassword
78812>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 229 OLE_VT_VOID
78813>>>>>>>>>    End_Procedure
78814>>>>>>>>>
78814>>>>>>>>>    // sets specified table data source
78814>>>>>>>>>    Procedure ComSetDataSource Variant lldata Variant lldataTag Variant lltableNumber
78816>>>>>>>>>        Handle hDispatchDriver
78816>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78817>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
78818>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lldata
78819>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lldataTag
78820>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lltableNumber
78821>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 234 OLE_VT_VOID
78822>>>>>>>>>    End_Procedure
78823>>>>>>>>>
78823>>>>>>>>>    // Verifies the database.
78823>>>>>>>>>    Procedure ComVerify
78825>>>>>>>>>        Handle hDispatchDriver
78825>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78826>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 322 OLE_VT_VOID
78827>>>>>>>>>    End_Procedure
78828>>>>>>>>>
78828>>>>>>>>>    // Gets database link collection.
78828>>>>>>>>>    Function ComLinks Returns Variant
78830>>>>>>>>>        Handle hDispatchDriver
78830>>>>>>>>>        Variant retVal
78830>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78831>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 650 OLE_VT_DISPATCH to retVal
78832>>>>>>>>>        Function_Return retVal
78833>>>>>>>>>    End_Function
78834>>>>>>>>>
78834>>>>>>>>>    // Add a database table through OLE DB provider.
78834>>>>>>>>>    Procedure ComAddOLEDBSource String llpConnectionString String llpTableName
78836>>>>>>>>>        Handle hDispatchDriver
78836>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78837>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
78838>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpConnectionString
78839>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpTableName
78840>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 539 OLE_VT_VOID
78841>>>>>>>>>    End_Procedure
78842>>>>>>>>>
78842>>>>>>>>>    // Add a database table through ADO connection and command.
78842>>>>>>>>>    Procedure ComAddADOCommand Variant llpConnection Variant llpCommand
78844>>>>>>>>>        Handle hDispatchDriver
78844>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78845>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
78846>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpConnection
78847>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpCommand
78848>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 540 OLE_VT_VOID
78849>>>>>>>>>    End_Procedure
78850>>>>>>>>>
78850>>>>>>>>>    // Log on server with server type or connect info.
78850>>>>>>>>>    Procedure ComLogOnServerEx String llpDllName String llpServerName Variant llpDatabaseName Variant llpUserID Variant llpPassword Variant llpServerType Variant llpConnectionString
78852>>>>>>>>>        Handle hDispatchDriver
78852>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78853>>>>>>>>>        Send PrepareParams to hDispatchDriver 7
78854>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpDllName
78855>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpServerName
78856>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpDatabaseName
78857>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpUserID
78858>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpPassword
78859>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpServerType
78860>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpConnectionString
78861>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 545 OLE_VT_VOID
78862>>>>>>>>>    End_Procedure
78863>>>>>>>>>End_Class
78864>>>>>>>>>
78864>>>>>>>>>// CoClass
78864>>>>>>>>>// CLSID: {5F29CFCC-D7AE-41AC-A74F-2E6F39BAFA4C}
78864>>>>>>>>>Class cCrystalDatabase is a cComAutomationObject
78865>>>>>>>>>    Import_Class_Protocol cCrystalIDatabase
78866>>>>>>>>>
78866>>>>>>>>>    Procedure Construct_Object
78868>>>>>>>>>        Forward Send Construct_Object
78870>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
78871>>>>>>>>>    End_Procedure
78872>>>>>>>>>End_Class
78873>>>>>>>>>
78873>>>>>>>>>// CLSID: {AF376819-6120-4E28-96DD-63FD2DC27B7A}
78873>>>>>>>>>Class cCrystalIDatabaseTables is a Mixin
78874>>>>>>>>>
78874>>>>>>>>>    Function Com_NewEnum Returns Variant
78876>>>>>>>>>        Handle hDispatchDriver
78876>>>>>>>>>        Variant retVal
78876>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78877>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
78878>>>>>>>>>        Function_Return retVal
78879>>>>>>>>>    End_Function
78880>>>>>>>>>
78880>>>>>>>>>    // Gets collection item.
78880>>>>>>>>>    Function ComItem Integer llindex Returns Variant
78882>>>>>>>>>        Handle hDispatchDriver
78882>>>>>>>>>        Variant retVal
78882>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78883>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78884>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
78885>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
78886>>>>>>>>>        Function_Return retVal
78887>>>>>>>>>    End_Function
78888>>>>>>>>>
78888>>>>>>>>>    // Gets collection count.
78888>>>>>>>>>    Function ComCount Returns Integer
78890>>>>>>>>>        Handle hDispatchDriver
78890>>>>>>>>>        Integer retVal
78890>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78891>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
78892>>>>>>>>>        Function_Return retVal
78893>>>>>>>>>    End_Function
78894>>>>>>>>>
78894>>>>>>>>>    // Gets database table collection parent (Database).
78894>>>>>>>>>    Function ComParent Returns Variant
78896>>>>>>>>>        Handle hDispatchDriver
78896>>>>>>>>>        Variant retVal
78896>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78897>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
78898>>>>>>>>>        Function_Return retVal
78899>>>>>>>>>    End_Function
78900>>>>>>>>>
78900>>>>>>>>>    // Adds a database table.
78900>>>>>>>>>    Procedure ComAdd String llpLocation Variant llpSubLocation Variant llpConnectInfo Variant lltableType Variant llpDllName Variant llpServerName Variant llpServerType Variant llpDatabaseName Variant llpUserID Variant llpPassword
78902>>>>>>>>>        Handle hDispatchDriver
78902>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78903>>>>>>>>>        Send PrepareParams to hDispatchDriver 10
78904>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpLocation
78905>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpSubLocation
78906>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpConnectInfo
78907>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lltableType
78908>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpDllName
78909>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpServerName
78910>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpServerType
78911>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpDatabaseName
78912>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpUserID
78913>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpPassword
78914>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 230 OLE_VT_VOID
78915>>>>>>>>>    End_Procedure
78916>>>>>>>>>
78916>>>>>>>>>    // Delete a database table.
78916>>>>>>>>>    Procedure ComDelete Integer llindex
78918>>>>>>>>>        Handle hDispatchDriver
78918>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78919>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78920>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
78921>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
78922>>>>>>>>>    End_Procedure
78923>>>>>>>>>
78923>>>>>>>>>    // Adds a stored procedure.
78923>>>>>>>>>    Procedure ComAddStoredProcedure String llpLocation Variant llpSubLocation Variant llpConnectInfo Variant lltableType Variant llpDllName Variant llpServerName Variant llpServerType Variant llpDatabaseName Variant llpUserID Variant llpPassword Variant llparamValueInfos
78925>>>>>>>>>        Handle hDispatchDriver
78925>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78926>>>>>>>>>        Send PrepareParams to hDispatchDriver 11
78927>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpLocation
78928>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpSubLocation
78929>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpConnectInfo
78930>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lltableType
78931>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpDllName
78932>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpServerName
78933>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpServerType
78934>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpDatabaseName
78935>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpUserID
78936>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpPassword
78937>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llparamValueInfos
78938>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 731 OLE_VT_VOID
78939>>>>>>>>>    End_Procedure
78940>>>>>>>>>End_Class
78941>>>>>>>>>
78941>>>>>>>>>// CoClass
78941>>>>>>>>>// CLSID: {B1B55DDB-9119-49C0-AB43-F79869D26C6D}
78941>>>>>>>>>Class cCrystalDatabaseTables is a cComAutomationObject
78942>>>>>>>>>    Import_Class_Protocol cCrystalIDatabaseTables
78943>>>>>>>>>
78943>>>>>>>>>    Procedure Construct_Object
78945>>>>>>>>>        Forward Send Construct_Object
78947>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
78948>>>>>>>>>    End_Procedure
78949>>>>>>>>>End_Class
78950>>>>>>>>>
78950>>>>>>>>>// CLSID: {AF37681A-6120-4E28-96DD-63FD2DC27B7A}
78950>>>>>>>>>Class cCrystalIDatabaseTable is a Mixin
78951>>>>>>>>>
78951>>>>>>>>>    // Gets or sets table alias name.
78951>>>>>>>>>    Function ComName Returns String
78953>>>>>>>>>        Handle hDispatchDriver
78953>>>>>>>>>        String retVal
78953>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78954>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
78955>>>>>>>>>        Function_Return retVal
78956>>>>>>>>>    End_Function
78957>>>>>>>>>
78957>>>>>>>>>    // Gets or sets table alias name.
78957>>>>>>>>>    Procedure Set ComName String value
78959>>>>>>>>>        Handle hDispatchDriver
78959>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78960>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78961>>>>>>>>>        Set ComProperty of hDispatchDriver -800 OLE_VT_BSTR to value
78962>>>>>>>>>    End_Procedure
78963>>>>>>>>>
78963>>>>>>>>>    // Gets or sets table location.
78963>>>>>>>>>    Function ComLocation Returns String
78965>>>>>>>>>        Handle hDispatchDriver
78965>>>>>>>>>        String retVal
78965>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78966>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 231 OLE_VT_BSTR to retVal
78967>>>>>>>>>        Function_Return retVal
78968>>>>>>>>>    End_Function
78969>>>>>>>>>
78969>>>>>>>>>    // Gets or sets table location.
78969>>>>>>>>>    Procedure Set ComLocation String value
78971>>>>>>>>>        Handle hDispatchDriver
78971>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78972>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
78973>>>>>>>>>        Set ComProperty of hDispatchDriver 231 OLE_VT_BSTR to value
78974>>>>>>>>>    End_Procedure
78975>>>>>>>>>
78975>>>>>>>>>    // Gets database field definition collection.
78975>>>>>>>>>    Function ComFields Returns Variant
78977>>>>>>>>>        Handle hDispatchDriver
78977>>>>>>>>>        Variant retVal
78977>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78978>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 232 OLE_VT_DISPATCH to retVal
78979>>>>>>>>>        Function_Return retVal
78980>>>>>>>>>    End_Function
78981>>>>>>>>>
78981>>>>>>>>>    // Gets database table parent (Database).
78981>>>>>>>>>    Function ComParent Returns Variant
78983>>>>>>>>>        Handle hDispatchDriver
78983>>>>>>>>>        Variant retVal
78983>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78984>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
78985>>>>>>>>>        Function_Return retVal
78986>>>>>>>>>    End_Function
78987>>>>>>>>>
78987>>>>>>>>>    // Sets table data source.
78987>>>>>>>>>    Procedure ComSetDataSource Variant lldata Variant lldataTag
78989>>>>>>>>>        Handle hDispatchDriver
78989>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78990>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
78991>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lldata
78992>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lldataTag
78993>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 234 OLE_VT_VOID
78994>>>>>>>>>    End_Procedure
78995>>>>>>>>>
78995>>>>>>>>>    // Gets or sets table driver dll name.
78995>>>>>>>>>    Function ComDllName Returns String
78997>>>>>>>>>        Handle hDispatchDriver
78997>>>>>>>>>        String retVal
78997>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
78998>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 312 OLE_VT_BSTR to retVal
78999>>>>>>>>>        Function_Return retVal
79000>>>>>>>>>    End_Function
79001>>>>>>>>>
79001>>>>>>>>>    // Tests table connectivity.
79001>>>>>>>>>    Function ComTestConnectivity Returns Boolean
79003>>>>>>>>>        Handle hDispatchDriver
79003>>>>>>>>>        Boolean retVal
79003>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79004>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 318 OLE_VT_BOOL to retVal
79005>>>>>>>>>        Function_Return retVal
79006>>>>>>>>>    End_Function
79007>>>>>>>>>
79007>>>>>>>>>    // Gets table type.
79007>>>>>>>>>    Function ComDatabaseType Returns CRDatabaseType
79009>>>>>>>>>        Handle hDispatchDriver
79009>>>>>>>>>        CRDatabaseType retVal
79009>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79010>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 382 OLE_VT_I4 to retVal
79011>>>>>>>>>        Function_Return retVal
79012>>>>>>>>>    End_Function
79013>>>>>>>>>
79013>>>>>>>>>    // Checks table differences.
79013>>>>>>>>>    Procedure ComCheckDifferences Integer ByRef llpDifferences Variant llreserved
79015>>>>>>>>>        Handle hDispatchDriver
79015>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79016>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
79017>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llpDifferences
79018>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_VARIANT) llreserved
79019>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 651 OLE_VT_VOID
79020>>>>>>>>>    End_Procedure
79021>>>>>>>>>
79021>>>>>>>>>    // Sets table location.
79021>>>>>>>>>    Procedure ComSetTableLocation String llpLocation String llpSubLocation String llpConnectBufferSting
79023>>>>>>>>>        Handle hDispatchDriver
79023>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79024>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
79025>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpLocation
79026>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpSubLocation
79027>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpConnectBufferSting
79028>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 654 OLE_VT_VOID
79029>>>>>>>>>    End_Procedure
79030>>>>>>>>>
79030>>>>>>>>>    // Gets or sets table connection string.
79030>>>>>>>>>    Function ComConnectBufferString Returns String
79032>>>>>>>>>        Handle hDispatchDriver
79032>>>>>>>>>        String retVal
79032>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79033>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 653 OLE_VT_BSTR to retVal
79034>>>>>>>>>        Function_Return retVal
79035>>>>>>>>>    End_Function
79036>>>>>>>>>
79036>>>>>>>>>    // Gets or sets table connection string.
79036>>>>>>>>>    Procedure Set ComConnectBufferString String value
79038>>>>>>>>>        Handle hDispatchDriver
79038>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79039>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79040>>>>>>>>>        Set ComProperty of hDispatchDriver 653 OLE_VT_BSTR to value
79041>>>>>>>>>    End_Procedure
79042>>>>>>>>>
79042>>>>>>>>>    // Gets or sets table driver dll name.
79042>>>>>>>>>    Procedure Set ComDllName String value
79044>>>>>>>>>        Handle hDispatchDriver
79044>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79045>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79046>>>>>>>>>        Set ComProperty of hDispatchDriver 312 OLE_VT_BSTR to value
79047>>>>>>>>>    End_Procedure
79048>>>>>>>>>
79048>>>>>>>>>    // Gets the connection log on properties collection of a table.
79048>>>>>>>>>    Function ComConnectionProperties Returns Variant
79050>>>>>>>>>        Handle hDispatchDriver
79050>>>>>>>>>        Variant retVal
79050>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79051>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 789 OLE_VT_DISPATCH to retVal
79052>>>>>>>>>        Function_Return retVal
79053>>>>>>>>>    End_Function
79054>>>>>>>>>
79054>>>>>>>>>    // Gets the table's full qualifiers.
79054>>>>>>>>>    Function ComQualifiers Returns Variant
79056>>>>>>>>>        Handle hDispatchDriver
79056>>>>>>>>>        Variant retVal
79056>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79057>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 800 OLE_VT_DISPATCH to retVal
79058>>>>>>>>>        Function_Return retVal
79059>>>>>>>>>    End_Function
79060>>>>>>>>>End_Class
79061>>>>>>>>>
79061>>>>>>>>>// CoClass
79061>>>>>>>>>// CLSID: {F4DFA98C-CBF4-4218-9865-6A5943AAC08A}
79061>>>>>>>>>Class cCrystalDatabaseTable is a cComAutomationObject
79062>>>>>>>>>    Import_Class_Protocol cCrystalIDatabaseTable
79063>>>>>>>>>
79063>>>>>>>>>    Procedure Construct_Object
79065>>>>>>>>>        Forward Send Construct_Object
79067>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
79068>>>>>>>>>    End_Procedure
79069>>>>>>>>>End_Class
79070>>>>>>>>>
79070>>>>>>>>>// CLSID: {AF37681D-6120-4E28-96DD-63FD2DC27B7A}
79070>>>>>>>>>Class cCrystalIDatabaseFieldDefinitions is a Mixin
79071>>>>>>>>>
79071>>>>>>>>>    Function Com_NewEnum Returns Variant
79073>>>>>>>>>        Handle hDispatchDriver
79073>>>>>>>>>        Variant retVal
79073>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79074>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
79075>>>>>>>>>        Function_Return retVal
79076>>>>>>>>>    End_Function
79077>>>>>>>>>
79077>>>>>>>>>    // Gets collection item.
79077>>>>>>>>>    Function ComItem Integer llindex Returns Variant
79079>>>>>>>>>        Handle hDispatchDriver
79079>>>>>>>>>        Variant retVal
79079>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79080>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79081>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
79082>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
79083>>>>>>>>>        Function_Return retVal
79084>>>>>>>>>    End_Function
79085>>>>>>>>>
79085>>>>>>>>>    // Gets collection count.
79085>>>>>>>>>    Function ComCount Returns Integer
79087>>>>>>>>>        Handle hDispatchDriver
79087>>>>>>>>>        Integer retVal
79087>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79088>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
79089>>>>>>>>>        Function_Return retVal
79090>>>>>>>>>    End_Function
79091>>>>>>>>>
79091>>>>>>>>>    // Gets database field collection parent (DatabaseTable).
79091>>>>>>>>>    Function ComParent Returns Variant
79093>>>>>>>>>        Handle hDispatchDriver
79093>>>>>>>>>        Variant retVal
79093>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79094>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
79095>>>>>>>>>        Function_Return retVal
79096>>>>>>>>>    End_Function
79097>>>>>>>>>
79097>>>>>>>>>    // Gets collection item by name index.
79097>>>>>>>>>    Function ComGetItemByName String llName Returns Variant
79099>>>>>>>>>        Handle hDispatchDriver
79099>>>>>>>>>        Variant retVal
79099>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79100>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79101>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
79102>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 750 OLE_VT_DISPATCH to retVal
79103>>>>>>>>>        Function_Return retVal
79104>>>>>>>>>    End_Function
79105>>>>>>>>>End_Class
79106>>>>>>>>>
79106>>>>>>>>>// CoClass
79106>>>>>>>>>// CLSID: {C8B781EB-F4FB-4C6A-B56F-F65B785DB7C7}
79106>>>>>>>>>Class cCrystalDatabaseFieldDefinitions is a cComAutomationObject
79107>>>>>>>>>    Import_Class_Protocol cCrystalIDatabaseFieldDefinitions
79108>>>>>>>>>
79108>>>>>>>>>    Procedure Construct_Object
79110>>>>>>>>>        Forward Send Construct_Object
79112>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
79113>>>>>>>>>    End_Procedure
79114>>>>>>>>>End_Class
79115>>>>>>>>>
79115>>>>>>>>>// CLSID: {AF37681E-6120-4E28-96DD-63FD2DC27B7A}
79115>>>>>>>>>Class cCrystalIFormulaFieldDefinitions is a Mixin
79116>>>>>>>>>
79116>>>>>>>>>    Function Com_NewEnum Returns Variant
79118>>>>>>>>>        Handle hDispatchDriver
79118>>>>>>>>>        Variant retVal
79118>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79119>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
79120>>>>>>>>>        Function_Return retVal
79121>>>>>>>>>    End_Function
79122>>>>>>>>>
79122>>>>>>>>>    // Gets collection item.
79122>>>>>>>>>    Function ComItem Integer llindex Returns Variant
79124>>>>>>>>>        Handle hDispatchDriver
79124>>>>>>>>>        Variant retVal
79124>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79125>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79126>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
79127>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
79128>>>>>>>>>        Function_Return retVal
79129>>>>>>>>>    End_Function
79130>>>>>>>>>
79130>>>>>>>>>    // Gets collection count.
79130>>>>>>>>>    Function ComCount Returns Integer
79132>>>>>>>>>        Handle hDispatchDriver
79132>>>>>>>>>        Integer retVal
79132>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79133>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
79134>>>>>>>>>        Function_Return retVal
79135>>>>>>>>>    End_Function
79136>>>>>>>>>
79136>>>>>>>>>    // Gets formula field collection parent (Report).
79136>>>>>>>>>    Function ComParent Returns Variant
79138>>>>>>>>>        Handle hDispatchDriver
79138>>>>>>>>>        Variant retVal
79138>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79139>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
79140>>>>>>>>>        Function_Return retVal
79141>>>>>>>>>    End_Function
79142>>>>>>>>>
79142>>>>>>>>>    // Add a formula field collection item
79142>>>>>>>>>    Function ComAdd String llFormulaName String llText Returns Variant
79144>>>>>>>>>        Handle hDispatchDriver
79144>>>>>>>>>        Variant retVal
79144>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79145>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
79146>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llFormulaName
79147>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
79148>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 230 OLE_VT_DISPATCH to retVal
79149>>>>>>>>>        Function_Return retVal
79150>>>>>>>>>    End_Function
79151>>>>>>>>>
79151>>>>>>>>>    // Delete a formula field collection item
79151>>>>>>>>>    Procedure ComDelete Variant llindex
79153>>>>>>>>>        Handle hDispatchDriver
79153>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79154>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79155>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llindex
79156>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
79157>>>>>>>>>    End_Procedure
79158>>>>>>>>>
79158>>>>>>>>>    // Gets collection item by name index.
79158>>>>>>>>>    Function ComGetItemByName String llName Returns Variant
79160>>>>>>>>>        Handle hDispatchDriver
79160>>>>>>>>>        Variant retVal
79160>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79161>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79162>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
79163>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 750 OLE_VT_DISPATCH to retVal
79164>>>>>>>>>        Function_Return retVal
79165>>>>>>>>>    End_Function
79166>>>>>>>>>End_Class
79167>>>>>>>>>
79167>>>>>>>>>// CoClass
79167>>>>>>>>>// CLSID: {DC92779A-D9E3-4F6B-9F0F-7C75EA004F8C}
79167>>>>>>>>>Class cCrystalFormulaFieldDefinitions is a cComAutomationObject
79168>>>>>>>>>    Import_Class_Protocol cCrystalIFormulaFieldDefinitions
79169>>>>>>>>>
79169>>>>>>>>>    Procedure Construct_Object
79171>>>>>>>>>        Forward Send Construct_Object
79173>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
79174>>>>>>>>>    End_Procedure
79175>>>>>>>>>End_Class
79176>>>>>>>>>
79176>>>>>>>>>// CLSID: {AF37681F-6120-4E28-96DD-63FD2DC27B7A}
79176>>>>>>>>>Class cCrystalIParameterFieldDefinitions is a Mixin
79177>>>>>>>>>
79177>>>>>>>>>    Function Com_NewEnum Returns Variant
79179>>>>>>>>>        Handle hDispatchDriver
79179>>>>>>>>>        Variant retVal
79179>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79180>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
79181>>>>>>>>>        Function_Return retVal
79182>>>>>>>>>    End_Function
79183>>>>>>>>>
79183>>>>>>>>>    // Gets collection item.
79183>>>>>>>>>    Function ComItem Integer llindex Returns Variant
79185>>>>>>>>>        Handle hDispatchDriver
79185>>>>>>>>>        Variant retVal
79185>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79186>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79187>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
79188>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
79189>>>>>>>>>        Function_Return retVal
79190>>>>>>>>>    End_Function
79191>>>>>>>>>
79191>>>>>>>>>    // Gets collection count.
79191>>>>>>>>>    Function ComCount Returns Integer
79193>>>>>>>>>        Handle hDispatchDriver
79193>>>>>>>>>        Integer retVal
79193>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79194>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
79195>>>>>>>>>        Function_Return retVal
79196>>>>>>>>>    End_Function
79197>>>>>>>>>
79197>>>>>>>>>    // Gets parameter field collection parent (report).
79197>>>>>>>>>    Function ComParent Returns Variant
79199>>>>>>>>>        Handle hDispatchDriver
79199>>>>>>>>>        Variant retVal
79199>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79200>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
79201>>>>>>>>>        Function_Return retVal
79202>>>>>>>>>    End_Function
79203>>>>>>>>>
79203>>>>>>>>>    // Add a parameter field collection item
79203>>>>>>>>>    Function ComAdd String llparameterName CRFieldValueType llValueType Returns Variant
79205>>>>>>>>>        Handle hDispatchDriver
79205>>>>>>>>>        Variant retVal
79205>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79206>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
79207>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llparameterName
79208>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llValueType
79209>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 230 OLE_VT_DISPATCH to retVal
79210>>>>>>>>>        Function_Return retVal
79211>>>>>>>>>    End_Function
79212>>>>>>>>>
79212>>>>>>>>>    // Delete a parameter field collection item
79212>>>>>>>>>    Procedure ComDelete Variant llindex
79214>>>>>>>>>        Handle hDispatchDriver
79214>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79215>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79216>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llindex
79217>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
79218>>>>>>>>>    End_Procedure
79219>>>>>>>>>
79219>>>>>>>>>    // Gets collection item by name index.
79219>>>>>>>>>    Function ComGetItemByName String llName Variant llSubreportName Returns Variant
79221>>>>>>>>>        Handle hDispatchDriver
79221>>>>>>>>>        Variant retVal
79221>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79222>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
79223>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
79224>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSubreportName
79225>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 750 OLE_VT_DISPATCH to retVal
79226>>>>>>>>>        Function_Return retVal
79227>>>>>>>>>    End_Function
79228>>>>>>>>>End_Class
79229>>>>>>>>>
79229>>>>>>>>>// CoClass
79229>>>>>>>>>// CLSID: {71732DED-A370-4DD5-9273-BCA7CA7F5005}
79229>>>>>>>>>Class cCrystalParameterFieldDefinitions is a cComAutomationObject
79230>>>>>>>>>    Import_Class_Protocol cCrystalIParameterFieldDefinitions
79231>>>>>>>>>
79231>>>>>>>>>    Procedure Construct_Object
79233>>>>>>>>>        Forward Send Construct_Object
79235>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
79236>>>>>>>>>    End_Procedure
79237>>>>>>>>>End_Class
79238>>>>>>>>>
79238>>>>>>>>>// CLSID: {AF376820-6120-4E28-96DD-63FD2DC27B7A}
79238>>>>>>>>>Class cCrystalIGroupNameFieldDefinitions is a Mixin
79239>>>>>>>>>
79239>>>>>>>>>    Function Com_NewEnum Returns Variant
79241>>>>>>>>>        Handle hDispatchDriver
79241>>>>>>>>>        Variant retVal
79241>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79242>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
79243>>>>>>>>>        Function_Return retVal
79244>>>>>>>>>    End_Function
79245>>>>>>>>>
79245>>>>>>>>>    // Gets collection item.
79245>>>>>>>>>    Function ComItem Integer llindex Returns Variant
79247>>>>>>>>>        Handle hDispatchDriver
79247>>>>>>>>>        Variant retVal
79247>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79248>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79249>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
79250>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
79251>>>>>>>>>        Function_Return retVal
79252>>>>>>>>>    End_Function
79253>>>>>>>>>
79253>>>>>>>>>    // Gets collection count.
79253>>>>>>>>>    Function ComCount Returns Integer
79255>>>>>>>>>        Handle hDispatchDriver
79255>>>>>>>>>        Integer retVal
79255>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79256>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
79257>>>>>>>>>        Function_Return retVal
79258>>>>>>>>>    End_Function
79259>>>>>>>>>
79259>>>>>>>>>    // Gets group name field collection parent (report).
79259>>>>>>>>>    Function ComParent Returns Variant
79261>>>>>>>>>        Handle hDispatchDriver
79261>>>>>>>>>        Variant retVal
79261>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79262>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
79263>>>>>>>>>        Function_Return retVal
79264>>>>>>>>>    End_Function
79265>>>>>>>>>End_Class
79266>>>>>>>>>
79266>>>>>>>>>// CoClass
79266>>>>>>>>>// CLSID: {8984E75B-FC9E-446C-9DA3-55E41FC68B67}
79266>>>>>>>>>Class cCrystalGroupNameFieldDefinitions is a cComAutomationObject
79267>>>>>>>>>    Import_Class_Protocol cCrystalIGroupNameFieldDefinitions
79268>>>>>>>>>
79268>>>>>>>>>    Procedure Construct_Object
79270>>>>>>>>>        Forward Send Construct_Object
79272>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
79273>>>>>>>>>    End_Procedure
79274>>>>>>>>>End_Class
79275>>>>>>>>>
79275>>>>>>>>>// CLSID: {AF376821-6120-4E28-96DD-63FD2DC27B7A}
79275>>>>>>>>>Class cCrystalISummaryFieldDefinitions is a Mixin
79276>>>>>>>>>
79276>>>>>>>>>    Function Com_NewEnum Returns Variant
79278>>>>>>>>>        Handle hDispatchDriver
79278>>>>>>>>>        Variant retVal
79278>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79279>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
79280>>>>>>>>>        Function_Return retVal
79281>>>>>>>>>    End_Function
79282>>>>>>>>>
79282>>>>>>>>>    // Gets collection item.
79282>>>>>>>>>    Function ComItem Integer llindex Returns Variant
79284>>>>>>>>>        Handle hDispatchDriver
79284>>>>>>>>>        Variant retVal
79284>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79285>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79286>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
79287>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
79288>>>>>>>>>        Function_Return retVal
79289>>>>>>>>>    End_Function
79290>>>>>>>>>
79290>>>>>>>>>    // Gets collection count.
79290>>>>>>>>>    Function ComCount Returns Integer
79292>>>>>>>>>        Handle hDispatchDriver
79292>>>>>>>>>        Integer retVal
79292>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79293>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
79294>>>>>>>>>        Function_Return retVal
79295>>>>>>>>>    End_Function
79296>>>>>>>>>
79296>>>>>>>>>    // Gets summary field collection parent (report).
79296>>>>>>>>>    Function ComParent Returns Variant
79298>>>>>>>>>        Handle hDispatchDriver
79298>>>>>>>>>        Variant retVal
79298>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79299>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
79300>>>>>>>>>        Function_Return retVal
79301>>>>>>>>>    End_Function
79302>>>>>>>>>
79302>>>>>>>>>    // Add a Summary field collection item
79302>>>>>>>>>    Function ComAdd Integer llgroupLevel Variant llField CRSummaryType llSummaryType Variant llsecondSummaryFieldOrFactor Returns Variant
79304>>>>>>>>>        Handle hDispatchDriver
79304>>>>>>>>>        Variant retVal
79304>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79305>>>>>>>>>        Send PrepareParams to hDispatchDriver 4
79306>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llgroupLevel
79307>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llField
79308>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llSummaryType
79309>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llsecondSummaryFieldOrFactor
79310>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 230 OLE_VT_DISPATCH to retVal
79311>>>>>>>>>        Function_Return retVal
79312>>>>>>>>>    End_Function
79313>>>>>>>>>
79313>>>>>>>>>    // Delete a Summary field collection item
79313>>>>>>>>>    Procedure ComDelete Variant llindex
79315>>>>>>>>>        Handle hDispatchDriver
79315>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79316>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79317>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llindex
79318>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
79319>>>>>>>>>    End_Procedure
79320>>>>>>>>>End_Class
79321>>>>>>>>>
79321>>>>>>>>>// CoClass
79321>>>>>>>>>// CLSID: {9FD3B3A7-744E-463B-9EC2-58CB7924833F}
79321>>>>>>>>>Class cCrystalSummaryFieldDefinitions is a cComAutomationObject
79322>>>>>>>>>    Import_Class_Protocol cCrystalISummaryFieldDefinitions
79323>>>>>>>>>
79323>>>>>>>>>    Procedure Construct_Object
79325>>>>>>>>>        Forward Send Construct_Object
79327>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
79328>>>>>>>>>    End_Procedure
79329>>>>>>>>>End_Class
79330>>>>>>>>>
79330>>>>>>>>>// CLSID: {AF376822-6120-4E28-96DD-63FD2DC27B7A}
79330>>>>>>>>>Class cCrystalIRunningTotalFieldDefinitions is a Mixin
79331>>>>>>>>>
79331>>>>>>>>>    Function Com_NewEnum Returns Variant
79333>>>>>>>>>        Handle hDispatchDriver
79333>>>>>>>>>        Variant retVal
79333>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79334>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
79335>>>>>>>>>        Function_Return retVal
79336>>>>>>>>>    End_Function
79337>>>>>>>>>
79337>>>>>>>>>    // Gets collection item.
79337>>>>>>>>>    Function ComItem Integer llindex Returns Variant
79339>>>>>>>>>        Handle hDispatchDriver
79339>>>>>>>>>        Variant retVal
79339>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79340>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79341>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
79342>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
79343>>>>>>>>>        Function_Return retVal
79344>>>>>>>>>    End_Function
79345>>>>>>>>>
79345>>>>>>>>>    // Gets collection count.
79345>>>>>>>>>    Function ComCount Returns Integer
79347>>>>>>>>>        Handle hDispatchDriver
79347>>>>>>>>>        Integer retVal
79347>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79348>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
79349>>>>>>>>>        Function_Return retVal
79350>>>>>>>>>    End_Function
79351>>>>>>>>>
79351>>>>>>>>>    // Gets summary field collection parent (report).
79351>>>>>>>>>    Function ComParent Returns Variant
79353>>>>>>>>>        Handle hDispatchDriver
79353>>>>>>>>>        Variant retVal
79353>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79354>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
79355>>>>>>>>>        Function_Return retVal
79356>>>>>>>>>    End_Function
79357>>>>>>>>>
79357>>>>>>>>>    // Add a RunningTotal field collection item
79357>>>>>>>>>    Function ComAdd String llrunningTotalName Returns Variant
79359>>>>>>>>>        Handle hDispatchDriver
79359>>>>>>>>>        Variant retVal
79359>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79360>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79361>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llrunningTotalName
79362>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 230 OLE_VT_DISPATCH to retVal
79363>>>>>>>>>        Function_Return retVal
79364>>>>>>>>>    End_Function
79365>>>>>>>>>
79365>>>>>>>>>    // Delete a RunningTotal field collection item
79365>>>>>>>>>    Procedure ComDelete Variant llindex
79367>>>>>>>>>        Handle hDispatchDriver
79367>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79368>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79369>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llindex
79370>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
79371>>>>>>>>>    End_Procedure
79372>>>>>>>>>
79372>>>>>>>>>    // Gets collection item by name index.
79372>>>>>>>>>    Function ComGetItemByName String llName Returns Variant
79374>>>>>>>>>        Handle hDispatchDriver
79374>>>>>>>>>        Variant retVal
79374>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79375>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79376>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
79377>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 750 OLE_VT_DISPATCH to retVal
79378>>>>>>>>>        Function_Return retVal
79379>>>>>>>>>    End_Function
79380>>>>>>>>>End_Class
79381>>>>>>>>>
79381>>>>>>>>>// CoClass
79381>>>>>>>>>// CLSID: {2DC7D529-693E-4D95-9346-B040E1C1A759}
79381>>>>>>>>>Class cCrystalRunningTotalFieldDefinitions is a cComAutomationObject
79382>>>>>>>>>    Import_Class_Protocol cCrystalIRunningTotalFieldDefinitions
79383>>>>>>>>>
79383>>>>>>>>>    Procedure Construct_Object
79385>>>>>>>>>        Forward Send Construct_Object
79387>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
79388>>>>>>>>>    End_Procedure
79389>>>>>>>>>End_Class
79390>>>>>>>>>
79390>>>>>>>>>// CLSID: {AF376823-6120-4E28-96DD-63FD2DC27B7A}
79390>>>>>>>>>Class cCrystalISQLExpressionFieldDefinitions is a Mixin
79391>>>>>>>>>
79391>>>>>>>>>    Function Com_NewEnum Returns Variant
79393>>>>>>>>>        Handle hDispatchDriver
79393>>>>>>>>>        Variant retVal
79393>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79394>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
79395>>>>>>>>>        Function_Return retVal
79396>>>>>>>>>    End_Function
79397>>>>>>>>>
79397>>>>>>>>>    // Gets collection item.
79397>>>>>>>>>    Function ComItem Integer llindex Returns Variant
79399>>>>>>>>>        Handle hDispatchDriver
79399>>>>>>>>>        Variant retVal
79399>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79400>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79401>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
79402>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
79403>>>>>>>>>        Function_Return retVal
79404>>>>>>>>>    End_Function
79405>>>>>>>>>
79405>>>>>>>>>    // Gets collection count.
79405>>>>>>>>>    Function ComCount Returns Integer
79407>>>>>>>>>        Handle hDispatchDriver
79407>>>>>>>>>        Integer retVal
79407>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79408>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
79409>>>>>>>>>        Function_Return retVal
79410>>>>>>>>>    End_Function
79411>>>>>>>>>
79411>>>>>>>>>    // Gets SQL expression field collection parent (report).
79411>>>>>>>>>    Function ComParent Returns Variant
79413>>>>>>>>>        Handle hDispatchDriver
79413>>>>>>>>>        Variant retVal
79413>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79414>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
79415>>>>>>>>>        Function_Return retVal
79416>>>>>>>>>    End_Function
79417>>>>>>>>>
79417>>>>>>>>>    // Add a SQL expression field collection item
79417>>>>>>>>>    Function ComAdd String llSQLExpressionName String llText Returns Variant
79419>>>>>>>>>        Handle hDispatchDriver
79419>>>>>>>>>        Variant retVal
79419>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79420>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
79421>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llSQLExpressionName
79422>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
79423>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 230 OLE_VT_DISPATCH to retVal
79424>>>>>>>>>        Function_Return retVal
79425>>>>>>>>>    End_Function
79426>>>>>>>>>
79426>>>>>>>>>    // Delete a SQL expression field collection item
79426>>>>>>>>>    Procedure ComDelete Variant llindex
79428>>>>>>>>>        Handle hDispatchDriver
79428>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79429>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79430>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llindex
79431>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
79432>>>>>>>>>    End_Procedure
79433>>>>>>>>>
79433>>>>>>>>>    // Gets collection item by name index.
79433>>>>>>>>>    Function ComGetItemByName String llName Returns Variant
79435>>>>>>>>>        Handle hDispatchDriver
79435>>>>>>>>>        Variant retVal
79435>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79436>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79437>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
79438>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 750 OLE_VT_DISPATCH to retVal
79439>>>>>>>>>        Function_Return retVal
79440>>>>>>>>>    End_Function
79441>>>>>>>>>End_Class
79442>>>>>>>>>
79442>>>>>>>>>// CoClass
79442>>>>>>>>>// CLSID: {C8AB02A3-D23B-4CA9-9006-D1CDBCF477CE}
79442>>>>>>>>>Class cCrystalSQLExpressionFieldDefinitions is a cComAutomationObject
79443>>>>>>>>>    Import_Class_Protocol cCrystalISQLExpressionFieldDefinitions
79444>>>>>>>>>
79444>>>>>>>>>    Procedure Construct_Object
79446>>>>>>>>>        Forward Send Construct_Object
79448>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
79449>>>>>>>>>    End_Procedure
79450>>>>>>>>>End_Class
79451>>>>>>>>>
79451>>>>>>>>>// CLSID: {AF376824-6120-4E28-96DD-63FD2DC27B7A}
79451>>>>>>>>>Class cCrystalIGraphObject is a Mixin
79452>>>>>>>>>
79452>>>>>>>>>    // Gets or sets object name.
79452>>>>>>>>>    Function ComName Returns String
79454>>>>>>>>>        Handle hDispatchDriver
79454>>>>>>>>>        String retVal
79454>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79455>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
79456>>>>>>>>>        Function_Return retVal
79457>>>>>>>>>    End_Function
79458>>>>>>>>>
79458>>>>>>>>>    // Gets or sets object name.
79458>>>>>>>>>    Procedure Set ComName String value
79460>>>>>>>>>        Handle hDispatchDriver
79460>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79461>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79462>>>>>>>>>        Set ComProperty of hDispatchDriver -800 OLE_VT_BSTR to value
79463>>>>>>>>>    End_Procedure
79464>>>>>>>>>
79464>>>>>>>>>    // Gets report object kind.
79464>>>>>>>>>    Function ComKind Returns CRObjectKind
79466>>>>>>>>>        Handle hDispatchDriver
79466>>>>>>>>>        CRObjectKind retVal
79466>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79467>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
79468>>>>>>>>>        Function_Return retVal
79469>>>>>>>>>    End_Function
79470>>>>>>>>>
79470>>>>>>>>>    // Gets or sets object upper left position (twips).
79470>>>>>>>>>    Function ComLeft Returns Integer
79472>>>>>>>>>        Handle hDispatchDriver
79472>>>>>>>>>        Integer retVal
79472>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79473>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_I4 to retVal
79474>>>>>>>>>        Function_Return retVal
79475>>>>>>>>>    End_Function
79476>>>>>>>>>
79476>>>>>>>>>    // Gets or sets object upper left position (twips).
79476>>>>>>>>>    Procedure Set ComLeft Integer value
79478>>>>>>>>>        Handle hDispatchDriver
79478>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79479>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79480>>>>>>>>>        Set ComProperty of hDispatchDriver 102 OLE_VT_I4 to value
79481>>>>>>>>>    End_Procedure
79482>>>>>>>>>
79482>>>>>>>>>    // Gets or sets object upper top position (twips).
79482>>>>>>>>>    Function ComTop Returns Integer
79484>>>>>>>>>        Handle hDispatchDriver
79484>>>>>>>>>        Integer retVal
79484>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79485>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_I4 to retVal
79486>>>>>>>>>        Function_Return retVal
79487>>>>>>>>>    End_Function
79488>>>>>>>>>
79488>>>>>>>>>    // Gets or sets object upper top position (twips).
79488>>>>>>>>>    Procedure Set ComTop Integer value
79490>>>>>>>>>        Handle hDispatchDriver
79490>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79491>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79492>>>>>>>>>        Set ComProperty of hDispatchDriver 103 OLE_VT_I4 to value
79493>>>>>>>>>    End_Procedure
79494>>>>>>>>>
79494>>>>>>>>>    // Gets or sets object width (twips).
79494>>>>>>>>>    Function ComWidth Returns Integer
79496>>>>>>>>>        Handle hDispatchDriver
79496>>>>>>>>>        Integer retVal
79496>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79497>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
79498>>>>>>>>>        Function_Return retVal
79499>>>>>>>>>    End_Function
79500>>>>>>>>>
79500>>>>>>>>>    // Gets or sets object width (twips).
79500>>>>>>>>>    Procedure Set ComWidth Integer value
79502>>>>>>>>>        Handle hDispatchDriver
79502>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79503>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79504>>>>>>>>>        Set ComProperty of hDispatchDriver 104 OLE_VT_I4 to value
79505>>>>>>>>>    End_Procedure
79506>>>>>>>>>
79506>>>>>>>>>    // Gets or sets object height (twips).
79506>>>>>>>>>    Function ComHeight Returns Integer
79508>>>>>>>>>        Handle hDispatchDriver
79508>>>>>>>>>        Integer retVal
79508>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79509>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_I4 to retVal
79510>>>>>>>>>        Function_Return retVal
79511>>>>>>>>>    End_Function
79512>>>>>>>>>
79512>>>>>>>>>    // Gets or sets object height (twips).
79512>>>>>>>>>    Procedure Set ComHeight Integer value
79514>>>>>>>>>        Handle hDispatchDriver
79514>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79515>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79516>>>>>>>>>        Set ComProperty of hDispatchDriver 105 OLE_VT_I4 to value
79517>>>>>>>>>    End_Procedure
79518>>>>>>>>>
79518>>>>>>>>>    // Gets or sets left line style.
79518>>>>>>>>>    Function ComLeftLineStyle Returns CRLineStyle
79520>>>>>>>>>        Handle hDispatchDriver
79520>>>>>>>>>        CRLineStyle retVal
79520>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79521>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_I4 to retVal
79522>>>>>>>>>        Function_Return retVal
79523>>>>>>>>>    End_Function
79524>>>>>>>>>
79524>>>>>>>>>    // Gets or sets left line style.
79524>>>>>>>>>    Procedure Set ComLeftLineStyle CRLineStyle value
79526>>>>>>>>>        Handle hDispatchDriver
79526>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79527>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79528>>>>>>>>>        Set ComProperty of hDispatchDriver 106 OLE_VT_I4 to value
79529>>>>>>>>>    End_Procedure
79530>>>>>>>>>
79530>>>>>>>>>    // Gets or sets right line style.
79530>>>>>>>>>    Function ComRightLineStyle Returns CRLineStyle
79532>>>>>>>>>        Handle hDispatchDriver
79532>>>>>>>>>        CRLineStyle retVal
79532>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79533>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 107 OLE_VT_I4 to retVal
79534>>>>>>>>>        Function_Return retVal
79535>>>>>>>>>    End_Function
79536>>>>>>>>>
79536>>>>>>>>>    // Gets or sets right line style.
79536>>>>>>>>>    Procedure Set ComRightLineStyle CRLineStyle value
79538>>>>>>>>>        Handle hDispatchDriver
79538>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79539>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79540>>>>>>>>>        Set ComProperty of hDispatchDriver 107 OLE_VT_I4 to value
79541>>>>>>>>>    End_Procedure
79542>>>>>>>>>
79542>>>>>>>>>    // Gets or sets top line style.
79542>>>>>>>>>    Function ComTopLineStyle Returns CRLineStyle
79544>>>>>>>>>        Handle hDispatchDriver
79544>>>>>>>>>        CRLineStyle retVal
79544>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79545>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_I4 to retVal
79546>>>>>>>>>        Function_Return retVal
79547>>>>>>>>>    End_Function
79548>>>>>>>>>
79548>>>>>>>>>    // Gets or sets top line style.
79548>>>>>>>>>    Procedure Set ComTopLineStyle CRLineStyle value
79550>>>>>>>>>        Handle hDispatchDriver
79550>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79551>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79552>>>>>>>>>        Set ComProperty of hDispatchDriver 108 OLE_VT_I4 to value
79553>>>>>>>>>    End_Procedure
79554>>>>>>>>>
79554>>>>>>>>>    // Gets or sets bottom line style.
79554>>>>>>>>>    Function ComBottomLineStyle Returns CRLineStyle
79556>>>>>>>>>        Handle hDispatchDriver
79556>>>>>>>>>        CRLineStyle retVal
79556>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79557>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 109 OLE_VT_I4 to retVal
79558>>>>>>>>>        Function_Return retVal
79559>>>>>>>>>    End_Function
79560>>>>>>>>>
79560>>>>>>>>>    // Gets or sets bottom line style.
79560>>>>>>>>>    Procedure Set ComBottomLineStyle CRLineStyle value
79562>>>>>>>>>        Handle hDispatchDriver
79562>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79563>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79564>>>>>>>>>        Set ComProperty of hDispatchDriver 109 OLE_VT_I4 to value
79565>>>>>>>>>    End_Procedure
79566>>>>>>>>>
79566>>>>>>>>>    // Gets or sets border drop shadow.
79566>>>>>>>>>    Function ComHasDropShadow Returns Boolean
79568>>>>>>>>>        Handle hDispatchDriver
79568>>>>>>>>>        Boolean retVal
79568>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79569>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_BOOL to retVal
79570>>>>>>>>>        Function_Return retVal
79571>>>>>>>>>    End_Function
79572>>>>>>>>>
79572>>>>>>>>>    // Gets or sets border drop shadow.
79572>>>>>>>>>    Procedure Set ComHasDropShadow Boolean value
79574>>>>>>>>>        Handle hDispatchDriver
79574>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79575>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79576>>>>>>>>>        Set ComProperty of hDispatchDriver 111 OLE_VT_BOOL to value
79577>>>>>>>>>    End_Procedure
79578>>>>>>>>>
79578>>>>>>>>>    // Gets or sets object background color.
79578>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
79580>>>>>>>>>        Handle hDispatchDriver
79580>>>>>>>>>        OLE_COLOR retVal
79580>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79581>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_I4 to retVal
79582>>>>>>>>>        Function_Return retVal
79583>>>>>>>>>    End_Function
79584>>>>>>>>>
79584>>>>>>>>>    // Gets or sets object background color.
79584>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
79586>>>>>>>>>        Handle hDispatchDriver
79586>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79587>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79588>>>>>>>>>        Set ComProperty of hDispatchDriver 112 OLE_VT_I4 to value
79589>>>>>>>>>    End_Procedure
79590>>>>>>>>>
79590>>>>>>>>>    // Gets or sets object border color.
79590>>>>>>>>>    Function ComBorderColor Returns OLE_COLOR
79592>>>>>>>>>        Handle hDispatchDriver
79592>>>>>>>>>        OLE_COLOR retVal
79592>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79593>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 113 OLE_VT_I4 to retVal
79594>>>>>>>>>        Function_Return retVal
79595>>>>>>>>>    End_Function
79596>>>>>>>>>
79596>>>>>>>>>    // Gets or sets object border color.
79596>>>>>>>>>    Procedure Set ComBorderColor OLE_COLOR value
79598>>>>>>>>>        Handle hDispatchDriver
79598>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79599>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79600>>>>>>>>>        Set ComProperty of hDispatchDriver 113 OLE_VT_I4 to value
79601>>>>>>>>>    End_Procedure
79602>>>>>>>>>
79602>>>>>>>>>    // Gets object parent (Section).
79602>>>>>>>>>    Function ComParent Returns Variant
79604>>>>>>>>>        Handle hDispatchDriver
79604>>>>>>>>>        Variant retVal
79604>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79605>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
79606>>>>>>>>>        Function_Return retVal
79607>>>>>>>>>    End_Function
79608>>>>>>>>>
79608>>>>>>>>>    // Gets or sets object visibility.
79608>>>>>>>>>    Function ComSuppress Returns Boolean
79610>>>>>>>>>        Handle hDispatchDriver
79610>>>>>>>>>        Boolean retVal
79610>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79611>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 114 OLE_VT_BOOL to retVal
79612>>>>>>>>>        Function_Return retVal
79613>>>>>>>>>    End_Function
79614>>>>>>>>>
79614>>>>>>>>>    // Gets or sets object visibility.
79614>>>>>>>>>    Procedure Set ComSuppress Boolean value
79616>>>>>>>>>        Handle hDispatchDriver
79616>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79617>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79618>>>>>>>>>        Set ComProperty of hDispatchDriver 114 OLE_VT_BOOL to value
79619>>>>>>>>>    End_Procedure
79620>>>>>>>>>
79620>>>>>>>>>    // Gets or sets close border on page break.
79620>>>>>>>>>    Function ComCloseAtPageBreak Returns Boolean
79622>>>>>>>>>        Handle hDispatchDriver
79622>>>>>>>>>        Boolean retVal
79622>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79623>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 115 OLE_VT_BOOL to retVal
79624>>>>>>>>>        Function_Return retVal
79625>>>>>>>>>    End_Function
79626>>>>>>>>>
79626>>>>>>>>>    // Gets or sets close border on page break.
79626>>>>>>>>>    Procedure Set ComCloseAtPageBreak Boolean value
79628>>>>>>>>>        Handle hDispatchDriver
79628>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79629>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79630>>>>>>>>>        Set ComProperty of hDispatchDriver 115 OLE_VT_BOOL to value
79631>>>>>>>>>    End_Procedure
79632>>>>>>>>>
79632>>>>>>>>>    // Gets or sets keep object together.
79632>>>>>>>>>    Function ComKeepTogether Returns Boolean
79634>>>>>>>>>        Handle hDispatchDriver
79634>>>>>>>>>        Boolean retVal
79634>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79635>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 116 OLE_VT_BOOL to retVal
79636>>>>>>>>>        Function_Return retVal
79637>>>>>>>>>    End_Function
79638>>>>>>>>>
79638>>>>>>>>>    // Gets or sets keep object together.
79638>>>>>>>>>    Procedure Set ComKeepTogether Boolean value
79640>>>>>>>>>        Handle hDispatchDriver
79640>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79641>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79642>>>>>>>>>        Set ComProperty of hDispatchDriver 116 OLE_VT_BOOL to value
79643>>>>>>>>>    End_Procedure
79644>>>>>>>>>
79644>>>>>>>>>    // Gets graph data type
79644>>>>>>>>>    Function ComDataType Returns CRGraphDataType
79646>>>>>>>>>        Handle hDispatchDriver
79646>>>>>>>>>        CRGraphDataType retVal
79646>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79647>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 199 OLE_VT_I4 to retVal
79648>>>>>>>>>        Function_Return retVal
79649>>>>>>>>>    End_Function
79650>>>>>>>>>
79650>>>>>>>>>    // Gets or sets graph type
79650>>>>>>>>>    Function ComGraphType Returns CRGraphType
79652>>>>>>>>>        Handle hDispatchDriver
79652>>>>>>>>>        CRGraphType retVal
79652>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79653>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 353 OLE_VT_I4 to retVal
79654>>>>>>>>>        Function_Return retVal
79655>>>>>>>>>    End_Function
79656>>>>>>>>>
79656>>>>>>>>>    // Gets or sets graph type
79656>>>>>>>>>    Procedure Set ComGraphType CRGraphType value
79658>>>>>>>>>        Handle hDispatchDriver
79658>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79659>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79660>>>>>>>>>        Set ComProperty of hDispatchDriver 353 OLE_VT_I4 to value
79661>>>>>>>>>    End_Procedure
79662>>>>>>>>>
79662>>>>>>>>>    // Gets or sets title
79662>>>>>>>>>    Function ComTitle Returns String
79664>>>>>>>>>        Handle hDispatchDriver
79664>>>>>>>>>        String retVal
79664>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79665>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 354 OLE_VT_BSTR to retVal
79666>>>>>>>>>        Function_Return retVal
79667>>>>>>>>>    End_Function
79668>>>>>>>>>
79668>>>>>>>>>    // Gets or sets title
79668>>>>>>>>>    Procedure Set ComTitle String value
79670>>>>>>>>>        Handle hDispatchDriver
79670>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79671>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79672>>>>>>>>>        Set ComProperty of hDispatchDriver 354 OLE_VT_BSTR to value
79673>>>>>>>>>    End_Procedure
79674>>>>>>>>>
79674>>>>>>>>>    // Gets or sets subtitle
79674>>>>>>>>>    Function ComSubTitle Returns String
79676>>>>>>>>>        Handle hDispatchDriver
79676>>>>>>>>>        String retVal
79676>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79677>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 355 OLE_VT_BSTR to retVal
79678>>>>>>>>>        Function_Return retVal
79679>>>>>>>>>    End_Function
79680>>>>>>>>>
79680>>>>>>>>>    // Gets or sets subtitle
79680>>>>>>>>>    Procedure Set ComSubTitle String value
79682>>>>>>>>>        Handle hDispatchDriver
79682>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79683>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79684>>>>>>>>>        Set ComProperty of hDispatchDriver 355 OLE_VT_BSTR to value
79685>>>>>>>>>    End_Procedure
79686>>>>>>>>>
79686>>>>>>>>>    // Gets or sets footnote
79686>>>>>>>>>    Function ComFootNote Returns String
79688>>>>>>>>>        Handle hDispatchDriver
79688>>>>>>>>>        String retVal
79688>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79689>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 356 OLE_VT_BSTR to retVal
79690>>>>>>>>>        Function_Return retVal
79691>>>>>>>>>    End_Function
79692>>>>>>>>>
79692>>>>>>>>>    // Gets or sets footnote
79692>>>>>>>>>    Procedure Set ComFootNote String value
79694>>>>>>>>>        Handle hDispatchDriver
79694>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79695>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79696>>>>>>>>>        Set ComProperty of hDispatchDriver 356 OLE_VT_BSTR to value
79697>>>>>>>>>    End_Procedure
79698>>>>>>>>>
79698>>>>>>>>>    // Gets or sets groups title
79698>>>>>>>>>    Function ComGroupsTitle Returns String
79700>>>>>>>>>        Handle hDispatchDriver
79700>>>>>>>>>        String retVal
79700>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79701>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 357 OLE_VT_BSTR to retVal
79702>>>>>>>>>        Function_Return retVal
79703>>>>>>>>>    End_Function
79704>>>>>>>>>
79704>>>>>>>>>    // Gets or sets groups title
79704>>>>>>>>>    Procedure Set ComGroupsTitle String value
79706>>>>>>>>>        Handle hDispatchDriver
79706>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79707>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79708>>>>>>>>>        Set ComProperty of hDispatchDriver 357 OLE_VT_BSTR to value
79709>>>>>>>>>    End_Procedure
79710>>>>>>>>>
79710>>>>>>>>>    // Gets or sets series title
79710>>>>>>>>>    Function ComSeriesTitle Returns String
79712>>>>>>>>>        Handle hDispatchDriver
79712>>>>>>>>>        String retVal
79712>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79713>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 358 OLE_VT_BSTR to retVal
79714>>>>>>>>>        Function_Return retVal
79715>>>>>>>>>    End_Function
79716>>>>>>>>>
79716>>>>>>>>>    // Gets or sets series title
79716>>>>>>>>>    Procedure Set ComSeriesTitle String value
79718>>>>>>>>>        Handle hDispatchDriver
79718>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79719>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79720>>>>>>>>>        Set ComProperty of hDispatchDriver 358 OLE_VT_BSTR to value
79721>>>>>>>>>    End_Procedure
79722>>>>>>>>>
79722>>>>>>>>>    // Gets or sets X-Axis title
79722>>>>>>>>>    Function ComXAxisTitle Returns String
79724>>>>>>>>>        Handle hDispatchDriver
79724>>>>>>>>>        String retVal
79724>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79725>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 359 OLE_VT_BSTR to retVal
79726>>>>>>>>>        Function_Return retVal
79727>>>>>>>>>    End_Function
79728>>>>>>>>>
79728>>>>>>>>>    // Gets or sets X-Axis title
79728>>>>>>>>>    Procedure Set ComXAxisTitle String value
79730>>>>>>>>>        Handle hDispatchDriver
79730>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79731>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79732>>>>>>>>>        Set ComProperty of hDispatchDriver 359 OLE_VT_BSTR to value
79733>>>>>>>>>    End_Procedure
79734>>>>>>>>>
79734>>>>>>>>>    // Gets or sets Y-Axis title
79734>>>>>>>>>    Function ComYAxisTitle Returns String
79736>>>>>>>>>        Handle hDispatchDriver
79736>>>>>>>>>        String retVal
79736>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79737>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 360 OLE_VT_BSTR to retVal
79738>>>>>>>>>        Function_Return retVal
79739>>>>>>>>>    End_Function
79740>>>>>>>>>
79740>>>>>>>>>    // Gets or sets Y-Axis title
79740>>>>>>>>>    Procedure Set ComYAxisTitle String value
79742>>>>>>>>>        Handle hDispatchDriver
79742>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79743>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79744>>>>>>>>>        Set ComProperty of hDispatchDriver 360 OLE_VT_BSTR to value
79745>>>>>>>>>    End_Procedure
79746>>>>>>>>>
79746>>>>>>>>>    // Gets or sets Y2-Axis title
79746>>>>>>>>>    Function ComY2AxisTitle Returns String
79748>>>>>>>>>        Handle hDispatchDriver
79748>>>>>>>>>        String retVal
79748>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79749>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 361 OLE_VT_BSTR to retVal
79750>>>>>>>>>        Function_Return retVal
79751>>>>>>>>>    End_Function
79752>>>>>>>>>
79752>>>>>>>>>    // Gets or sets Y2-Axis title
79752>>>>>>>>>    Procedure Set ComY2AxisTitle String value
79754>>>>>>>>>        Handle hDispatchDriver
79754>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79755>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79756>>>>>>>>>        Set ComProperty of hDispatchDriver 361 OLE_VT_BSTR to value
79757>>>>>>>>>    End_Procedure
79758>>>>>>>>>
79758>>>>>>>>>    // Gets or sets data-axis max value
79758>>>>>>>>>    Function ComMaxDataAxisValue Returns Real
79760>>>>>>>>>        Handle hDispatchDriver
79760>>>>>>>>>        Real retVal
79760>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79761>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 362 OLE_VT_R8 to retVal
79762>>>>>>>>>        Function_Return retVal
79763>>>>>>>>>    End_Function
79764>>>>>>>>>
79764>>>>>>>>>    // Gets or sets data-axis max value
79764>>>>>>>>>    Procedure Set ComMaxDataAxisValue Real value
79766>>>>>>>>>        Handle hDispatchDriver
79766>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79767>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79768>>>>>>>>>        Set ComProperty of hDispatchDriver 362 OLE_VT_R8 to value
79769>>>>>>>>>    End_Procedure
79770>>>>>>>>>
79770>>>>>>>>>    // Gets or sets data-axis min value
79770>>>>>>>>>    Function ComMinDataAxisValue Returns Real
79772>>>>>>>>>        Handle hDispatchDriver
79772>>>>>>>>>        Real retVal
79772>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79773>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 363 OLE_VT_R8 to retVal
79774>>>>>>>>>        Function_Return retVal
79775>>>>>>>>>    End_Function
79776>>>>>>>>>
79776>>>>>>>>>    // Gets or sets data-axis min value
79776>>>>>>>>>    Procedure Set ComMinDataAxisValue Real value
79778>>>>>>>>>        Handle hDispatchDriver
79778>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79779>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79780>>>>>>>>>        Set ComProperty of hDispatchDriver 363 OLE_VT_R8 to value
79781>>>>>>>>>    End_Procedure
79782>>>>>>>>>
79782>>>>>>>>>    // Gets or sets data2-axis max value
79782>>>>>>>>>    Function ComMaxData2AxisValue Returns Real
79784>>>>>>>>>        Handle hDispatchDriver
79784>>>>>>>>>        Real retVal
79784>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79785>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 367 OLE_VT_R8 to retVal
79786>>>>>>>>>        Function_Return retVal
79787>>>>>>>>>    End_Function
79788>>>>>>>>>
79788>>>>>>>>>    // Gets or sets data2-axis max value
79788>>>>>>>>>    Procedure Set ComMaxData2AxisValue Real value
79790>>>>>>>>>        Handle hDispatchDriver
79790>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79791>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79792>>>>>>>>>        Set ComProperty of hDispatchDriver 367 OLE_VT_R8 to value
79793>>>>>>>>>    End_Procedure
79794>>>>>>>>>
79794>>>>>>>>>    // Gets or sets data2-axis min value
79794>>>>>>>>>    Function ComMinData2AxisValue Returns Real
79796>>>>>>>>>        Handle hDispatchDriver
79796>>>>>>>>>        Real retVal
79796>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79797>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 368 OLE_VT_R8 to retVal
79798>>>>>>>>>        Function_Return retVal
79799>>>>>>>>>    End_Function
79800>>>>>>>>>
79800>>>>>>>>>    // Gets or sets data2-axis min value
79800>>>>>>>>>    Procedure Set ComMinData2AxisValue Real value
79802>>>>>>>>>        Handle hDispatchDriver
79802>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79803>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79804>>>>>>>>>        Set ComProperty of hDispatchDriver 368 OLE_VT_R8 to value
79805>>>>>>>>>    End_Procedure
79806>>>>>>>>>
79806>>>>>>>>>    // Gets or sets series-axis max value
79806>>>>>>>>>    Function ComMaxSeriesAxisValue Returns Real
79808>>>>>>>>>        Handle hDispatchDriver
79808>>>>>>>>>        Real retVal
79808>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79809>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 413 OLE_VT_R8 to retVal
79810>>>>>>>>>        Function_Return retVal
79811>>>>>>>>>    End_Function
79812>>>>>>>>>
79812>>>>>>>>>    // Gets or sets series-axis max value
79812>>>>>>>>>    Procedure Set ComMaxSeriesAxisValue Real value
79814>>>>>>>>>        Handle hDispatchDriver
79814>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79815>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79816>>>>>>>>>        Set ComProperty of hDispatchDriver 413 OLE_VT_R8 to value
79817>>>>>>>>>    End_Procedure
79818>>>>>>>>>
79818>>>>>>>>>    // Gets or sets series-axis min value
79818>>>>>>>>>    Function ComMinSeriesAxisValue Returns Real
79820>>>>>>>>>        Handle hDispatchDriver
79820>>>>>>>>>        Real retVal
79820>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79821>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 414 OLE_VT_R8 to retVal
79822>>>>>>>>>        Function_Return retVal
79823>>>>>>>>>    End_Function
79824>>>>>>>>>
79824>>>>>>>>>    // Gets or sets series-axis min value
79824>>>>>>>>>    Procedure Set ComMinSeriesAxisValue Real value
79826>>>>>>>>>        Handle hDispatchDriver
79826>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79827>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79828>>>>>>>>>        Set ComProperty of hDispatchDriver 414 OLE_VT_R8 to value
79829>>>>>>>>>    End_Procedure
79830>>>>>>>>>
79830>>>>>>>>>    // Gets or sets data points on risers
79830>>>>>>>>>    Function ComDataPoint Returns CRGraphDataPoint
79832>>>>>>>>>        Handle hDispatchDriver
79832>>>>>>>>>        CRGraphDataPoint retVal
79832>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79833>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 364 OLE_VT_I4 to retVal
79834>>>>>>>>>        Function_Return retVal
79835>>>>>>>>>    End_Function
79836>>>>>>>>>
79836>>>>>>>>>    // Gets or sets data points on risers
79836>>>>>>>>>    Procedure Set ComDataPoint CRGraphDataPoint value
79838>>>>>>>>>        Handle hDispatchDriver
79838>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79839>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79840>>>>>>>>>        Set ComProperty of hDispatchDriver 364 OLE_VT_I4 to value
79841>>>>>>>>>    End_Procedure
79842>>>>>>>>>
79842>>>>>>>>>    // Gets or sets group axis grid line type
79842>>>>>>>>>    Function ComGroupAxisGridline Returns CRGridlineType
79844>>>>>>>>>        Handle hDispatchDriver
79844>>>>>>>>>        CRGridlineType retVal
79844>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79845>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 415 OLE_VT_I4 to retVal
79846>>>>>>>>>        Function_Return retVal
79847>>>>>>>>>    End_Function
79848>>>>>>>>>
79848>>>>>>>>>    // Gets or sets group axis grid line type
79848>>>>>>>>>    Procedure Set ComGroupAxisGridline CRGridlineType value
79850>>>>>>>>>        Handle hDispatchDriver
79850>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79851>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79852>>>>>>>>>        Set ComProperty of hDispatchDriver 415 OLE_VT_I4 to value
79853>>>>>>>>>    End_Procedure
79854>>>>>>>>>
79854>>>>>>>>>    // Gets or sets series axis grid line type
79854>>>>>>>>>    Function ComSeriesAxisGridline Returns CRGridlineType
79856>>>>>>>>>        Handle hDispatchDriver
79856>>>>>>>>>        CRGridlineType retVal
79856>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79857>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 416 OLE_VT_I4 to retVal
79858>>>>>>>>>        Function_Return retVal
79859>>>>>>>>>    End_Function
79860>>>>>>>>>
79860>>>>>>>>>    // Gets or sets series axis grid line type
79860>>>>>>>>>    Procedure Set ComSeriesAxisGridline CRGridlineType value
79862>>>>>>>>>        Handle hDispatchDriver
79862>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79863>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79864>>>>>>>>>        Set ComProperty of hDispatchDriver 416 OLE_VT_I4 to value
79865>>>>>>>>>    End_Procedure
79866>>>>>>>>>
79866>>>>>>>>>    // Gets or sets data axis grid line type
79866>>>>>>>>>    Function ComDataAxisGridline Returns CRGridlineType
79868>>>>>>>>>        Handle hDispatchDriver
79868>>>>>>>>>        CRGridlineType retVal
79868>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79869>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 417 OLE_VT_I4 to retVal
79870>>>>>>>>>        Function_Return retVal
79871>>>>>>>>>    End_Function
79872>>>>>>>>>
79872>>>>>>>>>    // Gets or sets data axis grid line type
79872>>>>>>>>>    Procedure Set ComDataAxisGridline CRGridlineType value
79874>>>>>>>>>        Handle hDispatchDriver
79874>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79875>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79876>>>>>>>>>        Set ComProperty of hDispatchDriver 417 OLE_VT_I4 to value
79877>>>>>>>>>    End_Procedure
79878>>>>>>>>>
79878>>>>>>>>>    // Gets or sets data2 axis grid line type
79878>>>>>>>>>    Function ComData2AxisGridline Returns CRGridlineType
79880>>>>>>>>>        Handle hDispatchDriver
79880>>>>>>>>>        CRGridlineType retVal
79880>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79881>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 418 OLE_VT_I4 to retVal
79882>>>>>>>>>        Function_Return retVal
79883>>>>>>>>>    End_Function
79884>>>>>>>>>
79884>>>>>>>>>    // Gets or sets data2 axis grid line type
79884>>>>>>>>>    Procedure Set ComData2AxisGridline CRGridlineType value
79886>>>>>>>>>        Handle hDispatchDriver
79886>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79887>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79888>>>>>>>>>        Set ComProperty of hDispatchDriver 418 OLE_VT_I4 to value
79889>>>>>>>>>    End_Procedure
79890>>>>>>>>>
79890>>>>>>>>>    // Gets or sets show legend
79890>>>>>>>>>    Function ComEnableShowLegend Returns Boolean
79892>>>>>>>>>        Handle hDispatchDriver
79892>>>>>>>>>        Boolean retVal
79892>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79893>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 366 OLE_VT_BOOL to retVal
79894>>>>>>>>>        Function_Return retVal
79895>>>>>>>>>    End_Function
79896>>>>>>>>>
79896>>>>>>>>>    // Gets or sets show legend
79896>>>>>>>>>    Procedure Set ComEnableShowLegend Boolean value
79898>>>>>>>>>        Handle hDispatchDriver
79898>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79899>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79900>>>>>>>>>        Set ComProperty of hDispatchDriver 366 OLE_VT_BOOL to value
79901>>>>>>>>>    End_Procedure
79902>>>>>>>>>
79902>>>>>>>>>    // Gets or sets legend position
79902>>>>>>>>>    Function ComLegendPosition Returns CRLegendPosition
79904>>>>>>>>>        Handle hDispatchDriver
79904>>>>>>>>>        CRLegendPosition retVal
79904>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79905>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 412 OLE_VT_I4 to retVal
79906>>>>>>>>>        Function_Return retVal
79907>>>>>>>>>    End_Function
79908>>>>>>>>>
79908>>>>>>>>>    // Gets or sets legend position
79908>>>>>>>>>    Procedure Set ComLegendPosition CRLegendPosition value
79910>>>>>>>>>        Handle hDispatchDriver
79910>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79911>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79912>>>>>>>>>        Set ComProperty of hDispatchDriver 412 OLE_VT_I4 to value
79913>>>>>>>>>    End_Procedure
79914>>>>>>>>>
79914>>>>>>>>>    // Gets or sets graph direction
79914>>>>>>>>>    Function ComGraphDirection Returns CRGraphDirection
79916>>>>>>>>>        Handle hDispatchDriver
79916>>>>>>>>>        CRGraphDirection retVal
79916>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79917>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 372 OLE_VT_I4 to retVal
79918>>>>>>>>>        Function_Return retVal
79919>>>>>>>>>    End_Function
79920>>>>>>>>>
79920>>>>>>>>>    // Gets or sets graph direction
79920>>>>>>>>>    Procedure Set ComGraphDirection CRGraphDirection value
79922>>>>>>>>>        Handle hDispatchDriver
79922>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79923>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79924>>>>>>>>>        Set ComProperty of hDispatchDriver 372 OLE_VT_I4 to value
79925>>>>>>>>>    End_Procedure
79926>>>>>>>>>
79926>>>>>>>>>    // Gets or sets pie size
79926>>>>>>>>>    Function ComPieSize Returns CRPieSize
79928>>>>>>>>>        Handle hDispatchDriver
79928>>>>>>>>>        CRPieSize retVal
79928>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79929>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 419 OLE_VT_I4 to retVal
79930>>>>>>>>>        Function_Return retVal
79931>>>>>>>>>    End_Function
79932>>>>>>>>>
79932>>>>>>>>>    // Gets or sets pie size
79932>>>>>>>>>    Procedure Set ComPieSize CRPieSize value
79934>>>>>>>>>        Handle hDispatchDriver
79934>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79935>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79936>>>>>>>>>        Set ComProperty of hDispatchDriver 419 OLE_VT_I4 to value
79937>>>>>>>>>    End_Procedure
79938>>>>>>>>>
79938>>>>>>>>>    // Gets or sets slice detachment
79938>>>>>>>>>    Function ComSliceDetachment Returns CRSliceDetachment
79940>>>>>>>>>        Handle hDispatchDriver
79940>>>>>>>>>        CRSliceDetachment retVal
79940>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79941>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 420 OLE_VT_I4 to retVal
79942>>>>>>>>>        Function_Return retVal
79943>>>>>>>>>    End_Function
79944>>>>>>>>>
79944>>>>>>>>>    // Gets or sets slice detachment
79944>>>>>>>>>    Procedure Set ComSliceDetachment CRSliceDetachment value
79946>>>>>>>>>        Handle hDispatchDriver
79946>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79947>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79948>>>>>>>>>        Set ComProperty of hDispatchDriver 420 OLE_VT_I4 to value
79949>>>>>>>>>    End_Procedure
79950>>>>>>>>>
79950>>>>>>>>>    // Gets or sets bar size
79950>>>>>>>>>    Function ComBarSize Returns CRBarSize
79952>>>>>>>>>        Handle hDispatchDriver
79952>>>>>>>>>        CRBarSize retVal
79952>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79953>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 421 OLE_VT_I4 to retVal
79954>>>>>>>>>        Function_Return retVal
79955>>>>>>>>>    End_Function
79956>>>>>>>>>
79956>>>>>>>>>    // Gets or sets bar size
79956>>>>>>>>>    Procedure Set ComBarSize CRBarSize value
79958>>>>>>>>>        Handle hDispatchDriver
79958>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79959>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79960>>>>>>>>>        Set ComProperty of hDispatchDriver 421 OLE_VT_I4 to value
79961>>>>>>>>>    End_Procedure
79962>>>>>>>>>
79962>>>>>>>>>    // Gets or sets marker size
79962>>>>>>>>>    Function ComMarkerSize Returns CRMarkerSize
79964>>>>>>>>>        Handle hDispatchDriver
79964>>>>>>>>>        CRMarkerSize retVal
79964>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79965>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 422 OLE_VT_I4 to retVal
79966>>>>>>>>>        Function_Return retVal
79967>>>>>>>>>    End_Function
79968>>>>>>>>>
79968>>>>>>>>>    // Gets or sets marker size
79968>>>>>>>>>    Procedure Set ComMarkerSize CRMarkerSize value
79970>>>>>>>>>        Handle hDispatchDriver
79970>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79971>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79972>>>>>>>>>        Set ComProperty of hDispatchDriver 422 OLE_VT_I4 to value
79973>>>>>>>>>    End_Procedure
79974>>>>>>>>>
79974>>>>>>>>>    // Gets or sets marker shape
79974>>>>>>>>>    Function ComMarkerShape Returns CRMarkerShape
79976>>>>>>>>>        Handle hDispatchDriver
79976>>>>>>>>>        CRMarkerShape retVal
79976>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79977>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 423 OLE_VT_I4 to retVal
79978>>>>>>>>>        Function_Return retVal
79979>>>>>>>>>    End_Function
79980>>>>>>>>>
79980>>>>>>>>>    // Gets or sets marker shape
79980>>>>>>>>>    Procedure Set ComMarkerShape CRMarkerShape value
79982>>>>>>>>>        Handle hDispatchDriver
79982>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79983>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79984>>>>>>>>>        Set ComProperty of hDispatchDriver 423 OLE_VT_I4 to value
79985>>>>>>>>>    End_Procedure
79986>>>>>>>>>
79986>>>>>>>>>    // Gets or sets data axis number format
79986>>>>>>>>>    Function ComDataAxisNumberFormat Returns CRNumberFormat
79988>>>>>>>>>        Handle hDispatchDriver
79988>>>>>>>>>        CRNumberFormat retVal
79988>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79989>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 424 OLE_VT_I4 to retVal
79990>>>>>>>>>        Function_Return retVal
79991>>>>>>>>>    End_Function
79992>>>>>>>>>
79992>>>>>>>>>    // Gets or sets data axis number format
79992>>>>>>>>>    Procedure Set ComDataAxisNumberFormat CRNumberFormat value
79994>>>>>>>>>        Handle hDispatchDriver
79994>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
79995>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
79996>>>>>>>>>        Set ComProperty of hDispatchDriver 424 OLE_VT_I4 to value
79997>>>>>>>>>    End_Procedure
79998>>>>>>>>>
79998>>>>>>>>>    // Gets or sets data2 axis number format
79998>>>>>>>>>    Function ComData2AxisNumberFormat Returns CRNumberFormat
80000>>>>>>>>>        Handle hDispatchDriver
80000>>>>>>>>>        CRNumberFormat retVal
80000>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80001>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 425 OLE_VT_I4 to retVal
80002>>>>>>>>>        Function_Return retVal
80003>>>>>>>>>    End_Function
80004>>>>>>>>>
80004>>>>>>>>>    // Gets or sets data2 axis number format
80004>>>>>>>>>    Procedure Set ComData2AxisNumberFormat CRNumberFormat value
80006>>>>>>>>>        Handle hDispatchDriver
80006>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80007>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80008>>>>>>>>>        Set ComProperty of hDispatchDriver 425 OLE_VT_I4 to value
80009>>>>>>>>>    End_Procedure
80010>>>>>>>>>
80010>>>>>>>>>    // Gets or sets series axis number format
80010>>>>>>>>>    Function ComSeriesAxisNumberFormat Returns CRNumberFormat
80012>>>>>>>>>        Handle hDispatchDriver
80012>>>>>>>>>        CRNumberFormat retVal
80012>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80013>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 426 OLE_VT_I4 to retVal
80014>>>>>>>>>        Function_Return retVal
80015>>>>>>>>>    End_Function
80016>>>>>>>>>
80016>>>>>>>>>    // Gets or sets series axis number format
80016>>>>>>>>>    Procedure Set ComSeriesAxisNumberFormat CRNumberFormat value
80018>>>>>>>>>        Handle hDispatchDriver
80018>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80019>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80020>>>>>>>>>        Set ComProperty of hDispatchDriver 426 OLE_VT_I4 to value
80021>>>>>>>>>    End_Procedure
80022>>>>>>>>>
80022>>>>>>>>>    // Gets or sets auto range option for data axis
80022>>>>>>>>>    Function ComAutoRangeDataAxis Returns Boolean
80024>>>>>>>>>        Handle hDispatchDriver
80024>>>>>>>>>        Boolean retVal
80024>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80025>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 427 OLE_VT_BOOL to retVal
80026>>>>>>>>>        Function_Return retVal
80027>>>>>>>>>    End_Function
80028>>>>>>>>>
80028>>>>>>>>>    // Gets or sets auto range option for data axis
80028>>>>>>>>>    Procedure Set ComAutoRangeDataAxis Boolean value
80030>>>>>>>>>        Handle hDispatchDriver
80030>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80031>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80032>>>>>>>>>        Set ComProperty of hDispatchDriver 427 OLE_VT_BOOL to value
80033>>>>>>>>>    End_Procedure
80034>>>>>>>>>
80034>>>>>>>>>    // Gets or sets auto range option for data2 axis
80034>>>>>>>>>    Function ComAutoRangeData2Axis Returns Boolean
80036>>>>>>>>>        Handle hDispatchDriver
80036>>>>>>>>>        Boolean retVal
80036>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80037>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 428 OLE_VT_BOOL to retVal
80038>>>>>>>>>        Function_Return retVal
80039>>>>>>>>>    End_Function
80040>>>>>>>>>
80040>>>>>>>>>    // Gets or sets auto range option for data2 axis
80040>>>>>>>>>    Procedure Set ComAutoRangeData2Axis Boolean value
80042>>>>>>>>>        Handle hDispatchDriver
80042>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80043>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80044>>>>>>>>>        Set ComProperty of hDispatchDriver 428 OLE_VT_BOOL to value
80045>>>>>>>>>    End_Procedure
80046>>>>>>>>>
80046>>>>>>>>>    // Gets or sets auto range option for series axis
80046>>>>>>>>>    Function ComAutoRangeSeriesAxis Returns Boolean
80048>>>>>>>>>        Handle hDispatchDriver
80048>>>>>>>>>        Boolean retVal
80048>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80049>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 429 OLE_VT_BOOL to retVal
80050>>>>>>>>>        Function_Return retVal
80051>>>>>>>>>    End_Function
80052>>>>>>>>>
80052>>>>>>>>>    // Gets or sets auto range option for series axis
80052>>>>>>>>>    Procedure Set ComAutoRangeSeriesAxis Boolean value
80054>>>>>>>>>        Handle hDispatchDriver
80054>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80055>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80056>>>>>>>>>        Set ComProperty of hDispatchDriver 429 OLE_VT_BOOL to value
80057>>>>>>>>>    End_Procedure
80058>>>>>>>>>
80058>>>>>>>>>    // Gets or sets data axis division method
80058>>>>>>>>>    Function ComDataAxisDivisionMethod Returns CRDivisionMethod
80060>>>>>>>>>        Handle hDispatchDriver
80060>>>>>>>>>        CRDivisionMethod retVal
80060>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80061>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 430 OLE_VT_I4 to retVal
80062>>>>>>>>>        Function_Return retVal
80063>>>>>>>>>    End_Function
80064>>>>>>>>>
80064>>>>>>>>>    // Gets or sets data axis division method
80064>>>>>>>>>    Procedure Set ComDataAxisDivisionMethod CRDivisionMethod value
80066>>>>>>>>>        Handle hDispatchDriver
80066>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80067>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80068>>>>>>>>>        Set ComProperty of hDispatchDriver 430 OLE_VT_I4 to value
80069>>>>>>>>>    End_Procedure
80070>>>>>>>>>
80070>>>>>>>>>    // Gets or sets data2 axis division method
80070>>>>>>>>>    Function ComData2AxisDivisionMethod Returns CRDivisionMethod
80072>>>>>>>>>        Handle hDispatchDriver
80072>>>>>>>>>        CRDivisionMethod retVal
80072>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80073>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 431 OLE_VT_I4 to retVal
80074>>>>>>>>>        Function_Return retVal
80075>>>>>>>>>    End_Function
80076>>>>>>>>>
80076>>>>>>>>>    // Gets or sets data2 axis division method
80076>>>>>>>>>    Procedure Set ComData2AxisDivisionMethod CRDivisionMethod value
80078>>>>>>>>>        Handle hDispatchDriver
80078>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80079>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80080>>>>>>>>>        Set ComProperty of hDispatchDriver 431 OLE_VT_I4 to value
80081>>>>>>>>>    End_Procedure
80082>>>>>>>>>
80082>>>>>>>>>    // Gets or sets series axis division method
80082>>>>>>>>>    Function ComSeriesAxisDivisionMethod Returns CRDivisionMethod
80084>>>>>>>>>        Handle hDispatchDriver
80084>>>>>>>>>        CRDivisionMethod retVal
80084>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80085>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 432 OLE_VT_I4 to retVal
80086>>>>>>>>>        Function_Return retVal
80087>>>>>>>>>    End_Function
80088>>>>>>>>>
80088>>>>>>>>>    // Gets or sets series axis division method
80088>>>>>>>>>    Procedure Set ComSeriesAxisDivisionMethod CRDivisionMethod value
80090>>>>>>>>>        Handle hDispatchDriver
80090>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80091>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80092>>>>>>>>>        Set ComProperty of hDispatchDriver 432 OLE_VT_I4 to value
80093>>>>>>>>>    End_Procedure
80094>>>>>>>>>
80094>>>>>>>>>    // Gets or sets data axis division number
80094>>>>>>>>>    Function ComDataAxisDivisionNumber Returns Integer
80096>>>>>>>>>        Handle hDispatchDriver
80096>>>>>>>>>        Integer retVal
80096>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80097>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 433 OLE_VT_I4 to retVal
80098>>>>>>>>>        Function_Return retVal
80099>>>>>>>>>    End_Function
80100>>>>>>>>>
80100>>>>>>>>>    // Gets or sets data axis division number
80100>>>>>>>>>    Procedure Set ComDataAxisDivisionNumber Integer value
80102>>>>>>>>>        Handle hDispatchDriver
80102>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80103>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80104>>>>>>>>>        Set ComProperty of hDispatchDriver 433 OLE_VT_I4 to value
80105>>>>>>>>>    End_Procedure
80106>>>>>>>>>
80106>>>>>>>>>    // Gets or sets data2 axis division number
80106>>>>>>>>>    Function ComData2AxisDivisionNumber Returns Integer
80108>>>>>>>>>        Handle hDispatchDriver
80108>>>>>>>>>        Integer retVal
80108>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80109>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 434 OLE_VT_I4 to retVal
80110>>>>>>>>>        Function_Return retVal
80111>>>>>>>>>    End_Function
80112>>>>>>>>>
80112>>>>>>>>>    // Gets or sets data2 axis division number
80112>>>>>>>>>    Procedure Set ComData2AxisDivisionNumber Integer value
80114>>>>>>>>>        Handle hDispatchDriver
80114>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80115>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80116>>>>>>>>>        Set ComProperty of hDispatchDriver 434 OLE_VT_I4 to value
80117>>>>>>>>>    End_Procedure
80118>>>>>>>>>
80118>>>>>>>>>    // Gets or sets series axis division number
80118>>>>>>>>>    Function ComSeriesAxisDivisionNumber Returns Integer
80120>>>>>>>>>        Handle hDispatchDriver
80120>>>>>>>>>        Integer retVal
80120>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80121>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 435 OLE_VT_I4 to retVal
80122>>>>>>>>>        Function_Return retVal
80123>>>>>>>>>    End_Function
80124>>>>>>>>>
80124>>>>>>>>>    // Gets or sets series axis division number
80124>>>>>>>>>    Procedure Set ComSeriesAxisDivisionNumber Integer value
80126>>>>>>>>>        Handle hDispatchDriver
80126>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80127>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80128>>>>>>>>>        Set ComProperty of hDispatchDriver 435 OLE_VT_I4 to value
80129>>>>>>>>>    End_Procedure
80130>>>>>>>>>
80130>>>>>>>>>    // Gets or sets graph color
80130>>>>>>>>>    Function ComGraphColor Returns CRGraphColor
80132>>>>>>>>>        Handle hDispatchDriver
80132>>>>>>>>>        CRGraphColor retVal
80132>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80133>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 436 OLE_VT_I4 to retVal
80134>>>>>>>>>        Function_Return retVal
80135>>>>>>>>>    End_Function
80136>>>>>>>>>
80136>>>>>>>>>    // Gets or sets graph color
80136>>>>>>>>>    Procedure Set ComGraphColor CRGraphColor value
80138>>>>>>>>>        Handle hDispatchDriver
80138>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80139>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80140>>>>>>>>>        Set ComProperty of hDispatchDriver 436 OLE_VT_I4 to value
80141>>>>>>>>>    End_Procedure
80142>>>>>>>>>
80142>>>>>>>>>    // Gets or sets data value number format
80142>>>>>>>>>    Function ComDataValueNumberFormat Returns CRNumberFormat
80144>>>>>>>>>        Handle hDispatchDriver
80144>>>>>>>>>        CRNumberFormat retVal
80144>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80145>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 437 OLE_VT_I4 to retVal
80146>>>>>>>>>        Function_Return retVal
80147>>>>>>>>>    End_Function
80148>>>>>>>>>
80148>>>>>>>>>    // Gets or sets data value number format
80148>>>>>>>>>    Procedure Set ComDataValueNumberFormat CRNumberFormat value
80150>>>>>>>>>        Handle hDispatchDriver
80150>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80151>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80152>>>>>>>>>        Set ComProperty of hDispatchDriver 437 OLE_VT_I4 to value
80153>>>>>>>>>    End_Procedure
80154>>>>>>>>>
80154>>>>>>>>>    // Gets or sets viewing angle
80154>>>>>>>>>    Function ComViewingAngle Returns CRViewingAngle
80156>>>>>>>>>        Handle hDispatchDriver
80156>>>>>>>>>        CRViewingAngle retVal
80156>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80157>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 438 OLE_VT_I4 to retVal
80158>>>>>>>>>        Function_Return retVal
80159>>>>>>>>>    End_Function
80160>>>>>>>>>
80160>>>>>>>>>    // Gets or sets viewing angle
80160>>>>>>>>>    Procedure Set ComViewingAngle CRViewingAngle value
80162>>>>>>>>>        Handle hDispatchDriver
80162>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80163>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80164>>>>>>>>>        Set ComProperty of hDispatchDriver 438 OLE_VT_I4 to value
80165>>>>>>>>>    End_Procedure
80166>>>>>>>>>
80166>>>>>>>>>    // Gets or sets Z-Axis title.
80166>>>>>>>>>    Function ComZAxisTitle Returns String
80168>>>>>>>>>        Handle hDispatchDriver
80168>>>>>>>>>        String retVal
80168>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80169>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 458 OLE_VT_BSTR to retVal
80170>>>>>>>>>        Function_Return retVal
80171>>>>>>>>>    End_Function
80172>>>>>>>>>
80172>>>>>>>>>    // Gets or sets Z-Axis title.
80172>>>>>>>>>    Procedure Set ComZAxisTitle String value
80174>>>>>>>>>        Handle hDispatchDriver
80174>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80175>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80176>>>>>>>>>        Set ComProperty of hDispatchDriver 458 OLE_VT_BSTR to value
80177>>>>>>>>>    End_Procedure
80178>>>>>>>>>
80178>>>>>>>>>    // Gets condition fields.
80178>>>>>>>>>    Function ComConditionFields Returns Variant
80180>>>>>>>>>        Handle hDispatchDriver
80180>>>>>>>>>        Variant retVal
80180>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80181>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 566 OLE_VT_DISPATCH to retVal
80182>>>>>>>>>        Function_Return retVal
80183>>>>>>>>>    End_Function
80184>>>>>>>>>
80184>>>>>>>>>    // Gets summary fields.
80184>>>>>>>>>    Function ComSummaryFields Returns Variant
80186>>>>>>>>>        Handle hDispatchDriver
80186>>>>>>>>>        Variant retVal
80186>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80187>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 567 OLE_VT_DISPATCH to retVal
80188>>>>>>>>>        Function_Return retVal
80189>>>>>>>>>    End_Function
80190>>>>>>>>>
80190>>>>>>>>>    // Gets or sets enable for each record.
80190>>>>>>>>>    Function ComEnableForEachRecord Returns Boolean
80192>>>>>>>>>        Handle hDispatchDriver
80192>>>>>>>>>        Boolean retVal
80192>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80193>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 568 OLE_VT_BOOL to retVal
80194>>>>>>>>>        Function_Return retVal
80195>>>>>>>>>    End_Function
80196>>>>>>>>>
80196>>>>>>>>>    // Gets or sets enable for each record.
80196>>>>>>>>>    Procedure Set ComEnableForEachRecord Boolean value
80198>>>>>>>>>        Handle hDispatchDriver
80198>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80199>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80200>>>>>>>>>        Set ComProperty of hDispatchDriver 568 OLE_VT_BOOL to value
80201>>>>>>>>>    End_Procedure
80202>>>>>>>>>
80202>>>>>>>>>    // Gets or sets enable summarize values.
80202>>>>>>>>>    Function ComEnableSummarizeValues Returns Boolean
80204>>>>>>>>>        Handle hDispatchDriver
80204>>>>>>>>>        Boolean retVal
80204>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80205>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 569 OLE_VT_BOOL to retVal
80206>>>>>>>>>        Function_Return retVal
80207>>>>>>>>>    End_Function
80208>>>>>>>>>
80208>>>>>>>>>    // Gets or sets enable summarize values.
80208>>>>>>>>>    Procedure Set ComEnableSummarizeValues Boolean value
80210>>>>>>>>>        Handle hDispatchDriver
80210>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80211>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80212>>>>>>>>>        Set ComProperty of hDispatchDriver 569 OLE_VT_BOOL to value
80213>>>>>>>>>    End_Procedure
80214>>>>>>>>>
80214>>>>>>>>>    // Gets crosstab object.
80214>>>>>>>>>    Function ComCrossTabObject Returns Variant
80216>>>>>>>>>        Handle hDispatchDriver
80216>>>>>>>>>        Variant retVal
80216>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80217>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 570 OLE_VT_DISPATCH to retVal
80218>>>>>>>>>        Function_Return retVal
80219>>>>>>>>>    End_Function
80220>>>>>>>>>
80220>>>>>>>>>    // Gets or sets standard OLE font for chart title
80220>>>>>>>>>    Function ComTitleFont Returns Variant
80222>>>>>>>>>        Handle hDispatchDriver
80222>>>>>>>>>        Variant retVal
80222>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80223>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 508 OLE_VT_DISPATCH to retVal
80224>>>>>>>>>        Function_Return retVal
80225>>>>>>>>>    End_Function
80226>>>>>>>>>
80226>>>>>>>>>    // Gets or sets standard OLE font for chart title
80226>>>>>>>>>    Procedure Set ComTitleFont Variant value
80228>>>>>>>>>        Handle hDispatchDriver
80228>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80229>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80230>>>>>>>>>        Set ComProperty of hDispatchDriver 508 OLE_VT_DISPATCH to value
80231>>>>>>>>>    End_Procedure
80232>>>>>>>>>
80232>>>>>>>>>    // Gets or sets standard OLE font for chart subtitle
80232>>>>>>>>>    Function ComSubTitleFont Returns Variant
80234>>>>>>>>>        Handle hDispatchDriver
80234>>>>>>>>>        Variant retVal
80234>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80235>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 509 OLE_VT_DISPATCH to retVal
80236>>>>>>>>>        Function_Return retVal
80237>>>>>>>>>    End_Function
80238>>>>>>>>>
80238>>>>>>>>>    // Gets or sets standard OLE font for chart subtitle
80238>>>>>>>>>    Procedure Set ComSubTitleFont Variant value
80240>>>>>>>>>        Handle hDispatchDriver
80240>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80241>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80242>>>>>>>>>        Set ComProperty of hDispatchDriver 509 OLE_VT_DISPATCH to value
80243>>>>>>>>>    End_Procedure
80244>>>>>>>>>
80244>>>>>>>>>    // Gets or sets standard OLE font for chart footnote
80244>>>>>>>>>    Function ComFootnoteFont Returns Variant
80246>>>>>>>>>        Handle hDispatchDriver
80246>>>>>>>>>        Variant retVal
80246>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80247>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 510 OLE_VT_DISPATCH to retVal
80248>>>>>>>>>        Function_Return retVal
80249>>>>>>>>>    End_Function
80250>>>>>>>>>
80250>>>>>>>>>    // Gets or sets standard OLE font for chart footnote
80250>>>>>>>>>    Procedure Set ComFootnoteFont Variant value
80252>>>>>>>>>        Handle hDispatchDriver
80252>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80253>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80254>>>>>>>>>        Set ComProperty of hDispatchDriver 510 OLE_VT_DISPATCH to value
80255>>>>>>>>>    End_Procedure
80256>>>>>>>>>
80256>>>>>>>>>    // Gets or sets standard OLE font for chart group title
80256>>>>>>>>>    Function ComGroupTitleFont Returns Variant
80258>>>>>>>>>        Handle hDispatchDriver
80258>>>>>>>>>        Variant retVal
80258>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80259>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 511 OLE_VT_DISPATCH to retVal
80260>>>>>>>>>        Function_Return retVal
80261>>>>>>>>>    End_Function
80262>>>>>>>>>
80262>>>>>>>>>    // Gets or sets standard OLE font for chart group title
80262>>>>>>>>>    Procedure Set ComGroupTitleFont Variant value
80264>>>>>>>>>        Handle hDispatchDriver
80264>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80265>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80266>>>>>>>>>        Set ComProperty of hDispatchDriver 511 OLE_VT_DISPATCH to value
80267>>>>>>>>>    End_Procedure
80268>>>>>>>>>
80268>>>>>>>>>    // Gets or sets standard OLE font for chart data title
80268>>>>>>>>>    Function ComDataTitleFont Returns Variant
80270>>>>>>>>>        Handle hDispatchDriver
80270>>>>>>>>>        Variant retVal
80270>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80271>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 512 OLE_VT_DISPATCH to retVal
80272>>>>>>>>>        Function_Return retVal
80273>>>>>>>>>    End_Function
80274>>>>>>>>>
80274>>>>>>>>>    // Gets or sets standard OLE font for chart data title
80274>>>>>>>>>    Procedure Set ComDataTitleFont Variant value
80276>>>>>>>>>        Handle hDispatchDriver
80276>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80277>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80278>>>>>>>>>        Set ComProperty of hDispatchDriver 512 OLE_VT_DISPATCH to value
80279>>>>>>>>>    End_Procedure
80280>>>>>>>>>
80280>>>>>>>>>    // Gets or sets standard OLE font for chart series title
80280>>>>>>>>>    Function ComSeriesTitleFont Returns Variant
80282>>>>>>>>>        Handle hDispatchDriver
80282>>>>>>>>>        Variant retVal
80282>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80283>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 513 OLE_VT_DISPATCH to retVal
80284>>>>>>>>>        Function_Return retVal
80285>>>>>>>>>    End_Function
80286>>>>>>>>>
80286>>>>>>>>>    // Gets or sets standard OLE font for chart series title
80286>>>>>>>>>    Procedure Set ComSeriesTitleFont Variant value
80288>>>>>>>>>        Handle hDispatchDriver
80288>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80289>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80290>>>>>>>>>        Set ComProperty of hDispatchDriver 513 OLE_VT_DISPATCH to value
80291>>>>>>>>>    End_Procedure
80292>>>>>>>>>
80292>>>>>>>>>    // Gets or sets standard OLE font for legend
80292>>>>>>>>>    Function ComLegendFont Returns Variant
80294>>>>>>>>>        Handle hDispatchDriver
80294>>>>>>>>>        Variant retVal
80294>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80295>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 514 OLE_VT_DISPATCH to retVal
80296>>>>>>>>>        Function_Return retVal
80297>>>>>>>>>    End_Function
80298>>>>>>>>>
80298>>>>>>>>>    // Gets or sets standard OLE font for legend
80298>>>>>>>>>    Procedure Set ComLegendFont Variant value
80300>>>>>>>>>        Handle hDispatchDriver
80300>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80301>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80302>>>>>>>>>        Set ComProperty of hDispatchDriver 514 OLE_VT_DISPATCH to value
80303>>>>>>>>>    End_Procedure
80304>>>>>>>>>
80304>>>>>>>>>    // Gets or sets standard OLE font for chart group labels
80304>>>>>>>>>    Function ComGroupLabelFont Returns Variant
80306>>>>>>>>>        Handle hDispatchDriver
80306>>>>>>>>>        Variant retVal
80306>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80307>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 515 OLE_VT_DISPATCH to retVal
80308>>>>>>>>>        Function_Return retVal
80309>>>>>>>>>    End_Function
80310>>>>>>>>>
80310>>>>>>>>>    // Gets or sets standard OLE font for chart group labels
80310>>>>>>>>>    Procedure Set ComGroupLabelFont Variant value
80312>>>>>>>>>        Handle hDispatchDriver
80312>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80313>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80314>>>>>>>>>        Set ComProperty of hDispatchDriver 515 OLE_VT_DISPATCH to value
80315>>>>>>>>>    End_Procedure
80316>>>>>>>>>
80316>>>>>>>>>    // Gets or sets standard OLE font for chart data labels
80316>>>>>>>>>    Function ComDataLabelFont Returns Variant
80318>>>>>>>>>        Handle hDispatchDriver
80318>>>>>>>>>        Variant retVal
80318>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80319>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 516 OLE_VT_DISPATCH to retVal
80320>>>>>>>>>        Function_Return retVal
80321>>>>>>>>>    End_Function
80322>>>>>>>>>
80322>>>>>>>>>    // Gets or sets standard OLE font for chart data labels
80322>>>>>>>>>    Procedure Set ComDataLabelFont Variant value
80324>>>>>>>>>        Handle hDispatchDriver
80324>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80325>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80326>>>>>>>>>        Set ComProperty of hDispatchDriver 516 OLE_VT_DISPATCH to value
80327>>>>>>>>>    End_Procedure
80328>>>>>>>>>
80328>>>>>>>>>    // Gets or sets standard OLE font for chart series labels
80328>>>>>>>>>    Function ComSeriesLabelFont Returns Variant
80330>>>>>>>>>        Handle hDispatchDriver
80330>>>>>>>>>        Variant retVal
80330>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80331>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 517 OLE_VT_DISPATCH to retVal
80332>>>>>>>>>        Function_Return retVal
80333>>>>>>>>>    End_Function
80334>>>>>>>>>
80334>>>>>>>>>    // Gets or sets standard OLE font for chart series labels
80334>>>>>>>>>    Procedure Set ComSeriesLabelFont Variant value
80336>>>>>>>>>        Handle hDispatchDriver
80336>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80337>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80338>>>>>>>>>        Set ComProperty of hDispatchDriver 517 OLE_VT_DISPATCH to value
80339>>>>>>>>>    End_Procedure
80340>>>>>>>>>
80340>>>>>>>>>    // Gets or sets title default flag
80340>>>>>>>>>    Function ComIsTitleByDefault Returns Boolean
80342>>>>>>>>>        Handle hDispatchDriver
80342>>>>>>>>>        Boolean retVal
80342>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80343>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 520 OLE_VT_BOOL to retVal
80344>>>>>>>>>        Function_Return retVal
80345>>>>>>>>>    End_Function
80346>>>>>>>>>
80346>>>>>>>>>    // Gets or sets title default flag
80346>>>>>>>>>    Procedure Set ComIsTitleByDefault Boolean value
80348>>>>>>>>>        Handle hDispatchDriver
80348>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80349>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80350>>>>>>>>>        Set ComProperty of hDispatchDriver 520 OLE_VT_BOOL to value
80351>>>>>>>>>    End_Procedure
80352>>>>>>>>>
80352>>>>>>>>>    // Gets or sets subtitle default flag
80352>>>>>>>>>    Function ComIsSubTitleByDefault Returns Boolean
80354>>>>>>>>>        Handle hDispatchDriver
80354>>>>>>>>>        Boolean retVal
80354>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80355>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 521 OLE_VT_BOOL to retVal
80356>>>>>>>>>        Function_Return retVal
80357>>>>>>>>>    End_Function
80358>>>>>>>>>
80358>>>>>>>>>    // Gets or sets subtitle default flag
80358>>>>>>>>>    Procedure Set ComIsSubTitleByDefault Boolean value
80360>>>>>>>>>        Handle hDispatchDriver
80360>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80361>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80362>>>>>>>>>        Set ComProperty of hDispatchDriver 521 OLE_VT_BOOL to value
80363>>>>>>>>>    End_Procedure
80364>>>>>>>>>
80364>>>>>>>>>    // Gets or sets footnote default flag
80364>>>>>>>>>    Function ComIsFootnoteByDefault Returns Boolean
80366>>>>>>>>>        Handle hDispatchDriver
80366>>>>>>>>>        Boolean retVal
80366>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80367>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 522 OLE_VT_BOOL to retVal
80368>>>>>>>>>        Function_Return retVal
80369>>>>>>>>>    End_Function
80370>>>>>>>>>
80370>>>>>>>>>    // Gets or sets footnote default flag
80370>>>>>>>>>    Procedure Set ComIsFootnoteByDefault Boolean value
80372>>>>>>>>>        Handle hDispatchDriver
80372>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80373>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80374>>>>>>>>>        Set ComProperty of hDispatchDriver 522 OLE_VT_BOOL to value
80375>>>>>>>>>    End_Procedure
80376>>>>>>>>>
80376>>>>>>>>>    // Gets or sets X-axis title default flag
80376>>>>>>>>>    Function ComIsXAxisTitleByDefault Returns Boolean
80378>>>>>>>>>        Handle hDispatchDriver
80378>>>>>>>>>        Boolean retVal
80378>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80379>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 525 OLE_VT_BOOL to retVal
80380>>>>>>>>>        Function_Return retVal
80381>>>>>>>>>    End_Function
80382>>>>>>>>>
80382>>>>>>>>>    // Gets or sets X-axis title default flag
80382>>>>>>>>>    Procedure Set ComIsXAxisTitleByDefault Boolean value
80384>>>>>>>>>        Handle hDispatchDriver
80384>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80385>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80386>>>>>>>>>        Set ComProperty of hDispatchDriver 525 OLE_VT_BOOL to value
80387>>>>>>>>>    End_Procedure
80388>>>>>>>>>
80388>>>>>>>>>    // Gets or sets Y-axis title default flag
80388>>>>>>>>>    Function ComIsYAxisTitleByDefault Returns Boolean
80390>>>>>>>>>        Handle hDispatchDriver
80390>>>>>>>>>        Boolean retVal
80390>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80391>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 526 OLE_VT_BOOL to retVal
80392>>>>>>>>>        Function_Return retVal
80393>>>>>>>>>    End_Function
80394>>>>>>>>>
80394>>>>>>>>>    // Gets or sets Y-axis title default flag
80394>>>>>>>>>    Procedure Set ComIsYAxisTitleByDefault Boolean value
80396>>>>>>>>>        Handle hDispatchDriver
80396>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80397>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80398>>>>>>>>>        Set ComProperty of hDispatchDriver 526 OLE_VT_BOOL to value
80399>>>>>>>>>    End_Procedure
80400>>>>>>>>>
80400>>>>>>>>>    // Gets or sets Z-axis title default flag
80400>>>>>>>>>    Function ComIsZAxisTitleByDefault Returns Boolean
80402>>>>>>>>>        Handle hDispatchDriver
80402>>>>>>>>>        Boolean retVal
80402>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80403>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 527 OLE_VT_BOOL to retVal
80404>>>>>>>>>        Function_Return retVal
80405>>>>>>>>>    End_Function
80406>>>>>>>>>
80406>>>>>>>>>    // Gets or sets Z-axis title default flag
80406>>>>>>>>>    Procedure Set ComIsZAxisTitleByDefault Boolean value
80408>>>>>>>>>        Handle hDispatchDriver
80408>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80409>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80410>>>>>>>>>        Set ComProperty of hDispatchDriver 527 OLE_VT_BOOL to value
80411>>>>>>>>>    End_Procedure
80412>>>>>>>>>
80412>>>>>>>>>    // Gets or sets data axis auto-scale
80412>>>>>>>>>    Function ComEnableAutoScaleDataAxis Returns Boolean
80414>>>>>>>>>        Handle hDispatchDriver
80414>>>>>>>>>        Boolean retVal
80414>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80415>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 528 OLE_VT_BOOL to retVal
80416>>>>>>>>>        Function_Return retVal
80417>>>>>>>>>    End_Function
80418>>>>>>>>>
80418>>>>>>>>>    // Gets or sets data axis auto-scale
80418>>>>>>>>>    Procedure Set ComEnableAutoScaleDataAxis Boolean value
80420>>>>>>>>>        Handle hDispatchDriver
80420>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80421>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80422>>>>>>>>>        Set ComProperty of hDispatchDriver 528 OLE_VT_BOOL to value
80423>>>>>>>>>    End_Procedure
80424>>>>>>>>>
80424>>>>>>>>>    // Gets or sets data2 axis auto-scale
80424>>>>>>>>>    Function ComEnableAutoScaleData2Axis Returns Boolean
80426>>>>>>>>>        Handle hDispatchDriver
80426>>>>>>>>>        Boolean retVal
80426>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80427>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 529 OLE_VT_BOOL to retVal
80428>>>>>>>>>        Function_Return retVal
80429>>>>>>>>>    End_Function
80430>>>>>>>>>
80430>>>>>>>>>    // Gets or sets data2 axis auto-scale
80430>>>>>>>>>    Procedure Set ComEnableAutoScaleData2Axis Boolean value
80432>>>>>>>>>        Handle hDispatchDriver
80432>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80433>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80434>>>>>>>>>        Set ComProperty of hDispatchDriver 529 OLE_VT_BOOL to value
80435>>>>>>>>>    End_Procedure
80436>>>>>>>>>
80436>>>>>>>>>    // Gets or sets series axis auto-scale
80436>>>>>>>>>    Function ComEnableAutoScaleSeriesAxis Returns Boolean
80438>>>>>>>>>        Handle hDispatchDriver
80438>>>>>>>>>        Boolean retVal
80438>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80439>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 530 OLE_VT_BOOL to retVal
80440>>>>>>>>>        Function_Return retVal
80441>>>>>>>>>    End_Function
80442>>>>>>>>>
80442>>>>>>>>>    // Gets or sets series axis auto-scale
80442>>>>>>>>>    Procedure Set ComEnableAutoScaleSeriesAxis Boolean value
80444>>>>>>>>>        Handle hDispatchDriver
80444>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80445>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80446>>>>>>>>>        Set ComProperty of hDispatchDriver 530 OLE_VT_BOOL to value
80447>>>>>>>>>    End_Procedure
80448>>>>>>>>>
80448>>>>>>>>>    // Gets or sets pie legend layout
80448>>>>>>>>>    Function ComLegendLayout Returns CRPieLegendLayout
80450>>>>>>>>>        Handle hDispatchDriver
80450>>>>>>>>>        CRPieLegendLayout retVal
80450>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80451>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 531 OLE_VT_I4 to retVal
80452>>>>>>>>>        Function_Return retVal
80453>>>>>>>>>    End_Function
80454>>>>>>>>>
80454>>>>>>>>>    // Gets or sets pie legend layout
80454>>>>>>>>>    Procedure Set ComLegendLayout CRPieLegendLayout value
80456>>>>>>>>>        Handle hDispatchDriver
80456>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80457>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80458>>>>>>>>>        Set ComProperty of hDispatchDriver 531 OLE_VT_I4 to value
80459>>>>>>>>>    End_Procedure
80460>>>>>>>>>
80460>>>>>>>>>    // Gets or sets condition field sort order for detail chart
80460>>>>>>>>>    Function ComConditionFieldSortOrder Integer llindex Returns CRSortDirection
80462>>>>>>>>>        Handle hDispatchDriver
80462>>>>>>>>>        CRSortDirection retVal
80462>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80463>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80464>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
80465>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 724 OLE_VT_I4 to retVal
80466>>>>>>>>>        Function_Return retVal
80467>>>>>>>>>    End_Function
80468>>>>>>>>>
80468>>>>>>>>>    // Gets or sets condition field sort order for detail chart
80468>>>>>>>>>    Procedure Set ComConditionFieldSortOrder Integer llindex CRSortDirection value
80470>>>>>>>>>        Handle hDispatchDriver
80470>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80471>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
80472>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
80473>>>>>>>>>        Set ComProperty of hDispatchDriver 724 OLE_VT_I4 to value
80474>>>>>>>>>    End_Procedure
80475>>>>>>>>>
80475>>>>>>>>>    // Gets or sets the specifed groups
80475>>>>>>>>>    Function ComSpecifiedGroups Integer llindex Returns Variant
80477>>>>>>>>>        Handle hDispatchDriver
80477>>>>>>>>>        Variant retVal
80477>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80478>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80479>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
80480>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 722 OLE_VT_VARIANT to retVal
80481>>>>>>>>>        Function_Return retVal
80482>>>>>>>>>    End_Function
80483>>>>>>>>>
80483>>>>>>>>>    // Gets or sets the specifed groups
80483>>>>>>>>>    Procedure Set ComSpecifiedGroups Integer llindex Variant value
80485>>>>>>>>>        Handle hDispatchDriver
80485>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80486>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
80487>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
80488>>>>>>>>>        Set ComProperty of hDispatchDriver 722 OLE_VT_VARIANT to value
80489>>>>>>>>>    End_Procedure
80490>>>>>>>>>
80490>>>>>>>>>    // Gets or sets data title
80490>>>>>>>>>    Function ComDataTitle Returns String
80492>>>>>>>>>        Handle hDispatchDriver
80492>>>>>>>>>        String retVal
80492>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80493>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 712 OLE_VT_BSTR to retVal
80494>>>>>>>>>        Function_Return retVal
80495>>>>>>>>>    End_Function
80496>>>>>>>>>
80496>>>>>>>>>    // Gets or sets data title
80496>>>>>>>>>    Procedure Set ComDataTitle String value
80498>>>>>>>>>        Handle hDispatchDriver
80498>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80499>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80500>>>>>>>>>        Set ComProperty of hDispatchDriver 712 OLE_VT_BSTR to value
80501>>>>>>>>>    End_Procedure
80502>>>>>>>>>
80502>>>>>>>>>    // Gets or sets data2 title
80502>>>>>>>>>    Function ComData2Title Returns String
80504>>>>>>>>>        Handle hDispatchDriver
80504>>>>>>>>>        String retVal
80504>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80505>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 713 OLE_VT_BSTR to retVal
80506>>>>>>>>>        Function_Return retVal
80507>>>>>>>>>    End_Function
80508>>>>>>>>>
80508>>>>>>>>>    // Gets or sets data2 title
80508>>>>>>>>>    Procedure Set ComData2Title String value
80510>>>>>>>>>        Handle hDispatchDriver
80510>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80511>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80512>>>>>>>>>        Set ComProperty of hDispatchDriver 713 OLE_VT_BSTR to value
80513>>>>>>>>>    End_Procedure
80514>>>>>>>>>
80514>>>>>>>>>    // Gets or sets groups title default flag
80514>>>>>>>>>    Function ComIsGroupsTitleByDefault Returns Boolean
80516>>>>>>>>>        Handle hDispatchDriver
80516>>>>>>>>>        Boolean retVal
80516>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80517>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 714 OLE_VT_BOOL to retVal
80518>>>>>>>>>        Function_Return retVal
80519>>>>>>>>>    End_Function
80520>>>>>>>>>
80520>>>>>>>>>    // Gets or sets groups title default flag
80520>>>>>>>>>    Procedure Set ComIsGroupsTitleByDefault Boolean value
80522>>>>>>>>>        Handle hDispatchDriver
80522>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80523>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80524>>>>>>>>>        Set ComProperty of hDispatchDriver 714 OLE_VT_BOOL to value
80525>>>>>>>>>    End_Procedure
80526>>>>>>>>>
80526>>>>>>>>>    // Gets or sets series title default flag
80526>>>>>>>>>    Function ComIsSeriesTitleByDefault Returns Boolean
80528>>>>>>>>>        Handle hDispatchDriver
80528>>>>>>>>>        Boolean retVal
80528>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80529>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 717 OLE_VT_BOOL to retVal
80530>>>>>>>>>        Function_Return retVal
80531>>>>>>>>>    End_Function
80532>>>>>>>>>
80532>>>>>>>>>    // Gets or sets series title default flag
80532>>>>>>>>>    Procedure Set ComIsSeriesTitleByDefault Boolean value
80534>>>>>>>>>        Handle hDispatchDriver
80534>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80535>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80536>>>>>>>>>        Set ComProperty of hDispatchDriver 717 OLE_VT_BOOL to value
80537>>>>>>>>>    End_Procedure
80538>>>>>>>>>
80538>>>>>>>>>    // Gets or sets data title default flag
80538>>>>>>>>>    Function ComIsDataTitleByDefault Returns Boolean
80540>>>>>>>>>        Handle hDispatchDriver
80540>>>>>>>>>        Boolean retVal
80540>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80541>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 715 OLE_VT_BOOL to retVal
80542>>>>>>>>>        Function_Return retVal
80543>>>>>>>>>    End_Function
80544>>>>>>>>>
80544>>>>>>>>>    // Gets or sets data title default flag
80544>>>>>>>>>    Procedure Set ComIsDataTitleByDefault Boolean value
80546>>>>>>>>>        Handle hDispatchDriver
80546>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80547>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80548>>>>>>>>>        Set ComProperty of hDispatchDriver 715 OLE_VT_BOOL to value
80549>>>>>>>>>    End_Procedure
80550>>>>>>>>>
80550>>>>>>>>>    // Gets or sets data2 title default flag
80550>>>>>>>>>    Function ComIsData2TitleByDefault Returns Boolean
80552>>>>>>>>>        Handle hDispatchDriver
80552>>>>>>>>>        Boolean retVal
80552>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80553>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 716 OLE_VT_BOOL to retVal
80554>>>>>>>>>        Function_Return retVal
80555>>>>>>>>>    End_Function
80556>>>>>>>>>
80556>>>>>>>>>    // Gets or sets data2 title default flag
80556>>>>>>>>>    Procedure Set ComIsData2TitleByDefault Boolean value
80558>>>>>>>>>        Handle hDispatchDriver
80558>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80559>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80560>>>>>>>>>        Set ComProperty of hDispatchDriver 716 OLE_VT_BOOL to value
80561>>>>>>>>>    End_Procedure
80562>>>>>>>>>
80562>>>>>>>>>    // Gets or sets standard OLE font for chart data2 title
80562>>>>>>>>>    Function ComData2TitleFont Returns Variant
80564>>>>>>>>>        Handle hDispatchDriver
80564>>>>>>>>>        Variant retVal
80564>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80565>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 718 OLE_VT_DISPATCH to retVal
80566>>>>>>>>>        Function_Return retVal
80567>>>>>>>>>    End_Function
80568>>>>>>>>>
80568>>>>>>>>>    // Gets or sets standard OLE font for chart data2 title
80568>>>>>>>>>    Procedure Set ComData2TitleFont Variant value
80570>>>>>>>>>        Handle hDispatchDriver
80570>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80571>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80572>>>>>>>>>        Set ComProperty of hDispatchDriver 718 OLE_VT_DISPATCH to value
80573>>>>>>>>>    End_Procedure
80574>>>>>>>>>
80574>>>>>>>>>    // Gets or sets standard OLE font for chart data2 labels
80574>>>>>>>>>    Function ComData2LabelFont Returns Variant
80576>>>>>>>>>        Handle hDispatchDriver
80576>>>>>>>>>        Variant retVal
80576>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80577>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 719 OLE_VT_DISPATCH to retVal
80578>>>>>>>>>        Function_Return retVal
80579>>>>>>>>>    End_Function
80580>>>>>>>>>
80580>>>>>>>>>    // Gets or sets standard OLE font for chart data2 labels
80580>>>>>>>>>    Procedure Set ComData2LabelFont Variant value
80582>>>>>>>>>        Handle hDispatchDriver
80582>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80583>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80584>>>>>>>>>        Set ComProperty of hDispatchDriver 719 OLE_VT_DISPATCH to value
80585>>>>>>>>>    End_Procedure
80586>>>>>>>>>
80586>>>>>>>>>    // Gets or sets conditional formula.
80586>>>>>>>>>    Function ComConditionFormula Variant llFormulaType Returns String
80588>>>>>>>>>        Handle hDispatchDriver
80588>>>>>>>>>        String retVal
80588>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80589>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80590>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
80591>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 760 OLE_VT_BSTR to retVal
80592>>>>>>>>>        Function_Return retVal
80593>>>>>>>>>    End_Function
80594>>>>>>>>>
80594>>>>>>>>>    // Gets or sets conditional formula.
80594>>>>>>>>>    Procedure Set ComConditionFormula Variant llFormulaType String value
80596>>>>>>>>>        Handle hDispatchDriver
80596>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80597>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
80598>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
80599>>>>>>>>>        Set ComProperty of hDispatchDriver 760 OLE_VT_BSTR to value
80600>>>>>>>>>    End_Procedure
80601>>>>>>>>>
80601>>>>>>>>>    // Gets or sets CSS class.
80601>>>>>>>>>    Function ComCssClass Returns String
80603>>>>>>>>>        Handle hDispatchDriver
80603>>>>>>>>>        String retVal
80603>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80604>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 549 OLE_VT_BSTR to retVal
80605>>>>>>>>>        Function_Return retVal
80606>>>>>>>>>    End_Function
80607>>>>>>>>>
80607>>>>>>>>>    // Gets or sets CSS class.
80607>>>>>>>>>    Procedure Set ComCssClass String value
80609>>>>>>>>>        Handle hDispatchDriver
80609>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80610>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80611>>>>>>>>>        Set ComProperty of hDispatchDriver 549 OLE_VT_BSTR to value
80612>>>>>>>>>    End_Procedure
80613>>>>>>>>>
80613>>>>>>>>>    // Gets or sets hyperlink type.
80613>>>>>>>>>    Function ComHyperlinkType Returns CRHyperlinkType
80615>>>>>>>>>        Handle hDispatchDriver
80615>>>>>>>>>        CRHyperlinkType retVal
80615>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80616>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 901 OLE_VT_I4 to retVal
80617>>>>>>>>>        Function_Return retVal
80618>>>>>>>>>    End_Function
80619>>>>>>>>>
80619>>>>>>>>>    // Gets or sets hyperlink type.
80619>>>>>>>>>    Procedure Set ComHyperlinkType CRHyperlinkType value
80621>>>>>>>>>        Handle hDispatchDriver
80621>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80622>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80623>>>>>>>>>        Set ComProperty of hDispatchDriver 901 OLE_VT_I4 to value
80624>>>>>>>>>    End_Procedure
80625>>>>>>>>>
80625>>>>>>>>>    // Gets or sets hyperlink text.
80625>>>>>>>>>    Function ComHyperlinkText Returns String
80627>>>>>>>>>        Handle hDispatchDriver
80627>>>>>>>>>        String retVal
80627>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80628>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 902 OLE_VT_BSTR to retVal
80629>>>>>>>>>        Function_Return retVal
80630>>>>>>>>>    End_Function
80631>>>>>>>>>
80631>>>>>>>>>    // Gets or sets hyperlink text.
80631>>>>>>>>>    Procedure Set ComHyperlinkText String value
80633>>>>>>>>>        Handle hDispatchDriver
80633>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80634>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80635>>>>>>>>>        Set ComProperty of hDispatchDriver 902 OLE_VT_BSTR to value
80636>>>>>>>>>    End_Procedure
80637>>>>>>>>>End_Class
80638>>>>>>>>>
80638>>>>>>>>>// CoClass
80638>>>>>>>>>// CLSID: {354AA38C-E4BC-43A4-9FFB-0094A80EDD0C}
80638>>>>>>>>>Class cCrystalGraphObject is a cComAutomationObject
80639>>>>>>>>>    Import_Class_Protocol cCrystalIGraphObject
80640>>>>>>>>>
80640>>>>>>>>>    Procedure Construct_Object
80642>>>>>>>>>        Forward Send Construct_Object
80644>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
80645>>>>>>>>>    End_Procedure
80646>>>>>>>>>End_Class
80647>>>>>>>>>
80647>>>>>>>>>// CLSID: {AF376825-6120-4E28-96DD-63FD2DC27B7A}
80647>>>>>>>>>Class cCrystalIMapObject is a Mixin
80648>>>>>>>>>
80648>>>>>>>>>    // Gets or sets object name.
80648>>>>>>>>>    Function ComName Returns String
80650>>>>>>>>>        Handle hDispatchDriver
80650>>>>>>>>>        String retVal
80650>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80651>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
80652>>>>>>>>>        Function_Return retVal
80653>>>>>>>>>    End_Function
80654>>>>>>>>>
80654>>>>>>>>>    // Gets or sets object name.
80654>>>>>>>>>    Procedure Set ComName String value
80656>>>>>>>>>        Handle hDispatchDriver
80656>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80657>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80658>>>>>>>>>        Set ComProperty of hDispatchDriver -800 OLE_VT_BSTR to value
80659>>>>>>>>>    End_Procedure
80660>>>>>>>>>
80660>>>>>>>>>    // Gets report object kind.
80660>>>>>>>>>    Function ComKind Returns CRObjectKind
80662>>>>>>>>>        Handle hDispatchDriver
80662>>>>>>>>>        CRObjectKind retVal
80662>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80663>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
80664>>>>>>>>>        Function_Return retVal
80665>>>>>>>>>    End_Function
80666>>>>>>>>>
80666>>>>>>>>>    // Gets or sets object upper left position (twips).
80666>>>>>>>>>    Function ComLeft Returns Integer
80668>>>>>>>>>        Handle hDispatchDriver
80668>>>>>>>>>        Integer retVal
80668>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80669>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_I4 to retVal
80670>>>>>>>>>        Function_Return retVal
80671>>>>>>>>>    End_Function
80672>>>>>>>>>
80672>>>>>>>>>    // Gets or sets object upper left position (twips).
80672>>>>>>>>>    Procedure Set ComLeft Integer value
80674>>>>>>>>>        Handle hDispatchDriver
80674>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80675>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80676>>>>>>>>>        Set ComProperty of hDispatchDriver 102 OLE_VT_I4 to value
80677>>>>>>>>>    End_Procedure
80678>>>>>>>>>
80678>>>>>>>>>    // Gets or sets object upper top position (twips).
80678>>>>>>>>>    Function ComTop Returns Integer
80680>>>>>>>>>        Handle hDispatchDriver
80680>>>>>>>>>        Integer retVal
80680>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80681>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_I4 to retVal
80682>>>>>>>>>        Function_Return retVal
80683>>>>>>>>>    End_Function
80684>>>>>>>>>
80684>>>>>>>>>    // Gets or sets object upper top position (twips).
80684>>>>>>>>>    Procedure Set ComTop Integer value
80686>>>>>>>>>        Handle hDispatchDriver
80686>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80687>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80688>>>>>>>>>        Set ComProperty of hDispatchDriver 103 OLE_VT_I4 to value
80689>>>>>>>>>    End_Procedure
80690>>>>>>>>>
80690>>>>>>>>>    // Gets or sets object width (twips).
80690>>>>>>>>>    Function ComWidth Returns Integer
80692>>>>>>>>>        Handle hDispatchDriver
80692>>>>>>>>>        Integer retVal
80692>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80693>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
80694>>>>>>>>>        Function_Return retVal
80695>>>>>>>>>    End_Function
80696>>>>>>>>>
80696>>>>>>>>>    // Gets or sets object width (twips).
80696>>>>>>>>>    Procedure Set ComWidth Integer value
80698>>>>>>>>>        Handle hDispatchDriver
80698>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80699>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80700>>>>>>>>>        Set ComProperty of hDispatchDriver 104 OLE_VT_I4 to value
80701>>>>>>>>>    End_Procedure
80702>>>>>>>>>
80702>>>>>>>>>    // Gets or sets object height (twips).
80702>>>>>>>>>    Function ComHeight Returns Integer
80704>>>>>>>>>        Handle hDispatchDriver
80704>>>>>>>>>        Integer retVal
80704>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80705>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_I4 to retVal
80706>>>>>>>>>        Function_Return retVal
80707>>>>>>>>>    End_Function
80708>>>>>>>>>
80708>>>>>>>>>    // Gets or sets object height (twips).
80708>>>>>>>>>    Procedure Set ComHeight Integer value
80710>>>>>>>>>        Handle hDispatchDriver
80710>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80711>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80712>>>>>>>>>        Set ComProperty of hDispatchDriver 105 OLE_VT_I4 to value
80713>>>>>>>>>    End_Procedure
80714>>>>>>>>>
80714>>>>>>>>>    // Gets or sets left line style.
80714>>>>>>>>>    Function ComLeftLineStyle Returns CRLineStyle
80716>>>>>>>>>        Handle hDispatchDriver
80716>>>>>>>>>        CRLineStyle retVal
80716>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80717>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_I4 to retVal
80718>>>>>>>>>        Function_Return retVal
80719>>>>>>>>>    End_Function
80720>>>>>>>>>
80720>>>>>>>>>    // Gets or sets left line style.
80720>>>>>>>>>    Procedure Set ComLeftLineStyle CRLineStyle value
80722>>>>>>>>>        Handle hDispatchDriver
80722>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80723>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80724>>>>>>>>>        Set ComProperty of hDispatchDriver 106 OLE_VT_I4 to value
80725>>>>>>>>>    End_Procedure
80726>>>>>>>>>
80726>>>>>>>>>    // Gets or sets right line style.
80726>>>>>>>>>    Function ComRightLineStyle Returns CRLineStyle
80728>>>>>>>>>        Handle hDispatchDriver
80728>>>>>>>>>        CRLineStyle retVal
80728>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80729>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 107 OLE_VT_I4 to retVal
80730>>>>>>>>>        Function_Return retVal
80731>>>>>>>>>    End_Function
80732>>>>>>>>>
80732>>>>>>>>>    // Gets or sets right line style.
80732>>>>>>>>>    Procedure Set ComRightLineStyle CRLineStyle value
80734>>>>>>>>>        Handle hDispatchDriver
80734>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80735>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80736>>>>>>>>>        Set ComProperty of hDispatchDriver 107 OLE_VT_I4 to value
80737>>>>>>>>>    End_Procedure
80738>>>>>>>>>
80738>>>>>>>>>    // Gets or sets top line style.
80738>>>>>>>>>    Function ComTopLineStyle Returns CRLineStyle
80740>>>>>>>>>        Handle hDispatchDriver
80740>>>>>>>>>        CRLineStyle retVal
80740>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80741>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_I4 to retVal
80742>>>>>>>>>        Function_Return retVal
80743>>>>>>>>>    End_Function
80744>>>>>>>>>
80744>>>>>>>>>    // Gets or sets top line style.
80744>>>>>>>>>    Procedure Set ComTopLineStyle CRLineStyle value
80746>>>>>>>>>        Handle hDispatchDriver
80746>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80747>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80748>>>>>>>>>        Set ComProperty of hDispatchDriver 108 OLE_VT_I4 to value
80749>>>>>>>>>    End_Procedure
80750>>>>>>>>>
80750>>>>>>>>>    // Gets or sets bottom line style.
80750>>>>>>>>>    Function ComBottomLineStyle Returns CRLineStyle
80752>>>>>>>>>        Handle hDispatchDriver
80752>>>>>>>>>        CRLineStyle retVal
80752>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80753>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 109 OLE_VT_I4 to retVal
80754>>>>>>>>>        Function_Return retVal
80755>>>>>>>>>    End_Function
80756>>>>>>>>>
80756>>>>>>>>>    // Gets or sets bottom line style.
80756>>>>>>>>>    Procedure Set ComBottomLineStyle CRLineStyle value
80758>>>>>>>>>        Handle hDispatchDriver
80758>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80759>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80760>>>>>>>>>        Set ComProperty of hDispatchDriver 109 OLE_VT_I4 to value
80761>>>>>>>>>    End_Procedure
80762>>>>>>>>>
80762>>>>>>>>>    // Gets or sets border drop shadow.
80762>>>>>>>>>    Function ComHasDropShadow Returns Boolean
80764>>>>>>>>>        Handle hDispatchDriver
80764>>>>>>>>>        Boolean retVal
80764>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80765>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_BOOL to retVal
80766>>>>>>>>>        Function_Return retVal
80767>>>>>>>>>    End_Function
80768>>>>>>>>>
80768>>>>>>>>>    // Gets or sets border drop shadow.
80768>>>>>>>>>    Procedure Set ComHasDropShadow Boolean value
80770>>>>>>>>>        Handle hDispatchDriver
80770>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80771>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80772>>>>>>>>>        Set ComProperty of hDispatchDriver 111 OLE_VT_BOOL to value
80773>>>>>>>>>    End_Procedure
80774>>>>>>>>>
80774>>>>>>>>>    // Gets or sets object background color.
80774>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
80776>>>>>>>>>        Handle hDispatchDriver
80776>>>>>>>>>        OLE_COLOR retVal
80776>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80777>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_I4 to retVal
80778>>>>>>>>>        Function_Return retVal
80779>>>>>>>>>    End_Function
80780>>>>>>>>>
80780>>>>>>>>>    // Gets or sets object background color.
80780>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
80782>>>>>>>>>        Handle hDispatchDriver
80782>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80783>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80784>>>>>>>>>        Set ComProperty of hDispatchDriver 112 OLE_VT_I4 to value
80785>>>>>>>>>    End_Procedure
80786>>>>>>>>>
80786>>>>>>>>>    // Gets or sets object border color.
80786>>>>>>>>>    Function ComBorderColor Returns OLE_COLOR
80788>>>>>>>>>        Handle hDispatchDriver
80788>>>>>>>>>        OLE_COLOR retVal
80788>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80789>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 113 OLE_VT_I4 to retVal
80790>>>>>>>>>        Function_Return retVal
80791>>>>>>>>>    End_Function
80792>>>>>>>>>
80792>>>>>>>>>    // Gets or sets object border color.
80792>>>>>>>>>    Procedure Set ComBorderColor OLE_COLOR value
80794>>>>>>>>>        Handle hDispatchDriver
80794>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80795>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80796>>>>>>>>>        Set ComProperty of hDispatchDriver 113 OLE_VT_I4 to value
80797>>>>>>>>>    End_Procedure
80798>>>>>>>>>
80798>>>>>>>>>    // Gets object parent (Section).
80798>>>>>>>>>    Function ComParent Returns Variant
80800>>>>>>>>>        Handle hDispatchDriver
80800>>>>>>>>>        Variant retVal
80800>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80801>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
80802>>>>>>>>>        Function_Return retVal
80803>>>>>>>>>    End_Function
80804>>>>>>>>>
80804>>>>>>>>>    // Gets or sets object visibility.
80804>>>>>>>>>    Function ComSuppress Returns Boolean
80806>>>>>>>>>        Handle hDispatchDriver
80806>>>>>>>>>        Boolean retVal
80806>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80807>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 114 OLE_VT_BOOL to retVal
80808>>>>>>>>>        Function_Return retVal
80809>>>>>>>>>    End_Function
80810>>>>>>>>>
80810>>>>>>>>>    // Gets or sets object visibility.
80810>>>>>>>>>    Procedure Set ComSuppress Boolean value
80812>>>>>>>>>        Handle hDispatchDriver
80812>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80813>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80814>>>>>>>>>        Set ComProperty of hDispatchDriver 114 OLE_VT_BOOL to value
80815>>>>>>>>>    End_Procedure
80816>>>>>>>>>
80816>>>>>>>>>    // Gets or sets close border on page break.
80816>>>>>>>>>    Function ComCloseAtPageBreak Returns Boolean
80818>>>>>>>>>        Handle hDispatchDriver
80818>>>>>>>>>        Boolean retVal
80818>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80819>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 115 OLE_VT_BOOL to retVal
80820>>>>>>>>>        Function_Return retVal
80821>>>>>>>>>    End_Function
80822>>>>>>>>>
80822>>>>>>>>>    // Gets or sets close border on page break.
80822>>>>>>>>>    Procedure Set ComCloseAtPageBreak Boolean value
80824>>>>>>>>>        Handle hDispatchDriver
80824>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80825>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80826>>>>>>>>>        Set ComProperty of hDispatchDriver 115 OLE_VT_BOOL to value
80827>>>>>>>>>    End_Procedure
80828>>>>>>>>>
80828>>>>>>>>>    // Gets or sets keep object together.
80828>>>>>>>>>    Function ComKeepTogether Returns Boolean
80830>>>>>>>>>        Handle hDispatchDriver
80830>>>>>>>>>        Boolean retVal
80830>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80831>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 116 OLE_VT_BOOL to retVal
80832>>>>>>>>>        Function_Return retVal
80833>>>>>>>>>    End_Function
80834>>>>>>>>>
80834>>>>>>>>>    // Gets or sets keep object together.
80834>>>>>>>>>    Procedure Set ComKeepTogether Boolean value
80836>>>>>>>>>        Handle hDispatchDriver
80836>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80837>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80838>>>>>>>>>        Set ComProperty of hDispatchDriver 116 OLE_VT_BOOL to value
80839>>>>>>>>>    End_Procedure
80840>>>>>>>>>
80840>>>>>>>>>    // Gets or sets conditional formula.
80840>>>>>>>>>    Function ComConditionFormula Variant llFormulaType Returns String
80842>>>>>>>>>        Handle hDispatchDriver
80842>>>>>>>>>        String retVal
80842>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80843>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80844>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
80845>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 760 OLE_VT_BSTR to retVal
80846>>>>>>>>>        Function_Return retVal
80847>>>>>>>>>    End_Function
80848>>>>>>>>>
80848>>>>>>>>>    // Gets or sets conditional formula.
80848>>>>>>>>>    Procedure Set ComConditionFormula Variant llFormulaType String value
80850>>>>>>>>>        Handle hDispatchDriver
80850>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80851>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
80852>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
80853>>>>>>>>>        Set ComProperty of hDispatchDriver 760 OLE_VT_BSTR to value
80854>>>>>>>>>    End_Procedure
80855>>>>>>>>>
80855>>>>>>>>>    // Gets or sets CSS class.
80855>>>>>>>>>    Function ComCssClass Returns String
80857>>>>>>>>>        Handle hDispatchDriver
80857>>>>>>>>>        String retVal
80857>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80858>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 549 OLE_VT_BSTR to retVal
80859>>>>>>>>>        Function_Return retVal
80860>>>>>>>>>    End_Function
80861>>>>>>>>>
80861>>>>>>>>>    // Gets or sets CSS class.
80861>>>>>>>>>    Procedure Set ComCssClass String value
80863>>>>>>>>>        Handle hDispatchDriver
80863>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80864>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80865>>>>>>>>>        Set ComProperty of hDispatchDriver 549 OLE_VT_BSTR to value
80866>>>>>>>>>    End_Procedure
80867>>>>>>>>>
80867>>>>>>>>>    // Gets or sets hyperlink type.
80867>>>>>>>>>    Function ComHyperlinkType Returns CRHyperlinkType
80869>>>>>>>>>        Handle hDispatchDriver
80869>>>>>>>>>        CRHyperlinkType retVal
80869>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80870>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 901 OLE_VT_I4 to retVal
80871>>>>>>>>>        Function_Return retVal
80872>>>>>>>>>    End_Function
80873>>>>>>>>>
80873>>>>>>>>>    // Gets or sets hyperlink type.
80873>>>>>>>>>    Procedure Set ComHyperlinkType CRHyperlinkType value
80875>>>>>>>>>        Handle hDispatchDriver
80875>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80876>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80877>>>>>>>>>        Set ComProperty of hDispatchDriver 901 OLE_VT_I4 to value
80878>>>>>>>>>    End_Procedure
80879>>>>>>>>>
80879>>>>>>>>>    // Gets or sets hyperlink text.
80879>>>>>>>>>    Function ComHyperlinkText Returns String
80881>>>>>>>>>        Handle hDispatchDriver
80881>>>>>>>>>        String retVal
80881>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80882>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 902 OLE_VT_BSTR to retVal
80883>>>>>>>>>        Function_Return retVal
80884>>>>>>>>>    End_Function
80885>>>>>>>>>
80885>>>>>>>>>    // Gets or sets hyperlink text.
80885>>>>>>>>>    Procedure Set ComHyperlinkText String value
80887>>>>>>>>>        Handle hDispatchDriver
80887>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80888>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80889>>>>>>>>>        Set ComProperty of hDispatchDriver 902 OLE_VT_BSTR to value
80890>>>>>>>>>    End_Procedure
80891>>>>>>>>>End_Class
80892>>>>>>>>>
80892>>>>>>>>>// CoClass
80892>>>>>>>>>// CLSID: {828D42BF-338D-4E0F-8782-8DE303F7199C}
80892>>>>>>>>>Class cCrystalMapObject is a cComAutomationObject
80893>>>>>>>>>    Import_Class_Protocol cCrystalIMapObject
80894>>>>>>>>>
80894>>>>>>>>>    Procedure Construct_Object
80896>>>>>>>>>        Forward Send Construct_Object
80898>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
80899>>>>>>>>>    End_Procedure
80900>>>>>>>>>End_Class
80901>>>>>>>>>
80901>>>>>>>>>// CLSID: {AF376826-6120-4E28-96DD-63FD2DC27B7A}
80901>>>>>>>>>Class cCrystalICROleObject is a Mixin
80902>>>>>>>>>
80902>>>>>>>>>    // Gets or sets object name.
80902>>>>>>>>>    Function ComName Returns String
80904>>>>>>>>>        Handle hDispatchDriver
80904>>>>>>>>>        String retVal
80904>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80905>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
80906>>>>>>>>>        Function_Return retVal
80907>>>>>>>>>    End_Function
80908>>>>>>>>>
80908>>>>>>>>>    // Gets or sets object name.
80908>>>>>>>>>    Procedure Set ComName String value
80910>>>>>>>>>        Handle hDispatchDriver
80910>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80911>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80912>>>>>>>>>        Set ComProperty of hDispatchDriver -800 OLE_VT_BSTR to value
80913>>>>>>>>>    End_Procedure
80914>>>>>>>>>
80914>>>>>>>>>    // Gets report object kind.
80914>>>>>>>>>    Function ComKind Returns CRObjectKind
80916>>>>>>>>>        Handle hDispatchDriver
80916>>>>>>>>>        CRObjectKind retVal
80916>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80917>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
80918>>>>>>>>>        Function_Return retVal
80919>>>>>>>>>    End_Function
80920>>>>>>>>>
80920>>>>>>>>>    // Gets or sets object upper left position (twips).
80920>>>>>>>>>    Function ComLeft Returns Integer
80922>>>>>>>>>        Handle hDispatchDriver
80922>>>>>>>>>        Integer retVal
80922>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80923>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_I4 to retVal
80924>>>>>>>>>        Function_Return retVal
80925>>>>>>>>>    End_Function
80926>>>>>>>>>
80926>>>>>>>>>    // Gets or sets object upper left position (twips).
80926>>>>>>>>>    Procedure Set ComLeft Integer value
80928>>>>>>>>>        Handle hDispatchDriver
80928>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80929>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80930>>>>>>>>>        Set ComProperty of hDispatchDriver 102 OLE_VT_I4 to value
80931>>>>>>>>>    End_Procedure
80932>>>>>>>>>
80932>>>>>>>>>    // Gets or sets object upper top position (twips).
80932>>>>>>>>>    Function ComTop Returns Integer
80934>>>>>>>>>        Handle hDispatchDriver
80934>>>>>>>>>        Integer retVal
80934>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80935>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_I4 to retVal
80936>>>>>>>>>        Function_Return retVal
80937>>>>>>>>>    End_Function
80938>>>>>>>>>
80938>>>>>>>>>    // Gets or sets object upper top position (twips).
80938>>>>>>>>>    Procedure Set ComTop Integer value
80940>>>>>>>>>        Handle hDispatchDriver
80940>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80941>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80942>>>>>>>>>        Set ComProperty of hDispatchDriver 103 OLE_VT_I4 to value
80943>>>>>>>>>    End_Procedure
80944>>>>>>>>>
80944>>>>>>>>>    // Gets or sets object width (twips).
80944>>>>>>>>>    Function ComWidth Returns Integer
80946>>>>>>>>>        Handle hDispatchDriver
80946>>>>>>>>>        Integer retVal
80946>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80947>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
80948>>>>>>>>>        Function_Return retVal
80949>>>>>>>>>    End_Function
80950>>>>>>>>>
80950>>>>>>>>>    // Gets or sets object width (twips).
80950>>>>>>>>>    Procedure Set ComWidth Integer value
80952>>>>>>>>>        Handle hDispatchDriver
80952>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80953>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80954>>>>>>>>>        Set ComProperty of hDispatchDriver 104 OLE_VT_I4 to value
80955>>>>>>>>>    End_Procedure
80956>>>>>>>>>
80956>>>>>>>>>    // Gets or sets object height (twips).
80956>>>>>>>>>    Function ComHeight Returns Integer
80958>>>>>>>>>        Handle hDispatchDriver
80958>>>>>>>>>        Integer retVal
80958>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80959>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_I4 to retVal
80960>>>>>>>>>        Function_Return retVal
80961>>>>>>>>>    End_Function
80962>>>>>>>>>
80962>>>>>>>>>    // Gets or sets object height (twips).
80962>>>>>>>>>    Procedure Set ComHeight Integer value
80964>>>>>>>>>        Handle hDispatchDriver
80964>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80965>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80966>>>>>>>>>        Set ComProperty of hDispatchDriver 105 OLE_VT_I4 to value
80967>>>>>>>>>    End_Procedure
80968>>>>>>>>>
80968>>>>>>>>>    // Gets or sets left line style.
80968>>>>>>>>>    Function ComLeftLineStyle Returns CRLineStyle
80970>>>>>>>>>        Handle hDispatchDriver
80970>>>>>>>>>        CRLineStyle retVal
80970>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80971>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_I4 to retVal
80972>>>>>>>>>        Function_Return retVal
80973>>>>>>>>>    End_Function
80974>>>>>>>>>
80974>>>>>>>>>    // Gets or sets left line style.
80974>>>>>>>>>    Procedure Set ComLeftLineStyle CRLineStyle value
80976>>>>>>>>>        Handle hDispatchDriver
80976>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80977>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80978>>>>>>>>>        Set ComProperty of hDispatchDriver 106 OLE_VT_I4 to value
80979>>>>>>>>>    End_Procedure
80980>>>>>>>>>
80980>>>>>>>>>    // Gets or sets right line style.
80980>>>>>>>>>    Function ComRightLineStyle Returns CRLineStyle
80982>>>>>>>>>        Handle hDispatchDriver
80982>>>>>>>>>        CRLineStyle retVal
80982>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80983>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 107 OLE_VT_I4 to retVal
80984>>>>>>>>>        Function_Return retVal
80985>>>>>>>>>    End_Function
80986>>>>>>>>>
80986>>>>>>>>>    // Gets or sets right line style.
80986>>>>>>>>>    Procedure Set ComRightLineStyle CRLineStyle value
80988>>>>>>>>>        Handle hDispatchDriver
80988>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80989>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
80990>>>>>>>>>        Set ComProperty of hDispatchDriver 107 OLE_VT_I4 to value
80991>>>>>>>>>    End_Procedure
80992>>>>>>>>>
80992>>>>>>>>>    // Gets or sets top line style.
80992>>>>>>>>>    Function ComTopLineStyle Returns CRLineStyle
80994>>>>>>>>>        Handle hDispatchDriver
80994>>>>>>>>>        CRLineStyle retVal
80994>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
80995>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_I4 to retVal
80996>>>>>>>>>        Function_Return retVal
80997>>>>>>>>>    End_Function
80998>>>>>>>>>
80998>>>>>>>>>    // Gets or sets top line style.
80998>>>>>>>>>    Procedure Set ComTopLineStyle CRLineStyle value
81000>>>>>>>>>        Handle hDispatchDriver
81000>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81001>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81002>>>>>>>>>        Set ComProperty of hDispatchDriver 108 OLE_VT_I4 to value
81003>>>>>>>>>    End_Procedure
81004>>>>>>>>>
81004>>>>>>>>>    // Gets or sets bottom line style.
81004>>>>>>>>>    Function ComBottomLineStyle Returns CRLineStyle
81006>>>>>>>>>        Handle hDispatchDriver
81006>>>>>>>>>        CRLineStyle retVal
81006>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81007>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 109 OLE_VT_I4 to retVal
81008>>>>>>>>>        Function_Return retVal
81009>>>>>>>>>    End_Function
81010>>>>>>>>>
81010>>>>>>>>>    // Gets or sets bottom line style.
81010>>>>>>>>>    Procedure Set ComBottomLineStyle CRLineStyle value
81012>>>>>>>>>        Handle hDispatchDriver
81012>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81013>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81014>>>>>>>>>        Set ComProperty of hDispatchDriver 109 OLE_VT_I4 to value
81015>>>>>>>>>    End_Procedure
81016>>>>>>>>>
81016>>>>>>>>>    // Gets or sets border drop shadow.
81016>>>>>>>>>    Function ComHasDropShadow Returns Boolean
81018>>>>>>>>>        Handle hDispatchDriver
81018>>>>>>>>>        Boolean retVal
81018>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81019>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_BOOL to retVal
81020>>>>>>>>>        Function_Return retVal
81021>>>>>>>>>    End_Function
81022>>>>>>>>>
81022>>>>>>>>>    // Gets or sets border drop shadow.
81022>>>>>>>>>    Procedure Set ComHasDropShadow Boolean value
81024>>>>>>>>>        Handle hDispatchDriver
81024>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81025>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81026>>>>>>>>>        Set ComProperty of hDispatchDriver 111 OLE_VT_BOOL to value
81027>>>>>>>>>    End_Procedure
81028>>>>>>>>>
81028>>>>>>>>>    // Gets or sets object background color.
81028>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
81030>>>>>>>>>        Handle hDispatchDriver
81030>>>>>>>>>        OLE_COLOR retVal
81030>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81031>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_I4 to retVal
81032>>>>>>>>>        Function_Return retVal
81033>>>>>>>>>    End_Function
81034>>>>>>>>>
81034>>>>>>>>>    // Gets or sets object background color.
81034>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
81036>>>>>>>>>        Handle hDispatchDriver
81036>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81037>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81038>>>>>>>>>        Set ComProperty of hDispatchDriver 112 OLE_VT_I4 to value
81039>>>>>>>>>    End_Procedure
81040>>>>>>>>>
81040>>>>>>>>>    // Gets or sets object border color.
81040>>>>>>>>>    Function ComBorderColor Returns OLE_COLOR
81042>>>>>>>>>        Handle hDispatchDriver
81042>>>>>>>>>        OLE_COLOR retVal
81042>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81043>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 113 OLE_VT_I4 to retVal
81044>>>>>>>>>        Function_Return retVal
81045>>>>>>>>>    End_Function
81046>>>>>>>>>
81046>>>>>>>>>    // Gets or sets object border color.
81046>>>>>>>>>    Procedure Set ComBorderColor OLE_COLOR value
81048>>>>>>>>>        Handle hDispatchDriver
81048>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81049>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81050>>>>>>>>>        Set ComProperty of hDispatchDriver 113 OLE_VT_I4 to value
81051>>>>>>>>>    End_Procedure
81052>>>>>>>>>
81052>>>>>>>>>    // Gets object parent (Section).
81052>>>>>>>>>    Function ComParent Returns Variant
81054>>>>>>>>>        Handle hDispatchDriver
81054>>>>>>>>>        Variant retVal
81054>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81055>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
81056>>>>>>>>>        Function_Return retVal
81057>>>>>>>>>    End_Function
81058>>>>>>>>>
81058>>>>>>>>>    // Gets or sets object visibility.
81058>>>>>>>>>    Function ComSuppress Returns Boolean
81060>>>>>>>>>        Handle hDispatchDriver
81060>>>>>>>>>        Boolean retVal
81060>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81061>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 114 OLE_VT_BOOL to retVal
81062>>>>>>>>>        Function_Return retVal
81063>>>>>>>>>    End_Function
81064>>>>>>>>>
81064>>>>>>>>>    // Gets or sets object visibility.
81064>>>>>>>>>    Procedure Set ComSuppress Boolean value
81066>>>>>>>>>        Handle hDispatchDriver
81066>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81067>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81068>>>>>>>>>        Set ComProperty of hDispatchDriver 114 OLE_VT_BOOL to value
81069>>>>>>>>>    End_Procedure
81070>>>>>>>>>
81070>>>>>>>>>    // Gets or sets close border on page break.
81070>>>>>>>>>    Function ComCloseAtPageBreak Returns Boolean
81072>>>>>>>>>        Handle hDispatchDriver
81072>>>>>>>>>        Boolean retVal
81072>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81073>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 115 OLE_VT_BOOL to retVal
81074>>>>>>>>>        Function_Return retVal
81075>>>>>>>>>    End_Function
81076>>>>>>>>>
81076>>>>>>>>>    // Gets or sets close border on page break.
81076>>>>>>>>>    Procedure Set ComCloseAtPageBreak Boolean value
81078>>>>>>>>>        Handle hDispatchDriver
81078>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81079>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81080>>>>>>>>>        Set ComProperty of hDispatchDriver 115 OLE_VT_BOOL to value
81081>>>>>>>>>    End_Procedure
81082>>>>>>>>>
81082>>>>>>>>>    // Gets or sets keep object together.
81082>>>>>>>>>    Function ComKeepTogether Returns Boolean
81084>>>>>>>>>        Handle hDispatchDriver
81084>>>>>>>>>        Boolean retVal
81084>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81085>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 116 OLE_VT_BOOL to retVal
81086>>>>>>>>>        Function_Return retVal
81087>>>>>>>>>    End_Function
81088>>>>>>>>>
81088>>>>>>>>>    // Gets or sets keep object together.
81088>>>>>>>>>    Procedure Set ComKeepTogether Boolean value
81090>>>>>>>>>        Handle hDispatchDriver
81090>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81091>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81092>>>>>>>>>        Set ComProperty of hDispatchDriver 116 OLE_VT_BOOL to value
81093>>>>>>>>>    End_Procedure
81094>>>>>>>>>
81094>>>>>>>>>    // Gets or sets left cropping size (twips).
81094>>>>>>>>>    Function ComLeftCropping Returns Integer
81096>>>>>>>>>        Handle hDispatchDriver
81096>>>>>>>>>        Integer retVal
81096>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81097>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 237 OLE_VT_I4 to retVal
81098>>>>>>>>>        Function_Return retVal
81099>>>>>>>>>    End_Function
81100>>>>>>>>>
81100>>>>>>>>>    // Gets or sets left cropping size (twips).
81100>>>>>>>>>    Procedure Set ComLeftCropping Integer value
81102>>>>>>>>>        Handle hDispatchDriver
81102>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81103>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81104>>>>>>>>>        Set ComProperty of hDispatchDriver 237 OLE_VT_I4 to value
81105>>>>>>>>>    End_Procedure
81106>>>>>>>>>
81106>>>>>>>>>    // Gets or sets right cropping size (twips).
81106>>>>>>>>>    Function ComRightCropping Returns Integer
81108>>>>>>>>>        Handle hDispatchDriver
81108>>>>>>>>>        Integer retVal
81108>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81109>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 238 OLE_VT_I4 to retVal
81110>>>>>>>>>        Function_Return retVal
81111>>>>>>>>>    End_Function
81112>>>>>>>>>
81112>>>>>>>>>    // Gets or sets right cropping size (twips).
81112>>>>>>>>>    Procedure Set ComRightCropping Integer value
81114>>>>>>>>>        Handle hDispatchDriver
81114>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81115>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81116>>>>>>>>>        Set ComProperty of hDispatchDriver 238 OLE_VT_I4 to value
81117>>>>>>>>>    End_Procedure
81118>>>>>>>>>
81118>>>>>>>>>    // Gets or sets top cropping size (twips).
81118>>>>>>>>>    Function ComTopCropping Returns Integer
81120>>>>>>>>>        Handle hDispatchDriver
81120>>>>>>>>>        Integer retVal
81120>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81121>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 239 OLE_VT_I4 to retVal
81122>>>>>>>>>        Function_Return retVal
81123>>>>>>>>>    End_Function
81124>>>>>>>>>
81124>>>>>>>>>    // Gets or sets top cropping size (twips).
81124>>>>>>>>>    Procedure Set ComTopCropping Integer value
81126>>>>>>>>>        Handle hDispatchDriver
81126>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81127>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81128>>>>>>>>>        Set ComProperty of hDispatchDriver 239 OLE_VT_I4 to value
81129>>>>>>>>>    End_Procedure
81130>>>>>>>>>
81130>>>>>>>>>    // Gets or sets bottom cropping size (twips).
81130>>>>>>>>>    Function ComBottomCropping Returns Integer
81132>>>>>>>>>        Handle hDispatchDriver
81132>>>>>>>>>        Integer retVal
81132>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81133>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 240 OLE_VT_I4 to retVal
81134>>>>>>>>>        Function_Return retVal
81135>>>>>>>>>    End_Function
81136>>>>>>>>>
81136>>>>>>>>>    // Gets or sets bottom cropping size (twips).
81136>>>>>>>>>    Procedure Set ComBottomCropping Integer value
81138>>>>>>>>>        Handle hDispatchDriver
81138>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81139>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81140>>>>>>>>>        Set ComProperty of hDispatchDriver 240 OLE_VT_I4 to value
81141>>>>>>>>>    End_Procedure
81142>>>>>>>>>
81142>>>>>>>>>    // Gets or sets width scaling factor. E.g. 1 means 100%, 2 means 200%, 0.5 means 50%, etc. Range from 0.01 to 100.
81142>>>>>>>>>    Function ComXScaling Returns Real
81144>>>>>>>>>        Handle hDispatchDriver
81144>>>>>>>>>        Real retVal
81144>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81145>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 241 OLE_VT_R8 to retVal
81146>>>>>>>>>        Function_Return retVal
81147>>>>>>>>>    End_Function
81148>>>>>>>>>
81148>>>>>>>>>    // Gets or sets width scaling factor. E.g. 1 means 100%, 2 means 200%, 0.5 means 50%, etc. Range from 0.01 to 100.
81148>>>>>>>>>    Procedure Set ComXScaling Real value
81150>>>>>>>>>        Handle hDispatchDriver
81150>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81151>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81152>>>>>>>>>        Set ComProperty of hDispatchDriver 241 OLE_VT_R8 to value
81153>>>>>>>>>    End_Procedure
81154>>>>>>>>>
81154>>>>>>>>>    // Gets or sets height scaling factor. E.g. 1 means 100%, 2 means 200%, 0.5 means 50%, etc. Range from 0.01 to 100.
81154>>>>>>>>>    Function ComYScaling Returns Real
81156>>>>>>>>>        Handle hDispatchDriver
81156>>>>>>>>>        Real retVal
81156>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81157>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 242 OLE_VT_R8 to retVal
81158>>>>>>>>>        Function_Return retVal
81159>>>>>>>>>    End_Function
81160>>>>>>>>>
81160>>>>>>>>>    // Gets or sets height scaling factor. E.g. 1 means 100%, 2 means 200%, 0.5 means 50%, etc. Range from 0.01 to 100.
81160>>>>>>>>>    Procedure Set ComYScaling Real value
81162>>>>>>>>>        Handle hDispatchDriver
81162>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81163>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81164>>>>>>>>>        Set ComProperty of hDispatchDriver 242 OLE_VT_R8 to value
81165>>>>>>>>>    End_Procedure
81166>>>>>>>>>
81166>>>>>>>>>    // Gets the specified picture during formatting
81166>>>>>>>>>    Function ComFormattedPicture Returns Variant
81168>>>>>>>>>        Handle hDispatchDriver
81168>>>>>>>>>        Variant retVal
81168>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81169>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 311 OLE_VT_DISPATCH to retVal
81170>>>>>>>>>        Function_Return retVal
81171>>>>>>>>>    End_Function
81172>>>>>>>>>
81172>>>>>>>>>    // Gets the specified picture during formatting
81172>>>>>>>>>    Procedure Set ComFormattedPicture Variant value
81174>>>>>>>>>        Handle hDispatchDriver
81174>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81175>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81176>>>>>>>>>        Set ComProperty of hDispatchDriver 311 OLE_VT_DISPATCH to value
81177>>>>>>>>>    End_Procedure
81178>>>>>>>>>
81178>>>>>>>>>    // Sets OLE object location
81178>>>>>>>>>    Procedure ComSetOleLocation String llpLocation
81180>>>>>>>>>        Handle hDispatchDriver
81180>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81181>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81182>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpLocation
81183>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 475 OLE_VT_VOID
81184>>>>>>>>>    End_Procedure
81185>>>>>>>>>
81185>>>>>>>>>    // Gets or sets conditional formula.
81185>>>>>>>>>    Function ComConditionFormula Variant llFormulaType Returns String
81187>>>>>>>>>        Handle hDispatchDriver
81187>>>>>>>>>        String retVal
81187>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81188>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81189>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
81190>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 760 OLE_VT_BSTR to retVal
81191>>>>>>>>>        Function_Return retVal
81192>>>>>>>>>    End_Function
81193>>>>>>>>>
81193>>>>>>>>>    // Gets or sets conditional formula.
81193>>>>>>>>>    Procedure Set ComConditionFormula Variant llFormulaType String value
81195>>>>>>>>>        Handle hDispatchDriver
81195>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81196>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
81197>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
81198>>>>>>>>>        Set ComProperty of hDispatchDriver 760 OLE_VT_BSTR to value
81199>>>>>>>>>    End_Procedure
81200>>>>>>>>>
81200>>>>>>>>>    // Gets linked OLE object path.
81200>>>>>>>>>    Function ComGetLinkSource Returns String
81202>>>>>>>>>        Handle hDispatchDriver
81202>>>>>>>>>        String retVal
81202>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81203>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 761 OLE_VT_BSTR to retVal
81204>>>>>>>>>        Function_Return retVal
81205>>>>>>>>>    End_Function
81206>>>>>>>>>
81206>>>>>>>>>    // Gets or sets CSS class.
81206>>>>>>>>>    Function ComCssClass Returns String
81208>>>>>>>>>        Handle hDispatchDriver
81208>>>>>>>>>        String retVal
81208>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81209>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 549 OLE_VT_BSTR to retVal
81210>>>>>>>>>        Function_Return retVal
81211>>>>>>>>>    End_Function
81212>>>>>>>>>
81212>>>>>>>>>    // Gets or sets CSS class.
81212>>>>>>>>>    Procedure Set ComCssClass String value
81214>>>>>>>>>        Handle hDispatchDriver
81214>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81215>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81216>>>>>>>>>        Set ComProperty of hDispatchDriver 549 OLE_VT_BSTR to value
81217>>>>>>>>>    End_Procedure
81218>>>>>>>>>
81218>>>>>>>>>    // Gets or sets hyperlink type.
81218>>>>>>>>>    Function ComHyperlinkType Returns CRHyperlinkType
81220>>>>>>>>>        Handle hDispatchDriver
81220>>>>>>>>>        CRHyperlinkType retVal
81220>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81221>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 901 OLE_VT_I4 to retVal
81222>>>>>>>>>        Function_Return retVal
81223>>>>>>>>>    End_Function
81224>>>>>>>>>
81224>>>>>>>>>    // Gets or sets hyperlink type.
81224>>>>>>>>>    Procedure Set ComHyperlinkType CRHyperlinkType value
81226>>>>>>>>>        Handle hDispatchDriver
81226>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81227>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81228>>>>>>>>>        Set ComProperty of hDispatchDriver 901 OLE_VT_I4 to value
81229>>>>>>>>>    End_Procedure
81230>>>>>>>>>
81230>>>>>>>>>    // Gets or sets hyperlink text.
81230>>>>>>>>>    Function ComHyperlinkText Returns String
81232>>>>>>>>>        Handle hDispatchDriver
81232>>>>>>>>>        String retVal
81232>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81233>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 902 OLE_VT_BSTR to retVal
81234>>>>>>>>>        Function_Return retVal
81235>>>>>>>>>    End_Function
81236>>>>>>>>>
81236>>>>>>>>>    // Gets or sets hyperlink text.
81236>>>>>>>>>    Procedure Set ComHyperlinkText String value
81238>>>>>>>>>        Handle hDispatchDriver
81238>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81239>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81240>>>>>>>>>        Set ComProperty of hDispatchDriver 902 OLE_VT_BSTR to value
81241>>>>>>>>>    End_Procedure
81242>>>>>>>>>End_Class
81243>>>>>>>>>
81243>>>>>>>>>// CoClass
81243>>>>>>>>>// CLSID: {CA484E23-A54C-4FB8-8515-8197E8D715F4}
81243>>>>>>>>>Class cCrystalOleObject is a cComAutomationObject
81244>>>>>>>>>    Import_Class_Protocol cCrystalICROleObject
81245>>>>>>>>>
81245>>>>>>>>>    Procedure Construct_Object
81247>>>>>>>>>        Forward Send Construct_Object
81249>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
81250>>>>>>>>>    End_Procedure
81251>>>>>>>>>End_Class
81252>>>>>>>>>
81252>>>>>>>>>// CLSID: {AF376827-6120-4E28-96DD-63FD2DC27B7A}
81252>>>>>>>>>Class cCrystalIBlobFieldObject is a Mixin
81253>>>>>>>>>
81253>>>>>>>>>    // Gets or sets object name.
81253>>>>>>>>>    Function ComName Returns String
81255>>>>>>>>>        Handle hDispatchDriver
81255>>>>>>>>>        String retVal
81255>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81256>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
81257>>>>>>>>>        Function_Return retVal
81258>>>>>>>>>    End_Function
81259>>>>>>>>>
81259>>>>>>>>>    // Gets or sets object name.
81259>>>>>>>>>    Procedure Set ComName String value
81261>>>>>>>>>        Handle hDispatchDriver
81261>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81262>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81263>>>>>>>>>        Set ComProperty of hDispatchDriver -800 OLE_VT_BSTR to value
81264>>>>>>>>>    End_Procedure
81265>>>>>>>>>
81265>>>>>>>>>    // Gets report object kind.
81265>>>>>>>>>    Function ComKind Returns CRObjectKind
81267>>>>>>>>>        Handle hDispatchDriver
81267>>>>>>>>>        CRObjectKind retVal
81267>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81268>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
81269>>>>>>>>>        Function_Return retVal
81270>>>>>>>>>    End_Function
81271>>>>>>>>>
81271>>>>>>>>>    // Gets or sets object upper left position (twips).
81271>>>>>>>>>    Function ComLeft Returns Integer
81273>>>>>>>>>        Handle hDispatchDriver
81273>>>>>>>>>        Integer retVal
81273>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81274>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_I4 to retVal
81275>>>>>>>>>        Function_Return retVal
81276>>>>>>>>>    End_Function
81277>>>>>>>>>
81277>>>>>>>>>    // Gets or sets object upper left position (twips).
81277>>>>>>>>>    Procedure Set ComLeft Integer value
81279>>>>>>>>>        Handle hDispatchDriver
81279>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81280>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81281>>>>>>>>>        Set ComProperty of hDispatchDriver 102 OLE_VT_I4 to value
81282>>>>>>>>>    End_Procedure
81283>>>>>>>>>
81283>>>>>>>>>    // Gets or sets object upper top position (twips).
81283>>>>>>>>>    Function ComTop Returns Integer
81285>>>>>>>>>        Handle hDispatchDriver
81285>>>>>>>>>        Integer retVal
81285>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81286>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_I4 to retVal
81287>>>>>>>>>        Function_Return retVal
81288>>>>>>>>>    End_Function
81289>>>>>>>>>
81289>>>>>>>>>    // Gets or sets object upper top position (twips).
81289>>>>>>>>>    Procedure Set ComTop Integer value
81291>>>>>>>>>        Handle hDispatchDriver
81291>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81292>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81293>>>>>>>>>        Set ComProperty of hDispatchDriver 103 OLE_VT_I4 to value
81294>>>>>>>>>    End_Procedure
81295>>>>>>>>>
81295>>>>>>>>>    // Gets or sets object width (twips).
81295>>>>>>>>>    Function ComWidth Returns Integer
81297>>>>>>>>>        Handle hDispatchDriver
81297>>>>>>>>>        Integer retVal
81297>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81298>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
81299>>>>>>>>>        Function_Return retVal
81300>>>>>>>>>    End_Function
81301>>>>>>>>>
81301>>>>>>>>>    // Gets or sets object width (twips).
81301>>>>>>>>>    Procedure Set ComWidth Integer value
81303>>>>>>>>>        Handle hDispatchDriver
81303>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81304>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81305>>>>>>>>>        Set ComProperty of hDispatchDriver 104 OLE_VT_I4 to value
81306>>>>>>>>>    End_Procedure
81307>>>>>>>>>
81307>>>>>>>>>    // Gets or sets object height (twips).
81307>>>>>>>>>    Function ComHeight Returns Integer
81309>>>>>>>>>        Handle hDispatchDriver
81309>>>>>>>>>        Integer retVal
81309>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81310>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_I4 to retVal
81311>>>>>>>>>        Function_Return retVal
81312>>>>>>>>>    End_Function
81313>>>>>>>>>
81313>>>>>>>>>    // Gets or sets object height (twips).
81313>>>>>>>>>    Procedure Set ComHeight Integer value
81315>>>>>>>>>        Handle hDispatchDriver
81315>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81316>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81317>>>>>>>>>        Set ComProperty of hDispatchDriver 105 OLE_VT_I4 to value
81318>>>>>>>>>    End_Procedure
81319>>>>>>>>>
81319>>>>>>>>>    // Gets or sets left line style.
81319>>>>>>>>>    Function ComLeftLineStyle Returns CRLineStyle
81321>>>>>>>>>        Handle hDispatchDriver
81321>>>>>>>>>        CRLineStyle retVal
81321>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81322>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_I4 to retVal
81323>>>>>>>>>        Function_Return retVal
81324>>>>>>>>>    End_Function
81325>>>>>>>>>
81325>>>>>>>>>    // Gets or sets left line style.
81325>>>>>>>>>    Procedure Set ComLeftLineStyle CRLineStyle value
81327>>>>>>>>>        Handle hDispatchDriver
81327>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81328>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81329>>>>>>>>>        Set ComProperty of hDispatchDriver 106 OLE_VT_I4 to value
81330>>>>>>>>>    End_Procedure
81331>>>>>>>>>
81331>>>>>>>>>    // Gets or sets right line style.
81331>>>>>>>>>    Function ComRightLineStyle Returns CRLineStyle
81333>>>>>>>>>        Handle hDispatchDriver
81333>>>>>>>>>        CRLineStyle retVal
81333>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81334>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 107 OLE_VT_I4 to retVal
81335>>>>>>>>>        Function_Return retVal
81336>>>>>>>>>    End_Function
81337>>>>>>>>>
81337>>>>>>>>>    // Gets or sets right line style.
81337>>>>>>>>>    Procedure Set ComRightLineStyle CRLineStyle value
81339>>>>>>>>>        Handle hDispatchDriver
81339>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81340>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81341>>>>>>>>>        Set ComProperty of hDispatchDriver 107 OLE_VT_I4 to value
81342>>>>>>>>>    End_Procedure
81343>>>>>>>>>
81343>>>>>>>>>    // Gets or sets top line style.
81343>>>>>>>>>    Function ComTopLineStyle Returns CRLineStyle
81345>>>>>>>>>        Handle hDispatchDriver
81345>>>>>>>>>        CRLineStyle retVal
81345>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81346>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_I4 to retVal
81347>>>>>>>>>        Function_Return retVal
81348>>>>>>>>>    End_Function
81349>>>>>>>>>
81349>>>>>>>>>    // Gets or sets top line style.
81349>>>>>>>>>    Procedure Set ComTopLineStyle CRLineStyle value
81351>>>>>>>>>        Handle hDispatchDriver
81351>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81352>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81353>>>>>>>>>        Set ComProperty of hDispatchDriver 108 OLE_VT_I4 to value
81354>>>>>>>>>    End_Procedure
81355>>>>>>>>>
81355>>>>>>>>>    // Gets or sets bottom line style.
81355>>>>>>>>>    Function ComBottomLineStyle Returns CRLineStyle
81357>>>>>>>>>        Handle hDispatchDriver
81357>>>>>>>>>        CRLineStyle retVal
81357>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81358>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 109 OLE_VT_I4 to retVal
81359>>>>>>>>>        Function_Return retVal
81360>>>>>>>>>    End_Function
81361>>>>>>>>>
81361>>>>>>>>>    // Gets or sets bottom line style.
81361>>>>>>>>>    Procedure Set ComBottomLineStyle CRLineStyle value
81363>>>>>>>>>        Handle hDispatchDriver
81363>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81364>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81365>>>>>>>>>        Set ComProperty of hDispatchDriver 109 OLE_VT_I4 to value
81366>>>>>>>>>    End_Procedure
81367>>>>>>>>>
81367>>>>>>>>>    // Gets or sets border drop shadow.
81367>>>>>>>>>    Function ComHasDropShadow Returns Boolean
81369>>>>>>>>>        Handle hDispatchDriver
81369>>>>>>>>>        Boolean retVal
81369>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81370>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_BOOL to retVal
81371>>>>>>>>>        Function_Return retVal
81372>>>>>>>>>    End_Function
81373>>>>>>>>>
81373>>>>>>>>>    // Gets or sets border drop shadow.
81373>>>>>>>>>    Procedure Set ComHasDropShadow Boolean value
81375>>>>>>>>>        Handle hDispatchDriver
81375>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81376>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81377>>>>>>>>>        Set ComProperty of hDispatchDriver 111 OLE_VT_BOOL to value
81378>>>>>>>>>    End_Procedure
81379>>>>>>>>>
81379>>>>>>>>>    // Gets or sets object background color.
81379>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
81381>>>>>>>>>        Handle hDispatchDriver
81381>>>>>>>>>        OLE_COLOR retVal
81381>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81382>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_I4 to retVal
81383>>>>>>>>>        Function_Return retVal
81384>>>>>>>>>    End_Function
81385>>>>>>>>>
81385>>>>>>>>>    // Gets or sets object background color.
81385>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
81387>>>>>>>>>        Handle hDispatchDriver
81387>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81388>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81389>>>>>>>>>        Set ComProperty of hDispatchDriver 112 OLE_VT_I4 to value
81390>>>>>>>>>    End_Procedure
81391>>>>>>>>>
81391>>>>>>>>>    // Gets or sets object border color.
81391>>>>>>>>>    Function ComBorderColor Returns OLE_COLOR
81393>>>>>>>>>        Handle hDispatchDriver
81393>>>>>>>>>        OLE_COLOR retVal
81393>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81394>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 113 OLE_VT_I4 to retVal
81395>>>>>>>>>        Function_Return retVal
81396>>>>>>>>>    End_Function
81397>>>>>>>>>
81397>>>>>>>>>    // Gets or sets object border color.
81397>>>>>>>>>    Procedure Set ComBorderColor OLE_COLOR value
81399>>>>>>>>>        Handle hDispatchDriver
81399>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81400>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81401>>>>>>>>>        Set ComProperty of hDispatchDriver 113 OLE_VT_I4 to value
81402>>>>>>>>>    End_Procedure
81403>>>>>>>>>
81403>>>>>>>>>    // Gets object parent (Section).
81403>>>>>>>>>    Function ComParent Returns Variant
81405>>>>>>>>>        Handle hDispatchDriver
81405>>>>>>>>>        Variant retVal
81405>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81406>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
81407>>>>>>>>>        Function_Return retVal
81408>>>>>>>>>    End_Function
81409>>>>>>>>>
81409>>>>>>>>>    // Gets or sets object visibility.
81409>>>>>>>>>    Function ComSuppress Returns Boolean
81411>>>>>>>>>        Handle hDispatchDriver
81411>>>>>>>>>        Boolean retVal
81411>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81412>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 114 OLE_VT_BOOL to retVal
81413>>>>>>>>>        Function_Return retVal
81414>>>>>>>>>    End_Function
81415>>>>>>>>>
81415>>>>>>>>>    // Gets or sets object visibility.
81415>>>>>>>>>    Procedure Set ComSuppress Boolean value
81417>>>>>>>>>        Handle hDispatchDriver
81417>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81418>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81419>>>>>>>>>        Set ComProperty of hDispatchDriver 114 OLE_VT_BOOL to value
81420>>>>>>>>>    End_Procedure
81421>>>>>>>>>
81421>>>>>>>>>    // Gets or sets close border on page break.
81421>>>>>>>>>    Function ComCloseAtPageBreak Returns Boolean
81423>>>>>>>>>        Handle hDispatchDriver
81423>>>>>>>>>        Boolean retVal
81423>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81424>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 115 OLE_VT_BOOL to retVal
81425>>>>>>>>>        Function_Return retVal
81426>>>>>>>>>    End_Function
81427>>>>>>>>>
81427>>>>>>>>>    // Gets or sets close border on page break.
81427>>>>>>>>>    Procedure Set ComCloseAtPageBreak Boolean value
81429>>>>>>>>>        Handle hDispatchDriver
81429>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81430>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81431>>>>>>>>>        Set ComProperty of hDispatchDriver 115 OLE_VT_BOOL to value
81432>>>>>>>>>    End_Procedure
81433>>>>>>>>>
81433>>>>>>>>>    // Gets or sets keep object together.
81433>>>>>>>>>    Function ComKeepTogether Returns Boolean
81435>>>>>>>>>        Handle hDispatchDriver
81435>>>>>>>>>        Boolean retVal
81435>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81436>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 116 OLE_VT_BOOL to retVal
81437>>>>>>>>>        Function_Return retVal
81438>>>>>>>>>    End_Function
81439>>>>>>>>>
81439>>>>>>>>>    // Gets or sets keep object together.
81439>>>>>>>>>    Procedure Set ComKeepTogether Boolean value
81441>>>>>>>>>        Handle hDispatchDriver
81441>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81442>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81443>>>>>>>>>        Set ComProperty of hDispatchDriver 116 OLE_VT_BOOL to value
81444>>>>>>>>>    End_Procedure
81445>>>>>>>>>
81445>>>>>>>>>    // Gets or sets left cropping size (twips).
81445>>>>>>>>>    Function ComLeftCropping Returns Integer
81447>>>>>>>>>        Handle hDispatchDriver
81447>>>>>>>>>        Integer retVal
81447>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81448>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 237 OLE_VT_I4 to retVal
81449>>>>>>>>>        Function_Return retVal
81450>>>>>>>>>    End_Function
81451>>>>>>>>>
81451>>>>>>>>>    // Gets or sets left cropping size (twips).
81451>>>>>>>>>    Procedure Set ComLeftCropping Integer value
81453>>>>>>>>>        Handle hDispatchDriver
81453>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81454>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81455>>>>>>>>>        Set ComProperty of hDispatchDriver 237 OLE_VT_I4 to value
81456>>>>>>>>>    End_Procedure
81457>>>>>>>>>
81457>>>>>>>>>    // Gets or sets right cropping size (twips).
81457>>>>>>>>>    Function ComRightCropping Returns Integer
81459>>>>>>>>>        Handle hDispatchDriver
81459>>>>>>>>>        Integer retVal
81459>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81460>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 238 OLE_VT_I4 to retVal
81461>>>>>>>>>        Function_Return retVal
81462>>>>>>>>>    End_Function
81463>>>>>>>>>
81463>>>>>>>>>    // Gets or sets right cropping size (twips).
81463>>>>>>>>>    Procedure Set ComRightCropping Integer value
81465>>>>>>>>>        Handle hDispatchDriver
81465>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81466>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81467>>>>>>>>>        Set ComProperty of hDispatchDriver 238 OLE_VT_I4 to value
81468>>>>>>>>>    End_Procedure
81469>>>>>>>>>
81469>>>>>>>>>    // Gets or sets top cropping size (twips).
81469>>>>>>>>>    Function ComTopCropping Returns Integer
81471>>>>>>>>>        Handle hDispatchDriver
81471>>>>>>>>>        Integer retVal
81471>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81472>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 239 OLE_VT_I4 to retVal
81473>>>>>>>>>        Function_Return retVal
81474>>>>>>>>>    End_Function
81475>>>>>>>>>
81475>>>>>>>>>    // Gets or sets top cropping size (twips).
81475>>>>>>>>>    Procedure Set ComTopCropping Integer value
81477>>>>>>>>>        Handle hDispatchDriver
81477>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81478>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81479>>>>>>>>>        Set ComProperty of hDispatchDriver 239 OLE_VT_I4 to value
81480>>>>>>>>>    End_Procedure
81481>>>>>>>>>
81481>>>>>>>>>    // Gets or sets bottom cropping size (twips).
81481>>>>>>>>>    Function ComBottomCropping Returns Integer
81483>>>>>>>>>        Handle hDispatchDriver
81483>>>>>>>>>        Integer retVal
81483>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81484>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 240 OLE_VT_I4 to retVal
81485>>>>>>>>>        Function_Return retVal
81486>>>>>>>>>    End_Function
81487>>>>>>>>>
81487>>>>>>>>>    // Gets or sets bottom cropping size (twips).
81487>>>>>>>>>    Procedure Set ComBottomCropping Integer value
81489>>>>>>>>>        Handle hDispatchDriver
81489>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81490>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81491>>>>>>>>>        Set ComProperty of hDispatchDriver 240 OLE_VT_I4 to value
81492>>>>>>>>>    End_Procedure
81493>>>>>>>>>
81493>>>>>>>>>    // Gets or sets width scaling factor. E.g. 1 means 100%, 2 means 200%, 0.5 means 50%, etc. Range from 0.01 to 100.
81493>>>>>>>>>    Function ComXScaling Returns Real
81495>>>>>>>>>        Handle hDispatchDriver
81495>>>>>>>>>        Real retVal
81495>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81496>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 241 OLE_VT_R8 to retVal
81497>>>>>>>>>        Function_Return retVal
81498>>>>>>>>>    End_Function
81499>>>>>>>>>
81499>>>>>>>>>    // Gets or sets width scaling factor. E.g. 1 means 100%, 2 means 200%, 0.5 means 50%, etc. Range from 0.01 to 100.
81499>>>>>>>>>    Procedure Set ComXScaling Real value
81501>>>>>>>>>        Handle hDispatchDriver
81501>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81502>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81503>>>>>>>>>        Set ComProperty of hDispatchDriver 241 OLE_VT_R8 to value
81504>>>>>>>>>    End_Procedure
81505>>>>>>>>>
81505>>>>>>>>>    // Gets or sets height scaling factor. E.g. 1 means 100%, 2 means 200%, 0.5 means 50%, etc. Range from 0.01 to 100.
81505>>>>>>>>>    Function ComYScaling Returns Real
81507>>>>>>>>>        Handle hDispatchDriver
81507>>>>>>>>>        Real retVal
81507>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81508>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 242 OLE_VT_R8 to retVal
81509>>>>>>>>>        Function_Return retVal
81510>>>>>>>>>    End_Function
81511>>>>>>>>>
81511>>>>>>>>>    // Gets or sets height scaling factor. E.g. 1 means 100%, 2 means 200%, 0.5 means 50%, etc. Range from 0.01 to 100.
81511>>>>>>>>>    Procedure Set ComYScaling Real value
81513>>>>>>>>>        Handle hDispatchDriver
81513>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81514>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81515>>>>>>>>>        Set ComProperty of hDispatchDriver 242 OLE_VT_R8 to value
81516>>>>>>>>>    End_Procedure
81517>>>>>>>>>
81517>>>>>>>>>    // Gets database field.
81517>>>>>>>>>    Function ComField Returns Variant
81519>>>>>>>>>        Handle hDispatchDriver
81519>>>>>>>>>        Variant retVal
81519>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81520>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 119 OLE_VT_DISPATCH to retVal
81521>>>>>>>>>        Function_Return retVal
81522>>>>>>>>>    End_Function
81523>>>>>>>>>
81523>>>>>>>>>    // Gets or sets conditional formula.
81523>>>>>>>>>    Function ComConditionFormula Variant llFormulaType Returns String
81525>>>>>>>>>        Handle hDispatchDriver
81525>>>>>>>>>        String retVal
81525>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81526>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81527>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
81528>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 760 OLE_VT_BSTR to retVal
81529>>>>>>>>>        Function_Return retVal
81530>>>>>>>>>    End_Function
81531>>>>>>>>>
81531>>>>>>>>>    // Gets or sets conditional formula.
81531>>>>>>>>>    Procedure Set ComConditionFormula Variant llFormulaType String value
81533>>>>>>>>>        Handle hDispatchDriver
81533>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81534>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
81535>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
81536>>>>>>>>>        Set ComProperty of hDispatchDriver 760 OLE_VT_BSTR to value
81537>>>>>>>>>    End_Procedure
81538>>>>>>>>>
81538>>>>>>>>>    // Gets or sets CSS class.
81538>>>>>>>>>    Function ComCssClass Returns String
81540>>>>>>>>>        Handle hDispatchDriver
81540>>>>>>>>>        String retVal
81540>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81541>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 549 OLE_VT_BSTR to retVal
81542>>>>>>>>>        Function_Return retVal
81543>>>>>>>>>    End_Function
81544>>>>>>>>>
81544>>>>>>>>>    // Gets or sets CSS class.
81544>>>>>>>>>    Procedure Set ComCssClass String value
81546>>>>>>>>>        Handle hDispatchDriver
81546>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81547>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81548>>>>>>>>>        Set ComProperty of hDispatchDriver 549 OLE_VT_BSTR to value
81549>>>>>>>>>    End_Procedure
81550>>>>>>>>>
81550>>>>>>>>>    // Gets or sets hyperlink type.
81550>>>>>>>>>    Function ComHyperlinkType Returns CRHyperlinkType
81552>>>>>>>>>        Handle hDispatchDriver
81552>>>>>>>>>        CRHyperlinkType retVal
81552>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81553>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 901 OLE_VT_I4 to retVal
81554>>>>>>>>>        Function_Return retVal
81555>>>>>>>>>    End_Function
81556>>>>>>>>>
81556>>>>>>>>>    // Gets or sets hyperlink type.
81556>>>>>>>>>    Procedure Set ComHyperlinkType CRHyperlinkType value
81558>>>>>>>>>        Handle hDispatchDriver
81558>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81559>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81560>>>>>>>>>        Set ComProperty of hDispatchDriver 901 OLE_VT_I4 to value
81561>>>>>>>>>    End_Procedure
81562>>>>>>>>>
81562>>>>>>>>>    // Gets or sets hyperlink text.
81562>>>>>>>>>    Function ComHyperlinkText Returns String
81564>>>>>>>>>        Handle hDispatchDriver
81564>>>>>>>>>        String retVal
81564>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81565>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 902 OLE_VT_BSTR to retVal
81566>>>>>>>>>        Function_Return retVal
81567>>>>>>>>>    End_Function
81568>>>>>>>>>
81568>>>>>>>>>    // Gets or sets hyperlink text.
81568>>>>>>>>>    Procedure Set ComHyperlinkText String value
81570>>>>>>>>>        Handle hDispatchDriver
81570>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81571>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81572>>>>>>>>>        Set ComProperty of hDispatchDriver 902 OLE_VT_BSTR to value
81573>>>>>>>>>    End_Procedure
81574>>>>>>>>>End_Class
81575>>>>>>>>>
81575>>>>>>>>>// CoClass
81575>>>>>>>>>// CLSID: {425715F1-FAEB-4F58-AC9A-27DE93E54575}
81575>>>>>>>>>Class cCrystalBlobFieldObject is a cComAutomationObject
81576>>>>>>>>>    Import_Class_Protocol cCrystalIBlobFieldObject
81577>>>>>>>>>
81577>>>>>>>>>    Procedure Construct_Object
81579>>>>>>>>>        Forward Send Construct_Object
81581>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
81582>>>>>>>>>    End_Procedure
81583>>>>>>>>>End_Class
81584>>>>>>>>>
81584>>>>>>>>>// CLSID: {AF376828-6120-4E28-96DD-63FD2DC27B7A}
81584>>>>>>>>>Class cCrystalILineObject is a Mixin
81585>>>>>>>>>
81585>>>>>>>>>    // Gets or sets object name.
81585>>>>>>>>>    Function ComName Returns String
81587>>>>>>>>>        Handle hDispatchDriver
81587>>>>>>>>>        String retVal
81587>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81588>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
81589>>>>>>>>>        Function_Return retVal
81590>>>>>>>>>    End_Function
81591>>>>>>>>>
81591>>>>>>>>>    // Gets or sets object name.
81591>>>>>>>>>    Procedure Set ComName String value
81593>>>>>>>>>        Handle hDispatchDriver
81593>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81594>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81595>>>>>>>>>        Set ComProperty of hDispatchDriver -800 OLE_VT_BSTR to value
81596>>>>>>>>>    End_Procedure
81597>>>>>>>>>
81597>>>>>>>>>    // Gets report object kind.
81597>>>>>>>>>    Function ComKind Returns CRObjectKind
81599>>>>>>>>>        Handle hDispatchDriver
81599>>>>>>>>>        CRObjectKind retVal
81599>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81600>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
81601>>>>>>>>>        Function_Return retVal
81602>>>>>>>>>    End_Function
81603>>>>>>>>>
81603>>>>>>>>>    // Gets or sets object upper left position (twips).
81603>>>>>>>>>    Function ComLeft Returns Integer
81605>>>>>>>>>        Handle hDispatchDriver
81605>>>>>>>>>        Integer retVal
81605>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81606>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_I4 to retVal
81607>>>>>>>>>        Function_Return retVal
81608>>>>>>>>>    End_Function
81609>>>>>>>>>
81609>>>>>>>>>    // Gets or sets object upper left position (twips).
81609>>>>>>>>>    Procedure Set ComLeft Integer value
81611>>>>>>>>>        Handle hDispatchDriver
81611>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81612>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81613>>>>>>>>>        Set ComProperty of hDispatchDriver 102 OLE_VT_I4 to value
81614>>>>>>>>>    End_Procedure
81615>>>>>>>>>
81615>>>>>>>>>    // Gets or sets object upper top position (twips).
81615>>>>>>>>>    Function ComTop Returns Integer
81617>>>>>>>>>        Handle hDispatchDriver
81617>>>>>>>>>        Integer retVal
81617>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81618>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_I4 to retVal
81619>>>>>>>>>        Function_Return retVal
81620>>>>>>>>>    End_Function
81621>>>>>>>>>
81621>>>>>>>>>    // Gets or sets object upper top position (twips).
81621>>>>>>>>>    Procedure Set ComTop Integer value
81623>>>>>>>>>        Handle hDispatchDriver
81623>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81624>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81625>>>>>>>>>        Set ComProperty of hDispatchDriver 103 OLE_VT_I4 to value
81626>>>>>>>>>    End_Procedure
81627>>>>>>>>>
81627>>>>>>>>>    // Gets object parent (Section).
81627>>>>>>>>>    Function ComParent Returns Variant
81629>>>>>>>>>        Handle hDispatchDriver
81629>>>>>>>>>        Variant retVal
81629>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81630>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
81631>>>>>>>>>        Function_Return retVal
81632>>>>>>>>>    End_Function
81633>>>>>>>>>
81633>>>>>>>>>    // Gets or sets object visibility.
81633>>>>>>>>>    Function ComSuppress Returns Boolean
81635>>>>>>>>>        Handle hDispatchDriver
81635>>>>>>>>>        Boolean retVal
81635>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81636>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 114 OLE_VT_BOOL to retVal
81637>>>>>>>>>        Function_Return retVal
81638>>>>>>>>>    End_Function
81639>>>>>>>>>
81639>>>>>>>>>    // Gets or sets object visibility.
81639>>>>>>>>>    Procedure Set ComSuppress Boolean value
81641>>>>>>>>>        Handle hDispatchDriver
81641>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81642>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81643>>>>>>>>>        Set ComProperty of hDispatchDriver 114 OLE_VT_BOOL to value
81644>>>>>>>>>    End_Procedure
81645>>>>>>>>>
81645>>>>>>>>>    // Gets or sets line color.
81645>>>>>>>>>    Function ComLineColor Returns OLE_COLOR
81647>>>>>>>>>        Handle hDispatchDriver
81647>>>>>>>>>        OLE_COLOR retVal
81647>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81648>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 200 OLE_VT_I4 to retVal
81649>>>>>>>>>        Function_Return retVal
81650>>>>>>>>>    End_Function
81651>>>>>>>>>
81651>>>>>>>>>    // Gets or sets line color.
81651>>>>>>>>>    Procedure Set ComLineColor OLE_COLOR value
81653>>>>>>>>>        Handle hDispatchDriver
81653>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81654>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81655>>>>>>>>>        Set ComProperty of hDispatchDriver 200 OLE_VT_I4 to value
81656>>>>>>>>>    End_Procedure
81657>>>>>>>>>
81657>>>>>>>>>    // Gets or sets line lower right position (twips).
81657>>>>>>>>>    Function ComRight Returns Integer
81659>>>>>>>>>        Handle hDispatchDriver
81659>>>>>>>>>        Integer retVal
81659>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81660>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 202 OLE_VT_I4 to retVal
81661>>>>>>>>>        Function_Return retVal
81662>>>>>>>>>    End_Function
81663>>>>>>>>>
81663>>>>>>>>>    // Gets or sets line lower right position (twips).
81663>>>>>>>>>    Procedure Set ComRight Integer value
81665>>>>>>>>>        Handle hDispatchDriver
81665>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81666>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81667>>>>>>>>>        Set ComProperty of hDispatchDriver 202 OLE_VT_I4 to value
81668>>>>>>>>>    End_Procedure
81669>>>>>>>>>
81669>>>>>>>>>    // Gets or sets line lower bottom position (twips).
81669>>>>>>>>>    Function ComBottom Returns Integer
81671>>>>>>>>>        Handle hDispatchDriver
81671>>>>>>>>>        Integer retVal
81671>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81672>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 203 OLE_VT_I4 to retVal
81673>>>>>>>>>        Function_Return retVal
81674>>>>>>>>>    End_Function
81675>>>>>>>>>
81675>>>>>>>>>    // Gets or sets line lower bottom position (twips).
81675>>>>>>>>>    Procedure Set ComBottom Integer value
81677>>>>>>>>>        Handle hDispatchDriver
81677>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81678>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81679>>>>>>>>>        Set ComProperty of hDispatchDriver 203 OLE_VT_I4 to value
81680>>>>>>>>>    End_Procedure
81681>>>>>>>>>
81681>>>>>>>>>    // Gets or sets line thickness (twips).
81681>>>>>>>>>    Function ComLineThickness Returns Integer
81683>>>>>>>>>        Handle hDispatchDriver
81683>>>>>>>>>        Integer retVal
81683>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81684>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 208 OLE_VT_I4 to retVal
81685>>>>>>>>>        Function_Return retVal
81686>>>>>>>>>    End_Function
81687>>>>>>>>>
81687>>>>>>>>>    // Gets or sets line thickness (twips).
81687>>>>>>>>>    Procedure Set ComLineThickness Integer value
81689>>>>>>>>>        Handle hDispatchDriver
81689>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81690>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81691>>>>>>>>>        Set ComProperty of hDispatchDriver 208 OLE_VT_I4 to value
81692>>>>>>>>>    End_Procedure
81693>>>>>>>>>
81693>>>>>>>>>    // Gets or sets extend to bottom of section option.
81693>>>>>>>>>    Function ComExtendToBottomOfSection Returns Boolean
81695>>>>>>>>>        Handle hDispatchDriver
81695>>>>>>>>>        Boolean retVal
81695>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81696>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 209 OLE_VT_BOOL to retVal
81697>>>>>>>>>        Function_Return retVal
81698>>>>>>>>>    End_Function
81699>>>>>>>>>
81699>>>>>>>>>    // Gets or sets extend to bottom of section option.
81699>>>>>>>>>    Procedure Set ComExtendToBottomOfSection Boolean value
81701>>>>>>>>>        Handle hDispatchDriver
81701>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81702>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81703>>>>>>>>>        Set ComProperty of hDispatchDriver 209 OLE_VT_BOOL to value
81704>>>>>>>>>    End_Procedure
81705>>>>>>>>>
81705>>>>>>>>>    // Gets or sets line style.
81705>>>>>>>>>    Function ComLineStyle Returns CRLineStyle
81707>>>>>>>>>        Handle hDispatchDriver
81707>>>>>>>>>        CRLineStyle retVal
81707>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81708>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 204 OLE_VT_I4 to retVal
81709>>>>>>>>>        Function_Return retVal
81710>>>>>>>>>    End_Function
81711>>>>>>>>>
81711>>>>>>>>>    // Gets or sets line style.
81711>>>>>>>>>    Procedure Set ComLineStyle CRLineStyle value
81713>>>>>>>>>        Handle hDispatchDriver
81713>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81714>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81715>>>>>>>>>        Set ComProperty of hDispatchDriver 204 OLE_VT_I4 to value
81716>>>>>>>>>    End_Procedure
81717>>>>>>>>>
81717>>>>>>>>>    // Gets end section.
81717>>>>>>>>>    Function ComEndSection Returns Variant
81719>>>>>>>>>        Handle hDispatchDriver
81719>>>>>>>>>        Variant retVal
81719>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81720>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 210 OLE_VT_DISPATCH to retVal
81721>>>>>>>>>        Function_Return retVal
81722>>>>>>>>>    End_Function
81723>>>>>>>>>
81723>>>>>>>>>    // Gets or sets conditional formula.
81723>>>>>>>>>    Function ComConditionFormula Variant llFormulaType Returns String
81725>>>>>>>>>        Handle hDispatchDriver
81725>>>>>>>>>        String retVal
81725>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81726>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81727>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
81728>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 760 OLE_VT_BSTR to retVal
81729>>>>>>>>>        Function_Return retVal
81730>>>>>>>>>    End_Function
81731>>>>>>>>>
81731>>>>>>>>>    // Gets or sets conditional formula.
81731>>>>>>>>>    Procedure Set ComConditionFormula Variant llFormulaType String value
81733>>>>>>>>>        Handle hDispatchDriver
81733>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81734>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
81735>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
81736>>>>>>>>>        Set ComProperty of hDispatchDriver 760 OLE_VT_BSTR to value
81737>>>>>>>>>    End_Procedure
81738>>>>>>>>>
81738>>>>>>>>>    // Gets or sets CSS class.
81738>>>>>>>>>    Function ComCssClass Returns String
81740>>>>>>>>>        Handle hDispatchDriver
81740>>>>>>>>>        String retVal
81740>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81741>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 549 OLE_VT_BSTR to retVal
81742>>>>>>>>>        Function_Return retVal
81743>>>>>>>>>    End_Function
81744>>>>>>>>>
81744>>>>>>>>>    // Gets or sets CSS class.
81744>>>>>>>>>    Procedure Set ComCssClass String value
81746>>>>>>>>>        Handle hDispatchDriver
81746>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81747>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81748>>>>>>>>>        Set ComProperty of hDispatchDriver 549 OLE_VT_BSTR to value
81749>>>>>>>>>    End_Procedure
81750>>>>>>>>>End_Class
81751>>>>>>>>>
81751>>>>>>>>>// CoClass
81751>>>>>>>>>// CLSID: {CE3C51A2-D115-4ADF-8041-7A71254AFFAA}
81751>>>>>>>>>Class cCrystalLineObject is a cComAutomationObject
81752>>>>>>>>>    Import_Class_Protocol cCrystalILineObject
81753>>>>>>>>>
81753>>>>>>>>>    Procedure Construct_Object
81755>>>>>>>>>        Forward Send Construct_Object
81757>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
81758>>>>>>>>>    End_Procedure
81759>>>>>>>>>End_Class
81760>>>>>>>>>
81760>>>>>>>>>// CLSID: {AF376829-6120-4E28-96DD-63FD2DC27B7A}
81760>>>>>>>>>Class cCrystalIBoxObject is a Mixin
81761>>>>>>>>>
81761>>>>>>>>>    // Gets or sets object name.
81761>>>>>>>>>    Function ComName Returns String
81763>>>>>>>>>        Handle hDispatchDriver
81763>>>>>>>>>        String retVal
81763>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81764>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
81765>>>>>>>>>        Function_Return retVal
81766>>>>>>>>>    End_Function
81767>>>>>>>>>
81767>>>>>>>>>    // Gets or sets object name.
81767>>>>>>>>>    Procedure Set ComName String value
81769>>>>>>>>>        Handle hDispatchDriver
81769>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81770>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81771>>>>>>>>>        Set ComProperty of hDispatchDriver -800 OLE_VT_BSTR to value
81772>>>>>>>>>    End_Procedure
81773>>>>>>>>>
81773>>>>>>>>>    // Gets report object kind.
81773>>>>>>>>>    Function ComKind Returns CRObjectKind
81775>>>>>>>>>        Handle hDispatchDriver
81775>>>>>>>>>        CRObjectKind retVal
81775>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81776>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
81777>>>>>>>>>        Function_Return retVal
81778>>>>>>>>>    End_Function
81779>>>>>>>>>
81779>>>>>>>>>    // Gets or sets object upper left position (twips).
81779>>>>>>>>>    Function ComLeft Returns Integer
81781>>>>>>>>>        Handle hDispatchDriver
81781>>>>>>>>>        Integer retVal
81781>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81782>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_I4 to retVal
81783>>>>>>>>>        Function_Return retVal
81784>>>>>>>>>    End_Function
81785>>>>>>>>>
81785>>>>>>>>>    // Gets or sets object upper left position (twips).
81785>>>>>>>>>    Procedure Set ComLeft Integer value
81787>>>>>>>>>        Handle hDispatchDriver
81787>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81788>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81789>>>>>>>>>        Set ComProperty of hDispatchDriver 102 OLE_VT_I4 to value
81790>>>>>>>>>    End_Procedure
81791>>>>>>>>>
81791>>>>>>>>>    // Gets or sets object upper top position (twips).
81791>>>>>>>>>    Function ComTop Returns Integer
81793>>>>>>>>>        Handle hDispatchDriver
81793>>>>>>>>>        Integer retVal
81793>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81794>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_I4 to retVal
81795>>>>>>>>>        Function_Return retVal
81796>>>>>>>>>    End_Function
81797>>>>>>>>>
81797>>>>>>>>>    // Gets or sets object upper top position (twips).
81797>>>>>>>>>    Procedure Set ComTop Integer value
81799>>>>>>>>>        Handle hDispatchDriver
81799>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81800>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81801>>>>>>>>>        Set ComProperty of hDispatchDriver 103 OLE_VT_I4 to value
81802>>>>>>>>>    End_Procedure
81803>>>>>>>>>
81803>>>>>>>>>    // Gets or sets object lower right position (twips).
81803>>>>>>>>>    Function ComRight Returns Integer
81805>>>>>>>>>        Handle hDispatchDriver
81805>>>>>>>>>        Integer retVal
81805>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81806>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 202 OLE_VT_I4 to retVal
81807>>>>>>>>>        Function_Return retVal
81808>>>>>>>>>    End_Function
81809>>>>>>>>>
81809>>>>>>>>>    // Gets or sets object lower right position (twips).
81809>>>>>>>>>    Procedure Set ComRight Integer value
81811>>>>>>>>>        Handle hDispatchDriver
81811>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81812>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81813>>>>>>>>>        Set ComProperty of hDispatchDriver 202 OLE_VT_I4 to value
81814>>>>>>>>>    End_Procedure
81815>>>>>>>>>
81815>>>>>>>>>    // Gets or sets object lower bottom position (twips).
81815>>>>>>>>>    Function ComBottom Returns Integer
81817>>>>>>>>>        Handle hDispatchDriver
81817>>>>>>>>>        Integer retVal
81817>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81818>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 203 OLE_VT_I4 to retVal
81819>>>>>>>>>        Function_Return retVal
81820>>>>>>>>>    End_Function
81821>>>>>>>>>
81821>>>>>>>>>    // Gets or sets object lower bottom position (twips).
81821>>>>>>>>>    Procedure Set ComBottom Integer value
81823>>>>>>>>>        Handle hDispatchDriver
81823>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81824>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81825>>>>>>>>>        Set ComProperty of hDispatchDriver 203 OLE_VT_I4 to value
81826>>>>>>>>>    End_Procedure
81827>>>>>>>>>
81827>>>>>>>>>    // Gets or sets line style.
81827>>>>>>>>>    Function ComLineStyle Returns CRLineStyle
81829>>>>>>>>>        Handle hDispatchDriver
81829>>>>>>>>>        CRLineStyle retVal
81829>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81830>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 204 OLE_VT_I4 to retVal
81831>>>>>>>>>        Function_Return retVal
81832>>>>>>>>>    End_Function
81833>>>>>>>>>
81833>>>>>>>>>    // Gets or sets line style.
81833>>>>>>>>>    Procedure Set ComLineStyle CRLineStyle value
81835>>>>>>>>>        Handle hDispatchDriver
81835>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81836>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81837>>>>>>>>>        Set ComProperty of hDispatchDriver 204 OLE_VT_I4 to value
81838>>>>>>>>>    End_Procedure
81839>>>>>>>>>
81839>>>>>>>>>    // Gets or sets border drop shadow.
81839>>>>>>>>>    Function ComHasDropShadow Returns Boolean
81841>>>>>>>>>        Handle hDispatchDriver
81841>>>>>>>>>        Boolean retVal
81841>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81842>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_BOOL to retVal
81843>>>>>>>>>        Function_Return retVal
81844>>>>>>>>>    End_Function
81845>>>>>>>>>
81845>>>>>>>>>    // Gets or sets border drop shadow.
81845>>>>>>>>>    Procedure Set ComHasDropShadow Boolean value
81847>>>>>>>>>        Handle hDispatchDriver
81847>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81848>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81849>>>>>>>>>        Set ComProperty of hDispatchDriver 111 OLE_VT_BOOL to value
81850>>>>>>>>>    End_Procedure
81851>>>>>>>>>
81851>>>>>>>>>    // Gets or sets line color.
81851>>>>>>>>>    Function ComLineColor Returns OLE_COLOR
81853>>>>>>>>>        Handle hDispatchDriver
81853>>>>>>>>>        OLE_COLOR retVal
81853>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81854>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 200 OLE_VT_I4 to retVal
81855>>>>>>>>>        Function_Return retVal
81856>>>>>>>>>    End_Function
81857>>>>>>>>>
81857>>>>>>>>>    // Gets or sets line color.
81857>>>>>>>>>    Procedure Set ComLineColor OLE_COLOR value
81859>>>>>>>>>        Handle hDispatchDriver
81859>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81860>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81861>>>>>>>>>        Set ComProperty of hDispatchDriver 200 OLE_VT_I4 to value
81862>>>>>>>>>    End_Procedure
81863>>>>>>>>>
81863>>>>>>>>>    // Gets or sets fill color.
81863>>>>>>>>>    Function ComFillColor Returns OLE_COLOR
81865>>>>>>>>>        Handle hDispatchDriver
81865>>>>>>>>>        OLE_COLOR retVal
81865>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81866>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 201 OLE_VT_I4 to retVal
81867>>>>>>>>>        Function_Return retVal
81868>>>>>>>>>    End_Function
81869>>>>>>>>>
81869>>>>>>>>>    // Gets or sets fill color.
81869>>>>>>>>>    Procedure Set ComFillColor OLE_COLOR value
81871>>>>>>>>>        Handle hDispatchDriver
81871>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81872>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81873>>>>>>>>>        Set ComProperty of hDispatchDriver 201 OLE_VT_I4 to value
81874>>>>>>>>>    End_Procedure
81875>>>>>>>>>
81875>>>>>>>>>    // Gets object parent (Section).
81875>>>>>>>>>    Function ComParent Returns Variant
81877>>>>>>>>>        Handle hDispatchDriver
81877>>>>>>>>>        Variant retVal
81877>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81878>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
81879>>>>>>>>>        Function_Return retVal
81880>>>>>>>>>    End_Function
81881>>>>>>>>>
81881>>>>>>>>>    // Gets or sets object visibility.
81881>>>>>>>>>    Function ComSuppress Returns Boolean
81883>>>>>>>>>        Handle hDispatchDriver
81883>>>>>>>>>        Boolean retVal
81883>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81884>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 114 OLE_VT_BOOL to retVal
81885>>>>>>>>>        Function_Return retVal
81886>>>>>>>>>    End_Function
81887>>>>>>>>>
81887>>>>>>>>>    // Gets or sets object visibility.
81887>>>>>>>>>    Procedure Set ComSuppress Boolean value
81889>>>>>>>>>        Handle hDispatchDriver
81889>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81890>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81891>>>>>>>>>        Set ComProperty of hDispatchDriver 114 OLE_VT_BOOL to value
81892>>>>>>>>>    End_Procedure
81893>>>>>>>>>
81893>>>>>>>>>    // Gets or sets close border on page break.
81893>>>>>>>>>    Function ComCloseAtPageBreak Returns Boolean
81895>>>>>>>>>        Handle hDispatchDriver
81895>>>>>>>>>        Boolean retVal
81895>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81896>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 115 OLE_VT_BOOL to retVal
81897>>>>>>>>>        Function_Return retVal
81898>>>>>>>>>    End_Function
81899>>>>>>>>>
81899>>>>>>>>>    // Gets or sets close border on page break.
81899>>>>>>>>>    Procedure Set ComCloseAtPageBreak Boolean value
81901>>>>>>>>>        Handle hDispatchDriver
81901>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81902>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81903>>>>>>>>>        Set ComProperty of hDispatchDriver 115 OLE_VT_BOOL to value
81904>>>>>>>>>    End_Procedure
81905>>>>>>>>>
81905>>>>>>>>>    // Gets bottom right section.
81905>>>>>>>>>    Function ComBottomRightSection Returns Variant
81907>>>>>>>>>        Handle hDispatchDriver
81907>>>>>>>>>        Variant retVal
81907>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81908>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 210 OLE_VT_DISPATCH to retVal
81909>>>>>>>>>        Function_Return retVal
81910>>>>>>>>>    End_Function
81911>>>>>>>>>
81911>>>>>>>>>    // Gets or sets box line thickness (twips).
81911>>>>>>>>>    Function ComLineThickness Returns Integer
81913>>>>>>>>>        Handle hDispatchDriver
81913>>>>>>>>>        Integer retVal
81913>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81914>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 208 OLE_VT_I4 to retVal
81915>>>>>>>>>        Function_Return retVal
81916>>>>>>>>>    End_Function
81917>>>>>>>>>
81917>>>>>>>>>    // Gets or sets box line thickness (twips).
81917>>>>>>>>>    Procedure Set ComLineThickness Integer value
81919>>>>>>>>>        Handle hDispatchDriver
81919>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81920>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81921>>>>>>>>>        Set ComProperty of hDispatchDriver 208 OLE_VT_I4 to value
81922>>>>>>>>>    End_Procedure
81923>>>>>>>>>
81923>>>>>>>>>    // Gets or sets extend to bottom of section option.
81923>>>>>>>>>    Function ComExtendToBottomOfSection Returns Boolean
81925>>>>>>>>>        Handle hDispatchDriver
81925>>>>>>>>>        Boolean retVal
81925>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81926>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 209 OLE_VT_BOOL to retVal
81927>>>>>>>>>        Function_Return retVal
81928>>>>>>>>>    End_Function
81929>>>>>>>>>
81929>>>>>>>>>    // Gets or sets extend to bottom of section option.
81929>>>>>>>>>    Procedure Set ComExtendToBottomOfSection Boolean value
81931>>>>>>>>>        Handle hDispatchDriver
81931>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81932>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81933>>>>>>>>>        Set ComProperty of hDispatchDriver 209 OLE_VT_BOOL to value
81934>>>>>>>>>    End_Procedure
81935>>>>>>>>>
81935>>>>>>>>>    // Gets or sets corner ellipse height.
81935>>>>>>>>>    Function ComCornerEllipseHeight Returns Integer
81937>>>>>>>>>        Handle hDispatchDriver
81937>>>>>>>>>        Integer retVal
81937>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81938>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 543 OLE_VT_I4 to retVal
81939>>>>>>>>>        Function_Return retVal
81940>>>>>>>>>    End_Function
81941>>>>>>>>>
81941>>>>>>>>>    // Gets or sets corner ellipse height.
81941>>>>>>>>>    Procedure Set ComCornerEllipseHeight Integer value
81943>>>>>>>>>        Handle hDispatchDriver
81943>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81944>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81945>>>>>>>>>        Set ComProperty of hDispatchDriver 543 OLE_VT_I4 to value
81946>>>>>>>>>    End_Procedure
81947>>>>>>>>>
81947>>>>>>>>>    // Gets or sets corner ellipse width.
81947>>>>>>>>>    Function ComCornerEllipseWidth Returns Integer
81949>>>>>>>>>        Handle hDispatchDriver
81949>>>>>>>>>        Integer retVal
81949>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81950>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 544 OLE_VT_I4 to retVal
81951>>>>>>>>>        Function_Return retVal
81952>>>>>>>>>    End_Function
81953>>>>>>>>>
81953>>>>>>>>>    // Gets or sets corner ellipse width.
81953>>>>>>>>>    Procedure Set ComCornerEllipseWidth Integer value
81955>>>>>>>>>        Handle hDispatchDriver
81955>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81956>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81957>>>>>>>>>        Set ComProperty of hDispatchDriver 544 OLE_VT_I4 to value
81958>>>>>>>>>    End_Procedure
81959>>>>>>>>>
81959>>>>>>>>>    // Gets or sets conditional formula.
81959>>>>>>>>>    Function ComConditionFormula Variant llFormulaType Returns String
81961>>>>>>>>>        Handle hDispatchDriver
81961>>>>>>>>>        String retVal
81961>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81962>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81963>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
81964>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 760 OLE_VT_BSTR to retVal
81965>>>>>>>>>        Function_Return retVal
81966>>>>>>>>>    End_Function
81967>>>>>>>>>
81967>>>>>>>>>    // Gets or sets conditional formula.
81967>>>>>>>>>    Procedure Set ComConditionFormula Variant llFormulaType String value
81969>>>>>>>>>        Handle hDispatchDriver
81969>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81970>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
81971>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
81972>>>>>>>>>        Set ComProperty of hDispatchDriver 760 OLE_VT_BSTR to value
81973>>>>>>>>>    End_Procedure
81974>>>>>>>>>
81974>>>>>>>>>    // Gets or sets CSS class.
81974>>>>>>>>>    Function ComCssClass Returns String
81976>>>>>>>>>        Handle hDispatchDriver
81976>>>>>>>>>        String retVal
81976>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81977>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 549 OLE_VT_BSTR to retVal
81978>>>>>>>>>        Function_Return retVal
81979>>>>>>>>>    End_Function
81980>>>>>>>>>
81980>>>>>>>>>    // Gets or sets CSS class.
81980>>>>>>>>>    Procedure Set ComCssClass String value
81982>>>>>>>>>        Handle hDispatchDriver
81982>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
81983>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
81984>>>>>>>>>        Set ComProperty of hDispatchDriver 549 OLE_VT_BSTR to value
81985>>>>>>>>>    End_Procedure
81986>>>>>>>>>End_Class
81987>>>>>>>>>
81987>>>>>>>>>// CoClass
81987>>>>>>>>>// CLSID: {45919B9A-9B58-434D-AB63-F44A12E37911}
81987>>>>>>>>>Class cCrystalBoxObject is a cComAutomationObject
81988>>>>>>>>>    Import_Class_Protocol cCrystalIBoxObject
81989>>>>>>>>>
81989>>>>>>>>>    Procedure Construct_Object
81991>>>>>>>>>        Forward Send Construct_Object
81993>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
81994>>>>>>>>>    End_Procedure
81995>>>>>>>>>End_Class
81996>>>>>>>>>
81996>>>>>>>>>// CLSID: {AF37685F-6120-4E28-96DD-63FD2DC27B7A}
81996>>>>>>>>>Class cCrystalIOlapGridObject is a Mixin
81997>>>>>>>>>
81997>>>>>>>>>    // Gets or sets object name.
81997>>>>>>>>>    Function ComName Returns String
81999>>>>>>>>>        Handle hDispatchDriver
81999>>>>>>>>>        String retVal
81999>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82000>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
82001>>>>>>>>>        Function_Return retVal
82002>>>>>>>>>    End_Function
82003>>>>>>>>>
82003>>>>>>>>>    // Gets or sets object name.
82003>>>>>>>>>    Procedure Set ComName String value
82005>>>>>>>>>        Handle hDispatchDriver
82005>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82006>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82007>>>>>>>>>        Set ComProperty of hDispatchDriver -800 OLE_VT_BSTR to value
82008>>>>>>>>>    End_Procedure
82009>>>>>>>>>
82009>>>>>>>>>    // Gets report object kind.
82009>>>>>>>>>    Function ComKind Returns CRObjectKind
82011>>>>>>>>>        Handle hDispatchDriver
82011>>>>>>>>>        CRObjectKind retVal
82011>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82012>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
82013>>>>>>>>>        Function_Return retVal
82014>>>>>>>>>    End_Function
82015>>>>>>>>>
82015>>>>>>>>>    // Gets or sets object upper left position (twips).
82015>>>>>>>>>    Function ComLeft Returns Integer
82017>>>>>>>>>        Handle hDispatchDriver
82017>>>>>>>>>        Integer retVal
82017>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82018>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_I4 to retVal
82019>>>>>>>>>        Function_Return retVal
82020>>>>>>>>>    End_Function
82021>>>>>>>>>
82021>>>>>>>>>    // Gets or sets object upper left position (twips).
82021>>>>>>>>>    Procedure Set ComLeft Integer value
82023>>>>>>>>>        Handle hDispatchDriver
82023>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82024>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82025>>>>>>>>>        Set ComProperty of hDispatchDriver 102 OLE_VT_I4 to value
82026>>>>>>>>>    End_Procedure
82027>>>>>>>>>
82027>>>>>>>>>    // Gets or sets object upper top position (twips).
82027>>>>>>>>>    Function ComTop Returns Integer
82029>>>>>>>>>        Handle hDispatchDriver
82029>>>>>>>>>        Integer retVal
82029>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82030>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_I4 to retVal
82031>>>>>>>>>        Function_Return retVal
82032>>>>>>>>>    End_Function
82033>>>>>>>>>
82033>>>>>>>>>    // Gets or sets object upper top position (twips).
82033>>>>>>>>>    Procedure Set ComTop Integer value
82035>>>>>>>>>        Handle hDispatchDriver
82035>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82036>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82037>>>>>>>>>        Set ComProperty of hDispatchDriver 103 OLE_VT_I4 to value
82038>>>>>>>>>    End_Procedure
82039>>>>>>>>>
82039>>>>>>>>>    // Gets object width (twips).
82039>>>>>>>>>    Function ComWidth Returns Integer
82041>>>>>>>>>        Handle hDispatchDriver
82041>>>>>>>>>        Integer retVal
82041>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82042>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
82043>>>>>>>>>        Function_Return retVal
82044>>>>>>>>>    End_Function
82045>>>>>>>>>
82045>>>>>>>>>    // Gets object height (twips).
82045>>>>>>>>>    Function ComHeight Returns Integer
82047>>>>>>>>>        Handle hDispatchDriver
82047>>>>>>>>>        Integer retVal
82047>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82048>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_I4 to retVal
82049>>>>>>>>>        Function_Return retVal
82050>>>>>>>>>    End_Function
82051>>>>>>>>>
82051>>>>>>>>>    // Gets or sets left line style.
82051>>>>>>>>>    Function ComLeftLineStyle Returns CRLineStyle
82053>>>>>>>>>        Handle hDispatchDriver
82053>>>>>>>>>        CRLineStyle retVal
82053>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82054>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_I4 to retVal
82055>>>>>>>>>        Function_Return retVal
82056>>>>>>>>>    End_Function
82057>>>>>>>>>
82057>>>>>>>>>    // Gets or sets left line style.
82057>>>>>>>>>    Procedure Set ComLeftLineStyle CRLineStyle value
82059>>>>>>>>>        Handle hDispatchDriver
82059>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82060>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82061>>>>>>>>>        Set ComProperty of hDispatchDriver 106 OLE_VT_I4 to value
82062>>>>>>>>>    End_Procedure
82063>>>>>>>>>
82063>>>>>>>>>    // Gets or sets right line style.
82063>>>>>>>>>    Function ComRightLineStyle Returns CRLineStyle
82065>>>>>>>>>        Handle hDispatchDriver
82065>>>>>>>>>        CRLineStyle retVal
82065>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82066>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 107 OLE_VT_I4 to retVal
82067>>>>>>>>>        Function_Return retVal
82068>>>>>>>>>    End_Function
82069>>>>>>>>>
82069>>>>>>>>>    // Gets or sets right line style.
82069>>>>>>>>>    Procedure Set ComRightLineStyle CRLineStyle value
82071>>>>>>>>>        Handle hDispatchDriver
82071>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82072>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82073>>>>>>>>>        Set ComProperty of hDispatchDriver 107 OLE_VT_I4 to value
82074>>>>>>>>>    End_Procedure
82075>>>>>>>>>
82075>>>>>>>>>    // Gets or sets top line style.
82075>>>>>>>>>    Function ComTopLineStyle Returns CRLineStyle
82077>>>>>>>>>        Handle hDispatchDriver
82077>>>>>>>>>        CRLineStyle retVal
82077>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82078>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_I4 to retVal
82079>>>>>>>>>        Function_Return retVal
82080>>>>>>>>>    End_Function
82081>>>>>>>>>
82081>>>>>>>>>    // Gets or sets top line style.
82081>>>>>>>>>    Procedure Set ComTopLineStyle CRLineStyle value
82083>>>>>>>>>        Handle hDispatchDriver
82083>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82084>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82085>>>>>>>>>        Set ComProperty of hDispatchDriver 108 OLE_VT_I4 to value
82086>>>>>>>>>    End_Procedure
82087>>>>>>>>>
82087>>>>>>>>>    // Gets or sets bottom line style.
82087>>>>>>>>>    Function ComBottomLineStyle Returns CRLineStyle
82089>>>>>>>>>        Handle hDispatchDriver
82089>>>>>>>>>        CRLineStyle retVal
82089>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82090>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 109 OLE_VT_I4 to retVal
82091>>>>>>>>>        Function_Return retVal
82092>>>>>>>>>    End_Function
82093>>>>>>>>>
82093>>>>>>>>>    // Gets or sets bottom line style.
82093>>>>>>>>>    Procedure Set ComBottomLineStyle CRLineStyle value
82095>>>>>>>>>        Handle hDispatchDriver
82095>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82096>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82097>>>>>>>>>        Set ComProperty of hDispatchDriver 109 OLE_VT_I4 to value
82098>>>>>>>>>    End_Procedure
82099>>>>>>>>>
82099>>>>>>>>>    // Gets or sets border drop shadow.
82099>>>>>>>>>    Function ComHasDropShadow Returns Boolean
82101>>>>>>>>>        Handle hDispatchDriver
82101>>>>>>>>>        Boolean retVal
82101>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82102>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_BOOL to retVal
82103>>>>>>>>>        Function_Return retVal
82104>>>>>>>>>    End_Function
82105>>>>>>>>>
82105>>>>>>>>>    // Gets or sets border drop shadow.
82105>>>>>>>>>    Procedure Set ComHasDropShadow Boolean value
82107>>>>>>>>>        Handle hDispatchDriver
82107>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82108>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82109>>>>>>>>>        Set ComProperty of hDispatchDriver 111 OLE_VT_BOOL to value
82110>>>>>>>>>    End_Procedure
82111>>>>>>>>>
82111>>>>>>>>>    // Gets or sets object background color.
82111>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
82113>>>>>>>>>        Handle hDispatchDriver
82113>>>>>>>>>        OLE_COLOR retVal
82113>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82114>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_I4 to retVal
82115>>>>>>>>>        Function_Return retVal
82116>>>>>>>>>    End_Function
82117>>>>>>>>>
82117>>>>>>>>>    // Gets or sets object background color.
82117>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
82119>>>>>>>>>        Handle hDispatchDriver
82119>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82120>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82121>>>>>>>>>        Set ComProperty of hDispatchDriver 112 OLE_VT_I4 to value
82122>>>>>>>>>    End_Procedure
82123>>>>>>>>>
82123>>>>>>>>>    // Gets or sets object border color.
82123>>>>>>>>>    Function ComBorderColor Returns OLE_COLOR
82125>>>>>>>>>        Handle hDispatchDriver
82125>>>>>>>>>        OLE_COLOR retVal
82125>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82126>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 113 OLE_VT_I4 to retVal
82127>>>>>>>>>        Function_Return retVal
82128>>>>>>>>>    End_Function
82129>>>>>>>>>
82129>>>>>>>>>    // Gets or sets object border color.
82129>>>>>>>>>    Procedure Set ComBorderColor OLE_COLOR value
82131>>>>>>>>>        Handle hDispatchDriver
82131>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82132>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82133>>>>>>>>>        Set ComProperty of hDispatchDriver 113 OLE_VT_I4 to value
82134>>>>>>>>>    End_Procedure
82135>>>>>>>>>
82135>>>>>>>>>    // Gets object parent (Section).
82135>>>>>>>>>    Function ComParent Returns Variant
82137>>>>>>>>>        Handle hDispatchDriver
82137>>>>>>>>>        Variant retVal
82137>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82138>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
82139>>>>>>>>>        Function_Return retVal
82140>>>>>>>>>    End_Function
82141>>>>>>>>>
82141>>>>>>>>>    // Gets or sets object visibility.
82141>>>>>>>>>    Function ComSuppress Returns Boolean
82143>>>>>>>>>        Handle hDispatchDriver
82143>>>>>>>>>        Boolean retVal
82143>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82144>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 114 OLE_VT_BOOL to retVal
82145>>>>>>>>>        Function_Return retVal
82146>>>>>>>>>    End_Function
82147>>>>>>>>>
82147>>>>>>>>>    // Gets or sets object visibility.
82147>>>>>>>>>    Procedure Set ComSuppress Boolean value
82149>>>>>>>>>        Handle hDispatchDriver
82149>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82150>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82151>>>>>>>>>        Set ComProperty of hDispatchDriver 114 OLE_VT_BOOL to value
82152>>>>>>>>>    End_Procedure
82153>>>>>>>>>
82153>>>>>>>>>    // Gets or sets close border on page break.
82153>>>>>>>>>    Function ComCloseAtPageBreak Returns Boolean
82155>>>>>>>>>        Handle hDispatchDriver
82155>>>>>>>>>        Boolean retVal
82155>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82156>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 115 OLE_VT_BOOL to retVal
82157>>>>>>>>>        Function_Return retVal
82158>>>>>>>>>    End_Function
82159>>>>>>>>>
82159>>>>>>>>>    // Gets or sets close border on page break.
82159>>>>>>>>>    Procedure Set ComCloseAtPageBreak Boolean value
82161>>>>>>>>>        Handle hDispatchDriver
82161>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82162>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82163>>>>>>>>>        Set ComProperty of hDispatchDriver 115 OLE_VT_BOOL to value
82164>>>>>>>>>    End_Procedure
82165>>>>>>>>>
82165>>>>>>>>>    // Gets or sets keep object together.
82165>>>>>>>>>    Function ComKeepTogether Returns Boolean
82167>>>>>>>>>        Handle hDispatchDriver
82167>>>>>>>>>        Boolean retVal
82167>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82168>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 116 OLE_VT_BOOL to retVal
82169>>>>>>>>>        Function_Return retVal
82170>>>>>>>>>    End_Function
82171>>>>>>>>>
82171>>>>>>>>>    // Gets or sets keep object together.
82171>>>>>>>>>    Procedure Set ComKeepTogether Boolean value
82173>>>>>>>>>        Handle hDispatchDriver
82173>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82174>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82175>>>>>>>>>        Set ComProperty of hDispatchDriver 116 OLE_VT_BOOL to value
82176>>>>>>>>>    End_Procedure
82177>>>>>>>>>
82177>>>>>>>>>    // Gets or sets conditional formula.
82177>>>>>>>>>    Function ComConditionFormula Variant llFormulaType Returns String
82179>>>>>>>>>        Handle hDispatchDriver
82179>>>>>>>>>        String retVal
82179>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82180>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82181>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
82182>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 760 OLE_VT_BSTR to retVal
82183>>>>>>>>>        Function_Return retVal
82184>>>>>>>>>    End_Function
82185>>>>>>>>>
82185>>>>>>>>>    // Gets or sets conditional formula.
82185>>>>>>>>>    Procedure Set ComConditionFormula Variant llFormulaType String value
82187>>>>>>>>>        Handle hDispatchDriver
82187>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82188>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
82189>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
82190>>>>>>>>>        Set ComProperty of hDispatchDriver 760 OLE_VT_BSTR to value
82191>>>>>>>>>    End_Procedure
82192>>>>>>>>>End_Class
82193>>>>>>>>>
82193>>>>>>>>>// CoClass
82193>>>>>>>>>// CLSID: {58FAF194-AF40-4781-B1E0-E386923D17B4}
82193>>>>>>>>>Class cCrystalOlapGridObject is a cComAutomationObject
82194>>>>>>>>>    Import_Class_Protocol cCrystalIOlapGridObject
82195>>>>>>>>>
82195>>>>>>>>>    Procedure Construct_Object
82197>>>>>>>>>        Forward Send Construct_Object
82199>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
82200>>>>>>>>>    End_Procedure
82201>>>>>>>>>End_Class
82202>>>>>>>>>
82202>>>>>>>>>// CLSID: {AF37682A-6120-4E28-96DD-63FD2DC27B7A}
82202>>>>>>>>>Class cCrystalICrossTabObject is a Mixin
82203>>>>>>>>>
82203>>>>>>>>>    // Gets or sets object name.
82203>>>>>>>>>    Function ComName Returns String
82205>>>>>>>>>        Handle hDispatchDriver
82205>>>>>>>>>        String retVal
82205>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82206>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
82207>>>>>>>>>        Function_Return retVal
82208>>>>>>>>>    End_Function
82209>>>>>>>>>
82209>>>>>>>>>    // Gets or sets object name.
82209>>>>>>>>>    Procedure Set ComName String value
82211>>>>>>>>>        Handle hDispatchDriver
82211>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82212>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82213>>>>>>>>>        Set ComProperty of hDispatchDriver -800 OLE_VT_BSTR to value
82214>>>>>>>>>    End_Procedure
82215>>>>>>>>>
82215>>>>>>>>>    // Gets report object kind.
82215>>>>>>>>>    Function ComKind Returns CRObjectKind
82217>>>>>>>>>        Handle hDispatchDriver
82217>>>>>>>>>        CRObjectKind retVal
82217>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82218>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 101 OLE_VT_I4 to retVal
82219>>>>>>>>>        Function_Return retVal
82220>>>>>>>>>    End_Function
82221>>>>>>>>>
82221>>>>>>>>>    // Gets or sets object upper left position (twips).
82221>>>>>>>>>    Function ComLeft Returns Integer
82223>>>>>>>>>        Handle hDispatchDriver
82223>>>>>>>>>        Integer retVal
82223>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82224>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 102 OLE_VT_I4 to retVal
82225>>>>>>>>>        Function_Return retVal
82226>>>>>>>>>    End_Function
82227>>>>>>>>>
82227>>>>>>>>>    // Gets or sets object upper left position (twips).
82227>>>>>>>>>    Procedure Set ComLeft Integer value
82229>>>>>>>>>        Handle hDispatchDriver
82229>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82230>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82231>>>>>>>>>        Set ComProperty of hDispatchDriver 102 OLE_VT_I4 to value
82232>>>>>>>>>    End_Procedure
82233>>>>>>>>>
82233>>>>>>>>>    // Gets or sets object upper top position (twips).
82233>>>>>>>>>    Function ComTop Returns Integer
82235>>>>>>>>>        Handle hDispatchDriver
82235>>>>>>>>>        Integer retVal
82235>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82236>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 103 OLE_VT_I4 to retVal
82237>>>>>>>>>        Function_Return retVal
82238>>>>>>>>>    End_Function
82239>>>>>>>>>
82239>>>>>>>>>    // Gets or sets object upper top position (twips).
82239>>>>>>>>>    Procedure Set ComTop Integer value
82241>>>>>>>>>        Handle hDispatchDriver
82241>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82242>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82243>>>>>>>>>        Set ComProperty of hDispatchDriver 103 OLE_VT_I4 to value
82244>>>>>>>>>    End_Procedure
82245>>>>>>>>>
82245>>>>>>>>>    // Gets object width (twips).
82245>>>>>>>>>    Function ComWidth Returns Integer
82247>>>>>>>>>        Handle hDispatchDriver
82247>>>>>>>>>        Integer retVal
82247>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82248>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 104 OLE_VT_I4 to retVal
82249>>>>>>>>>        Function_Return retVal
82250>>>>>>>>>    End_Function
82251>>>>>>>>>
82251>>>>>>>>>    // Gets object height (twips).
82251>>>>>>>>>    Function ComHeight Returns Integer
82253>>>>>>>>>        Handle hDispatchDriver
82253>>>>>>>>>        Integer retVal
82253>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82254>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 105 OLE_VT_I4 to retVal
82255>>>>>>>>>        Function_Return retVal
82256>>>>>>>>>    End_Function
82257>>>>>>>>>
82257>>>>>>>>>    // Gets or sets left line style.
82257>>>>>>>>>    Function ComLeftLineStyle Returns CRLineStyle
82259>>>>>>>>>        Handle hDispatchDriver
82259>>>>>>>>>        CRLineStyle retVal
82259>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82260>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 106 OLE_VT_I4 to retVal
82261>>>>>>>>>        Function_Return retVal
82262>>>>>>>>>    End_Function
82263>>>>>>>>>
82263>>>>>>>>>    // Gets or sets left line style.
82263>>>>>>>>>    Procedure Set ComLeftLineStyle CRLineStyle value
82265>>>>>>>>>        Handle hDispatchDriver
82265>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82266>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82267>>>>>>>>>        Set ComProperty of hDispatchDriver 106 OLE_VT_I4 to value
82268>>>>>>>>>    End_Procedure
82269>>>>>>>>>
82269>>>>>>>>>    // Gets or sets right line style.
82269>>>>>>>>>    Function ComRightLineStyle Returns CRLineStyle
82271>>>>>>>>>        Handle hDispatchDriver
82271>>>>>>>>>        CRLineStyle retVal
82271>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82272>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 107 OLE_VT_I4 to retVal
82273>>>>>>>>>        Function_Return retVal
82274>>>>>>>>>    End_Function
82275>>>>>>>>>
82275>>>>>>>>>    // Gets or sets right line style.
82275>>>>>>>>>    Procedure Set ComRightLineStyle CRLineStyle value
82277>>>>>>>>>        Handle hDispatchDriver
82277>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82278>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82279>>>>>>>>>        Set ComProperty of hDispatchDriver 107 OLE_VT_I4 to value
82280>>>>>>>>>    End_Procedure
82281>>>>>>>>>
82281>>>>>>>>>    // Gets or sets top line style.
82281>>>>>>>>>    Function ComTopLineStyle Returns CRLineStyle
82283>>>>>>>>>        Handle hDispatchDriver
82283>>>>>>>>>        CRLineStyle retVal
82283>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82284>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 108 OLE_VT_I4 to retVal
82285>>>>>>>>>        Function_Return retVal
82286>>>>>>>>>    End_Function
82287>>>>>>>>>
82287>>>>>>>>>    // Gets or sets top line style.
82287>>>>>>>>>    Procedure Set ComTopLineStyle CRLineStyle value
82289>>>>>>>>>        Handle hDispatchDriver
82289>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82290>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82291>>>>>>>>>        Set ComProperty of hDispatchDriver 108 OLE_VT_I4 to value
82292>>>>>>>>>    End_Procedure
82293>>>>>>>>>
82293>>>>>>>>>    // Gets or sets bottom line style.
82293>>>>>>>>>    Function ComBottomLineStyle Returns CRLineStyle
82295>>>>>>>>>        Handle hDispatchDriver
82295>>>>>>>>>        CRLineStyle retVal
82295>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82296>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 109 OLE_VT_I4 to retVal
82297>>>>>>>>>        Function_Return retVal
82298>>>>>>>>>    End_Function
82299>>>>>>>>>
82299>>>>>>>>>    // Gets or sets bottom line style.
82299>>>>>>>>>    Procedure Set ComBottomLineStyle CRLineStyle value
82301>>>>>>>>>        Handle hDispatchDriver
82301>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82302>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82303>>>>>>>>>        Set ComProperty of hDispatchDriver 109 OLE_VT_I4 to value
82304>>>>>>>>>    End_Procedure
82305>>>>>>>>>
82305>>>>>>>>>    // Gets or sets border drop shadow.
82305>>>>>>>>>    Function ComHasDropShadow Returns Boolean
82307>>>>>>>>>        Handle hDispatchDriver
82307>>>>>>>>>        Boolean retVal
82307>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82308>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 111 OLE_VT_BOOL to retVal
82309>>>>>>>>>        Function_Return retVal
82310>>>>>>>>>    End_Function
82311>>>>>>>>>
82311>>>>>>>>>    // Gets or sets border drop shadow.
82311>>>>>>>>>    Procedure Set ComHasDropShadow Boolean value
82313>>>>>>>>>        Handle hDispatchDriver
82313>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82314>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82315>>>>>>>>>        Set ComProperty of hDispatchDriver 111 OLE_VT_BOOL to value
82316>>>>>>>>>    End_Procedure
82317>>>>>>>>>
82317>>>>>>>>>    // Gets or sets object background color.
82317>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
82319>>>>>>>>>        Handle hDispatchDriver
82319>>>>>>>>>        OLE_COLOR retVal
82319>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82320>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 112 OLE_VT_I4 to retVal
82321>>>>>>>>>        Function_Return retVal
82322>>>>>>>>>    End_Function
82323>>>>>>>>>
82323>>>>>>>>>    // Gets or sets object background color.
82323>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
82325>>>>>>>>>        Handle hDispatchDriver
82325>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82326>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82327>>>>>>>>>        Set ComProperty of hDispatchDriver 112 OLE_VT_I4 to value
82328>>>>>>>>>    End_Procedure
82329>>>>>>>>>
82329>>>>>>>>>    // Gets or sets object border color.
82329>>>>>>>>>    Function ComBorderColor Returns OLE_COLOR
82331>>>>>>>>>        Handle hDispatchDriver
82331>>>>>>>>>        OLE_COLOR retVal
82331>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82332>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 113 OLE_VT_I4 to retVal
82333>>>>>>>>>        Function_Return retVal
82334>>>>>>>>>    End_Function
82335>>>>>>>>>
82335>>>>>>>>>    // Gets or sets object border color.
82335>>>>>>>>>    Procedure Set ComBorderColor OLE_COLOR value
82337>>>>>>>>>        Handle hDispatchDriver
82337>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82338>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82339>>>>>>>>>        Set ComProperty of hDispatchDriver 113 OLE_VT_I4 to value
82340>>>>>>>>>    End_Procedure
82341>>>>>>>>>
82341>>>>>>>>>    // Gets object parent (Section).
82341>>>>>>>>>    Function ComParent Returns Variant
82343>>>>>>>>>        Handle hDispatchDriver
82343>>>>>>>>>        Variant retVal
82343>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82344>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
82345>>>>>>>>>        Function_Return retVal
82346>>>>>>>>>    End_Function
82347>>>>>>>>>
82347>>>>>>>>>    // Gets or sets object visibility.
82347>>>>>>>>>    Function ComSuppress Returns Boolean
82349>>>>>>>>>        Handle hDispatchDriver
82349>>>>>>>>>        Boolean retVal
82349>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82350>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 114 OLE_VT_BOOL to retVal
82351>>>>>>>>>        Function_Return retVal
82352>>>>>>>>>    End_Function
82353>>>>>>>>>
82353>>>>>>>>>    // Gets or sets object visibility.
82353>>>>>>>>>    Procedure Set ComSuppress Boolean value
82355>>>>>>>>>        Handle hDispatchDriver
82355>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82356>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82357>>>>>>>>>        Set ComProperty of hDispatchDriver 114 OLE_VT_BOOL to value
82358>>>>>>>>>    End_Procedure
82359>>>>>>>>>
82359>>>>>>>>>    // Gets or sets close border on page break.
82359>>>>>>>>>    Function ComCloseAtPageBreak Returns Boolean
82361>>>>>>>>>        Handle hDispatchDriver
82361>>>>>>>>>        Boolean retVal
82361>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82362>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 115 OLE_VT_BOOL to retVal
82363>>>>>>>>>        Function_Return retVal
82364>>>>>>>>>    End_Function
82365>>>>>>>>>
82365>>>>>>>>>    // Gets or sets close border on page break.
82365>>>>>>>>>    Procedure Set ComCloseAtPageBreak Boolean value
82367>>>>>>>>>        Handle hDispatchDriver
82367>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82368>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82369>>>>>>>>>        Set ComProperty of hDispatchDriver 115 OLE_VT_BOOL to value
82370>>>>>>>>>    End_Procedure
82371>>>>>>>>>
82371>>>>>>>>>    // Gets or sets keep object together.
82371>>>>>>>>>    Function ComKeepTogether Returns Boolean
82373>>>>>>>>>        Handle hDispatchDriver
82373>>>>>>>>>        Boolean retVal
82373>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82374>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 116 OLE_VT_BOOL to retVal
82375>>>>>>>>>        Function_Return retVal
82376>>>>>>>>>    End_Function
82377>>>>>>>>>
82377>>>>>>>>>    // Gets or sets keep object together.
82377>>>>>>>>>    Procedure Set ComKeepTogether Boolean value
82379>>>>>>>>>        Handle hDispatchDriver
82379>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82380>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82381>>>>>>>>>        Set ComProperty of hDispatchDriver 116 OLE_VT_BOOL to value
82382>>>>>>>>>    End_Procedure
82383>>>>>>>>>
82383>>>>>>>>>    // Gets summary fields.
82383>>>>>>>>>    Function ComSummaryFields Returns Variant
82385>>>>>>>>>        Handle hDispatchDriver
82385>>>>>>>>>        Variant retVal
82385>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82386>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 578 OLE_VT_DISPATCH to retVal
82387>>>>>>>>>        Function_Return retVal
82388>>>>>>>>>    End_Function
82389>>>>>>>>>
82389>>>>>>>>>    // Gets row groups.
82389>>>>>>>>>    Function ComRowGroups Returns Variant
82391>>>>>>>>>        Handle hDispatchDriver
82391>>>>>>>>>        Variant retVal
82391>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82392>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 579 OLE_VT_DISPATCH to retVal
82393>>>>>>>>>        Function_Return retVal
82394>>>>>>>>>    End_Function
82395>>>>>>>>>
82395>>>>>>>>>    // Gets column groups.
82395>>>>>>>>>    Function ComColumnGroups Returns Variant
82397>>>>>>>>>        Handle hDispatchDriver
82397>>>>>>>>>        Variant retVal
82397>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82398>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 580 OLE_VT_DISPATCH to retVal
82399>>>>>>>>>        Function_Return retVal
82400>>>>>>>>>    End_Function
82401>>>>>>>>>
82401>>>>>>>>>    // Gets or sets enable show grid.
82401>>>>>>>>>    Function ComEnableShowGrid Returns Boolean
82403>>>>>>>>>        Handle hDispatchDriver
82403>>>>>>>>>        Boolean retVal
82403>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82404>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 581 OLE_VT_BOOL to retVal
82405>>>>>>>>>        Function_Return retVal
82406>>>>>>>>>    End_Function
82407>>>>>>>>>
82407>>>>>>>>>    // Gets or sets enable show grid.
82407>>>>>>>>>    Procedure Set ComEnableShowGrid Boolean value
82409>>>>>>>>>        Handle hDispatchDriver
82409>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82410>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82411>>>>>>>>>        Set ComProperty of hDispatchDriver 581 OLE_VT_BOOL to value
82412>>>>>>>>>    End_Procedure
82413>>>>>>>>>
82413>>>>>>>>>    // Gets or sets enable show cell margins.
82413>>>>>>>>>    Function ComEnableShowCellMargins Returns Boolean
82415>>>>>>>>>        Handle hDispatchDriver
82415>>>>>>>>>        Boolean retVal
82415>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82416>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 582 OLE_VT_BOOL to retVal
82417>>>>>>>>>        Function_Return retVal
82418>>>>>>>>>    End_Function
82419>>>>>>>>>
82419>>>>>>>>>    // Gets or sets enable show cell margins.
82419>>>>>>>>>    Procedure Set ComEnableShowCellMargins Boolean value
82421>>>>>>>>>        Handle hDispatchDriver
82421>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82422>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82423>>>>>>>>>        Set ComProperty of hDispatchDriver 582 OLE_VT_BOOL to value
82424>>>>>>>>>    End_Procedure
82425>>>>>>>>>
82425>>>>>>>>>    // Gets or sets enable suppress empty rows.
82425>>>>>>>>>    Function ComEnableSuppressEmptyRows Returns Boolean
82427>>>>>>>>>        Handle hDispatchDriver
82427>>>>>>>>>        Boolean retVal
82427>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82428>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 583 OLE_VT_BOOL to retVal
82429>>>>>>>>>        Function_Return retVal
82430>>>>>>>>>    End_Function
82431>>>>>>>>>
82431>>>>>>>>>    // Gets or sets enable suppress empty rows.
82431>>>>>>>>>    Procedure Set ComEnableSuppressEmptyRows Boolean value
82433>>>>>>>>>        Handle hDispatchDriver
82433>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82434>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82435>>>>>>>>>        Set ComProperty of hDispatchDriver 583 OLE_VT_BOOL to value
82436>>>>>>>>>    End_Procedure
82437>>>>>>>>>
82437>>>>>>>>>    // Gets or sets enable suppress empty columns.
82437>>>>>>>>>    Function ComEnableSuppressEmptyColumns Returns Boolean
82439>>>>>>>>>        Handle hDispatchDriver
82439>>>>>>>>>        Boolean retVal
82439>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82440>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 584 OLE_VT_BOOL to retVal
82441>>>>>>>>>        Function_Return retVal
82442>>>>>>>>>    End_Function
82443>>>>>>>>>
82443>>>>>>>>>    // Gets or sets enable suppress empty columns.
82443>>>>>>>>>    Procedure Set ComEnableSuppressEmptyColumns Boolean value
82445>>>>>>>>>        Handle hDispatchDriver
82445>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82446>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82447>>>>>>>>>        Set ComProperty of hDispatchDriver 584 OLE_VT_BOOL to value
82448>>>>>>>>>    End_Procedure
82449>>>>>>>>>
82449>>>>>>>>>    // Gets or sets enable keep columns together.
82449>>>>>>>>>    Function ComEnableKeepColumnsTogether Returns Boolean
82451>>>>>>>>>        Handle hDispatchDriver
82451>>>>>>>>>        Boolean retVal
82451>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82452>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 585 OLE_VT_BOOL to retVal
82453>>>>>>>>>        Function_Return retVal
82454>>>>>>>>>    End_Function
82455>>>>>>>>>
82455>>>>>>>>>    // Gets or sets enable keep columns together.
82455>>>>>>>>>    Procedure Set ComEnableKeepColumnsTogether Boolean value
82457>>>>>>>>>        Handle hDispatchDriver
82457>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82458>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82459>>>>>>>>>        Set ComProperty of hDispatchDriver 585 OLE_VT_BOOL to value
82460>>>>>>>>>    End_Procedure
82461>>>>>>>>>
82461>>>>>>>>>    // Gets or sets enable suppress row grand totals.
82461>>>>>>>>>    Function ComEnableSuppressRowGrandTotals Returns Boolean
82463>>>>>>>>>        Handle hDispatchDriver
82463>>>>>>>>>        Boolean retVal
82463>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82464>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 586 OLE_VT_BOOL to retVal
82465>>>>>>>>>        Function_Return retVal
82466>>>>>>>>>    End_Function
82467>>>>>>>>>
82467>>>>>>>>>    // Gets or sets enable suppress row grand totals.
82467>>>>>>>>>    Procedure Set ComEnableSuppressRowGrandTotals Boolean value
82469>>>>>>>>>        Handle hDispatchDriver
82469>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82470>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82471>>>>>>>>>        Set ComProperty of hDispatchDriver 586 OLE_VT_BOOL to value
82472>>>>>>>>>    End_Procedure
82473>>>>>>>>>
82473>>>>>>>>>    // Gets or sets enable suppress column grand totals.
82473>>>>>>>>>    Function ComEnableSuppressColumnGrandTotals Returns Boolean
82475>>>>>>>>>        Handle hDispatchDriver
82475>>>>>>>>>        Boolean retVal
82475>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82476>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 587 OLE_VT_BOOL to retVal
82477>>>>>>>>>        Function_Return retVal
82478>>>>>>>>>    End_Function
82479>>>>>>>>>
82479>>>>>>>>>    // Gets or sets enable suppress column grand totals.
82479>>>>>>>>>    Procedure Set ComEnableSuppressColumnGrandTotals Boolean value
82481>>>>>>>>>        Handle hDispatchDriver
82481>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82482>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82483>>>>>>>>>        Set ComProperty of hDispatchDriver 587 OLE_VT_BOOL to value
82484>>>>>>>>>    End_Procedure
82485>>>>>>>>>
82485>>>>>>>>>    // Gets or sets row grand totals color.
82485>>>>>>>>>    Function ComRowGrandTotalColor Returns OLE_COLOR
82487>>>>>>>>>        Handle hDispatchDriver
82487>>>>>>>>>        OLE_COLOR retVal
82487>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82488>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 588 OLE_VT_I4 to retVal
82489>>>>>>>>>        Function_Return retVal
82490>>>>>>>>>    End_Function
82491>>>>>>>>>
82491>>>>>>>>>    // Gets or sets row grand totals color.
82491>>>>>>>>>    Procedure Set ComRowGrandTotalColor OLE_COLOR value
82493>>>>>>>>>        Handle hDispatchDriver
82493>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82494>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82495>>>>>>>>>        Set ComProperty of hDispatchDriver 588 OLE_VT_I4 to value
82496>>>>>>>>>    End_Procedure
82497>>>>>>>>>
82497>>>>>>>>>    // Gets or sets column grand totals color.
82497>>>>>>>>>    Function ComColumnGrandTotalColor Returns OLE_COLOR
82499>>>>>>>>>        Handle hDispatchDriver
82499>>>>>>>>>        OLE_COLOR retVal
82499>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82500>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 589 OLE_VT_I4 to retVal
82501>>>>>>>>>        Function_Return retVal
82502>>>>>>>>>    End_Function
82503>>>>>>>>>
82503>>>>>>>>>    // Gets or sets column grand totals color.
82503>>>>>>>>>    Procedure Set ComColumnGrandTotalColor OLE_COLOR value
82505>>>>>>>>>        Handle hDispatchDriver
82505>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82506>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82507>>>>>>>>>        Set ComProperty of hDispatchDriver 589 OLE_VT_I4 to value
82508>>>>>>>>>    End_Procedure
82509>>>>>>>>>
82509>>>>>>>>>    // Gets or sets enable repeat row labels.
82509>>>>>>>>>    Function ComEnableRepeatRowLabels Returns Boolean
82511>>>>>>>>>        Handle hDispatchDriver
82511>>>>>>>>>        Boolean retVal
82511>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82512>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 590 OLE_VT_BOOL to retVal
82513>>>>>>>>>        Function_Return retVal
82514>>>>>>>>>    End_Function
82515>>>>>>>>>
82515>>>>>>>>>    // Gets or sets enable repeat row labels.
82515>>>>>>>>>    Procedure Set ComEnableRepeatRowLabels Boolean value
82517>>>>>>>>>        Handle hDispatchDriver
82517>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82518>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82519>>>>>>>>>        Set ComProperty of hDispatchDriver 590 OLE_VT_BOOL to value
82520>>>>>>>>>    End_Procedure
82521>>>>>>>>>
82521>>>>>>>>>    // Gets or sets conditional formula.
82521>>>>>>>>>    Function ComConditionFormula Variant llFormulaType Returns String
82523>>>>>>>>>        Handle hDispatchDriver
82523>>>>>>>>>        String retVal
82523>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82524>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82525>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
82526>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 760 OLE_VT_BSTR to retVal
82527>>>>>>>>>        Function_Return retVal
82528>>>>>>>>>    End_Function
82529>>>>>>>>>
82529>>>>>>>>>    // Gets or sets conditional formula.
82529>>>>>>>>>    Procedure Set ComConditionFormula Variant llFormulaType String value
82531>>>>>>>>>        Handle hDispatchDriver
82531>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82532>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
82533>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
82534>>>>>>>>>        Set ComProperty of hDispatchDriver 760 OLE_VT_BSTR to value
82535>>>>>>>>>    End_Procedure
82536>>>>>>>>>
82536>>>>>>>>>    // Gets or sets CSS class.
82536>>>>>>>>>    Function ComCssClass Returns String
82538>>>>>>>>>        Handle hDispatchDriver
82538>>>>>>>>>        String retVal
82538>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82539>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 549 OLE_VT_BSTR to retVal
82540>>>>>>>>>        Function_Return retVal
82541>>>>>>>>>    End_Function
82542>>>>>>>>>
82542>>>>>>>>>    // Gets or sets CSS class.
82542>>>>>>>>>    Procedure Set ComCssClass String value
82544>>>>>>>>>        Handle hDispatchDriver
82544>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82545>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82546>>>>>>>>>        Set ComProperty of hDispatchDriver 549 OLE_VT_BSTR to value
82547>>>>>>>>>    End_Procedure
82548>>>>>>>>>
82548>>>>>>>>>    // Gets or sets hyperlink type.
82548>>>>>>>>>    Function ComHyperlinkType Returns CRHyperlinkType
82550>>>>>>>>>        Handle hDispatchDriver
82550>>>>>>>>>        CRHyperlinkType retVal
82550>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82551>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 901 OLE_VT_I4 to retVal
82552>>>>>>>>>        Function_Return retVal
82553>>>>>>>>>    End_Function
82554>>>>>>>>>
82554>>>>>>>>>    // Gets or sets hyperlink type.
82554>>>>>>>>>    Procedure Set ComHyperlinkType CRHyperlinkType value
82556>>>>>>>>>        Handle hDispatchDriver
82556>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82557>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82558>>>>>>>>>        Set ComProperty of hDispatchDriver 901 OLE_VT_I4 to value
82559>>>>>>>>>    End_Procedure
82560>>>>>>>>>
82560>>>>>>>>>    // Gets or sets hyperlink text.
82560>>>>>>>>>    Function ComHyperlinkText Returns String
82562>>>>>>>>>        Handle hDispatchDriver
82562>>>>>>>>>        String retVal
82562>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82563>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 902 OLE_VT_BSTR to retVal
82564>>>>>>>>>        Function_Return retVal
82565>>>>>>>>>    End_Function
82566>>>>>>>>>
82566>>>>>>>>>    // Gets or sets hyperlink text.
82566>>>>>>>>>    Procedure Set ComHyperlinkText String value
82568>>>>>>>>>        Handle hDispatchDriver
82568>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82569>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82570>>>>>>>>>        Set ComProperty of hDispatchDriver 902 OLE_VT_BSTR to value
82571>>>>>>>>>    End_Procedure
82572>>>>>>>>>End_Class
82573>>>>>>>>>
82573>>>>>>>>>// CoClass
82573>>>>>>>>>// CLSID: {2DDBB1FE-A590-404F-91F5-AF9E79D44D0B}
82573>>>>>>>>>Class cCrystalCrossTabObject is a cComAutomationObject
82574>>>>>>>>>    Import_Class_Protocol cCrystalICrossTabObject
82575>>>>>>>>>
82575>>>>>>>>>    Procedure Construct_Object
82577>>>>>>>>>        Forward Send Construct_Object
82579>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
82580>>>>>>>>>    End_Procedure
82581>>>>>>>>>End_Class
82582>>>>>>>>>
82582>>>>>>>>>// CLSID: {AF37682B-6120-4E28-96DD-63FD2DC27B7A}
82582>>>>>>>>>Class cCrystalIPageEngine is a Mixin
82583>>>>>>>>>
82583>>>>>>>>>    // Gets or sets EPF image options.
82583>>>>>>>>>    Function ComImageOptions Returns CRImageType
82585>>>>>>>>>        Handle hDispatchDriver
82585>>>>>>>>>        CRImageType retVal
82585>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82586>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 244 OLE_VT_I4 to retVal
82587>>>>>>>>>        Function_Return retVal
82588>>>>>>>>>    End_Function
82589>>>>>>>>>
82589>>>>>>>>>    // Gets or sets EPF image options.
82589>>>>>>>>>    Procedure Set ComImageOptions CRImageType value
82591>>>>>>>>>        Handle hDispatchDriver
82591>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82592>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82593>>>>>>>>>        Set ComProperty of hDispatchDriver 244 OLE_VT_I4 to value
82594>>>>>>>>>    End_Procedure
82595>>>>>>>>>
82595>>>>>>>>>    // Creates a page generator object.
82595>>>>>>>>>    Function ComCreatePageGenerator Variant llGroupPath Variant llDrillDownLevel Returns Variant
82597>>>>>>>>>        Handle hDispatchDriver
82597>>>>>>>>>        Variant retVal
82597>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82598>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
82599>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llGroupPath
82600>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llDrillDownLevel
82601>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 245 OLE_VT_DISPATCH to retVal
82602>>>>>>>>>        Function_Return retVal
82603>>>>>>>>>    End_Function
82604>>>>>>>>>
82604>>>>>>>>>    // Gets totaller ETF stream.
82604>>>>>>>>>    Function ComRenderTotallerETF Variant llrootGroupPath Integer llstartingChildNumber Short llpastRootLevels Variant llmaxNodeCount CRRenderResultType llresultType Returns Variant
82606>>>>>>>>>        Handle hDispatchDriver
82606>>>>>>>>>        Variant retVal
82606>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82607>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
82608>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llrootGroupPath
82609>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llstartingChildNumber
82610>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llpastRootLevels
82611>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llmaxNodeCount
82612>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llresultType
82613>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 246 OLE_VT_VARIANT to retVal
82614>>>>>>>>>        Function_Return retVal
82615>>>>>>>>>    End_Function
82616>>>>>>>>>
82616>>>>>>>>>    // Gets totaller HTML stream.
82616>>>>>>>>>    Function ComRenderTotallerHTML Variant llrootGroupPath Integer llstartingChildNumber Short llpastRootLevels Variant llmaxNodeCount Variant llopenGroupPath Boolean llincludeDrillDownLinks String llbaseURL CRRenderResultType llresultType Returns Variant
82618>>>>>>>>>        Handle hDispatchDriver
82618>>>>>>>>>        Variant retVal
82618>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82619>>>>>>>>>        Send PrepareParams to hDispatchDriver 8
82620>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llrootGroupPath
82621>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llstartingChildNumber
82622>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llpastRootLevels
82623>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llmaxNodeCount
82624>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llopenGroupPath
82625>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llincludeDrillDownLinks
82626>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llbaseURL
82627>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llresultType
82628>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 247 OLE_VT_VARIANT to retVal
82629>>>>>>>>>        Function_Return retVal
82630>>>>>>>>>    End_Function
82631>>>>>>>>>
82631>>>>>>>>>    // Gets page engine's parent (Report)
82631>>>>>>>>>    Function ComParent Returns Variant
82633>>>>>>>>>        Handle hDispatchDriver
82633>>>>>>>>>        Variant retVal
82633>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82634>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
82635>>>>>>>>>        Function_Return retVal
82636>>>>>>>>>    End_Function
82637>>>>>>>>>
82637>>>>>>>>>    // Gets or sets EPF place holder options.
82637>>>>>>>>>    Function ComPlaceHolderOptions Returns CRPlaceHolderType
82639>>>>>>>>>        Handle hDispatchDriver
82639>>>>>>>>>        CRPlaceHolderType retVal
82639>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82640>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 518 OLE_VT_I4 to retVal
82641>>>>>>>>>        Function_Return retVal
82642>>>>>>>>>    End_Function
82643>>>>>>>>>
82643>>>>>>>>>    // Gets or sets EPF place holder options.
82643>>>>>>>>>    Procedure Set ComPlaceHolderOptions CRPlaceHolderType value
82645>>>>>>>>>        Handle hDispatchDriver
82645>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82646>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82647>>>>>>>>>        Set ComProperty of hDispatchDriver 518 OLE_VT_I4 to value
82648>>>>>>>>>    End_Procedure
82649>>>>>>>>>
82649>>>>>>>>>    // Gets or sets EPF value format options.
82649>>>>>>>>>    Function ComValueFormatOptions Returns CRValueFormatType
82651>>>>>>>>>        Handle hDispatchDriver
82651>>>>>>>>>        CRValueFormatType retVal
82651>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82652>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 546 OLE_VT_I4 to retVal
82653>>>>>>>>>        Function_Return retVal
82654>>>>>>>>>    End_Function
82655>>>>>>>>>
82655>>>>>>>>>    // Gets or sets EPF value format options.
82655>>>>>>>>>    Procedure Set ComValueFormatOptions CRValueFormatType value
82657>>>>>>>>>        Handle hDispatchDriver
82657>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82658>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82659>>>>>>>>>        Set ComProperty of hDispatchDriver 546 OLE_VT_I4 to value
82660>>>>>>>>>    End_Procedure
82661>>>>>>>>>End_Class
82662>>>>>>>>>
82662>>>>>>>>>// CoClass
82662>>>>>>>>>// CLSID: {55F182C8-8909-49AB-AB40-03A717DEC40B}
82662>>>>>>>>>Class cCrystalPageEngine is a cComAutomationObject
82663>>>>>>>>>    Import_Class_Protocol cCrystalIPageEngine
82664>>>>>>>>>
82664>>>>>>>>>    Procedure Construct_Object
82666>>>>>>>>>        Forward Send Construct_Object
82668>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
82669>>>>>>>>>    End_Procedure
82670>>>>>>>>>End_Class
82671>>>>>>>>>
82671>>>>>>>>>// CLSID: {AF37682C-6120-4E28-96DD-63FD2DC27B7A}
82671>>>>>>>>>Class cCrystalIPageGenerator is a Mixin
82672>>>>>>>>>
82672>>>>>>>>>    // Gets page generator's parent (PageEngine).
82672>>>>>>>>>    Function ComParent Returns Variant
82674>>>>>>>>>        Handle hDispatchDriver
82674>>>>>>>>>        Variant retVal
82674>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82675>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
82676>>>>>>>>>        Function_Return retVal
82677>>>>>>>>>    End_Function
82678>>>>>>>>>
82678>>>>>>>>>    // Gets page collection.
82678>>>>>>>>>    Function ComPages Returns Variant
82680>>>>>>>>>        Handle hDispatchDriver
82680>>>>>>>>>        Variant retVal
82680>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82681>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 248 OLE_VT_DISPATCH to retVal
82682>>>>>>>>>        Function_Return retVal
82683>>>>>>>>>    End_Function
82684>>>>>>>>>
82684>>>>>>>>>    // Gets drill down level
82684>>>>>>>>>    Function ComDrillDownLevel Returns Short
82686>>>>>>>>>        Handle hDispatchDriver
82686>>>>>>>>>        Short retVal
82686>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82687>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 249 OLE_VT_I2 to retVal
82688>>>>>>>>>        Function_Return retVal
82689>>>>>>>>>    End_Function
82690>>>>>>>>>
82690>>>>>>>>>    // Gets group path.
82690>>>>>>>>>    Function ComGroupPath Returns Variant
82692>>>>>>>>>        Handle hDispatchDriver
82692>>>>>>>>>        Variant retVal
82692>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82693>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 250 OLE_VT_VARIANT to retVal
82694>>>>>>>>>        Function_Return retVal
82695>>>>>>>>>    End_Function
82696>>>>>>>>>
82696>>>>>>>>>    // Gets page number for the specified group path.
82696>>>>>>>>>    Function ComGetPageNumberForGroup Variant llGroupPath Returns Integer
82698>>>>>>>>>        Handle hDispatchDriver
82698>>>>>>>>>        Integer retVal
82698>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82699>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82700>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llGroupPath
82701>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 251 OLE_VT_I4 to retVal
82702>>>>>>>>>        Function_Return retVal
82703>>>>>>>>>    End_Function
82704>>>>>>>>>
82704>>>>>>>>>    // Gets a page generator for drilling on graph.
82704>>>>>>>>>    Function ComDrillOnGraph Integer llPageNumber Integer llxOffset Integer llyOffset Returns Variant
82706>>>>>>>>>        Handle hDispatchDriver
82706>>>>>>>>>        Variant retVal
82706>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82707>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
82708>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPageNumber
82709>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llxOffset
82710>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llyOffset
82711>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 252 OLE_VT_DISPATCH to retVal
82712>>>>>>>>>        Function_Return retVal
82713>>>>>>>>>    End_Function
82714>>>>>>>>>
82714>>>>>>>>>    // Get group name for drill down on graph view
82714>>>>>>>>>    Function ComGroupName Returns String
82716>>>>>>>>>        Handle hDispatchDriver
82716>>>>>>>>>        String retVal
82716>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82717>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 254 OLE_VT_BSTR to retVal
82718>>>>>>>>>        Function_Return retVal
82719>>>>>>>>>    End_Function
82720>>>>>>>>>
82720>>>>>>>>>    // Gets report name for drill down on out of place subreport view.
82720>>>>>>>>>    Function ComReportName Returns String
82722>>>>>>>>>        Handle hDispatchDriver
82722>>>>>>>>>        String retVal
82722>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82723>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 298 OLE_VT_BSTR to retVal
82724>>>>>>>>>        Function_Return retVal
82725>>>>>>>>>    End_Function
82726>>>>>>>>>
82726>>>>>>>>>    // Gets containing page number for out of place subreport view.
82726>>>>>>>>>    Function ComContainingPageNumber Returns Integer
82728>>>>>>>>>        Handle hDispatchDriver
82728>>>>>>>>>        Integer retVal
82728>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82729>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 451 OLE_VT_I4 to retVal
82730>>>>>>>>>        Function_Return retVal
82731>>>>>>>>>    End_Function
82732>>>>>>>>>
82732>>>>>>>>>    // Gets containining group path for out of place subreport view.
82732>>>>>>>>>    Function ComContainingGroupPath Returns Variant
82734>>>>>>>>>        Handle hDispatchDriver
82734>>>>>>>>>        Variant retVal
82734>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82735>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 452 OLE_VT_VARIANT to retVal
82736>>>>>>>>>        Function_Return retVal
82737>>>>>>>>>    End_Function
82738>>>>>>>>>
82738>>>>>>>>>    // Gets contatining group name for out of place subreport view.
82738>>>>>>>>>    Function ComContainingGroupName Returns String
82740>>>>>>>>>        Handle hDispatchDriver
82740>>>>>>>>>        String retVal
82740>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82741>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 453 OLE_VT_BSTR to retVal
82742>>>>>>>>>        Function_Return retVal
82743>>>>>>>>>    End_Function
82744>>>>>>>>>
82744>>>>>>>>>    // Gets object xoffset.
82744>>>>>>>>>    Function ComXOffset Returns Integer
82746>>>>>>>>>        Handle hDispatchDriver
82746>>>>>>>>>        Integer retVal
82746>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82747>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 454 OLE_VT_I4 to retVal
82748>>>>>>>>>        Function_Return retVal
82749>>>>>>>>>    End_Function
82750>>>>>>>>>
82750>>>>>>>>>    // Gets object yoffset.
82750>>>>>>>>>    Function ComYOffset Returns Integer
82752>>>>>>>>>        Handle hDispatchDriver
82752>>>>>>>>>        Integer retVal
82752>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82753>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 455 OLE_VT_I4 to retVal
82754>>>>>>>>>        Function_Return retVal
82755>>>>>>>>>    End_Function
82756>>>>>>>>>
82756>>>>>>>>>    // Gets totaller ETF stream.
82756>>>>>>>>>    Function ComRenderTotallerETF Variant llrootGroupPath Integer llstartingChildNumber Short llpastRootLevels Variant llmaxNodeCount CRRenderResultType llresultType Returns Variant
82758>>>>>>>>>        Handle hDispatchDriver
82758>>>>>>>>>        Variant retVal
82758>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82759>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
82760>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llrootGroupPath
82761>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llstartingChildNumber
82762>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llpastRootLevels
82763>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llmaxNodeCount
82764>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llresultType
82765>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 246 OLE_VT_VARIANT to retVal
82766>>>>>>>>>        Function_Return retVal
82767>>>>>>>>>    End_Function
82768>>>>>>>>>
82768>>>>>>>>>    // Gets totaller HTML stream.
82768>>>>>>>>>    Function ComRenderTotallerHTML Variant llrootGroupPath Integer llstartingChildNumber Short llpastRootLevels Variant llmaxNodeCount Variant llopenGroupPath Boolean llincludeDrillDownLinks String llbaseURL CRRenderResultType llresultType Returns Variant
82770>>>>>>>>>        Handle hDispatchDriver
82770>>>>>>>>>        Variant retVal
82770>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82771>>>>>>>>>        Send PrepareParams to hDispatchDriver 8
82772>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llrootGroupPath
82773>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llstartingChildNumber
82774>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llpastRootLevels
82775>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llmaxNodeCount
82776>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llopenGroupPath
82777>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llincludeDrillDownLinks
82778>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llbaseURL
82779>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llresultType
82780>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 247 OLE_VT_VARIANT to retVal
82781>>>>>>>>>        Function_Return retVal
82782>>>>>>>>>    End_Function
82783>>>>>>>>>
82783>>>>>>>>>    // Gets a page generator for drilling on a map.
82783>>>>>>>>>    Function ComDrillOnMap Integer llPageNumber Integer llxOffset Integer llyOffset Returns Variant
82785>>>>>>>>>        Handle hDispatchDriver
82785>>>>>>>>>        Variant retVal
82785>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82786>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
82787>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPageNumber
82788>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llxOffset
82789>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llyOffset
82790>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 456 OLE_VT_DISPATCH to retVal
82791>>>>>>>>>        Function_Return retVal
82792>>>>>>>>>    End_Function
82793>>>>>>>>>
82793>>>>>>>>>    // Gets a page generator for drilling on a out of place subreport.
82793>>>>>>>>>    Function ComDrillOnSubreport Integer llPageNumber Integer llxOffset Integer llyOffset Returns Variant
82795>>>>>>>>>        Handle hDispatchDriver
82795>>>>>>>>>        Variant retVal
82795>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82796>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
82797>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llPageNumber
82798>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llxOffset
82799>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llyOffset
82800>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 457 OLE_VT_DISPATCH to retVal
82801>>>>>>>>>        Function_Return retVal
82802>>>>>>>>>    End_Function
82803>>>>>>>>>
82803>>>>>>>>>    // Gets export data stream.
82803>>>>>>>>>    Function ComExport CRRenderResultType llresultType Returns Variant
82805>>>>>>>>>        Handle hDispatchDriver
82805>>>>>>>>>        Variant retVal
82805>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82806>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82807>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llresultType
82808>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 259 OLE_VT_VARIANT to retVal
82809>>>>>>>>>        Function_Return retVal
82810>>>>>>>>>    End_Function
82811>>>>>>>>>
82811>>>>>>>>>    // Creates a page generator that contains subreport view context.
82811>>>>>>>>>    Function ComCreateSubreportPageGenerator Variant llGroupPath Variant llDrillDownLevel Returns Variant
82813>>>>>>>>>        Handle hDispatchDriver
82813>>>>>>>>>        Variant retVal
82813>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82814>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
82815>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llGroupPath
82816>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llDrillDownLevel
82817>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 459 OLE_VT_DISPATCH to retVal
82818>>>>>>>>>        Function_Return retVal
82819>>>>>>>>>    End_Function
82820>>>>>>>>>
82820>>>>>>>>>    // Searchs for the specified text in the current drill down view, starting with specified page.
82820>>>>>>>>>    Function ComFindText String llText CRSearchDirection lldirection Variant llpPageNumber Returns Boolean
82822>>>>>>>>>        Handle hDispatchDriver
82822>>>>>>>>>        Boolean retVal
82822>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82823>>>>>>>>>        Send PrepareParams to hDispatchDriver 3
82824>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
82825>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lldirection
82826>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_VARIANT) llpPageNumber
82827>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 547 OLE_VT_BOOL to retVal
82828>>>>>>>>>        Function_Return retVal
82829>>>>>>>>>    End_Function
82830>>>>>>>>>End_Class
82831>>>>>>>>>
82831>>>>>>>>>// CoClass
82831>>>>>>>>>// CLSID: {BBF5A9DB-2FC9-4C47-AEED-FC97568592F0}
82831>>>>>>>>>Class cCrystalPageGenerator is a cComAutomationObject
82832>>>>>>>>>    Import_Class_Protocol cCrystalIPageGenerator
82833>>>>>>>>>
82833>>>>>>>>>    Procedure Construct_Object
82835>>>>>>>>>        Forward Send Construct_Object
82837>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
82838>>>>>>>>>    End_Procedure
82839>>>>>>>>>End_Class
82840>>>>>>>>>
82840>>>>>>>>>// CLSID: {AF37682D-6120-4E28-96DD-63FD2DC27B7A}
82840>>>>>>>>>Class cCrystalIPages is a Mixin
82841>>>>>>>>>
82841>>>>>>>>>    Function Com_NewEnum Returns Variant
82843>>>>>>>>>        Handle hDispatchDriver
82843>>>>>>>>>        Variant retVal
82843>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82844>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
82845>>>>>>>>>        Function_Return retVal
82846>>>>>>>>>    End_Function
82847>>>>>>>>>
82847>>>>>>>>>    // Gets collection item.
82847>>>>>>>>>    Function ComItem Integer llindex Returns Variant
82849>>>>>>>>>        Handle hDispatchDriver
82849>>>>>>>>>        Variant retVal
82849>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82850>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82851>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
82852>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
82853>>>>>>>>>        Function_Return retVal
82854>>>>>>>>>    End_Function
82855>>>>>>>>>
82855>>>>>>>>>    // Gets collection count.
82855>>>>>>>>>    Function ComCount Returns Integer
82857>>>>>>>>>        Handle hDispatchDriver
82857>>>>>>>>>        Integer retVal
82857>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82858>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
82859>>>>>>>>>        Function_Return retVal
82860>>>>>>>>>    End_Function
82861>>>>>>>>>
82861>>>>>>>>>    // Gets pages parent(PageGenerator)
82861>>>>>>>>>    Function ComParent Returns Variant
82863>>>>>>>>>        Handle hDispatchDriver
82863>>>>>>>>>        Variant retVal
82863>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82864>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
82865>>>>>>>>>        Function_Return retVal
82866>>>>>>>>>    End_Function
82867>>>>>>>>>End_Class
82868>>>>>>>>>
82868>>>>>>>>>// CoClass
82868>>>>>>>>>// CLSID: {C91F3618-33AA-4349-80CA-51A5751897D3}
82868>>>>>>>>>Class cCrystalPages is a cComAutomationObject
82869>>>>>>>>>    Import_Class_Protocol cCrystalIPages
82870>>>>>>>>>
82870>>>>>>>>>    Procedure Construct_Object
82872>>>>>>>>>        Forward Send Construct_Object
82874>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
82875>>>>>>>>>    End_Procedure
82876>>>>>>>>>End_Class
82877>>>>>>>>>
82877>>>>>>>>>// CLSID: {AF37682E-6120-4E28-96DD-63FD2DC27B7A}
82877>>>>>>>>>Class cCrystalIPage is a Mixin
82878>>>>>>>>>
82878>>>>>>>>>    // Gets page's parent (PageGenerator).
82878>>>>>>>>>    Function ComParent Returns Variant
82880>>>>>>>>>        Handle hDispatchDriver
82880>>>>>>>>>        Variant retVal
82880>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82881>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
82882>>>>>>>>>        Function_Return retVal
82883>>>>>>>>>    End_Function
82884>>>>>>>>>
82884>>>>>>>>>    // Gets page number.
82884>>>>>>>>>    Function ComPageNumber Returns Integer
82886>>>>>>>>>        Handle hDispatchDriver
82886>>>>>>>>>        Integer retVal
82886>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82887>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 255 OLE_VT_I4 to retVal
82888>>>>>>>>>        Function_Return retVal
82889>>>>>>>>>    End_Function
82890>>>>>>>>>
82890>>>>>>>>>    // Returns whether the page is the last page.
82890>>>>>>>>>    Function ComIsLastPage Returns Boolean
82892>>>>>>>>>        Handle hDispatchDriver
82892>>>>>>>>>        Boolean retVal
82892>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82893>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 256 OLE_VT_BOOL to retVal
82894>>>>>>>>>        Function_Return retVal
82895>>>>>>>>>    End_Function
82896>>>>>>>>>
82896>>>>>>>>>    // Gets EPF stream.
82896>>>>>>>>>    Function ComRenderEPF CRRenderResultType llresultType Returns Variant
82898>>>>>>>>>        Handle hDispatchDriver
82898>>>>>>>>>        Variant retVal
82898>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82899>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82900>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llresultType
82901>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 257 OLE_VT_VARIANT to retVal
82902>>>>>>>>>        Function_Return retVal
82903>>>>>>>>>    End_Function
82904>>>>>>>>>
82904>>>>>>>>>    // Gets HTML stream.
82904>>>>>>>>>    Function ComRenderHTML Boolean llincludeDrillDownLinks CRHTMLPageStyle llpageStyle CRHTMLToolbarStyle lltoolbarStyle String llbaseURL CRRenderResultType llresultType Returns Variant
82906>>>>>>>>>        Handle hDispatchDriver
82906>>>>>>>>>        Variant retVal
82906>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82907>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
82908>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llincludeDrillDownLinks
82909>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llpageStyle
82910>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 lltoolbarStyle
82911>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llbaseURL
82912>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llresultType
82913>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 258 OLE_VT_VARIANT to retVal
82914>>>>>>>>>        Function_Return retVal
82915>>>>>>>>>    End_Function
82916>>>>>>>>>
82916>>>>>>>>>    // Returns whether the page misses the total page count.
82916>>>>>>>>>    Function ComIsMissingTotalPageCount Returns Boolean
82918>>>>>>>>>        Handle hDispatchDriver
82918>>>>>>>>>        Boolean retVal
82918>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82919>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 519 OLE_VT_BOOL to retVal
82920>>>>>>>>>        Function_Return retVal
82921>>>>>>>>>    End_Function
82922>>>>>>>>>End_Class
82923>>>>>>>>>
82923>>>>>>>>>// CoClass
82923>>>>>>>>>// CLSID: {D080F9D5-3038-42EF-A8BB-98C2DD928C28}
82923>>>>>>>>>Class cCrystalPage is a cComAutomationObject
82924>>>>>>>>>    Import_Class_Protocol cCrystalIPage
82925>>>>>>>>>
82925>>>>>>>>>    Procedure Construct_Object
82927>>>>>>>>>        Forward Send Construct_Object
82929>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
82930>>>>>>>>>    End_Procedure
82931>>>>>>>>>End_Class
82932>>>>>>>>>
82932>>>>>>>>>// CLSID: {AF37682F-6120-4E28-96DD-63FD2DC27B7A}
82932>>>>>>>>>Class cCrystalIExportOptions is a Mixin
82933>>>>>>>>>
82933>>>>>>>>>    // Gets export options' parent (IReport)
82933>>>>>>>>>    Function ComParent Returns Variant
82935>>>>>>>>>        Handle hDispatchDriver
82935>>>>>>>>>        Variant retVal
82935>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82936>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
82937>>>>>>>>>        Function_Return retVal
82938>>>>>>>>>    End_Function
82939>>>>>>>>>
82939>>>>>>>>>    // Gets or sets export format type.
82939>>>>>>>>>    Function ComFormatType Returns CRExportFormatType
82941>>>>>>>>>        Handle hDispatchDriver
82941>>>>>>>>>        CRExportFormatType retVal
82941>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82942>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 261 OLE_VT_I4 to retVal
82943>>>>>>>>>        Function_Return retVal
82944>>>>>>>>>    End_Function
82945>>>>>>>>>
82945>>>>>>>>>    // Gets or sets export format type.
82945>>>>>>>>>    Procedure Set ComFormatType CRExportFormatType value
82947>>>>>>>>>        Handle hDispatchDriver
82947>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82948>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82949>>>>>>>>>        Set ComProperty of hDispatchDriver 261 OLE_VT_I4 to value
82950>>>>>>>>>    End_Procedure
82951>>>>>>>>>
82951>>>>>>>>>    // Gets or sets export destination type.
82951>>>>>>>>>    Function ComDestinationType Returns CRExportDestinationType
82953>>>>>>>>>        Handle hDispatchDriver
82953>>>>>>>>>        CRExportDestinationType retVal
82953>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82954>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 262 OLE_VT_I4 to retVal
82955>>>>>>>>>        Function_Return retVal
82956>>>>>>>>>    End_Function
82957>>>>>>>>>
82957>>>>>>>>>    // Gets or sets export destination type.
82957>>>>>>>>>    Procedure Set ComDestinationType CRExportDestinationType value
82959>>>>>>>>>        Handle hDispatchDriver
82959>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82960>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82961>>>>>>>>>        Set ComProperty of hDispatchDriver 262 OLE_VT_I4 to value
82962>>>>>>>>>    End_Procedure
82963>>>>>>>>>
82963>>>>>>>>>    // Gets or sets export to Exchange profile.
82963>>>>>>>>>    Function ComExchangeProfile Returns String
82965>>>>>>>>>        Handle hDispatchDriver
82965>>>>>>>>>        String retVal
82965>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82966>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 263 OLE_VT_BSTR to retVal
82967>>>>>>>>>        Function_Return retVal
82968>>>>>>>>>    End_Function
82969>>>>>>>>>
82969>>>>>>>>>    // Gets or sets export to Exchange profile.
82969>>>>>>>>>    Procedure Set ComExchangeProfile String value
82971>>>>>>>>>        Handle hDispatchDriver
82971>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82972>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82973>>>>>>>>>        Set ComProperty of hDispatchDriver 263 OLE_VT_BSTR to value
82974>>>>>>>>>    End_Procedure
82975>>>>>>>>>
82975>>>>>>>>>    // Gets or sets destination disk file name.
82975>>>>>>>>>    Function ComDiskFileName Returns String
82977>>>>>>>>>        Handle hDispatchDriver
82977>>>>>>>>>        String retVal
82977>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82978>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 264 OLE_VT_BSTR to retVal
82979>>>>>>>>>        Function_Return retVal
82980>>>>>>>>>    End_Function
82981>>>>>>>>>
82981>>>>>>>>>    // Gets or sets destination disk file name.
82981>>>>>>>>>    Procedure Set ComDiskFileName String value
82983>>>>>>>>>        Handle hDispatchDriver
82983>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82984>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82985>>>>>>>>>        Set ComProperty of hDispatchDriver 264 OLE_VT_BSTR to value
82986>>>>>>>>>    End_Procedure
82987>>>>>>>>>
82987>>>>>>>>>    // Gets or sets use report date format option.
82987>>>>>>>>>    Function ComUseReportDateFormat Returns Boolean
82989>>>>>>>>>        Handle hDispatchDriver
82989>>>>>>>>>        Boolean retVal
82989>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82990>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 265 OLE_VT_BOOL to retVal
82991>>>>>>>>>        Function_Return retVal
82992>>>>>>>>>    End_Function
82993>>>>>>>>>
82993>>>>>>>>>    // Gets or sets use report date format option.
82993>>>>>>>>>    Procedure Set ComUseReportDateFormat Boolean value
82995>>>>>>>>>        Handle hDispatchDriver
82995>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
82996>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
82997>>>>>>>>>        Set ComProperty of hDispatchDriver 265 OLE_VT_BOOL to value
82998>>>>>>>>>    End_Procedure
82999>>>>>>>>>
82999>>>>>>>>>    // Gets or sets use report number format option.
82999>>>>>>>>>    Function ComUseReportNumberFormat Returns Boolean
83001>>>>>>>>>        Handle hDispatchDriver
83001>>>>>>>>>        Boolean retVal
83001>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83002>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 266 OLE_VT_BOOL to retVal
83003>>>>>>>>>        Function_Return retVal
83004>>>>>>>>>    End_Function
83005>>>>>>>>>
83005>>>>>>>>>    // Gets or sets use report number format option.
83005>>>>>>>>>    Procedure Set ComUseReportNumberFormat Boolean value
83007>>>>>>>>>        Handle hDispatchDriver
83007>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83008>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83009>>>>>>>>>        Set ComProperty of hDispatchDriver 266 OLE_VT_BOOL to value
83010>>>>>>>>>    End_Procedure
83011>>>>>>>>>
83011>>>>>>>>>    // Gets or sets char field delimiter.
83011>>>>>>>>>    Function ComCharFieldDelimiter Returns String
83013>>>>>>>>>        Handle hDispatchDriver
83013>>>>>>>>>        String retVal
83013>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83014>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 267 OLE_VT_BSTR to retVal
83015>>>>>>>>>        Function_Return retVal
83016>>>>>>>>>    End_Function
83017>>>>>>>>>
83017>>>>>>>>>    // Gets or sets char field delimiter.
83017>>>>>>>>>    Procedure Set ComCharFieldDelimiter String value
83019>>>>>>>>>        Handle hDispatchDriver
83019>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83020>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83021>>>>>>>>>        Set ComProperty of hDispatchDriver 267 OLE_VT_BSTR to value
83022>>>>>>>>>    End_Procedure
83023>>>>>>>>>
83023>>>>>>>>>    // Gets or sets char string delimiter.
83023>>>>>>>>>    Function ComCharStringDelimiter Returns String
83025>>>>>>>>>        Handle hDispatchDriver
83025>>>>>>>>>        String retVal
83025>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83026>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 268 OLE_VT_BSTR to retVal
83027>>>>>>>>>        Function_Return retVal
83028>>>>>>>>>    End_Function
83029>>>>>>>>>
83029>>>>>>>>>    // Gets or sets char string delimiter.
83029>>>>>>>>>    Procedure Set ComCharStringDelimiter String value
83031>>>>>>>>>        Handle hDispatchDriver
83031>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83032>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83033>>>>>>>>>        Set ComProperty of hDispatchDriver 268 OLE_VT_BSTR to value
83034>>>>>>>>>    End_Procedure
83035>>>>>>>>>
83035>>>>>>>>>    // Gets or sets number of line per page option.
83035>>>>>>>>>    Function ComNumberOfLinesPerPage Returns Short
83037>>>>>>>>>        Handle hDispatchDriver
83037>>>>>>>>>        Short retVal
83037>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83038>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 269 OLE_VT_I2 to retVal
83039>>>>>>>>>        Function_Return retVal
83040>>>>>>>>>    End_Function
83041>>>>>>>>>
83041>>>>>>>>>    // Gets or sets number of line per page option.
83041>>>>>>>>>    Procedure Set ComNumberOfLinesPerPage Short value
83043>>>>>>>>>        Handle hDispatchDriver
83043>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83044>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83045>>>>>>>>>        Set ComProperty of hDispatchDriver 269 OLE_VT_I2 to value
83046>>>>>>>>>    End_Procedure
83047>>>>>>>>>
83047>>>>>>>>>    // Gets or sets ODBC data source name.
83047>>>>>>>>>    Function ComODBCDataSourceName Returns String
83049>>>>>>>>>        Handle hDispatchDriver
83049>>>>>>>>>        String retVal
83049>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83050>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 270 OLE_VT_BSTR to retVal
83051>>>>>>>>>        Function_Return retVal
83052>>>>>>>>>    End_Function
83053>>>>>>>>>
83053>>>>>>>>>    // Gets or sets ODBC data source name.
83053>>>>>>>>>    Procedure Set ComODBCDataSourceName String value
83055>>>>>>>>>        Handle hDispatchDriver
83055>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83056>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83057>>>>>>>>>        Set ComProperty of hDispatchDriver 270 OLE_VT_BSTR to value
83058>>>>>>>>>    End_Procedure
83059>>>>>>>>>
83059>>>>>>>>>    // Gets or sets ODBC data source user ID.
83059>>>>>>>>>    Function ComODBCDataSourceUserID Returns String
83061>>>>>>>>>        Handle hDispatchDriver
83061>>>>>>>>>        String retVal
83061>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83062>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 271 OLE_VT_BSTR to retVal
83063>>>>>>>>>        Function_Return retVal
83064>>>>>>>>>    End_Function
83065>>>>>>>>>
83065>>>>>>>>>    // Gets or sets ODBC data source user ID.
83065>>>>>>>>>    Procedure Set ComODBCDataSourceUserID String value
83067>>>>>>>>>        Handle hDispatchDriver
83067>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83068>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83069>>>>>>>>>        Set ComProperty of hDispatchDriver 271 OLE_VT_BSTR to value
83070>>>>>>>>>    End_Procedure
83071>>>>>>>>>
83071>>>>>>>>>    // Sets ODBC data source password.
83071>>>>>>>>>    Procedure Set ComODBCDataSourcePassword String value
83073>>>>>>>>>        Handle hDispatchDriver
83073>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83074>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83075>>>>>>>>>        Set ComProperty of hDispatchDriver 272 OLE_VT_BSTR to value
83076>>>>>>>>>    End_Procedure
83077>>>>>>>>>
83077>>>>>>>>>    // Gets or sets ODBC table name.
83077>>>>>>>>>    Function ComODBCExportTableName Returns String
83079>>>>>>>>>        Handle hDispatchDriver
83079>>>>>>>>>        String retVal
83079>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83080>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 273 OLE_VT_BSTR to retVal
83081>>>>>>>>>        Function_Return retVal
83082>>>>>>>>>    End_Function
83083>>>>>>>>>
83083>>>>>>>>>    // Gets or sets ODBC table name.
83083>>>>>>>>>    Procedure Set ComODBCExportTableName String value
83085>>>>>>>>>        Handle hDispatchDriver
83085>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83086>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83087>>>>>>>>>        Set ComProperty of hDispatchDriver 273 OLE_VT_BSTR to value
83088>>>>>>>>>    End_Procedure
83089>>>>>>>>>
83089>>>>>>>>>    // Gets or sets HTML file name.
83089>>>>>>>>>    Function ComHTMLFileName Returns String
83091>>>>>>>>>        Handle hDispatchDriver
83091>>>>>>>>>        String retVal
83091>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83092>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 274 OLE_VT_BSTR to retVal
83093>>>>>>>>>        Function_Return retVal
83094>>>>>>>>>    End_Function
83095>>>>>>>>>
83095>>>>>>>>>    // Gets or sets HTML file name.
83095>>>>>>>>>    Procedure Set ComHTMLFileName String value
83097>>>>>>>>>        Handle hDispatchDriver
83097>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83098>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83099>>>>>>>>>        Set ComProperty of hDispatchDriver 274 OLE_VT_BSTR to value
83100>>>>>>>>>    End_Procedure
83101>>>>>>>>>
83101>>>>>>>>>    // Sets exchange password.
83101>>>>>>>>>    Procedure Set ComExchangePassword String value
83103>>>>>>>>>        Handle hDispatchDriver
83103>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83104>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83105>>>>>>>>>        Set ComProperty of hDispatchDriver 275 OLE_VT_BSTR to value
83106>>>>>>>>>    End_Procedure
83107>>>>>>>>>
83107>>>>>>>>>    // Gets or sets exchange destination type.
83107>>>>>>>>>    Function ComExchangeDestinationType Returns CRExchangeDestinationType
83109>>>>>>>>>        Handle hDispatchDriver
83109>>>>>>>>>        CRExchangeDestinationType retVal
83109>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83110>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 276 OLE_VT_I4 to retVal
83111>>>>>>>>>        Function_Return retVal
83112>>>>>>>>>    End_Function
83113>>>>>>>>>
83113>>>>>>>>>    // Gets or sets exchange destination type.
83113>>>>>>>>>    Procedure Set ComExchangeDestinationType CRExchangeDestinationType value
83115>>>>>>>>>        Handle hDispatchDriver
83115>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83116>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83117>>>>>>>>>        Set ComProperty of hDispatchDriver 276 OLE_VT_I4 to value
83118>>>>>>>>>    End_Procedure
83119>>>>>>>>>
83119>>>>>>>>>    // Gets or sets exchange folder path.
83119>>>>>>>>>    Function ComExchangeFolderPath Returns String
83121>>>>>>>>>        Handle hDispatchDriver
83121>>>>>>>>>        String retVal
83121>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83122>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 277 OLE_VT_BSTR to retVal
83123>>>>>>>>>        Function_Return retVal
83124>>>>>>>>>    End_Function
83125>>>>>>>>>
83125>>>>>>>>>    // Gets or sets exchange folder path.
83125>>>>>>>>>    Procedure Set ComExchangeFolderPath String value
83127>>>>>>>>>        Handle hDispatchDriver
83127>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83128>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83129>>>>>>>>>        Set ComProperty of hDispatchDriver 277 OLE_VT_BSTR to value
83130>>>>>>>>>    End_Procedure
83131>>>>>>>>>
83131>>>>>>>>>    // Gets or sets mail cc list.
83131>>>>>>>>>    Function ComMailCcList Returns String
83133>>>>>>>>>        Handle hDispatchDriver
83133>>>>>>>>>        String retVal
83133>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83134>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 278 OLE_VT_BSTR to retVal
83135>>>>>>>>>        Function_Return retVal
83136>>>>>>>>>    End_Function
83137>>>>>>>>>
83137>>>>>>>>>    // Gets or sets mail cc list.
83137>>>>>>>>>    Procedure Set ComMailCcList String value
83139>>>>>>>>>        Handle hDispatchDriver
83139>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83140>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83141>>>>>>>>>        Set ComProperty of hDispatchDriver 278 OLE_VT_BSTR to value
83142>>>>>>>>>    End_Procedure
83143>>>>>>>>>
83143>>>>>>>>>    // Gets or sets mail to list.
83143>>>>>>>>>    Function ComMailToList Returns String
83145>>>>>>>>>        Handle hDispatchDriver
83145>>>>>>>>>        String retVal
83145>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83146>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 279 OLE_VT_BSTR to retVal
83147>>>>>>>>>        Function_Return retVal
83148>>>>>>>>>    End_Function
83149>>>>>>>>>
83149>>>>>>>>>    // Gets or sets mail to list.
83149>>>>>>>>>    Procedure Set ComMailToList String value
83151>>>>>>>>>        Handle hDispatchDriver
83151>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83152>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83153>>>>>>>>>        Set ComProperty of hDispatchDriver 279 OLE_VT_BSTR to value
83154>>>>>>>>>    End_Procedure
83155>>>>>>>>>
83155>>>>>>>>>    // Gets or sets mail subjects.
83155>>>>>>>>>    Function ComMailSubject Returns String
83157>>>>>>>>>        Handle hDispatchDriver
83157>>>>>>>>>        String retVal
83157>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83158>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 280 OLE_VT_BSTR to retVal
83159>>>>>>>>>        Function_Return retVal
83160>>>>>>>>>    End_Function
83161>>>>>>>>>
83161>>>>>>>>>    // Gets or sets mail subjects.
83161>>>>>>>>>    Procedure Set ComMailSubject String value
83163>>>>>>>>>        Handle hDispatchDriver
83163>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83164>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83165>>>>>>>>>        Set ComProperty of hDispatchDriver 280 OLE_VT_BSTR to value
83166>>>>>>>>>    End_Procedure
83167>>>>>>>>>
83167>>>>>>>>>    // Gets or sets mail message.
83167>>>>>>>>>    Function ComMailMessage Returns String
83169>>>>>>>>>        Handle hDispatchDriver
83169>>>>>>>>>        String retVal
83169>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83170>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 281 OLE_VT_BSTR to retVal
83171>>>>>>>>>        Function_Return retVal
83172>>>>>>>>>    End_Function
83173>>>>>>>>>
83173>>>>>>>>>    // Gets or sets mail message.
83173>>>>>>>>>    Procedure Set ComMailMessage String value
83175>>>>>>>>>        Handle hDispatchDriver
83175>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83176>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83177>>>>>>>>>        Set ComProperty of hDispatchDriver 281 OLE_VT_BSTR to value
83178>>>>>>>>>    End_Procedure
83179>>>>>>>>>
83179>>>>>>>>>    // Gets or sets mail Bcc list.
83179>>>>>>>>>    Function ComMailBccList Returns String
83181>>>>>>>>>        Handle hDispatchDriver
83181>>>>>>>>>        String retVal
83181>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83182>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 282 OLE_VT_BSTR to retVal
83183>>>>>>>>>        Function_Return retVal
83184>>>>>>>>>    End_Function
83185>>>>>>>>>
83185>>>>>>>>>    // Gets or sets mail Bcc list.
83185>>>>>>>>>    Procedure Set ComMailBccList String value
83187>>>>>>>>>        Handle hDispatchDriver
83187>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83188>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83189>>>>>>>>>        Set ComProperty of hDispatchDriver 282 OLE_VT_BSTR to value
83190>>>>>>>>>    End_Procedure
83191>>>>>>>>>
83191>>>>>>>>>    // Gets export format dll name.
83191>>>>>>>>>    Function ComFormatDllName Returns String
83193>>>>>>>>>        Handle hDispatchDriver
83193>>>>>>>>>        String retVal
83193>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83194>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 283 OLE_VT_BSTR to retVal
83195>>>>>>>>>        Function_Return retVal
83196>>>>>>>>>    End_Function
83197>>>>>>>>>
83197>>>>>>>>>    // Gets export destination dll name.
83197>>>>>>>>>    Function ComDestinationDllName Returns String
83199>>>>>>>>>        Handle hDispatchDriver
83199>>>>>>>>>        String retVal
83199>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83200>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 284 OLE_VT_BSTR to retVal
83201>>>>>>>>>        Function_Return retVal
83202>>>>>>>>>    End_Function
83203>>>>>>>>>
83203>>>>>>>>>    // Resets export options.
83203>>>>>>>>>    Procedure ComReset
83205>>>>>>>>>        Handle hDispatchDriver
83205>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83206>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 286 OLE_VT_VOID
83207>>>>>>>>>    End_Procedure
83208>>>>>>>>>
83208>>>>>>>>>    // Prompts for export options.
83208>>>>>>>>>    Procedure ComPromptForExportOptions
83210>>>>>>>>>        Handle hDispatchDriver
83210>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83211>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 287 OLE_VT_VOID
83212>>>>>>>>>    End_Procedure
83213>>>>>>>>>
83213>>>>>>>>>    // Gets or sets exporting to Excel has column headings option.
83213>>>>>>>>>    Function ComExcelTabHasColumnHeadings Returns Boolean
83215>>>>>>>>>        Handle hDispatchDriver
83215>>>>>>>>>        Boolean retVal
83215>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83216>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 490 OLE_VT_BOOL to retVal
83217>>>>>>>>>        Function_Return retVal
83218>>>>>>>>>    End_Function
83219>>>>>>>>>
83219>>>>>>>>>    // Gets or sets exporting to Excel has column headings option.
83219>>>>>>>>>    Procedure Set ComExcelTabHasColumnHeadings Boolean value
83221>>>>>>>>>        Handle hDispatchDriver
83221>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83222>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83223>>>>>>>>>        Set ComProperty of hDispatchDriver 490 OLE_VT_BOOL to value
83224>>>>>>>>>    End_Procedure
83225>>>>>>>>>
83225>>>>>>>>>    // Gets or sets export to Excel to use worksheet functions to represent subtotal fields in the report.
83225>>>>>>>>>    Function ComExcelUseWorksheetFunctions Returns Boolean
83227>>>>>>>>>        Handle hDispatchDriver
83227>>>>>>>>>        Boolean retVal
83227>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83228>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 491 OLE_VT_BOOL to retVal
83229>>>>>>>>>        Function_Return retVal
83230>>>>>>>>>    End_Function
83231>>>>>>>>>
83231>>>>>>>>>    // Gets or sets export to Excel to use worksheet functions to represent subtotal fields in the report.
83231>>>>>>>>>    Procedure Set ComExcelUseWorksheetFunctions Boolean value
83233>>>>>>>>>        Handle hDispatchDriver
83233>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83234>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83235>>>>>>>>>        Set ComProperty of hDispatchDriver 491 OLE_VT_BOOL to value
83236>>>>>>>>>    End_Procedure
83237>>>>>>>>>
83237>>>>>>>>>    // Gets or sets export to Excel to use constant column width.
83237>>>>>>>>>    Function ComExcelUseConstantColumnWidth Returns Boolean
83239>>>>>>>>>        Handle hDispatchDriver
83239>>>>>>>>>        Boolean retVal
83239>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83240>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 492 OLE_VT_BOOL to retVal
83241>>>>>>>>>        Function_Return retVal
83242>>>>>>>>>    End_Function
83243>>>>>>>>>
83243>>>>>>>>>    // Gets or sets export to Excel to use constant column width.
83243>>>>>>>>>    Procedure Set ComExcelUseConstantColumnWidth Boolean value
83245>>>>>>>>>        Handle hDispatchDriver
83245>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83246>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83247>>>>>>>>>        Set ComProperty of hDispatchDriver 492 OLE_VT_BOOL to value
83248>>>>>>>>>    End_Procedure
83249>>>>>>>>>
83249>>>>>>>>>    // Gets or sets the column width when exporting to Excel.
83249>>>>>>>>>    Function ComExcelConstantColumnWidth Returns Real
83251>>>>>>>>>        Handle hDispatchDriver
83251>>>>>>>>>        Real retVal
83251>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83252>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 493 OLE_VT_R8 to retVal
83253>>>>>>>>>        Function_Return retVal
83254>>>>>>>>>    End_Function
83255>>>>>>>>>
83255>>>>>>>>>    // Gets or sets the column width when exporting to Excel.
83255>>>>>>>>>    Procedure Set ComExcelConstantColumnWidth Real value
83257>>>>>>>>>        Handle hDispatchDriver
83257>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83258>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83259>>>>>>>>>        Set ComProperty of hDispatchDriver 493 OLE_VT_R8 to value
83260>>>>>>>>>    End_Procedure
83261>>>>>>>>>
83261>>>>>>>>>    // Gets or sets the base area type if not using constant column width when exporting to Excel.
83261>>>>>>>>>    Function ComExcelAreaType Returns CRAreaKind
83263>>>>>>>>>        Handle hDispatchDriver
83263>>>>>>>>>        CRAreaKind retVal
83263>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83264>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 494 OLE_VT_I4 to retVal
83265>>>>>>>>>        Function_Return retVal
83266>>>>>>>>>    End_Function
83267>>>>>>>>>
83267>>>>>>>>>    // Gets or sets the base area type if not using constant column width when exporting to Excel.
83267>>>>>>>>>    Procedure Set ComExcelAreaType CRAreaKind value
83269>>>>>>>>>        Handle hDispatchDriver
83269>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83270>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83271>>>>>>>>>        Set ComProperty of hDispatchDriver 494 OLE_VT_I4 to value
83272>>>>>>>>>    End_Procedure
83273>>>>>>>>>
83273>>>>>>>>>    // Gets or sets the base area group number if the area type is group area when exporting to Excel.
83273>>>>>>>>>    Function ComExcelAreaGroupNumber Returns Short
83275>>>>>>>>>        Handle hDispatchDriver
83275>>>>>>>>>        Short retVal
83275>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83276>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 495 OLE_VT_I2 to retVal
83277>>>>>>>>>        Function_Return retVal
83278>>>>>>>>>    End_Function
83279>>>>>>>>>
83279>>>>>>>>>    // Gets or sets the base area group number if the area type is group area when exporting to Excel.
83279>>>>>>>>>    Procedure Set ComExcelAreaGroupNumber Short value
83281>>>>>>>>>        Handle hDispatchDriver
83281>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83282>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83283>>>>>>>>>        Set ComProperty of hDispatchDriver 495 OLE_VT_I2 to value
83284>>>>>>>>>    End_Procedure
83285>>>>>>>>>
83285>>>>>>>>>    // Gets or sets exporting to Excel to use tabular format.
83285>>>>>>>>>    Function ComExcelUseTabularFormat Returns Boolean
83287>>>>>>>>>        Handle hDispatchDriver
83287>>>>>>>>>        Boolean retVal
83287>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83288>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 496 OLE_VT_BOOL to retVal
83289>>>>>>>>>        Function_Return retVal
83290>>>>>>>>>    End_Function
83291>>>>>>>>>
83291>>>>>>>>>    // Gets or sets exporting to Excel to use tabular format.
83291>>>>>>>>>    Procedure Set ComExcelUseTabularFormat Boolean value
83293>>>>>>>>>        Handle hDispatchDriver
83293>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83294>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83295>>>>>>>>>        Set ComProperty of hDispatchDriver 496 OLE_VT_BOOL to value
83296>>>>>>>>>    End_Procedure
83297>>>>>>>>>
83297>>>>>>>>>    // Gets or sets destination application file name.
83297>>>>>>>>>    Function ComApplicationFileName Returns String
83299>>>>>>>>>        Handle hDispatchDriver
83299>>>>>>>>>        String retVal
83299>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83300>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 706 OLE_VT_BSTR to retVal
83301>>>>>>>>>        Function_Return retVal
83302>>>>>>>>>    End_Function
83303>>>>>>>>>
83303>>>>>>>>>    // Gets or sets destination application file name.
83303>>>>>>>>>    Procedure Set ComApplicationFileName String value
83305>>>>>>>>>        Handle hDispatchDriver
83305>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83306>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83307>>>>>>>>>        Set ComProperty of hDispatchDriver 706 OLE_VT_BSTR to value
83308>>>>>>>>>    End_Procedure
83309>>>>>>>>>
83309>>>>>>>>>    // Gets or sets destination Lotus Domino database name.
83309>>>>>>>>>    Function ComLotusDominoDatabaseName Returns String
83311>>>>>>>>>        Handle hDispatchDriver
83311>>>>>>>>>        String retVal
83311>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83312>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 707 OLE_VT_BSTR to retVal
83313>>>>>>>>>        Function_Return retVal
83314>>>>>>>>>    End_Function
83315>>>>>>>>>
83315>>>>>>>>>    // Gets or sets destination Lotus Domino database name.
83315>>>>>>>>>    Procedure Set ComLotusDominoDatabaseName String value
83317>>>>>>>>>        Handle hDispatchDriver
83317>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83318>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83319>>>>>>>>>        Set ComProperty of hDispatchDriver 707 OLE_VT_BSTR to value
83320>>>>>>>>>    End_Procedure
83321>>>>>>>>>
83321>>>>>>>>>    // Gets or sets destination Lotus Domino form name.
83321>>>>>>>>>    Function ComLotusDominoFormName Returns String
83323>>>>>>>>>        Handle hDispatchDriver
83323>>>>>>>>>        String retVal
83323>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83324>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 708 OLE_VT_BSTR to retVal
83325>>>>>>>>>        Function_Return retVal
83326>>>>>>>>>    End_Function
83327>>>>>>>>>
83327>>>>>>>>>    // Gets or sets destination Lotus Domino form name.
83327>>>>>>>>>    Procedure Set ComLotusDominoFormName String value
83329>>>>>>>>>        Handle hDispatchDriver
83329>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83330>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83331>>>>>>>>>        Set ComProperty of hDispatchDriver 708 OLE_VT_BSTR to value
83332>>>>>>>>>    End_Procedure
83333>>>>>>>>>
83333>>>>>>>>>    // Gets or sets destination Lotus Domino comments.
83333>>>>>>>>>    Function ComLotusDominoComments Returns String
83335>>>>>>>>>        Handle hDispatchDriver
83335>>>>>>>>>        String retVal
83335>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83336>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 709 OLE_VT_BSTR to retVal
83337>>>>>>>>>        Function_Return retVal
83338>>>>>>>>>    End_Function
83339>>>>>>>>>
83339>>>>>>>>>    // Gets or sets destination Lotus Domino comments.
83339>>>>>>>>>    Procedure Set ComLotusDominoComments String value
83341>>>>>>>>>        Handle hDispatchDriver
83341>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83342>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83343>>>>>>>>>        Set ComProperty of hDispatchDriver 709 OLE_VT_BSTR to value
83344>>>>>>>>>    End_Procedure
83345>>>>>>>>>
83345>>>>>>>>>    // Gets or sets export to HTML for separated pages.
83345>>>>>>>>>    Function ComHTMLEnableSeparatedPages Returns Boolean
83347>>>>>>>>>        Handle hDispatchDriver
83347>>>>>>>>>        Boolean retVal
83347>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83348>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 711 OLE_VT_BOOL to retVal
83349>>>>>>>>>        Function_Return retVal
83350>>>>>>>>>    End_Function
83351>>>>>>>>>
83351>>>>>>>>>    // Gets or sets export to HTML for separated pages.
83351>>>>>>>>>    Procedure Set ComHTMLEnableSeparatedPages Boolean value
83353>>>>>>>>>        Handle hDispatchDriver
83353>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83354>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83355>>>>>>>>>        Set ComProperty of hDispatchDriver 711 OLE_VT_BOOL to value
83356>>>>>>>>>    End_Procedure
83357>>>>>>>>>
83357>>>>>>>>>    // Gets or sets export to HTML to have page navigator.
83357>>>>>>>>>    Function ComHTMLHasPageNavigator Returns Boolean
83359>>>>>>>>>        Handle hDispatchDriver
83359>>>>>>>>>        Boolean retVal
83359>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83360>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 710 OLE_VT_BOOL to retVal
83361>>>>>>>>>        Function_Return retVal
83362>>>>>>>>>    End_Function
83363>>>>>>>>>
83363>>>>>>>>>    // Gets or sets export to HTML to have page navigator.
83363>>>>>>>>>    Procedure Set ComHTMLHasPageNavigator Boolean value
83365>>>>>>>>>        Handle hDispatchDriver
83365>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83366>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83367>>>>>>>>>        Set ComProperty of hDispatchDriver 710 OLE_VT_BOOL to value
83368>>>>>>>>>    End_Procedure
83369>>>>>>>>>
83369>>>>>>>>>    // Gets or sets export to PDF with all pages.
83369>>>>>>>>>    Function ComPDFExportAllPages Returns Boolean
83371>>>>>>>>>        Handle hDispatchDriver
83371>>>>>>>>>        Boolean retVal
83371>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83372>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 734 OLE_VT_BOOL to retVal
83373>>>>>>>>>        Function_Return retVal
83374>>>>>>>>>    End_Function
83375>>>>>>>>>
83375>>>>>>>>>    // Gets or sets export to PDF with all pages.
83375>>>>>>>>>    Procedure Set ComPDFExportAllPages Boolean value
83377>>>>>>>>>        Handle hDispatchDriver
83377>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83378>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83379>>>>>>>>>        Set ComProperty of hDispatchDriver 734 OLE_VT_BOOL to value
83380>>>>>>>>>    End_Procedure
83381>>>>>>>>>
83381>>>>>>>>>    // Gets or sets export to PDF for first page number.
83381>>>>>>>>>    Function ComPDFFirstPageNumber Returns Integer
83383>>>>>>>>>        Handle hDispatchDriver
83383>>>>>>>>>        Integer retVal
83383>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83384>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 735 OLE_VT_I4 to retVal
83385>>>>>>>>>        Function_Return retVal
83386>>>>>>>>>    End_Function
83387>>>>>>>>>
83387>>>>>>>>>    // Gets or sets export to PDF for first page number.
83387>>>>>>>>>    Procedure Set ComPDFFirstPageNumber Integer value
83389>>>>>>>>>        Handle hDispatchDriver
83389>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83390>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83391>>>>>>>>>        Set ComProperty of hDispatchDriver 735 OLE_VT_I4 to value
83392>>>>>>>>>    End_Procedure
83393>>>>>>>>>
83393>>>>>>>>>    // Gets or sets export to PDF for last page number.
83393>>>>>>>>>    Function ComPDFLastPageNumber Returns Integer
83395>>>>>>>>>        Handle hDispatchDriver
83395>>>>>>>>>        Integer retVal
83395>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83396>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 736 OLE_VT_I4 to retVal
83397>>>>>>>>>        Function_Return retVal
83398>>>>>>>>>    End_Function
83399>>>>>>>>>
83399>>>>>>>>>    // Gets or sets export to PDF for last page number.
83399>>>>>>>>>    Procedure Set ComPDFLastPageNumber Integer value
83401>>>>>>>>>        Handle hDispatchDriver
83401>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83402>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83403>>>>>>>>>        Set ComProperty of hDispatchDriver 736 OLE_VT_I4 to value
83404>>>>>>>>>    End_Procedure
83405>>>>>>>>>
83405>>>>>>>>>    // Gets or sets export to RTF with all pages.
83405>>>>>>>>>    Function ComRTFExportAllPages Returns Boolean
83407>>>>>>>>>        Handle hDispatchDriver
83407>>>>>>>>>        Boolean retVal
83407>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83408>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 737 OLE_VT_BOOL to retVal
83409>>>>>>>>>        Function_Return retVal
83410>>>>>>>>>    End_Function
83411>>>>>>>>>
83411>>>>>>>>>    // Gets or sets export to RTF with all pages.
83411>>>>>>>>>    Procedure Set ComRTFExportAllPages Boolean value
83413>>>>>>>>>        Handle hDispatchDriver
83413>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83414>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83415>>>>>>>>>        Set ComProperty of hDispatchDriver 737 OLE_VT_BOOL to value
83416>>>>>>>>>    End_Procedure
83417>>>>>>>>>
83417>>>>>>>>>    // Gets or sets export to RTF for first page number.
83417>>>>>>>>>    Function ComRTFFirstPageNumber Returns Integer
83419>>>>>>>>>        Handle hDispatchDriver
83419>>>>>>>>>        Integer retVal
83419>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83420>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 738 OLE_VT_I4 to retVal
83421>>>>>>>>>        Function_Return retVal
83422>>>>>>>>>    End_Function
83423>>>>>>>>>
83423>>>>>>>>>    // Gets or sets export to RTF for first page number.
83423>>>>>>>>>    Procedure Set ComRTFFirstPageNumber Integer value
83425>>>>>>>>>        Handle hDispatchDriver
83425>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83426>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83427>>>>>>>>>        Set ComProperty of hDispatchDriver 738 OLE_VT_I4 to value
83428>>>>>>>>>    End_Procedure
83429>>>>>>>>>
83429>>>>>>>>>    // Gets or sets export to RTF for last page number.
83429>>>>>>>>>    Function ComRTFLastPageNumber Returns Integer
83431>>>>>>>>>        Handle hDispatchDriver
83431>>>>>>>>>        Integer retVal
83431>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83432>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 739 OLE_VT_I4 to retVal
83433>>>>>>>>>        Function_Return retVal
83434>>>>>>>>>    End_Function
83435>>>>>>>>>
83435>>>>>>>>>    // Gets or sets export to RTF for last page number.
83435>>>>>>>>>    Procedure Set ComRTFLastPageNumber Integer value
83437>>>>>>>>>        Handle hDispatchDriver
83437>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83438>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83439>>>>>>>>>        Set ComProperty of hDispatchDriver 739 OLE_VT_I4 to value
83440>>>>>>>>>    End_Procedure
83441>>>>>>>>>
83441>>>>>>>>>    // Gets or sets XML file name.
83441>>>>>>>>>    Function ComXMLFileName Returns String
83443>>>>>>>>>        Handle hDispatchDriver
83443>>>>>>>>>        String retVal
83443>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83444>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 740 OLE_VT_BSTR to retVal
83445>>>>>>>>>        Function_Return retVal
83446>>>>>>>>>    End_Function
83447>>>>>>>>>
83447>>>>>>>>>    // Gets or sets XML file name.
83447>>>>>>>>>    Procedure Set ComXMLFileName String value
83449>>>>>>>>>        Handle hDispatchDriver
83449>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83450>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83451>>>>>>>>>        Set ComProperty of hDispatchDriver 740 OLE_VT_BSTR to value
83452>>>>>>>>>    End_Procedure
83453>>>>>>>>>
83453>>>>>>>>>    // Gets or sets XML allow multiple files.
83453>>>>>>>>>    Function ComXMLAllowMultipleFiles Returns Boolean
83455>>>>>>>>>        Handle hDispatchDriver
83455>>>>>>>>>        Boolean retVal
83455>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83456>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 741 OLE_VT_BOOL to retVal
83457>>>>>>>>>        Function_Return retVal
83458>>>>>>>>>    End_Function
83459>>>>>>>>>
83459>>>>>>>>>    // Gets or sets XML allow multiple files.
83459>>>>>>>>>    Procedure Set ComXMLAllowMultipleFiles Boolean value
83461>>>>>>>>>        Handle hDispatchDriver
83461>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83462>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83463>>>>>>>>>        Set ComProperty of hDispatchDriver 741 OLE_VT_BOOL to value
83464>>>>>>>>>    End_Procedure
83465>>>>>>>>>
83465>>>>>>>>>    // Gets or sets export to Word with all pages.
83465>>>>>>>>>    Function ComWORDWExportAllPages Returns Boolean
83467>>>>>>>>>        Handle hDispatchDriver
83467>>>>>>>>>        Boolean retVal
83467>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83468>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 766 OLE_VT_BOOL to retVal
83469>>>>>>>>>        Function_Return retVal
83470>>>>>>>>>    End_Function
83471>>>>>>>>>
83471>>>>>>>>>    // Gets or sets export to Word with all pages.
83471>>>>>>>>>    Procedure Set ComWORDWExportAllPages Boolean value
83473>>>>>>>>>        Handle hDispatchDriver
83473>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83474>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83475>>>>>>>>>        Set ComProperty of hDispatchDriver 766 OLE_VT_BOOL to value
83476>>>>>>>>>    End_Procedure
83477>>>>>>>>>
83477>>>>>>>>>    // Gets or sets export to Word for first page number.
83477>>>>>>>>>    Function ComWORDWFirstPageNumber Returns Integer
83479>>>>>>>>>        Handle hDispatchDriver
83479>>>>>>>>>        Integer retVal
83479>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83480>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 767 OLE_VT_I4 to retVal
83481>>>>>>>>>        Function_Return retVal
83482>>>>>>>>>    End_Function
83483>>>>>>>>>
83483>>>>>>>>>    // Gets or sets export to Word for first page number.
83483>>>>>>>>>    Procedure Set ComWORDWFirstPageNumber Integer value
83485>>>>>>>>>        Handle hDispatchDriver
83485>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83486>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83487>>>>>>>>>        Set ComProperty of hDispatchDriver 767 OLE_VT_I4 to value
83488>>>>>>>>>    End_Procedure
83489>>>>>>>>>
83489>>>>>>>>>    // Gets or sets export to Word for last page number.
83489>>>>>>>>>    Function ComWORDWLastPageNumber Returns Integer
83491>>>>>>>>>        Handle hDispatchDriver
83491>>>>>>>>>        Integer retVal
83491>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83492>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 768 OLE_VT_I4 to retVal
83493>>>>>>>>>        Function_Return retVal
83494>>>>>>>>>    End_Function
83495>>>>>>>>>
83495>>>>>>>>>    // Gets or sets export to Word for last page number.
83495>>>>>>>>>    Procedure Set ComWORDWLastPageNumber Integer value
83497>>>>>>>>>        Handle hDispatchDriver
83497>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83498>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83499>>>>>>>>>        Set ComProperty of hDispatchDriver 768 OLE_VT_I4 to value
83500>>>>>>>>>    End_Procedure
83501>>>>>>>>>
83501>>>>>>>>>    // Gets or sets use default characters per inch option.
83501>>>>>>>>>    Function ComUseDefaultCharactersPerInch Returns Boolean
83503>>>>>>>>>        Handle hDispatchDriver
83503>>>>>>>>>        Boolean retVal
83503>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83504>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 780 OLE_VT_BOOL to retVal
83505>>>>>>>>>        Function_Return retVal
83506>>>>>>>>>    End_Function
83507>>>>>>>>>
83507>>>>>>>>>    // Gets or sets use default characters per inch option.
83507>>>>>>>>>    Procedure Set ComUseDefaultCharactersPerInch Boolean value
83509>>>>>>>>>        Handle hDispatchDriver
83509>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83510>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83511>>>>>>>>>        Set ComProperty of hDispatchDriver 780 OLE_VT_BOOL to value
83512>>>>>>>>>    End_Procedure
83513>>>>>>>>>
83513>>>>>>>>>    // Gets or sets user defined characters per inch.
83513>>>>>>>>>    Function ComUserDefinedCharactersPerInch Returns Integer
83515>>>>>>>>>        Handle hDispatchDriver
83515>>>>>>>>>        Integer retVal
83515>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83516>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 781 OLE_VT_I4 to retVal
83517>>>>>>>>>        Function_Return retVal
83518>>>>>>>>>    End_Function
83519>>>>>>>>>
83519>>>>>>>>>    // Gets or sets user defined characters per inch.
83519>>>>>>>>>    Procedure Set ComUserDefinedCharactersPerInch Integer value
83521>>>>>>>>>        Handle hDispatchDriver
83521>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83522>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83523>>>>>>>>>        Set ComProperty of hDispatchDriver 781 OLE_VT_I4 to value
83524>>>>>>>>>    End_Procedure
83525>>>>>>>>>
83525>>>>>>>>>    // Gets or sets export to Excel has page break option.
83525>>>>>>>>>    Procedure Set ComExcelPageBreaks Boolean value
83527>>>>>>>>>        Handle hDispatchDriver
83527>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83528>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83529>>>>>>>>>        Set ComProperty of hDispatchDriver 769 OLE_VT_BOOL to value
83530>>>>>>>>>    End_Procedure
83531>>>>>>>>>
83531>>>>>>>>>    // Gets or sets export to Excel has page break option.
83531>>>>>>>>>    Function ComExcelPageBreaks Returns Boolean
83533>>>>>>>>>        Handle hDispatchDriver
83533>>>>>>>>>        Boolean retVal
83533>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83534>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 769 OLE_VT_BOOL to retVal
83535>>>>>>>>>        Function_Return retVal
83536>>>>>>>>>    End_Function
83537>>>>>>>>>
83537>>>>>>>>>    // Gets or sets export to Excel has converting date values to strings option.
83537>>>>>>>>>    Procedure Set ComExcelConvertDateToString Boolean value
83539>>>>>>>>>        Handle hDispatchDriver
83539>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83540>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83541>>>>>>>>>        Set ComProperty of hDispatchDriver 770 OLE_VT_BOOL to value
83542>>>>>>>>>    End_Procedure
83543>>>>>>>>>
83543>>>>>>>>>    // Gets or sets export to Excel has converting date values to strings option.
83543>>>>>>>>>    Function ComExcelConvertDateToString Returns Boolean
83545>>>>>>>>>        Handle hDispatchDriver
83545>>>>>>>>>        Boolean retVal
83545>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83546>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 770 OLE_VT_BOOL to retVal
83547>>>>>>>>>        Function_Return retVal
83548>>>>>>>>>    End_Function
83549>>>>>>>>>
83549>>>>>>>>>    // Gets or sets export to Excel with all pages.
83549>>>>>>>>>    Function ComExcelExportAllPages Returns Boolean
83551>>>>>>>>>        Handle hDispatchDriver
83551>>>>>>>>>        Boolean retVal
83551>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83552>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 771 OLE_VT_BOOL to retVal
83553>>>>>>>>>        Function_Return retVal
83554>>>>>>>>>    End_Function
83555>>>>>>>>>
83555>>>>>>>>>    // Gets or sets export to Excel with all pages.
83555>>>>>>>>>    Procedure Set ComExcelExportAllPages Boolean value
83557>>>>>>>>>        Handle hDispatchDriver
83557>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83558>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83559>>>>>>>>>        Set ComProperty of hDispatchDriver 771 OLE_VT_BOOL to value
83560>>>>>>>>>    End_Procedure
83561>>>>>>>>>
83561>>>>>>>>>    // Gets or sets export to Excel for first page number.
83561>>>>>>>>>    Function ComExcelFirstPageNumber Returns Integer
83563>>>>>>>>>        Handle hDispatchDriver
83563>>>>>>>>>        Integer retVal
83563>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83564>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 772 OLE_VT_I4 to retVal
83565>>>>>>>>>        Function_Return retVal
83566>>>>>>>>>    End_Function
83567>>>>>>>>>
83567>>>>>>>>>    // Gets or sets export to Excel for first page number.
83567>>>>>>>>>    Procedure Set ComExcelFirstPageNumber Integer value
83569>>>>>>>>>        Handle hDispatchDriver
83569>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83570>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83571>>>>>>>>>        Set ComProperty of hDispatchDriver 772 OLE_VT_I4 to value
83572>>>>>>>>>    End_Procedure
83573>>>>>>>>>
83573>>>>>>>>>    // Gets or sets export to Excel for last page number.
83573>>>>>>>>>    Function ComExcelLastPageNumber Returns Integer
83575>>>>>>>>>        Handle hDispatchDriver
83575>>>>>>>>>        Integer retVal
83575>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83576>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 773 OLE_VT_I4 to retVal
83577>>>>>>>>>        Function_Return retVal
83578>>>>>>>>>    End_Function
83579>>>>>>>>>
83579>>>>>>>>>    // Gets or sets export to Excel for last page number.
83579>>>>>>>>>    Procedure Set ComExcelLastPageNumber Integer value
83581>>>>>>>>>        Handle hDispatchDriver
83581>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83582>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83583>>>>>>>>>        Set ComProperty of hDispatchDriver 773 OLE_VT_I4 to value
83584>>>>>>>>>    End_Procedure
83585>>>>>>>>>
83585>>>>>>>>>    // Gets or sets mail user name.
83585>>>>>>>>>    Function ComMailUserName Returns String
83587>>>>>>>>>        Handle hDispatchDriver
83587>>>>>>>>>        String retVal
83587>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83588>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 774 OLE_VT_BSTR to retVal
83589>>>>>>>>>        Function_Return retVal
83590>>>>>>>>>    End_Function
83591>>>>>>>>>
83591>>>>>>>>>    // Gets or sets mail user name.
83591>>>>>>>>>    Procedure Set ComMailUserName String value
83593>>>>>>>>>        Handle hDispatchDriver
83593>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83594>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83595>>>>>>>>>        Set ComProperty of hDispatchDriver 774 OLE_VT_BSTR to value
83596>>>>>>>>>    End_Procedure
83597>>>>>>>>>
83597>>>>>>>>>    // Gets or sets mail user password.
83597>>>>>>>>>    Function ComMailPassword Returns String
83599>>>>>>>>>        Handle hDispatchDriver
83599>>>>>>>>>        String retVal
83599>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83600>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 775 OLE_VT_BSTR to retVal
83601>>>>>>>>>        Function_Return retVal
83602>>>>>>>>>    End_Function
83603>>>>>>>>>
83603>>>>>>>>>    // Gets or sets mail user password.
83603>>>>>>>>>    Procedure Set ComMailPassword String value
83605>>>>>>>>>        Handle hDispatchDriver
83605>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83606>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83607>>>>>>>>>        Set ComProperty of hDispatchDriver 775 OLE_VT_BSTR to value
83608>>>>>>>>>    End_Procedure
83609>>>>>>>>>
83609>>>>>>>>>    // Gets or sets export to Excel page header and footer options.
83609>>>>>>>>>    Function ComExcelExportPageAreaPair Returns CRExcelExportPageAreaPair
83611>>>>>>>>>        Handle hDispatchDriver
83611>>>>>>>>>        CRExcelExportPageAreaPair retVal
83611>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83612>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 792 OLE_VT_I4 to retVal
83613>>>>>>>>>        Function_Return retVal
83614>>>>>>>>>    End_Function
83615>>>>>>>>>
83615>>>>>>>>>    // Gets or sets export to Excel page header and footer options.
83615>>>>>>>>>    Procedure Set ComExcelExportPageAreaPair CRExcelExportPageAreaPair value
83617>>>>>>>>>        Handle hDispatchDriver
83617>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83618>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83619>>>>>>>>>        Set ComProperty of hDispatchDriver 792 OLE_VT_I4 to value
83620>>>>>>>>>    End_Procedure
83621>>>>>>>>>
83621>>>>>>>>>    // Gets or sets export to Excel maintain relative object position option.
83621>>>>>>>>>    Function ComExcelMaintainRelativeObjectPosition Returns Boolean
83623>>>>>>>>>        Handle hDispatchDriver
83623>>>>>>>>>        Boolean retVal
83623>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83624>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 793 OLE_VT_BOOL to retVal
83625>>>>>>>>>        Function_Return retVal
83626>>>>>>>>>    End_Function
83627>>>>>>>>>
83627>>>>>>>>>    // Gets or sets export to Excel maintain relative object position option.
83627>>>>>>>>>    Procedure Set ComExcelMaintainRelativeObjectPosition Boolean value
83629>>>>>>>>>        Handle hDispatchDriver
83629>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83630>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83631>>>>>>>>>        Set ComProperty of hDispatchDriver 793 OLE_VT_BOOL to value
83632>>>>>>>>>    End_Procedure
83633>>>>>>>>>
83633>>>>>>>>>    // Gets or sets export to Excel show gridlines option.
83633>>>>>>>>>    Function ComExcelShowGridlines Returns Boolean
83635>>>>>>>>>        Handle hDispatchDriver
83635>>>>>>>>>        Boolean retVal
83635>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83636>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 794 OLE_VT_BOOL to retVal
83637>>>>>>>>>        Function_Return retVal
83638>>>>>>>>>    End_Function
83639>>>>>>>>>
83639>>>>>>>>>    // Gets or sets export to Excel show gridlines option.
83639>>>>>>>>>    Procedure Set ComExcelShowGridlines Boolean value
83641>>>>>>>>>        Handle hDispatchDriver
83641>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83642>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83643>>>>>>>>>        Set ComProperty of hDispatchDriver 794 OLE_VT_BOOL to value
83644>>>>>>>>>    End_Procedure
83645>>>>>>>>>
83645>>>>>>>>>    // Gets or sets export to Excel chop page heaader option.
83645>>>>>>>>>    Function ComExcelChopPageHeader Returns Boolean
83647>>>>>>>>>        Handle hDispatchDriver
83647>>>>>>>>>        Boolean retVal
83647>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83648>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 795 OLE_VT_BOOL to retVal
83649>>>>>>>>>        Function_Return retVal
83650>>>>>>>>>    End_Function
83651>>>>>>>>>
83651>>>>>>>>>    // Gets or sets export to Excel chop page heaader option.
83651>>>>>>>>>    Procedure Set ComExcelChopPageHeader Boolean value
83653>>>>>>>>>        Handle hDispatchDriver
83653>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83654>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83655>>>>>>>>>        Set ComProperty of hDispatchDriver 795 OLE_VT_BOOL to value
83656>>>>>>>>>    End_Procedure
83657>>>>>>>>>
83657>>>>>>>>>    // Gets or sets export to Excel including image in data only option.
83657>>>>>>>>>    Function ComExcelExportImagesInDataOnly Returns Boolean
83659>>>>>>>>>        Handle hDispatchDriver
83659>>>>>>>>>        Boolean retVal
83659>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83660>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 796 OLE_VT_BOOL to retVal
83661>>>>>>>>>        Function_Return retVal
83662>>>>>>>>>    End_Function
83663>>>>>>>>>
83663>>>>>>>>>    // Gets or sets export to Excel including image in data only option.
83663>>>>>>>>>    Procedure Set ComExcelExportImagesInDataOnly Boolean value
83665>>>>>>>>>        Handle hDispatchDriver
83665>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83666>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83667>>>>>>>>>        Set ComProperty of hDispatchDriver 796 OLE_VT_BOOL to value
83668>>>>>>>>>    End_Procedure
83669>>>>>>>>>
83669>>>>>>>>>    // Gets or sets export to Excel including object formats and fonts in data only option.
83669>>>>>>>>>    Function ComExcelUseFormatInDataOnly Returns Boolean
83671>>>>>>>>>        Handle hDispatchDriver
83671>>>>>>>>>        Boolean retVal
83671>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83672>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 797 OLE_VT_BOOL to retVal
83673>>>>>>>>>        Function_Return retVal
83674>>>>>>>>>    End_Function
83675>>>>>>>>>
83675>>>>>>>>>    // Gets or sets export to Excel including object formats and fonts in data only option.
83675>>>>>>>>>    Procedure Set ComExcelUseFormatInDataOnly Boolean value
83677>>>>>>>>>        Handle hDispatchDriver
83677>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83678>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83679>>>>>>>>>        Set ComProperty of hDispatchDriver 797 OLE_VT_BOOL to value
83680>>>>>>>>>    End_Procedure
83681>>>>>>>>>
83681>>>>>>>>>    // Gets or sets export to Excel column alignment option.
83681>>>>>>>>>    Function ComExcelMaintainColumnAlignment Returns Boolean
83683>>>>>>>>>        Handle hDispatchDriver
83683>>>>>>>>>        Boolean retVal
83683>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83684>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 798 OLE_VT_BOOL to retVal
83685>>>>>>>>>        Function_Return retVal
83686>>>>>>>>>    End_Function
83687>>>>>>>>>
83687>>>>>>>>>    // Gets or sets export to Excel column alignment option.
83687>>>>>>>>>    Procedure Set ComExcelMaintainColumnAlignment Boolean value
83689>>>>>>>>>        Handle hDispatchDriver
83689>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83690>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83691>>>>>>>>>        Set ComProperty of hDispatchDriver 798 OLE_VT_BOOL to value
83692>>>>>>>>>    End_Procedure
83693>>>>>>>>>
83693>>>>>>>>>    // Gets or sets insert page break option.
83693>>>>>>>>>    Procedure Set ComExportPageBreaks Boolean value
83695>>>>>>>>>        Handle hDispatchDriver
83695>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83696>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83697>>>>>>>>>        Set ComProperty of hDispatchDriver 801 OLE_VT_BOOL to value
83698>>>>>>>>>    End_Procedure
83699>>>>>>>>>
83699>>>>>>>>>    // Gets or sets insert page break option.
83699>>>>>>>>>    Function ComExportPageBreaks Returns Boolean
83701>>>>>>>>>        Handle hDispatchDriver
83701>>>>>>>>>        Boolean retVal
83701>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83702>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 801 OLE_VT_BOOL to retVal
83703>>>>>>>>>        Function_Return retVal
83704>>>>>>>>>    End_Function
83705>>>>>>>>>End_Class
83706>>>>>>>>>
83706>>>>>>>>>// CoClass
83706>>>>>>>>>// CLSID: {16DA22EB-6AD1-4511-933D-9E7F866AC93B}
83706>>>>>>>>>Class cCrystalExportOptions is a cComAutomationObject
83707>>>>>>>>>    Import_Class_Protocol cCrystalIExportOptions
83708>>>>>>>>>
83708>>>>>>>>>    Procedure Construct_Object
83710>>>>>>>>>        Forward Send Construct_Object
83712>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
83713>>>>>>>>>    End_Procedure
83714>>>>>>>>>End_Class
83715>>>>>>>>>
83715>>>>>>>>>// CLSID: {AF376830-6120-4E28-96DD-63FD2DC27B7A}
83715>>>>>>>>>Class cCrystalIApplication is a Mixin
83716>>>>>>>>>
83716>>>>>>>>>    // Opens a specified report.
83716>>>>>>>>>    Function ComOpenReport String llpFileName Variant llOpenMethod Returns Variant
83718>>>>>>>>>        Handle hDispatchDriver
83718>>>>>>>>>        Variant retVal
83718>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83719>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
83720>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpFileName
83721>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llOpenMethod
83722>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 288 OLE_VT_DISPATCH to retVal
83723>>>>>>>>>        Function_Return retVal
83724>>>>>>>>>    End_Function
83725>>>>>>>>>
83725>>>>>>>>>    // Returns whether it is safe to quit the application.
83725>>>>>>>>>    Function ComCanClose Returns Boolean
83727>>>>>>>>>        Handle hDispatchDriver
83727>>>>>>>>>        Boolean retVal
83727>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83728>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 305 OLE_VT_BOOL to retVal
83729>>>>>>>>>        Function_Return retVal
83730>>>>>>>>>    End_Function
83731>>>>>>>>>
83731>>>>>>>>>    // Log on server.
83731>>>>>>>>>    Procedure ComLogOnServer String llpDllName String llpServerName Variant llpDatabaseName Variant llpUserID Variant llpPassword
83733>>>>>>>>>        Handle hDispatchDriver
83733>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83734>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
83735>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpDllName
83736>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpServerName
83737>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpDatabaseName
83738>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpUserID
83739>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpPassword
83740>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 228 OLE_VT_VOID
83741>>>>>>>>>    End_Procedure
83742>>>>>>>>>
83742>>>>>>>>>    // Log off server.
83742>>>>>>>>>    Procedure ComLogOffServer String llpDllName String llpServerName Variant llpDatabaseName Variant llpUserID Variant llpPassword
83744>>>>>>>>>        Handle hDispatchDriver
83744>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83745>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
83746>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpDllName
83747>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpServerName
83748>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpDatabaseName
83749>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpUserID
83750>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpPassword
83751>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 229 OLE_VT_VOID
83752>>>>>>>>>    End_Procedure
83753>>>>>>>>>
83753>>>>>>>>>    // Sets global match log on info option.
83753>>>>>>>>>    Procedure ComSetMatchLogOnInfo Boolean llbl
83755>>>>>>>>>        Handle hDispatchDriver
83755>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83756>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83757>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llbl
83758>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 345 OLE_VT_VOID
83759>>>>>>>>>    End_Procedure
83760>>>>>>>>>
83760>>>>>>>>>    // Creates an empty report.
83760>>>>>>>>>    Function ComNewReport Returns Variant
83762>>>>>>>>>        Handle hDispatchDriver
83762>>>>>>>>>        Variant retVal
83762>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83763>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 461 OLE_VT_DISPATCH to retVal
83764>>>>>>>>>        Function_Return retVal
83765>>>>>>>>>    End_Function
83766>>>>>>>>>
83766>>>>>>>>>    // Gets version number.
83766>>>>>>>>>    Function ComGetVersion Returns Short
83768>>>>>>>>>        Handle hDispatchDriver
83768>>>>>>>>>        Short retVal
83768>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83769>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 470 OLE_VT_I2 to retVal
83770>>>>>>>>>        Function_Return retVal
83771>>>>>>>>>    End_Function
83772>>>>>>>>>
83772>>>>>>>>>    // Log on server with server type or connect info.
83772>>>>>>>>>    Procedure ComLogOnServerEx String llpDllName String llpServerName Variant llpDatabaseName Variant llpUserID Variant llpPassword Variant llpServerType Variant llpConnectionString
83774>>>>>>>>>        Handle hDispatchDriver
83774>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83775>>>>>>>>>        Send PrepareParams to hDispatchDriver 7
83776>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpDllName
83777>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llpServerName
83778>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpDatabaseName
83779>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpUserID
83780>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpPassword
83781>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpServerType
83782>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llpConnectionString
83783>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 545 OLE_VT_VOID
83784>>>>>>>>>    End_Procedure
83785>>>>>>>>>
83785>>>>>>>>>    // Creates a report with the Report Wizard.
83785>>>>>>>>>    Procedure ComRunReportWizard Variant llpReport Variant lldataSource
83787>>>>>>>>>        Handle hDispatchDriver
83787>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83788>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
83789>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpReport
83790>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lldataSource
83791>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 900 OLE_VT_VOID
83792>>>>>>>>>    End_Procedure
83793>>>>>>>>>End_Class
83794>>>>>>>>>
83794>>>>>>>>>// CoClass
83794>>>>>>>>>// ProgID: CrystalDesignRunTime.Application.11
83794>>>>>>>>>// CLSID: {6BFF10C6-C3F9-4EF9-A316-F37C85D5117B}
83794>>>>>>>>>Class cCrystalApplication is a cComAutomationObject
83795>>>>>>>>>    Import_Class_Protocol cCrystalIApplication
83796>>>>>>>>>
83796>>>>>>>>>    Procedure Construct_Object
83798>>>>>>>>>        Forward Send Construct_Object
83800>>>>>>>>>        Set psProgID to "CrystalDesignRunTime.Application"
83801>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
83802>>>>>>>>>    End_Procedure
83803>>>>>>>>>End_Class
83804>>>>>>>>>
83804>>>>>>>>>// CLSID: {AF37684C-6120-4E28-96DD-63FD2DC27B7A}
83804>>>>>>>>>Class cCrystalIFormattingInfo is a Mixin
83805>>>>>>>>>
83805>>>>>>>>>    // Indicates the current formatting section is repeated group header.
83805>>>>>>>>>    Function ComIsRepeatedGroupHeader Returns Boolean
83807>>>>>>>>>        Handle hDispatchDriver
83807>>>>>>>>>        Boolean retVal
83807>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83808>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 321 OLE_VT_BOOL to retVal
83809>>>>>>>>>        Function_Return retVal
83810>>>>>>>>>    End_Function
83811>>>>>>>>>
83811>>>>>>>>>    // Indicates the current formatting section is start of a group.
83811>>>>>>>>>    Function ComIsStartOfGroup Returns Boolean
83813>>>>>>>>>        Handle hDispatchDriver
83813>>>>>>>>>        Boolean retVal
83813>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83814>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 294 OLE_VT_BOOL to retVal
83815>>>>>>>>>        Function_Return retVal
83816>>>>>>>>>    End_Function
83817>>>>>>>>>
83817>>>>>>>>>    // Indicates the current formatting section is end of a group.
83817>>>>>>>>>    Function ComIsEndOfGroup Returns Boolean
83819>>>>>>>>>        Handle hDispatchDriver
83819>>>>>>>>>        Boolean retVal
83819>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83820>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 295 OLE_VT_BOOL to retVal
83821>>>>>>>>>        Function_Return retVal
83822>>>>>>>>>    End_Function
83823>>>>>>>>>End_Class
83824>>>>>>>>>
83824>>>>>>>>>// CoClass
83824>>>>>>>>>// CLSID: {56D67FE1-F2F3-4A2A-85CC-D8A9A42F8CE7}
83824>>>>>>>>>Class cCrystalFormattingInfo is a cComAutomationObject
83825>>>>>>>>>    Import_Class_Protocol cCrystalIFormattingInfo
83826>>>>>>>>>
83826>>>>>>>>>    Procedure Construct_Object
83828>>>>>>>>>        Forward Send Construct_Object
83830>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
83831>>>>>>>>>    End_Procedure
83832>>>>>>>>>End_Class
83833>>>>>>>>>
83833>>>>>>>>>// CLSID: {AF376831-6120-4E28-96DD-63FD2DC27B7A}
83833>>>>>>>>>Class cCrystalISortFields is a Mixin
83834>>>>>>>>>
83834>>>>>>>>>    Function Com_NewEnum Returns Variant
83836>>>>>>>>>        Handle hDispatchDriver
83836>>>>>>>>>        Variant retVal
83836>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83837>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
83838>>>>>>>>>        Function_Return retVal
83839>>>>>>>>>    End_Function
83840>>>>>>>>>
83840>>>>>>>>>    // Gets collection item.
83840>>>>>>>>>    Function ComItem Integer llindex Returns Variant
83842>>>>>>>>>        Handle hDispatchDriver
83842>>>>>>>>>        Variant retVal
83842>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83843>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83844>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
83845>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
83846>>>>>>>>>        Function_Return retVal
83847>>>>>>>>>    End_Function
83848>>>>>>>>>
83848>>>>>>>>>    // Gets collection count.
83848>>>>>>>>>    Function ComCount Returns Integer
83850>>>>>>>>>        Handle hDispatchDriver
83850>>>>>>>>>        Integer retVal
83850>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83851>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
83852>>>>>>>>>        Function_Return retVal
83853>>>>>>>>>    End_Function
83854>>>>>>>>>
83854>>>>>>>>>    // Gets sort field collection's parent (Report).
83854>>>>>>>>>    Function ComParent Returns Variant
83856>>>>>>>>>        Handle hDispatchDriver
83856>>>>>>>>>        Variant retVal
83856>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83857>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
83858>>>>>>>>>        Function_Return retVal
83859>>>>>>>>>    End_Function
83860>>>>>>>>>
83860>>>>>>>>>    // Adds a sort field
83860>>>>>>>>>    Procedure ComAdd Variant llpFieldDefinition CRSortDirection llSortDirection
83862>>>>>>>>>        Handle hDispatchDriver
83862>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83863>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
83864>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpFieldDefinition
83865>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llSortDirection
83866>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 230 OLE_VT_VOID
83867>>>>>>>>>    End_Procedure
83868>>>>>>>>>
83868>>>>>>>>>    // Deletes a sort field
83868>>>>>>>>>    Procedure ComDelete Integer llindex
83870>>>>>>>>>        Handle hDispatchDriver
83870>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83871>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83872>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
83873>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
83874>>>>>>>>>    End_Procedure
83875>>>>>>>>>End_Class
83876>>>>>>>>>
83876>>>>>>>>>// CoClass
83876>>>>>>>>>// CLSID: {63885AAC-B6F4-4E77-89C1-D20702781AF7}
83876>>>>>>>>>Class cCrystalSortFields is a cComAutomationObject
83877>>>>>>>>>    Import_Class_Protocol cCrystalISortFields
83878>>>>>>>>>
83878>>>>>>>>>    Procedure Construct_Object
83880>>>>>>>>>        Forward Send Construct_Object
83882>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
83883>>>>>>>>>    End_Procedure
83884>>>>>>>>>End_Class
83885>>>>>>>>>
83885>>>>>>>>>// CLSID: {AF376832-6120-4E28-96DD-63FD2DC27B7A}
83885>>>>>>>>>Class cCrystalISortField is a Mixin
83886>>>>>>>>>
83886>>>>>>>>>    // Gets sort field's parent (Report)
83886>>>>>>>>>    Function ComParent Returns Variant
83888>>>>>>>>>        Handle hDispatchDriver
83888>>>>>>>>>        Variant retVal
83888>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83889>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
83890>>>>>>>>>        Function_Return retVal
83891>>>>>>>>>    End_Function
83892>>>>>>>>>
83892>>>>>>>>>    // Gets or sets sort direction.
83892>>>>>>>>>    Function ComSortDirection Returns CRSortDirection
83894>>>>>>>>>        Handle hDispatchDriver
83894>>>>>>>>>        CRSortDirection retVal
83894>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83895>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 222 OLE_VT_I4 to retVal
83896>>>>>>>>>        Function_Return retVal
83897>>>>>>>>>    End_Function
83898>>>>>>>>>
83898>>>>>>>>>    // Gets or sets sort direction.
83898>>>>>>>>>    Procedure Set ComSortDirection CRSortDirection value
83900>>>>>>>>>        Handle hDispatchDriver
83900>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83901>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83902>>>>>>>>>        Set ComProperty of hDispatchDriver 222 OLE_VT_I4 to value
83903>>>>>>>>>    End_Procedure
83904>>>>>>>>>
83904>>>>>>>>>    // Gets or sets sorting field.
83904>>>>>>>>>    Function ComField Returns Variant
83906>>>>>>>>>        Handle hDispatchDriver
83906>>>>>>>>>        Variant retVal
83906>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83907>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 119 OLE_VT_DISPATCH to retVal
83908>>>>>>>>>        Function_Return retVal
83909>>>>>>>>>    End_Function
83910>>>>>>>>>
83910>>>>>>>>>    // Gets or sets sorting field.
83910>>>>>>>>>    Procedure Set ComField Variant value
83912>>>>>>>>>        Handle hDispatchDriver
83912>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83913>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
83914>>>>>>>>>        Set ComProperty of hDispatchDriver 119 OLE_VT_DISPATCH to value
83915>>>>>>>>>    End_Procedure
83916>>>>>>>>>End_Class
83917>>>>>>>>>
83917>>>>>>>>>// CoClass
83917>>>>>>>>>// CLSID: {CC54C52C-CFFB-4E97-B177-A3AD343BC520}
83917>>>>>>>>>Class cCrystalSortField is a cComAutomationObject
83918>>>>>>>>>    Import_Class_Protocol cCrystalISortField
83919>>>>>>>>>
83919>>>>>>>>>    Procedure Construct_Object
83921>>>>>>>>>        Forward Send Construct_Object
83923>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
83924>>>>>>>>>    End_Procedure
83925>>>>>>>>>End_Class
83926>>>>>>>>>
83926>>>>>>>>>// CLSID: {AF376833-6120-4E28-96DD-63FD2DC27B7A}
83926>>>>>>>>>Class cCrystalIPrintingStatus is a Mixin
83927>>>>>>>>>
83927>>>>>>>>>    // Gets printing status's parent (Report)
83927>>>>>>>>>    Function ComParent Returns Variant
83929>>>>>>>>>        Handle hDispatchDriver
83929>>>>>>>>>        Variant retVal
83929>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83930>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
83931>>>>>>>>>        Function_Return retVal
83932>>>>>>>>>    End_Function
83933>>>>>>>>>
83933>>>>>>>>>    // Gets the number of record read.
83933>>>>>>>>>    Function ComNumberOfRecordRead Returns Integer
83935>>>>>>>>>        Handle hDispatchDriver
83935>>>>>>>>>        Integer retVal
83935>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83936>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 327 OLE_VT_I4 to retVal
83937>>>>>>>>>        Function_Return retVal
83938>>>>>>>>>    End_Function
83939>>>>>>>>>
83939>>>>>>>>>    // Gets the number of record selected.
83939>>>>>>>>>    Function ComNumberOfRecordSelected Returns Integer
83941>>>>>>>>>        Handle hDispatchDriver
83941>>>>>>>>>        Integer retVal
83941>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83942>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 328 OLE_VT_I4 to retVal
83943>>>>>>>>>        Function_Return retVal
83944>>>>>>>>>    End_Function
83945>>>>>>>>>
83945>>>>>>>>>    // Gets the number of record printed.
83945>>>>>>>>>    Function ComNumberOfRecordPrinted Returns Integer
83947>>>>>>>>>        Handle hDispatchDriver
83947>>>>>>>>>        Integer retVal
83947>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83948>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 329 OLE_VT_I4 to retVal
83949>>>>>>>>>        Function_Return retVal
83950>>>>>>>>>    End_Function
83951>>>>>>>>>
83951>>>>>>>>>    // Gets the printing progress.
83951>>>>>>>>>    Function ComProgress Returns CRPrintingProgress
83953>>>>>>>>>        Handle hDispatchDriver
83953>>>>>>>>>        CRPrintingProgress retVal
83953>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83954>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 330 OLE_VT_I4 to retVal
83955>>>>>>>>>        Function_Return retVal
83956>>>>>>>>>    End_Function
83957>>>>>>>>>
83957>>>>>>>>>    // Gets total number of pages in the report.
83957>>>>>>>>>    Function ComNumberOfPages Returns Integer
83959>>>>>>>>>        Handle hDispatchDriver
83959>>>>>>>>>        Integer retVal
83959>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83960>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 398 OLE_VT_I4 to retVal
83961>>>>>>>>>        Function_Return retVal
83962>>>>>>>>>    End_Function
83963>>>>>>>>>End_Class
83964>>>>>>>>>
83964>>>>>>>>>// CoClass
83964>>>>>>>>>// CLSID: {44EEB838-80E2-43E6-9B1E-53B1E82528A3}
83964>>>>>>>>>Class cCrystalPrintingStatus is a cComAutomationObject
83965>>>>>>>>>    Import_Class_Protocol cCrystalIPrintingStatus
83966>>>>>>>>>
83966>>>>>>>>>    Procedure Construct_Object
83968>>>>>>>>>        Forward Send Construct_Object
83970>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
83971>>>>>>>>>    End_Procedure
83972>>>>>>>>>End_Class
83973>>>>>>>>>
83973>>>>>>>>>// CLSID: {AF37684D-6120-4E28-96DD-63FD2DC27B7A}
83973>>>>>>>>>Class cCrystalISubreportLink is a Mixin
83974>>>>>>>>>
83974>>>>>>>>>    // Gets subreport link's parent (Report)
83974>>>>>>>>>    Function ComParent Returns Variant
83976>>>>>>>>>        Handle hDispatchDriver
83976>>>>>>>>>        Variant retVal
83976>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83977>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
83978>>>>>>>>>        Function_Return retVal
83979>>>>>>>>>    End_Function
83980>>>>>>>>>
83980>>>>>>>>>    // Gets main report field.
83980>>>>>>>>>    Function ComMainReportField Returns Variant
83982>>>>>>>>>        Handle hDispatchDriver
83982>>>>>>>>>        Variant retVal
83982>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83983>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 564 OLE_VT_DISPATCH to retVal
83984>>>>>>>>>        Function_Return retVal
83985>>>>>>>>>    End_Function
83986>>>>>>>>>
83986>>>>>>>>>    // Gets subreport field.
83986>>>>>>>>>    Function ComSubreportField Returns Variant
83988>>>>>>>>>        Handle hDispatchDriver
83988>>>>>>>>>        Variant retVal
83988>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
83989>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 565 OLE_VT_DISPATCH to retVal
83990>>>>>>>>>        Function_Return retVal
83991>>>>>>>>>    End_Function
83992>>>>>>>>>End_Class
83993>>>>>>>>>
83993>>>>>>>>>// CoClass
83993>>>>>>>>>// CLSID: {D6B2083E-D6A6-4DC5-AA61-1E2C356F7A9C}
83993>>>>>>>>>Class cCrystalSubreportLink is a cComAutomationObject
83994>>>>>>>>>    Import_Class_Protocol cCrystalISubreportLink
83995>>>>>>>>>
83995>>>>>>>>>    Procedure Construct_Object
83997>>>>>>>>>        Forward Send Construct_Object
83999>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84000>>>>>>>>>    End_Procedure
84001>>>>>>>>>End_Class
84002>>>>>>>>>
84002>>>>>>>>>// CLSID: {AF37684E-6120-4E28-96DD-63FD2DC27B7A}
84002>>>>>>>>>Class cCrystalISubreportLinks is a Mixin
84003>>>>>>>>>
84003>>>>>>>>>    Function Com_NewEnum Returns Variant
84005>>>>>>>>>        Handle hDispatchDriver
84005>>>>>>>>>        Variant retVal
84005>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84006>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
84007>>>>>>>>>        Function_Return retVal
84008>>>>>>>>>    End_Function
84009>>>>>>>>>
84009>>>>>>>>>    // Gets collection item.
84009>>>>>>>>>    Function ComItem Integer llindex Returns Variant
84011>>>>>>>>>        Handle hDispatchDriver
84011>>>>>>>>>        Variant retVal
84011>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84012>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84013>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
84014>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
84015>>>>>>>>>        Function_Return retVal
84016>>>>>>>>>    End_Function
84017>>>>>>>>>
84017>>>>>>>>>    // Gets collection count.
84017>>>>>>>>>    Function ComCount Returns Integer
84019>>>>>>>>>        Handle hDispatchDriver
84019>>>>>>>>>        Integer retVal
84019>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84020>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
84021>>>>>>>>>        Function_Return retVal
84022>>>>>>>>>    End_Function
84023>>>>>>>>>
84023>>>>>>>>>    // Gets subreport link's parent (Report).
84023>>>>>>>>>    Function ComParent Returns Variant
84025>>>>>>>>>        Handle hDispatchDriver
84025>>>>>>>>>        Variant retVal
84025>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84026>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
84027>>>>>>>>>        Function_Return retVal
84028>>>>>>>>>    End_Function
84029>>>>>>>>>
84029>>>>>>>>>    // Adds a subreport link
84029>>>>>>>>>    Function ComAdd Variant llMainReportField Variant llSubreportField Returns Variant
84031>>>>>>>>>        Handle hDispatchDriver
84031>>>>>>>>>        Variant retVal
84031>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84032>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
84033>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llMainReportField
84034>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llSubreportField
84035>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 230 OLE_VT_DISPATCH to retVal
84036>>>>>>>>>        Function_Return retVal
84037>>>>>>>>>    End_Function
84038>>>>>>>>>
84038>>>>>>>>>    // Deletes a subreport link
84038>>>>>>>>>    Procedure ComDelete Integer llindex
84040>>>>>>>>>        Handle hDispatchDriver
84040>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84041>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84042>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
84043>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
84044>>>>>>>>>    End_Procedure
84045>>>>>>>>>End_Class
84046>>>>>>>>>
84046>>>>>>>>>// CoClass
84046>>>>>>>>>// CLSID: {1696C1B1-133F-47EF-9887-26F36E3299D1}
84046>>>>>>>>>Class cCrystalSubreportLinks is a cComAutomationObject
84047>>>>>>>>>    Import_Class_Protocol cCrystalISubreportLinks
84048>>>>>>>>>
84048>>>>>>>>>    Procedure Construct_Object
84050>>>>>>>>>        Forward Send Construct_Object
84052>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84053>>>>>>>>>    End_Procedure
84054>>>>>>>>>End_Class
84055>>>>>>>>>
84055>>>>>>>>>// CLSID: {AF37684F-6120-4E28-96DD-63FD2DC27B7A}
84055>>>>>>>>>Class cCrystalICrossTabGroups is a Mixin
84056>>>>>>>>>
84056>>>>>>>>>    Function Com_NewEnum Returns Variant
84058>>>>>>>>>        Handle hDispatchDriver
84058>>>>>>>>>        Variant retVal
84058>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84059>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
84060>>>>>>>>>        Function_Return retVal
84061>>>>>>>>>    End_Function
84062>>>>>>>>>
84062>>>>>>>>>    // Gets crosstab groups' parent (crosstab object).
84062>>>>>>>>>    Function ComParent Returns Variant
84064>>>>>>>>>        Handle hDispatchDriver
84064>>>>>>>>>        Variant retVal
84064>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84065>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
84066>>>>>>>>>        Function_Return retVal
84067>>>>>>>>>    End_Function
84068>>>>>>>>>
84068>>>>>>>>>    // Gets crosstab groups count.
84068>>>>>>>>>    Function ComCount Returns Integer
84070>>>>>>>>>        Handle hDispatchDriver
84070>>>>>>>>>        Integer retVal
84070>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84071>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
84072>>>>>>>>>        Function_Return retVal
84073>>>>>>>>>    End_Function
84074>>>>>>>>>
84074>>>>>>>>>    // Gets crosstab groups item.
84074>>>>>>>>>    Function ComItem Integer llindex Returns Variant
84076>>>>>>>>>        Handle hDispatchDriver
84076>>>>>>>>>        Variant retVal
84076>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84077>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84078>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
84079>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
84080>>>>>>>>>        Function_Return retVal
84081>>>>>>>>>    End_Function
84082>>>>>>>>>
84082>>>>>>>>>    // Adds a crosstab group
84082>>>>>>>>>    Function ComAdd Variant llField Returns Variant
84084>>>>>>>>>        Handle hDispatchDriver
84084>>>>>>>>>        Variant retVal
84084>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84085>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84086>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llField
84087>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 230 OLE_VT_DISPATCH to retVal
84088>>>>>>>>>        Function_Return retVal
84089>>>>>>>>>    End_Function
84090>>>>>>>>>
84090>>>>>>>>>    // Deletes a crosstab group
84090>>>>>>>>>    Procedure ComDelete Integer llindex
84092>>>>>>>>>        Handle hDispatchDriver
84092>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84093>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84094>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
84095>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
84096>>>>>>>>>    End_Procedure
84097>>>>>>>>>End_Class
84098>>>>>>>>>
84098>>>>>>>>>// CoClass
84098>>>>>>>>>// CLSID: {108EC4B4-8CAA-4EE5-921E-0E338CF589B2}
84098>>>>>>>>>Class cCrystalCrossTabGroups is a cComAutomationObject
84099>>>>>>>>>    Import_Class_Protocol cCrystalICrossTabGroups
84100>>>>>>>>>
84100>>>>>>>>>    Procedure Construct_Object
84102>>>>>>>>>        Forward Send Construct_Object
84104>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84105>>>>>>>>>    End_Procedure
84106>>>>>>>>>End_Class
84107>>>>>>>>>
84107>>>>>>>>>// CLSID: {AF376850-6120-4E28-96DD-63FD2DC27B7A}
84107>>>>>>>>>Class cCrystalICrossTabGroup is a Mixin
84108>>>>>>>>>
84108>>>>>>>>>    // Gets crosstab group's parent.
84108>>>>>>>>>    Function ComParent Returns Variant
84110>>>>>>>>>        Handle hDispatchDriver
84110>>>>>>>>>        Variant retVal
84110>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84111>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 571 OLE_VT_DISPATCH to retVal
84112>>>>>>>>>        Function_Return retVal
84113>>>>>>>>>    End_Function
84114>>>>>>>>>
84114>>>>>>>>>    // Gets or sets crosstab group's field.
84114>>>>>>>>>    Function ComField Returns Variant
84116>>>>>>>>>        Handle hDispatchDriver
84116>>>>>>>>>        Variant retVal
84116>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84117>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 572 OLE_VT_DISPATCH to retVal
84118>>>>>>>>>        Function_Return retVal
84119>>>>>>>>>    End_Function
84120>>>>>>>>>
84120>>>>>>>>>    // Gets or sets crosstab group's field.
84120>>>>>>>>>    Procedure Set ComField Variant value
84122>>>>>>>>>        Handle hDispatchDriver
84122>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84123>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84124>>>>>>>>>        Set ComProperty of hDispatchDriver 572 OLE_VT_VARIANT to value
84125>>>>>>>>>    End_Procedure
84126>>>>>>>>>
84126>>>>>>>>>    // Gets or sets crosstab group's condition.
84126>>>>>>>>>    Function ComCondition Returns CRGroupCondition
84128>>>>>>>>>        Handle hDispatchDriver
84128>>>>>>>>>        CRGroupCondition retVal
84128>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84129>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 573 OLE_VT_I4 to retVal
84130>>>>>>>>>        Function_Return retVal
84131>>>>>>>>>    End_Function
84132>>>>>>>>>
84132>>>>>>>>>    // Gets or sets crosstab group's condition.
84132>>>>>>>>>    Procedure Set ComCondition CRGroupCondition value
84134>>>>>>>>>        Handle hDispatchDriver
84134>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84135>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84136>>>>>>>>>        Set ComProperty of hDispatchDriver 573 OLE_VT_I4 to value
84137>>>>>>>>>    End_Procedure
84138>>>>>>>>>
84138>>>>>>>>>    // Gets or sets crosstab group's sort direction.
84138>>>>>>>>>    Function ComSortDirection Returns CRSortDirection
84140>>>>>>>>>        Handle hDispatchDriver
84140>>>>>>>>>        CRSortDirection retVal
84140>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84141>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 574 OLE_VT_I4 to retVal
84142>>>>>>>>>        Function_Return retVal
84143>>>>>>>>>    End_Function
84144>>>>>>>>>
84144>>>>>>>>>    // Gets or sets crosstab group's sort direction.
84144>>>>>>>>>    Procedure Set ComSortDirection CRSortDirection value
84146>>>>>>>>>        Handle hDispatchDriver
84146>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84147>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84148>>>>>>>>>        Set ComProperty of hDispatchDriver 574 OLE_VT_I4 to value
84149>>>>>>>>>    End_Procedure
84150>>>>>>>>>
84150>>>>>>>>>    // Gets or sets crosstab group's back color.
84150>>>>>>>>>    Function ComBackColor Returns OLE_COLOR
84152>>>>>>>>>        Handle hDispatchDriver
84152>>>>>>>>>        OLE_COLOR retVal
84152>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84153>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 575 OLE_VT_I4 to retVal
84154>>>>>>>>>        Function_Return retVal
84155>>>>>>>>>    End_Function
84156>>>>>>>>>
84156>>>>>>>>>    // Gets or sets crosstab group's back color.
84156>>>>>>>>>    Procedure Set ComBackColor OLE_COLOR value
84158>>>>>>>>>        Handle hDispatchDriver
84158>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84159>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84160>>>>>>>>>        Set ComProperty of hDispatchDriver 575 OLE_VT_I4 to value
84161>>>>>>>>>    End_Procedure
84162>>>>>>>>>
84162>>>>>>>>>    // Gets or sets crosstab group's enable suppress subtotal.
84162>>>>>>>>>    Function ComEnableSuppressSubtotal Returns Boolean
84164>>>>>>>>>        Handle hDispatchDriver
84164>>>>>>>>>        Boolean retVal
84164>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84165>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 576 OLE_VT_BOOL to retVal
84166>>>>>>>>>        Function_Return retVal
84167>>>>>>>>>    End_Function
84168>>>>>>>>>
84168>>>>>>>>>    // Gets or sets crosstab group's enable suppress subtotal.
84168>>>>>>>>>    Procedure Set ComEnableSuppressSubtotal Boolean value
84170>>>>>>>>>        Handle hDispatchDriver
84170>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84171>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84172>>>>>>>>>        Set ComProperty of hDispatchDriver 576 OLE_VT_BOOL to value
84173>>>>>>>>>    End_Procedure
84174>>>>>>>>>
84174>>>>>>>>>    // Gets or sets crosstab group's enable suppress label.
84174>>>>>>>>>    Function ComEnableSuppressLabel Returns Boolean
84176>>>>>>>>>        Handle hDispatchDriver
84176>>>>>>>>>        Boolean retVal
84176>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84177>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 577 OLE_VT_BOOL to retVal
84178>>>>>>>>>        Function_Return retVal
84179>>>>>>>>>    End_Function
84180>>>>>>>>>
84180>>>>>>>>>    // Gets or sets crosstab group's enable suppress label.
84180>>>>>>>>>    Procedure Set ComEnableSuppressLabel Boolean value
84182>>>>>>>>>        Handle hDispatchDriver
84182>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84183>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84184>>>>>>>>>        Set ComProperty of hDispatchDriver 577 OLE_VT_BOOL to value
84185>>>>>>>>>    End_Procedure
84186>>>>>>>>>
84186>>>>>>>>>    // Gets or sets the specifed groups from a row or column group in the crosstab
84186>>>>>>>>>    Function ComSpecifiedGroups Returns Variant
84188>>>>>>>>>        Handle hDispatchDriver
84188>>>>>>>>>        Variant retVal
84188>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84189>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 722 OLE_VT_VARIANT to retVal
84190>>>>>>>>>        Function_Return retVal
84191>>>>>>>>>    End_Function
84192>>>>>>>>>
84192>>>>>>>>>    // Gets or sets the specifed groups from a row or column group in the crosstab
84192>>>>>>>>>    Procedure Set ComSpecifiedGroups Variant value
84194>>>>>>>>>        Handle hDispatchDriver
84194>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84195>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84196>>>>>>>>>        Set ComProperty of hDispatchDriver 722 (OLE_VT_BYREF ior OLE_VT_VARIANT) to value
84197>>>>>>>>>    End_Procedure
84198>>>>>>>>>End_Class
84199>>>>>>>>>
84199>>>>>>>>>// CoClass
84199>>>>>>>>>// CLSID: {4299641E-F4ED-4858-9198-61B9311A8F49}
84199>>>>>>>>>Class cCrystalCrossTabGroup is a cComAutomationObject
84200>>>>>>>>>    Import_Class_Protocol cCrystalICrossTabGroup
84201>>>>>>>>>
84201>>>>>>>>>    Procedure Construct_Object
84203>>>>>>>>>        Forward Send Construct_Object
84205>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84206>>>>>>>>>    End_Procedure
84207>>>>>>>>>End_Class
84208>>>>>>>>>
84208>>>>>>>>>// CLSID: {AF376851-6120-4E28-96DD-63FD2DC27B7A}
84208>>>>>>>>>Class cCrystalIFieldDefinitions is a Mixin
84209>>>>>>>>>
84209>>>>>>>>>    Function Com_NewEnum Returns Variant
84211>>>>>>>>>        Handle hDispatchDriver
84211>>>>>>>>>        Variant retVal
84211>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84212>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
84213>>>>>>>>>        Function_Return retVal
84214>>>>>>>>>    End_Function
84215>>>>>>>>>
84215>>>>>>>>>    // Gets collection item.
84215>>>>>>>>>    Function ComItem Integer llindex Returns Variant
84217>>>>>>>>>        Handle hDispatchDriver
84217>>>>>>>>>        Variant retVal
84217>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84218>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84219>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
84220>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
84221>>>>>>>>>        Function_Return retVal
84222>>>>>>>>>    End_Function
84223>>>>>>>>>
84223>>>>>>>>>    // Gets collection count.
84223>>>>>>>>>    Function ComCount Returns Integer
84225>>>>>>>>>        Handle hDispatchDriver
84225>>>>>>>>>        Integer retVal
84225>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84226>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
84227>>>>>>>>>        Function_Return retVal
84228>>>>>>>>>    End_Function
84229>>>>>>>>>
84229>>>>>>>>>    // Gets field collection parent (ReportObject).
84229>>>>>>>>>    Function ComParent Returns Variant
84231>>>>>>>>>        Handle hDispatchDriver
84231>>>>>>>>>        Variant retVal
84231>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84232>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
84233>>>>>>>>>        Function_Return retVal
84234>>>>>>>>>    End_Function
84235>>>>>>>>>
84235>>>>>>>>>    // Adds a field.
84235>>>>>>>>>    Procedure ComAdd Variant llField
84237>>>>>>>>>        Handle hDispatchDriver
84237>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84238>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84239>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llField
84240>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 230 OLE_VT_VOID
84241>>>>>>>>>    End_Procedure
84242>>>>>>>>>
84242>>>>>>>>>    // Delete a field.
84242>>>>>>>>>    Procedure ComDelete Variant llField
84244>>>>>>>>>        Handle hDispatchDriver
84244>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84245>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84246>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llField
84247>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
84248>>>>>>>>>    End_Procedure
84249>>>>>>>>>End_Class
84250>>>>>>>>>
84250>>>>>>>>>// CoClass
84250>>>>>>>>>// CLSID: {0EB8E71C-11C9-45DB-9952-59C068A82F87}
84250>>>>>>>>>Class cCrystalFieldDefinitions is a cComAutomationObject
84251>>>>>>>>>    Import_Class_Protocol cCrystalIFieldDefinitions
84252>>>>>>>>>
84252>>>>>>>>>    Procedure Construct_Object
84254>>>>>>>>>        Forward Send Construct_Object
84256>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84257>>>>>>>>>    End_Procedure
84258>>>>>>>>>End_Class
84259>>>>>>>>>
84259>>>>>>>>>// CLSID: {AF376852-6120-4E28-96DD-63FD2DC27B7A}
84259>>>>>>>>>Class cCrystalIObjectSummaryFieldDefinitions is a Mixin
84260>>>>>>>>>
84260>>>>>>>>>    Function Com_NewEnum Returns Variant
84262>>>>>>>>>        Handle hDispatchDriver
84262>>>>>>>>>        Variant retVal
84262>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84263>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
84264>>>>>>>>>        Function_Return retVal
84265>>>>>>>>>    End_Function
84266>>>>>>>>>
84266>>>>>>>>>    // Gets collection item.
84266>>>>>>>>>    Function ComItem Integer llindex Returns Variant
84268>>>>>>>>>        Handle hDispatchDriver
84268>>>>>>>>>        Variant retVal
84268>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84269>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84270>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
84271>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
84272>>>>>>>>>        Function_Return retVal
84273>>>>>>>>>    End_Function
84274>>>>>>>>>
84274>>>>>>>>>    // Gets collection count.
84274>>>>>>>>>    Function ComCount Returns Integer
84276>>>>>>>>>        Handle hDispatchDriver
84276>>>>>>>>>        Integer retVal
84276>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84277>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
84278>>>>>>>>>        Function_Return retVal
84279>>>>>>>>>    End_Function
84280>>>>>>>>>
84280>>>>>>>>>    // Gets object summary field collection parent (ReportObject).
84280>>>>>>>>>    Function ComParent Returns Variant
84282>>>>>>>>>        Handle hDispatchDriver
84282>>>>>>>>>        Variant retVal
84282>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84283>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
84284>>>>>>>>>        Function_Return retVal
84285>>>>>>>>>    End_Function
84286>>>>>>>>>
84286>>>>>>>>>    // Adds a field.
84286>>>>>>>>>    Procedure ComAdd Variant llsummaryField
84288>>>>>>>>>        Handle hDispatchDriver
84288>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84289>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84290>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llsummaryField
84291>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 230 OLE_VT_VOID
84292>>>>>>>>>    End_Procedure
84293>>>>>>>>>
84293>>>>>>>>>    // Delete a field.
84293>>>>>>>>>    Procedure ComDelete Integer llindex
84295>>>>>>>>>        Handle hDispatchDriver
84295>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84296>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84297>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
84298>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
84299>>>>>>>>>    End_Procedure
84300>>>>>>>>>End_Class
84301>>>>>>>>>
84301>>>>>>>>>// CoClass
84301>>>>>>>>>// CLSID: {2C7DAA06-7915-45CE-862F-5F1D2104EF9E}
84301>>>>>>>>>Class cCrystalObjectSummaryFieldDefinitions is a cComAutomationObject
84302>>>>>>>>>    Import_Class_Protocol cCrystalIObjectSummaryFieldDefinitions
84303>>>>>>>>>
84303>>>>>>>>>    Procedure Construct_Object
84305>>>>>>>>>        Forward Send Construct_Object
84307>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84308>>>>>>>>>    End_Procedure
84309>>>>>>>>>End_Class
84310>>>>>>>>>
84310>>>>>>>>>// CLSID: {AF37681C-6120-4E28-96DD-63FD2DC27B7A}
84310>>>>>>>>>Class cCrystalITableLink is a Mixin
84311>>>>>>>>>
84311>>>>>>>>>    // Gets table link parent (Database).
84311>>>>>>>>>    Function ComParent Returns Variant
84313>>>>>>>>>        Handle hDispatchDriver
84313>>>>>>>>>        Variant retVal
84313>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84314>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
84315>>>>>>>>>        Function_Return retVal
84316>>>>>>>>>    End_Function
84317>>>>>>>>>
84317>>>>>>>>>    // Gets table link source table.
84317>>>>>>>>>    Function ComSourceTable Returns Variant
84319>>>>>>>>>        Handle hDispatchDriver
84319>>>>>>>>>        Variant retVal
84319>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84320>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 655 OLE_VT_DISPATCH to retVal
84321>>>>>>>>>        Function_Return retVal
84322>>>>>>>>>    End_Function
84323>>>>>>>>>
84323>>>>>>>>>    // Gets table link destination table.
84323>>>>>>>>>    Function ComDestinationTable Returns Variant
84325>>>>>>>>>        Handle hDispatchDriver
84325>>>>>>>>>        Variant retVal
84325>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84326>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 656 OLE_VT_DISPATCH to retVal
84327>>>>>>>>>        Function_Return retVal
84328>>>>>>>>>    End_Function
84329>>>>>>>>>
84329>>>>>>>>>    // Gets table link join type.
84329>>>>>>>>>    Function ComJoinType Returns CRLinkJoinType
84331>>>>>>>>>        Handle hDispatchDriver
84331>>>>>>>>>        CRLinkJoinType retVal
84331>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84332>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 657 OLE_VT_I4 to retVal
84333>>>>>>>>>        Function_Return retVal
84334>>>>>>>>>    End_Function
84335>>>>>>>>>
84335>>>>>>>>>    // Gets table link lookup type.
84335>>>>>>>>>    Function ComLookupType Returns CRLinkLookUpType
84337>>>>>>>>>        Handle hDispatchDriver
84337>>>>>>>>>        CRLinkLookUpType retVal
84337>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84338>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 658 OLE_VT_I4 to retVal
84339>>>>>>>>>        Function_Return retVal
84340>>>>>>>>>    End_Function
84341>>>>>>>>>
84341>>>>>>>>>    // Gets table link source field definitions.
84341>>>>>>>>>    Function ComSourceFields Returns Variant
84343>>>>>>>>>        Handle hDispatchDriver
84343>>>>>>>>>        Variant retVal
84343>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84344>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 661 OLE_VT_DISPATCH to retVal
84345>>>>>>>>>        Function_Return retVal
84346>>>>>>>>>    End_Function
84347>>>>>>>>>
84347>>>>>>>>>    // Gets table link destination field definitions.
84347>>>>>>>>>    Function ComDestinationFields Returns Variant
84349>>>>>>>>>        Handle hDispatchDriver
84349>>>>>>>>>        Variant retVal
84349>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84350>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 662 OLE_VT_DISPATCH to retVal
84351>>>>>>>>>        Function_Return retVal
84352>>>>>>>>>    End_Function
84353>>>>>>>>>End_Class
84354>>>>>>>>>
84354>>>>>>>>>// CoClass
84354>>>>>>>>>// CLSID: {C2D0B611-8C84-41B1-9BE7-E8159B238EA2}
84354>>>>>>>>>Class cCrystalTableLink is a cComAutomationObject
84355>>>>>>>>>    Import_Class_Protocol cCrystalITableLink
84356>>>>>>>>>
84356>>>>>>>>>    Procedure Construct_Object
84358>>>>>>>>>        Forward Send Construct_Object
84360>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84361>>>>>>>>>    End_Procedure
84362>>>>>>>>>End_Class
84363>>>>>>>>>
84363>>>>>>>>>// CLSID: {AF37681B-6120-4E28-96DD-63FD2DC27B7A}
84363>>>>>>>>>Class cCrystalITableLinks is a Mixin
84364>>>>>>>>>
84364>>>>>>>>>    Function Com_NewEnum Returns Variant
84366>>>>>>>>>        Handle hDispatchDriver
84366>>>>>>>>>        Variant retVal
84366>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84367>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
84368>>>>>>>>>        Function_Return retVal
84369>>>>>>>>>    End_Function
84370>>>>>>>>>
84370>>>>>>>>>    // Gets collection count.
84370>>>>>>>>>    Function ComCount Returns Integer
84372>>>>>>>>>        Handle hDispatchDriver
84372>>>>>>>>>        Integer retVal
84372>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84373>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
84374>>>>>>>>>        Function_Return retVal
84375>>>>>>>>>    End_Function
84376>>>>>>>>>
84376>>>>>>>>>    // Gets collection item.
84376>>>>>>>>>    Function ComItem Integer llindex Returns Variant
84378>>>>>>>>>        Handle hDispatchDriver
84378>>>>>>>>>        Variant retVal
84378>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84379>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84380>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
84381>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
84382>>>>>>>>>        Function_Return retVal
84383>>>>>>>>>    End_Function
84384>>>>>>>>>
84384>>>>>>>>>    // Gets database links parent (Database).
84384>>>>>>>>>    Function ComParent Returns Variant
84386>>>>>>>>>        Handle hDispatchDriver
84386>>>>>>>>>        Variant retVal
84386>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84387>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
84388>>>>>>>>>        Function_Return retVal
84389>>>>>>>>>    End_Function
84390>>>>>>>>>
84390>>>>>>>>>    // Adds a database link.
84390>>>>>>>>>    Function ComAdd Variant llpsrcTable Variant llpDestTable Variant llsrcFields Variant lldestFields CRLinkJoinType llJoinType CRLinkLookUpType llLookupType Boolean llPartialMatchEnabled Short llindexInUse Returns Variant
84392>>>>>>>>>        Handle hDispatchDriver
84392>>>>>>>>>        Variant retVal
84392>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84393>>>>>>>>>        Send PrepareParams to hDispatchDriver 8
84394>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpsrcTable
84395>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpDestTable
84396>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llsrcFields
84397>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT lldestFields
84398>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llJoinType
84399>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLookupType
84400>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llPartialMatchEnabled
84401>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llindexInUse
84402>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 230 OLE_VT_DISPATCH to retVal
84403>>>>>>>>>        Function_Return retVal
84404>>>>>>>>>    End_Function
84405>>>>>>>>>
84405>>>>>>>>>    // Delete a table link.
84405>>>>>>>>>    Procedure ComDelete Integer llindex
84407>>>>>>>>>        Handle hDispatchDriver
84407>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84408>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84409>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
84410>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
84411>>>>>>>>>    End_Procedure
84412>>>>>>>>>End_Class
84413>>>>>>>>>
84413>>>>>>>>>// CoClass
84413>>>>>>>>>// CLSID: {7F4B59AE-4F3F-4E8D-8D4E-4F5E3B7E79AE}
84413>>>>>>>>>Class cCrystalTableLinks is a cComAutomationObject
84414>>>>>>>>>    Import_Class_Protocol cCrystalITableLinks
84415>>>>>>>>>
84415>>>>>>>>>    Procedure Construct_Object
84417>>>>>>>>>        Forward Send Construct_Object
84419>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84420>>>>>>>>>    End_Procedure
84421>>>>>>>>>End_Class
84422>>>>>>>>>
84422>>>>>>>>>// CLSID: {AF376856-6120-4E28-96DD-63FD2DC27B7A}
84422>>>>>>>>>Class cCrystalIFieldMappingData is a Mixin
84423>>>>>>>>>
84423>>>>>>>>>    // Gets or sets field's value type.
84423>>>>>>>>>    Function ComValueType Returns CRFieldValueType
84425>>>>>>>>>        Handle hDispatchDriver
84425>>>>>>>>>        CRFieldValueType retVal
84425>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84426>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 486 OLE_VT_I4 to retVal
84427>>>>>>>>>        Function_Return retVal
84428>>>>>>>>>    End_Function
84429>>>>>>>>>
84429>>>>>>>>>    // Gets or sets field's table name.
84429>>>>>>>>>    Function ComTableName Returns String
84431>>>>>>>>>        Handle hDispatchDriver
84431>>>>>>>>>        String retVal
84431>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84432>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 487 OLE_VT_BSTR to retVal
84433>>>>>>>>>        Function_Return retVal
84434>>>>>>>>>    End_Function
84435>>>>>>>>>
84435>>>>>>>>>    // Gets or sets field name.
84435>>>>>>>>>    Function ComFieldName Returns String
84437>>>>>>>>>        Handle hDispatchDriver
84437>>>>>>>>>        String retVal
84437>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84438>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 488 OLE_VT_BSTR to retVal
84439>>>>>>>>>        Function_Return retVal
84440>>>>>>>>>    End_Function
84441>>>>>>>>>
84441>>>>>>>>>    // Gets or sets the mapping to field's index in the new database's field list.
84441>>>>>>>>>    Function ComMappingToFieldIndex Returns Short
84443>>>>>>>>>        Handle hDispatchDriver
84443>>>>>>>>>        Short retVal
84443>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84444>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 489 OLE_VT_I2 to retVal
84445>>>>>>>>>        Function_Return retVal
84446>>>>>>>>>    End_Function
84447>>>>>>>>>
84447>>>>>>>>>    // Gets or sets the mapping to field's index in the new database's field list.
84447>>>>>>>>>    Procedure Set ComMappingToFieldIndex Short value
84449>>>>>>>>>        Handle hDispatchDriver
84449>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84450>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84451>>>>>>>>>        Set ComProperty of hDispatchDriver 489 OLE_VT_I2 to value
84452>>>>>>>>>    End_Procedure
84453>>>>>>>>>End_Class
84454>>>>>>>>>
84454>>>>>>>>>// CoClass
84454>>>>>>>>>// CLSID: {3C6DBA8B-89C8-4C07-AD7D-5E6EEACB1C3C}
84454>>>>>>>>>Class cCrystalFieldMappingData is a cComAutomationObject
84455>>>>>>>>>    Import_Class_Protocol cCrystalIFieldMappingData
84456>>>>>>>>>
84456>>>>>>>>>    Procedure Construct_Object
84458>>>>>>>>>        Forward Send Construct_Object
84460>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84461>>>>>>>>>    End_Procedure
84462>>>>>>>>>End_Class
84463>>>>>>>>>
84463>>>>>>>>>// CLSID: {AF376857-6120-4E28-96DD-63FD2DC27B7A}
84463>>>>>>>>>Class cCrystalIParameterValue is a Mixin
84464>>>>>>>>>
84464>>>>>>>>>    // Gets or sets value's start value.
84464>>>>>>>>>    Function ComStartValue Returns Variant
84466>>>>>>>>>        Handle hDispatchDriver
84466>>>>>>>>>        Variant retVal
84466>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84467>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 732 OLE_VT_VARIANT to retVal
84468>>>>>>>>>        Function_Return retVal
84469>>>>>>>>>    End_Function
84470>>>>>>>>>
84470>>>>>>>>>    // Gets or sets value's start value.
84470>>>>>>>>>    Procedure Set ComStartValue Variant value
84472>>>>>>>>>        Handle hDispatchDriver
84472>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84473>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84474>>>>>>>>>        Set ComProperty of hDispatchDriver 732 OLE_VT_VARIANT to value
84475>>>>>>>>>    End_Procedure
84476>>>>>>>>>
84476>>>>>>>>>    // Gets or sets value's end value.
84476>>>>>>>>>    Function ComEndValue Returns Variant
84478>>>>>>>>>        Handle hDispatchDriver
84478>>>>>>>>>        Variant retVal
84478>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84479>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 726 OLE_VT_VARIANT to retVal
84480>>>>>>>>>        Function_Return retVal
84481>>>>>>>>>    End_Function
84482>>>>>>>>>
84482>>>>>>>>>    // Gets or sets value's end value.
84482>>>>>>>>>    Procedure Set ComEndValue Variant value
84484>>>>>>>>>        Handle hDispatchDriver
84484>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84485>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84486>>>>>>>>>        Set ComProperty of hDispatchDriver 726 OLE_VT_VARIANT to value
84487>>>>>>>>>    End_Procedure
84488>>>>>>>>>
84488>>>>>>>>>    // Gets or sets end value's range or single value.
84488>>>>>>>>>    Function ComRangeValue Returns Boolean
84490>>>>>>>>>        Handle hDispatchDriver
84490>>>>>>>>>        Boolean retVal
84490>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84491>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 727 OLE_VT_BOOL to retVal
84492>>>>>>>>>        Function_Return retVal
84493>>>>>>>>>    End_Function
84494>>>>>>>>>
84494>>>>>>>>>    // Gets or sets end value's range or single value.
84494>>>>>>>>>    Procedure Set ComRangeValue Boolean value
84496>>>>>>>>>        Handle hDispatchDriver
84496>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84497>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84498>>>>>>>>>        Set ComProperty of hDispatchDriver 727 OLE_VT_BOOL to value
84499>>>>>>>>>    End_Procedure
84500>>>>>>>>>
84500>>>>>>>>>    // Gets or sets end value's range info.
84500>>>>>>>>>    Function ComRangeInfo Returns CRRangeInfo
84502>>>>>>>>>        Handle hDispatchDriver
84502>>>>>>>>>        CRRangeInfo retVal
84502>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84503>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 728 OLE_VT_I4 to retVal
84504>>>>>>>>>        Function_Return retVal
84505>>>>>>>>>    End_Function
84506>>>>>>>>>
84506>>>>>>>>>    // Gets or sets end value's range info.
84506>>>>>>>>>    Procedure Set ComRangeInfo CRRangeInfo value
84508>>>>>>>>>        Handle hDispatchDriver
84508>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84509>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84510>>>>>>>>>        Set ComProperty of hDispatchDriver 728 OLE_VT_I4 to value
84511>>>>>>>>>    End_Procedure
84512>>>>>>>>>End_Class
84513>>>>>>>>>
84513>>>>>>>>>// CoClass
84513>>>>>>>>>// ProgID: CrystalDesignRunTime.ParameterValue.11
84513>>>>>>>>>// CLSID: {12B3C29C-C40C-4D80-BD9A-D98016D27343}
84513>>>>>>>>>Class cCrystalParameterValue is a cComAutomationObject
84514>>>>>>>>>    Import_Class_Protocol cCrystalIParameterValue
84515>>>>>>>>>
84515>>>>>>>>>    Procedure Construct_Object
84517>>>>>>>>>        Forward Send Construct_Object
84519>>>>>>>>>        Set psProgID to "CrystalDesignRunTime.ParameterValue"
84520>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84521>>>>>>>>>    End_Procedure
84522>>>>>>>>>End_Class
84523>>>>>>>>>
84523>>>>>>>>>// CLSID: {AF376858-6120-4E28-96DD-63FD2DC27B7A}
84523>>>>>>>>>Class cCrystalIParameterValues is a Mixin
84524>>>>>>>>>
84524>>>>>>>>>    Function Com_NewEnum Returns Variant
84526>>>>>>>>>        Handle hDispatchDriver
84526>>>>>>>>>        Variant retVal
84526>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84527>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
84528>>>>>>>>>        Function_Return retVal
84529>>>>>>>>>    End_Function
84530>>>>>>>>>
84530>>>>>>>>>    // Gets a parameter value.
84530>>>>>>>>>    Function ComItem Integer llindex Returns Variant
84532>>>>>>>>>        Handle hDispatchDriver
84532>>>>>>>>>        Variant retVal
84532>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84533>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84534>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
84535>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
84536>>>>>>>>>        Function_Return retVal
84537>>>>>>>>>    End_Function
84538>>>>>>>>>
84538>>>>>>>>>    // Gets parameter value count.
84538>>>>>>>>>    Function ComCount Returns Integer
84540>>>>>>>>>        Handle hDispatchDriver
84540>>>>>>>>>        Integer retVal
84540>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84541>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
84542>>>>>>>>>        Function_Return retVal
84543>>>>>>>>>    End_Function
84544>>>>>>>>>
84544>>>>>>>>>    // Adds a parameter value.
84544>>>>>>>>>    Procedure ComAdd Variant llpValue
84546>>>>>>>>>        Handle hDispatchDriver
84546>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84547>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84548>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpValue
84549>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 230 OLE_VT_VOID
84550>>>>>>>>>    End_Procedure
84551>>>>>>>>>
84551>>>>>>>>>    // Delete a parameter value.
84551>>>>>>>>>    Procedure ComDelete Integer llindex
84553>>>>>>>>>        Handle hDispatchDriver
84553>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84554>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84555>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
84556>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
84557>>>>>>>>>    End_Procedure
84558>>>>>>>>>End_Class
84559>>>>>>>>>
84559>>>>>>>>>// CoClass
84559>>>>>>>>>// ProgID: CrystalDesignRunTime.ParameterValues.11
84559>>>>>>>>>// CLSID: {084B4E90-F0A1-49AA-8CF1-BB2171A21DC5}
84559>>>>>>>>>Class cCrystalParameterValues is a cComAutomationObject
84560>>>>>>>>>    Import_Class_Protocol cCrystalIParameterValues
84561>>>>>>>>>
84561>>>>>>>>>    Procedure Construct_Object
84563>>>>>>>>>        Forward Send Construct_Object
84565>>>>>>>>>        Set psProgID to "CrystalDesignRunTime.ParameterValues"
84566>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84567>>>>>>>>>    End_Procedure
84568>>>>>>>>>End_Class
84569>>>>>>>>>
84569>>>>>>>>>// CLSID: {AF376859-6120-4E28-96DD-63FD2DC27B7A}
84569>>>>>>>>>Class cCrystalIParameterValueInfo is a Mixin
84570>>>>>>>>>
84570>>>>>>>>>    // Gets or sets parameter value collection.
84570>>>>>>>>>    Function ComParameterValues Returns Variant
84572>>>>>>>>>        Handle hDispatchDriver
84572>>>>>>>>>        Variant retVal
84572>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84573>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 729 OLE_VT_DISPATCH to retVal
84574>>>>>>>>>        Function_Return retVal
84575>>>>>>>>>    End_Function
84576>>>>>>>>>
84576>>>>>>>>>    // Gets or sets parameter value collection.
84576>>>>>>>>>    Procedure Set ComParameterValues Variant value
84578>>>>>>>>>        Handle hDispatchDriver
84578>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84579>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84580>>>>>>>>>        Set ComProperty of hDispatchDriver 729 OLE_VT_DISPATCH to value
84581>>>>>>>>>    End_Procedure
84582>>>>>>>>>
84582>>>>>>>>>    // Gets or sets parameter name.
84582>>>>>>>>>    Function ComParameterName Returns String
84584>>>>>>>>>        Handle hDispatchDriver
84584>>>>>>>>>        String retVal
84584>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84585>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 730 OLE_VT_BSTR to retVal
84586>>>>>>>>>        Function_Return retVal
84587>>>>>>>>>    End_Function
84588>>>>>>>>>
84588>>>>>>>>>    // Gets or sets parameter name.
84588>>>>>>>>>    Procedure Set ComParameterName String value
84590>>>>>>>>>        Handle hDispatchDriver
84590>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84591>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84592>>>>>>>>>        Set ComProperty of hDispatchDriver 730 OLE_VT_BSTR to value
84593>>>>>>>>>    End_Procedure
84594>>>>>>>>>End_Class
84595>>>>>>>>>
84595>>>>>>>>>// CoClass
84595>>>>>>>>>// ProgID: CrystalDesignRunTime.ParameterValueInfo.11
84595>>>>>>>>>// CLSID: {F52FEA39-A633-4579-B3D3-57A73FE49A73}
84595>>>>>>>>>Class cCrystalParameterValueInfo is a cComAutomationObject
84596>>>>>>>>>    Import_Class_Protocol cCrystalIParameterValueInfo
84597>>>>>>>>>
84597>>>>>>>>>    Procedure Construct_Object
84599>>>>>>>>>        Forward Send Construct_Object
84601>>>>>>>>>        Set psProgID to "CrystalDesignRunTime.ParameterValueInfo"
84602>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84603>>>>>>>>>    End_Procedure
84604>>>>>>>>>End_Class
84605>>>>>>>>>
84605>>>>>>>>>// CLSID: {AF37685A-6120-4E28-96DD-63FD2DC27B7A}
84605>>>>>>>>>Class cCrystalIParameterValueInfos is a Mixin
84606>>>>>>>>>
84606>>>>>>>>>    Function Com_NewEnum Returns Variant
84608>>>>>>>>>        Handle hDispatchDriver
84608>>>>>>>>>        Variant retVal
84608>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84609>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
84610>>>>>>>>>        Function_Return retVal
84611>>>>>>>>>    End_Function
84612>>>>>>>>>
84612>>>>>>>>>    // Gets a value info.
84612>>>>>>>>>    Function ComItem Integer llindex Returns Variant
84614>>>>>>>>>        Handle hDispatchDriver
84614>>>>>>>>>        Variant retVal
84614>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84615>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84616>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
84617>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
84618>>>>>>>>>        Function_Return retVal
84619>>>>>>>>>    End_Function
84620>>>>>>>>>
84620>>>>>>>>>    // Gets value info count.
84620>>>>>>>>>    Function ComCount Returns Integer
84622>>>>>>>>>        Handle hDispatchDriver
84622>>>>>>>>>        Integer retVal
84622>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84623>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
84624>>>>>>>>>        Function_Return retVal
84625>>>>>>>>>    End_Function
84626>>>>>>>>>
84626>>>>>>>>>    // Adds a value info.
84626>>>>>>>>>    Procedure ComAdd Variant llpValueInfo
84628>>>>>>>>>        Handle hDispatchDriver
84628>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84629>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84630>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpValueInfo
84631>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 230 OLE_VT_VOID
84632>>>>>>>>>    End_Procedure
84633>>>>>>>>>
84633>>>>>>>>>    // Delete a value info.
84633>>>>>>>>>    Procedure ComDelete Integer llindex
84635>>>>>>>>>        Handle hDispatchDriver
84635>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84636>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84637>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
84638>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
84639>>>>>>>>>    End_Procedure
84640>>>>>>>>>End_Class
84641>>>>>>>>>
84641>>>>>>>>>// CoClass
84641>>>>>>>>>// ProgID: CrystalDesignRunTime.ParameterValueInfos.11
84641>>>>>>>>>// CLSID: {36F37B06-B038-4F47-AD19-E2C5F9160BE2}
84641>>>>>>>>>Class cCrystalParameterValueInfos is a cComAutomationObject
84642>>>>>>>>>    Import_Class_Protocol cCrystalIParameterValueInfos
84643>>>>>>>>>
84643>>>>>>>>>    Procedure Construct_Object
84645>>>>>>>>>        Forward Send Construct_Object
84647>>>>>>>>>        Set psProgID to "CrystalDesignRunTime.ParameterValueInfos"
84648>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84649>>>>>>>>>    End_Procedure
84650>>>>>>>>>End_Class
84651>>>>>>>>>
84651>>>>>>>>>// CLSID: {AF37685B-6120-4E28-96DD-63FD2DC27B7A}
84651>>>>>>>>>Class cCrystalIReportAlert is a Mixin
84652>>>>>>>>>
84652>>>>>>>>>    // Gets report alert's parent (Report)
84652>>>>>>>>>    Function ComParent Returns Variant
84654>>>>>>>>>        Handle hDispatchDriver
84654>>>>>>>>>        Variant retVal
84654>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84655>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
84656>>>>>>>>>        Function_Return retVal
84657>>>>>>>>>    End_Function
84658>>>>>>>>>
84658>>>>>>>>>    // Gets or sets report alert's name
84658>>>>>>>>>    Function ComName Returns String
84660>>>>>>>>>        Handle hDispatchDriver
84660>>>>>>>>>        String retVal
84660>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84661>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -800 OLE_VT_BSTR to retVal
84662>>>>>>>>>        Function_Return retVal
84663>>>>>>>>>    End_Function
84664>>>>>>>>>
84664>>>>>>>>>    // Gets or sets report alert's name
84664>>>>>>>>>    Procedure Set ComName String value
84666>>>>>>>>>        Handle hDispatchDriver
84666>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84667>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84668>>>>>>>>>        Set ComProperty of hDispatchDriver -800 OLE_VT_BSTR to value
84669>>>>>>>>>    End_Procedure
84670>>>>>>>>>
84670>>>>>>>>>    // Gets or sets report alert's default message
84670>>>>>>>>>    Function ComDefaultMessage Returns String
84672>>>>>>>>>        Handle hDispatchDriver
84672>>>>>>>>>        String retVal
84672>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84673>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 745 OLE_VT_BSTR to retVal
84674>>>>>>>>>        Function_Return retVal
84675>>>>>>>>>    End_Function
84676>>>>>>>>>
84676>>>>>>>>>    // Gets or sets report alert's default message
84676>>>>>>>>>    Procedure Set ComDefaultMessage String value
84678>>>>>>>>>        Handle hDispatchDriver
84678>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84679>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84680>>>>>>>>>        Set ComProperty of hDispatchDriver 745 OLE_VT_BSTR to value
84681>>>>>>>>>    End_Procedure
84682>>>>>>>>>
84682>>>>>>>>>    // Gets or sets report alert's enable status
84682>>>>>>>>>    Function ComIsEnabled Returns Boolean
84684>>>>>>>>>        Handle hDispatchDriver
84684>>>>>>>>>        Boolean retVal
84684>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84685>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 747 OLE_VT_BOOL to retVal
84686>>>>>>>>>        Function_Return retVal
84687>>>>>>>>>    End_Function
84688>>>>>>>>>
84688>>>>>>>>>    // Gets or sets report alert's enable status
84688>>>>>>>>>    Procedure Set ComIsEnabled Boolean value
84690>>>>>>>>>        Handle hDispatchDriver
84690>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84691>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84692>>>>>>>>>        Set ComProperty of hDispatchDriver 747 OLE_VT_BOOL to value
84693>>>>>>>>>    End_Procedure
84694>>>>>>>>>
84694>>>>>>>>>    // Gets or sets report alert's condition formula
84694>>>>>>>>>    Function ComConditionFormula Returns String
84696>>>>>>>>>        Handle hDispatchDriver
84696>>>>>>>>>        String retVal
84696>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84697>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 748 OLE_VT_BSTR to retVal
84698>>>>>>>>>        Function_Return retVal
84699>>>>>>>>>    End_Function
84700>>>>>>>>>
84700>>>>>>>>>    // Gets or sets report alert's condition formula
84700>>>>>>>>>    Procedure Set ComConditionFormula String value
84702>>>>>>>>>        Handle hDispatchDriver
84702>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84703>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84704>>>>>>>>>        Set ComProperty of hDispatchDriver 748 OLE_VT_BSTR to value
84705>>>>>>>>>    End_Procedure
84706>>>>>>>>>
84706>>>>>>>>>    // Gets or sets report alert's message formula
84706>>>>>>>>>    Function ComMessageFormula Returns String
84708>>>>>>>>>        Handle hDispatchDriver
84708>>>>>>>>>        String retVal
84708>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84709>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 744 OLE_VT_BSTR to retVal
84710>>>>>>>>>        Function_Return retVal
84711>>>>>>>>>    End_Function
84712>>>>>>>>>
84712>>>>>>>>>    // Gets or sets report alert's message formula
84712>>>>>>>>>    Procedure Set ComMessageFormula String value
84714>>>>>>>>>        Handle hDispatchDriver
84714>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84715>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84716>>>>>>>>>        Set ComProperty of hDispatchDriver 744 OLE_VT_BSTR to value
84717>>>>>>>>>    End_Procedure
84718>>>>>>>>>
84718>>>>>>>>>    // Gets report alert's instances
84718>>>>>>>>>    Function ComAlertInstances Returns Variant
84720>>>>>>>>>        Handle hDispatchDriver
84720>>>>>>>>>        Variant retVal
84720>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84721>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 743 OLE_VT_DISPATCH to retVal
84722>>>>>>>>>        Function_Return retVal
84723>>>>>>>>>    End_Function
84724>>>>>>>>>End_Class
84725>>>>>>>>>
84725>>>>>>>>>// CoClass
84725>>>>>>>>>// CLSID: {1587C474-7C36-4392-BD34-A9F4455FC7E3}
84725>>>>>>>>>Class cCrystalReportAlert is a cComAutomationObject
84726>>>>>>>>>    Import_Class_Protocol cCrystalIReportAlert
84727>>>>>>>>>
84727>>>>>>>>>    Procedure Construct_Object
84729>>>>>>>>>        Forward Send Construct_Object
84731>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84732>>>>>>>>>    End_Procedure
84733>>>>>>>>>End_Class
84734>>>>>>>>>
84734>>>>>>>>>// CLSID: {AF37685C-6120-4E28-96DD-63FD2DC27B7A}
84734>>>>>>>>>Class cCrystalIReportAlerts is a Mixin
84735>>>>>>>>>
84735>>>>>>>>>    Function Com_NewEnum Returns Variant
84737>>>>>>>>>        Handle hDispatchDriver
84737>>>>>>>>>        Variant retVal
84737>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84738>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
84739>>>>>>>>>        Function_Return retVal
84740>>>>>>>>>    End_Function
84741>>>>>>>>>
84741>>>>>>>>>    // Gets collection item.
84741>>>>>>>>>    Function ComItem Variant llindex Returns Variant
84743>>>>>>>>>        Handle hDispatchDriver
84743>>>>>>>>>        Variant retVal
84743>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84744>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84745>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llindex
84746>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
84747>>>>>>>>>        Function_Return retVal
84748>>>>>>>>>    End_Function
84749>>>>>>>>>
84749>>>>>>>>>    // Gets collection count.
84749>>>>>>>>>    Function ComCount Returns Integer
84751>>>>>>>>>        Handle hDispatchDriver
84751>>>>>>>>>        Integer retVal
84751>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84752>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
84753>>>>>>>>>        Function_Return retVal
84754>>>>>>>>>    End_Function
84755>>>>>>>>>
84755>>>>>>>>>    // Gets report alerts' parent (Report).
84755>>>>>>>>>    Function ComParent Returns Variant
84757>>>>>>>>>        Handle hDispatchDriver
84757>>>>>>>>>        Variant retVal
84757>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84758>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
84759>>>>>>>>>        Function_Return retVal
84760>>>>>>>>>    End_Function
84761>>>>>>>>>
84761>>>>>>>>>    // Adds a report alert
84761>>>>>>>>>    Function ComAdd String llName String llDefaultMessage Boolean llIsEnabled String llConditionFormula String llMessageFormula Returns Variant
84763>>>>>>>>>        Handle hDispatchDriver
84763>>>>>>>>>        Variant retVal
84763>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84764>>>>>>>>>        Send PrepareParams to hDispatchDriver 5
84765>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
84766>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llDefaultMessage
84767>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llIsEnabled
84768>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llConditionFormula
84769>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llMessageFormula
84770>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 230 OLE_VT_DISPATCH to retVal
84771>>>>>>>>>        Function_Return retVal
84772>>>>>>>>>    End_Function
84773>>>>>>>>>
84773>>>>>>>>>    // Deletes a report alert
84773>>>>>>>>>    Procedure ComDelete Variant llindex
84775>>>>>>>>>        Handle hDispatchDriver
84775>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84776>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84777>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llindex
84778>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
84779>>>>>>>>>    End_Procedure
84780>>>>>>>>>End_Class
84781>>>>>>>>>
84781>>>>>>>>>// CoClass
84781>>>>>>>>>// CLSID: {AD97C2FE-1E31-4B43-954D-721E55F1A710}
84781>>>>>>>>>Class cCrystalReportAlerts is a cComAutomationObject
84782>>>>>>>>>    Import_Class_Protocol cCrystalIReportAlerts
84783>>>>>>>>>
84783>>>>>>>>>    Procedure Construct_Object
84785>>>>>>>>>        Forward Send Construct_Object
84787>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84788>>>>>>>>>    End_Procedure
84789>>>>>>>>>End_Class
84790>>>>>>>>>
84790>>>>>>>>>// CLSID: {AF37685D-6120-4E28-96DD-63FD2DC27B7A}
84790>>>>>>>>>Class cCrystalIReportAlertInstance is a Mixin
84791>>>>>>>>>
84791>>>>>>>>>    // Gets report alert instance's parent (IReportAlert)
84791>>>>>>>>>    Function ComParent Returns Variant
84793>>>>>>>>>        Handle hDispatchDriver
84793>>>>>>>>>        Variant retVal
84793>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84794>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
84795>>>>>>>>>        Function_Return retVal
84796>>>>>>>>>    End_Function
84797>>>>>>>>>
84797>>>>>>>>>    // Gets report alert instance's alert message
84797>>>>>>>>>    Function ComAlertMessage Returns String
84799>>>>>>>>>        Handle hDispatchDriver
84799>>>>>>>>>        String retVal
84799>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84800>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 746 OLE_VT_BSTR to retVal
84801>>>>>>>>>        Function_Return retVal
84802>>>>>>>>>    End_Function
84803>>>>>>>>>End_Class
84804>>>>>>>>>
84804>>>>>>>>>// CoClass
84804>>>>>>>>>// CLSID: {388565B8-C267-4DB1-BFB6-0ADC2E151B22}
84804>>>>>>>>>Class cCrystalReportAlertInstance is a cComAutomationObject
84805>>>>>>>>>    Import_Class_Protocol cCrystalIReportAlertInstance
84806>>>>>>>>>
84806>>>>>>>>>    Procedure Construct_Object
84808>>>>>>>>>        Forward Send Construct_Object
84810>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84811>>>>>>>>>    End_Procedure
84812>>>>>>>>>End_Class
84813>>>>>>>>>
84813>>>>>>>>>// CLSID: {AF37685E-6120-4E28-96DD-63FD2DC27B7A}
84813>>>>>>>>>Class cCrystalIReportAlertInstances is a Mixin
84814>>>>>>>>>
84814>>>>>>>>>    Function Com_NewEnum Returns Variant
84816>>>>>>>>>        Handle hDispatchDriver
84816>>>>>>>>>        Variant retVal
84816>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84817>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
84818>>>>>>>>>        Function_Return retVal
84819>>>>>>>>>    End_Function
84820>>>>>>>>>
84820>>>>>>>>>    // Gets collection item.
84820>>>>>>>>>    Function ComItem Integer llindex Returns Variant
84822>>>>>>>>>        Handle hDispatchDriver
84822>>>>>>>>>        Variant retVal
84822>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84823>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84824>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
84825>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
84826>>>>>>>>>        Function_Return retVal
84827>>>>>>>>>    End_Function
84828>>>>>>>>>
84828>>>>>>>>>    // Gets collection count.
84828>>>>>>>>>    Function ComCount Returns Integer
84830>>>>>>>>>        Handle hDispatchDriver
84830>>>>>>>>>        Integer retVal
84830>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84831>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
84832>>>>>>>>>        Function_Return retVal
84833>>>>>>>>>    End_Function
84834>>>>>>>>>
84834>>>>>>>>>    // Gets report alertinstances' parent (IReportAlert).
84834>>>>>>>>>    Function ComParent Returns Variant
84836>>>>>>>>>        Handle hDispatchDriver
84836>>>>>>>>>        Variant retVal
84836>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84837>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
84838>>>>>>>>>        Function_Return retVal
84839>>>>>>>>>    End_Function
84840>>>>>>>>>End_Class
84841>>>>>>>>>
84841>>>>>>>>>// CoClass
84841>>>>>>>>>// CLSID: {2EB9CF80-1CC4-4B23-A7E6-FCAE5857C386}
84841>>>>>>>>>Class cCrystalReportAlertInstances is a cComAutomationObject
84842>>>>>>>>>    Import_Class_Protocol cCrystalIReportAlertInstances
84843>>>>>>>>>
84843>>>>>>>>>    Procedure Construct_Object
84845>>>>>>>>>        Forward Send Construct_Object
84847>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84848>>>>>>>>>    End_Procedure
84849>>>>>>>>>End_Class
84850>>>>>>>>>
84850>>>>>>>>>// CLSID: {AF37680B-6120-4E28-96DD-63FD2DC27B7A}
84850>>>>>>>>>Class cCrystalIFieldElements is a Mixin
84851>>>>>>>>>
84851>>>>>>>>>    Function Com_NewEnum Returns Variant
84853>>>>>>>>>        Handle hDispatchDriver
84853>>>>>>>>>        Variant retVal
84853>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84854>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
84855>>>>>>>>>        Function_Return retVal
84856>>>>>>>>>    End_Function
84857>>>>>>>>>
84857>>>>>>>>>    // Gets collection item.
84857>>>>>>>>>    Function ComItem Integer llindex Returns Variant
84859>>>>>>>>>        Handle hDispatchDriver
84859>>>>>>>>>        Variant retVal
84859>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84860>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84861>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
84862>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_DISPATCH to retVal
84863>>>>>>>>>        Function_Return retVal
84864>>>>>>>>>    End_Function
84865>>>>>>>>>
84865>>>>>>>>>    // Gets collection count.
84865>>>>>>>>>    Function ComCount Returns Integer
84867>>>>>>>>>        Handle hDispatchDriver
84867>>>>>>>>>        Integer retVal
84867>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84868>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
84869>>>>>>>>>        Function_Return retVal
84870>>>>>>>>>    End_Function
84871>>>>>>>>>
84871>>>>>>>>>    // Gets field elements parent.(textObject)
84871>>>>>>>>>    Function ComParent Returns Variant
84873>>>>>>>>>        Handle hDispatchDriver
84873>>>>>>>>>        Variant retVal
84873>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84874>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
84875>>>>>>>>>        Function_Return retVal
84876>>>>>>>>>    End_Function
84877>>>>>>>>>
84877>>>>>>>>>    // Adds an embedded field element
84877>>>>>>>>>    Procedure ComAdd Integer llposition Variant llField
84879>>>>>>>>>        Handle hDispatchDriver
84879>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84880>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
84881>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llposition
84882>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llField
84883>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 230 OLE_VT_VOID
84884>>>>>>>>>    End_Procedure
84885>>>>>>>>>
84885>>>>>>>>>    // Deletes a embedded field element
84885>>>>>>>>>    Procedure ComDelete Integer llindex
84887>>>>>>>>>        Handle hDispatchDriver
84887>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84888>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84889>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
84890>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
84891>>>>>>>>>    End_Procedure
84892>>>>>>>>>End_Class
84893>>>>>>>>>
84893>>>>>>>>>// CoClass
84893>>>>>>>>>// CLSID: {F648AE10-D17A-48B8-81F0-CBB7DADF2B40}
84893>>>>>>>>>Class cCrystalFieldElements is a cComAutomationObject
84894>>>>>>>>>    Import_Class_Protocol cCrystalIFieldElements
84895>>>>>>>>>
84895>>>>>>>>>    Procedure Construct_Object
84897>>>>>>>>>        Forward Send Construct_Object
84899>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
84900>>>>>>>>>    End_Procedure
84901>>>>>>>>>End_Class
84902>>>>>>>>>
84902>>>>>>>>>// CLSID: {AF37680A-6120-4E28-96DD-63FD2DC27B7A}
84902>>>>>>>>>Class cCrystalIFieldElement is a Mixin
84903>>>>>>>>>
84903>>>>>>>>>    // Gets or sets standard OLE font.
84903>>>>>>>>>    Function ComFont Returns Variant
84905>>>>>>>>>        Handle hDispatchDriver
84905>>>>>>>>>        Variant retVal
84905>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84906>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 118 OLE_VT_DISPATCH to retVal
84907>>>>>>>>>        Function_Return retVal
84908>>>>>>>>>    End_Function
84909>>>>>>>>>
84909>>>>>>>>>    // Gets or sets standard OLE font.
84909>>>>>>>>>    Procedure Set ComFont Variant value
84911>>>>>>>>>        Handle hDispatchDriver
84911>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84912>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84913>>>>>>>>>        Set ComProperty of hDispatchDriver 118 OLE_VT_DISPATCH to value
84914>>>>>>>>>    End_Procedure
84915>>>>>>>>>
84915>>>>>>>>>    // Gets or sets field element color.
84915>>>>>>>>>    Function ComColor Returns OLE_COLOR
84917>>>>>>>>>        Handle hDispatchDriver
84917>>>>>>>>>        OLE_COLOR retVal
84917>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84918>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 762 OLE_VT_I4 to retVal
84919>>>>>>>>>        Function_Return retVal
84920>>>>>>>>>    End_Function
84921>>>>>>>>>
84921>>>>>>>>>    // Gets or sets field element color.
84921>>>>>>>>>    Procedure Set ComColor OLE_COLOR value
84923>>>>>>>>>        Handle hDispatchDriver
84923>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84924>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84925>>>>>>>>>        Set ComProperty of hDispatchDriver 762 OLE_VT_I4 to value
84926>>>>>>>>>    End_Procedure
84927>>>>>>>>>
84927>>>>>>>>>    // Gets or sets field definition
84927>>>>>>>>>    Function ComFieldDefinition Returns Variant
84929>>>>>>>>>        Handle hDispatchDriver
84929>>>>>>>>>        Variant retVal
84929>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84930>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 763 OLE_VT_DISPATCH to retVal
84931>>>>>>>>>        Function_Return retVal
84932>>>>>>>>>    End_Function
84933>>>>>>>>>
84933>>>>>>>>>    // Gets or sets field definition
84933>>>>>>>>>    Procedure Set ComFieldDefinition Variant value
84935>>>>>>>>>        Handle hDispatchDriver
84935>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84936>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84937>>>>>>>>>        Set ComProperty of hDispatchDriver 763 OLE_VT_DISPATCH to value
84938>>>>>>>>>    End_Procedure
84939>>>>>>>>>
84939>>>>>>>>>    // Gets parent object(fieldElements).
84939>>>>>>>>>    Function ComParent Returns Variant
84941>>>>>>>>>        Handle hDispatchDriver
84941>>>>>>>>>        Variant retVal
84941>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84942>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 100 OLE_VT_DISPATCH to retVal
84943>>>>>>>>>        Function_Return retVal
84944>>>>>>>>>    End_Function
84945>>>>>>>>>
84945>>>>>>>>>    // Gets or sets suppress if duplicated option.
84945>>>>>>>>>    Function ComSuppressIfDuplicated Returns Boolean
84947>>>>>>>>>        Handle hDispatchDriver
84947>>>>>>>>>        Boolean retVal
84947>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84948>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 123 OLE_VT_BOOL to retVal
84949>>>>>>>>>        Function_Return retVal
84950>>>>>>>>>    End_Function
84951>>>>>>>>>
84951>>>>>>>>>    // Gets or sets suppress if duplicated option.
84951>>>>>>>>>    Procedure Set ComSuppressIfDuplicated Boolean value
84953>>>>>>>>>        Handle hDispatchDriver
84953>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84954>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84955>>>>>>>>>        Set ComProperty of hDispatchDriver 123 OLE_VT_BOOL to value
84956>>>>>>>>>    End_Procedure
84957>>>>>>>>>
84957>>>>>>>>>    // Gets or sets use system defaults formatting option.
84957>>>>>>>>>    Function ComUseSystemDefaults Returns Boolean
84959>>>>>>>>>        Handle hDispatchDriver
84959>>>>>>>>>        Boolean retVal
84959>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84960>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 125 OLE_VT_BOOL to retVal
84961>>>>>>>>>        Function_Return retVal
84962>>>>>>>>>    End_Function
84963>>>>>>>>>
84963>>>>>>>>>    // Gets or sets use system defaults formatting option.
84963>>>>>>>>>    Procedure Set ComUseSystemDefaults Boolean value
84965>>>>>>>>>        Handle hDispatchDriver
84965>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84966>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84967>>>>>>>>>        Set ComProperty of hDispatchDriver 125 OLE_VT_BOOL to value
84968>>>>>>>>>    End_Procedure
84969>>>>>>>>>
84969>>>>>>>>>    // Gets or sets suppress if zero option.
84969>>>>>>>>>    Function ComSuppressIfZero Returns Boolean
84971>>>>>>>>>        Handle hDispatchDriver
84971>>>>>>>>>        Boolean retVal
84971>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84972>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 124 OLE_VT_BOOL to retVal
84973>>>>>>>>>        Function_Return retVal
84974>>>>>>>>>    End_Function
84975>>>>>>>>>
84975>>>>>>>>>    // Gets or sets suppress if zero option.
84975>>>>>>>>>    Procedure Set ComSuppressIfZero Boolean value
84977>>>>>>>>>        Handle hDispatchDriver
84977>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84978>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84979>>>>>>>>>        Set ComProperty of hDispatchDriver 124 OLE_VT_BOOL to value
84980>>>>>>>>>    End_Procedure
84981>>>>>>>>>
84981>>>>>>>>>    // Gets or sets number negative type.
84981>>>>>>>>>    Function ComNegativeType Returns CRNegativeType
84983>>>>>>>>>        Handle hDispatchDriver
84983>>>>>>>>>        CRNegativeType retVal
84983>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84984>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 126 OLE_VT_I4 to retVal
84985>>>>>>>>>        Function_Return retVal
84986>>>>>>>>>    End_Function
84987>>>>>>>>>
84987>>>>>>>>>    // Gets or sets number negative type.
84987>>>>>>>>>    Procedure Set ComNegativeType CRNegativeType value
84989>>>>>>>>>        Handle hDispatchDriver
84989>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84990>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
84991>>>>>>>>>        Set ComProperty of hDispatchDriver 126 OLE_VT_I4 to value
84992>>>>>>>>>    End_Procedure
84993>>>>>>>>>
84993>>>>>>>>>    // Gets or sets enable number thousands separators.
84993>>>>>>>>>    Function ComThousandsSeparators Returns Boolean
84995>>>>>>>>>        Handle hDispatchDriver
84995>>>>>>>>>        Boolean retVal
84995>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
84996>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 127 OLE_VT_BOOL to retVal
84997>>>>>>>>>        Function_Return retVal
84998>>>>>>>>>    End_Function
84999>>>>>>>>>
84999>>>>>>>>>    // Gets or sets enable number thousands separators.
84999>>>>>>>>>    Procedure Set ComThousandsSeparators Boolean value
85001>>>>>>>>>        Handle hDispatchDriver
85001>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85002>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85003>>>>>>>>>        Set ComProperty of hDispatchDriver 127 OLE_VT_BOOL to value
85004>>>>>>>>>    End_Procedure
85005>>>>>>>>>
85005>>>>>>>>>    // Gets or sets number uses leading zero option.
85005>>>>>>>>>    Function ComUseLeadingZero Returns Boolean
85007>>>>>>>>>        Handle hDispatchDriver
85007>>>>>>>>>        Boolean retVal
85007>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85008>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 128 OLE_VT_BOOL to retVal
85009>>>>>>>>>        Function_Return retVal
85010>>>>>>>>>    End_Function
85011>>>>>>>>>
85011>>>>>>>>>    // Gets or sets number uses leading zero option.
85011>>>>>>>>>    Procedure Set ComUseLeadingZero Boolean value
85013>>>>>>>>>        Handle hDispatchDriver
85013>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85014>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85015>>>>>>>>>        Set ComProperty of hDispatchDriver 128 OLE_VT_BOOL to value
85016>>>>>>>>>    End_Procedure
85017>>>>>>>>>
85017>>>>>>>>>    // Gets or sets number decimal places.
85017>>>>>>>>>    Function ComDecimalPlaces Returns Short
85019>>>>>>>>>        Handle hDispatchDriver
85019>>>>>>>>>        Short retVal
85019>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85020>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 129 OLE_VT_I2 to retVal
85021>>>>>>>>>        Function_Return retVal
85022>>>>>>>>>    End_Function
85023>>>>>>>>>
85023>>>>>>>>>    // Gets or sets number decimal places.
85023>>>>>>>>>    Procedure Set ComDecimalPlaces Short value
85025>>>>>>>>>        Handle hDispatchDriver
85025>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85026>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85027>>>>>>>>>        Set ComProperty of hDispatchDriver 129 OLE_VT_I2 to value
85028>>>>>>>>>    End_Procedure
85029>>>>>>>>>
85029>>>>>>>>>    // Gets or sets number rounding type.
85029>>>>>>>>>    Function ComRoundingType Returns CRRoundingType
85031>>>>>>>>>        Handle hDispatchDriver
85031>>>>>>>>>        CRRoundingType retVal
85031>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85032>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 130 OLE_VT_I4 to retVal
85033>>>>>>>>>        Function_Return retVal
85034>>>>>>>>>    End_Function
85035>>>>>>>>>
85035>>>>>>>>>    // Gets or sets number rounding type.
85035>>>>>>>>>    Procedure Set ComRoundingType CRRoundingType value
85037>>>>>>>>>        Handle hDispatchDriver
85037>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85038>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85039>>>>>>>>>        Set ComProperty of hDispatchDriver 130 OLE_VT_I4 to value
85040>>>>>>>>>    End_Procedure
85041>>>>>>>>>
85041>>>>>>>>>    // Gets or sets thousand symbol.
85041>>>>>>>>>    Function ComThousandSymbol Returns String
85043>>>>>>>>>        Handle hDispatchDriver
85043>>>>>>>>>        String retVal
85043>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85044>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 131 OLE_VT_BSTR to retVal
85045>>>>>>>>>        Function_Return retVal
85046>>>>>>>>>    End_Function
85047>>>>>>>>>
85047>>>>>>>>>    // Gets or sets thousand symbol.
85047>>>>>>>>>    Procedure Set ComThousandSymbol String value
85049>>>>>>>>>        Handle hDispatchDriver
85049>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85050>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85051>>>>>>>>>        Set ComProperty of hDispatchDriver 131 OLE_VT_BSTR to value
85052>>>>>>>>>    End_Procedure
85053>>>>>>>>>
85053>>>>>>>>>    // Gets or sets decimal symbol.
85053>>>>>>>>>    Function ComDecimalSymbol Returns String
85055>>>>>>>>>        Handle hDispatchDriver
85055>>>>>>>>>        String retVal
85055>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85056>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 132 OLE_VT_BSTR to retVal
85057>>>>>>>>>        Function_Return retVal
85058>>>>>>>>>    End_Function
85059>>>>>>>>>
85059>>>>>>>>>    // Gets or sets decimal symbol.
85059>>>>>>>>>    Procedure Set ComDecimalSymbol String value
85061>>>>>>>>>        Handle hDispatchDriver
85061>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85062>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85063>>>>>>>>>        Set ComProperty of hDispatchDriver 132 OLE_VT_BSTR to value
85064>>>>>>>>>    End_Procedure
85065>>>>>>>>>
85065>>>>>>>>>    // Gets or sets currency symbol type.
85065>>>>>>>>>    Function ComCurrencySymbolType Returns CRCurrencySymbolType
85067>>>>>>>>>        Handle hDispatchDriver
85067>>>>>>>>>        CRCurrencySymbolType retVal
85067>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85068>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 133 OLE_VT_I4 to retVal
85069>>>>>>>>>        Function_Return retVal
85070>>>>>>>>>    End_Function
85071>>>>>>>>>
85071>>>>>>>>>    // Gets or sets currency symbol type.
85071>>>>>>>>>    Procedure Set ComCurrencySymbolType CRCurrencySymbolType value
85073>>>>>>>>>        Handle hDispatchDriver
85073>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85074>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85075>>>>>>>>>        Set ComProperty of hDispatchDriver 133 OLE_VT_I4 to value
85076>>>>>>>>>    End_Procedure
85077>>>>>>>>>
85077>>>>>>>>>    // Gets or sets use one symbol per page option.
85077>>>>>>>>>    Function ComUseOneSymbolPerPage Returns Boolean
85079>>>>>>>>>        Handle hDispatchDriver
85079>>>>>>>>>        Boolean retVal
85079>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85080>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 134 OLE_VT_BOOL to retVal
85081>>>>>>>>>        Function_Return retVal
85082>>>>>>>>>    End_Function
85083>>>>>>>>>
85083>>>>>>>>>    // Gets or sets use one symbol per page option.
85083>>>>>>>>>    Procedure Set ComUseOneSymbolPerPage Boolean value
85085>>>>>>>>>        Handle hDispatchDriver
85085>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85086>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85087>>>>>>>>>        Set ComProperty of hDispatchDriver 134 OLE_VT_BOOL to value
85088>>>>>>>>>    End_Procedure
85089>>>>>>>>>
85089>>>>>>>>>    // Gets or sets currency position type.
85089>>>>>>>>>    Function ComCurrencyPositionType Returns CRCurrencyPositionType
85091>>>>>>>>>        Handle hDispatchDriver
85091>>>>>>>>>        CRCurrencyPositionType retVal
85091>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85092>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 135 OLE_VT_I4 to retVal
85093>>>>>>>>>        Function_Return retVal
85094>>>>>>>>>    End_Function
85095>>>>>>>>>
85095>>>>>>>>>    // Gets or sets currency position type.
85095>>>>>>>>>    Procedure Set ComCurrencyPositionType CRCurrencyPositionType value
85097>>>>>>>>>        Handle hDispatchDriver
85097>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85098>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85099>>>>>>>>>        Set ComProperty of hDispatchDriver 135 OLE_VT_I4 to value
85100>>>>>>>>>    End_Procedure
85101>>>>>>>>>
85101>>>>>>>>>    // Gets or sets currency symbol.
85101>>>>>>>>>    Function ComCurrencySymbol Returns String
85103>>>>>>>>>        Handle hDispatchDriver
85103>>>>>>>>>        String retVal
85103>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85104>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 136 OLE_VT_BSTR to retVal
85105>>>>>>>>>        Function_Return retVal
85106>>>>>>>>>    End_Function
85107>>>>>>>>>
85107>>>>>>>>>    // Gets or sets currency symbol.
85107>>>>>>>>>    Procedure Set ComCurrencySymbol String value
85109>>>>>>>>>        Handle hDispatchDriver
85109>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85110>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85111>>>>>>>>>        Set ComProperty of hDispatchDriver 136 OLE_VT_BSTR to value
85112>>>>>>>>>    End_Procedure
85113>>>>>>>>>
85113>>>>>>>>>    // Gets or sets boolean  output type.
85113>>>>>>>>>    Function ComBooleanOutputType Returns CRBooleanOutputType
85115>>>>>>>>>        Handle hDispatchDriver
85115>>>>>>>>>        CRBooleanOutputType retVal
85115>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85116>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 137 OLE_VT_I4 to retVal
85117>>>>>>>>>        Function_Return retVal
85118>>>>>>>>>    End_Function
85119>>>>>>>>>
85119>>>>>>>>>    // Gets or sets boolean  output type.
85119>>>>>>>>>    Procedure Set ComBooleanOutputType CRBooleanOutputType value
85121>>>>>>>>>        Handle hDispatchDriver
85121>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85122>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85123>>>>>>>>>        Set ComProperty of hDispatchDriver 137 OLE_VT_I4 to value
85124>>>>>>>>>    End_Procedure
85125>>>>>>>>>
85125>>>>>>>>>    // Gets or sets date windows default type.
85125>>>>>>>>>    Function ComDateWindowsDefaultType Returns CRDateWindowsDefaultType
85127>>>>>>>>>        Handle hDispatchDriver
85127>>>>>>>>>        CRDateWindowsDefaultType retVal
85127>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85128>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 138 OLE_VT_I4 to retVal
85129>>>>>>>>>        Function_Return retVal
85130>>>>>>>>>    End_Function
85131>>>>>>>>>
85131>>>>>>>>>    // Gets or sets date windows default type.
85131>>>>>>>>>    Procedure Set ComDateWindowsDefaultType CRDateWindowsDefaultType value
85133>>>>>>>>>        Handle hDispatchDriver
85133>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85134>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85135>>>>>>>>>        Set ComProperty of hDispatchDriver 138 OLE_VT_I4 to value
85136>>>>>>>>>    End_Procedure
85137>>>>>>>>>
85137>>>>>>>>>    // Gets or sets date order.
85137>>>>>>>>>    Function ComDateOrder Returns CRDateOrder
85139>>>>>>>>>        Handle hDispatchDriver
85139>>>>>>>>>        CRDateOrder retVal
85139>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85140>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 139 OLE_VT_I4 to retVal
85141>>>>>>>>>        Function_Return retVal
85142>>>>>>>>>    End_Function
85143>>>>>>>>>
85143>>>>>>>>>    // Gets or sets date order.
85143>>>>>>>>>    Procedure Set ComDateOrder CRDateOrder value
85145>>>>>>>>>        Handle hDispatchDriver
85145>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85146>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85147>>>>>>>>>        Set ComProperty of hDispatchDriver 139 OLE_VT_I4 to value
85148>>>>>>>>>    End_Procedure
85149>>>>>>>>>
85149>>>>>>>>>    // Gets or sets year type.
85149>>>>>>>>>    Function ComYearType Returns CRYearType
85151>>>>>>>>>        Handle hDispatchDriver
85151>>>>>>>>>        CRYearType retVal
85151>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85152>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 140 OLE_VT_I4 to retVal
85153>>>>>>>>>        Function_Return retVal
85154>>>>>>>>>    End_Function
85155>>>>>>>>>
85155>>>>>>>>>    // Gets or sets year type.
85155>>>>>>>>>    Procedure Set ComYearType CRYearType value
85157>>>>>>>>>        Handle hDispatchDriver
85157>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85158>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85159>>>>>>>>>        Set ComProperty of hDispatchDriver 140 OLE_VT_I4 to value
85160>>>>>>>>>    End_Procedure
85161>>>>>>>>>
85161>>>>>>>>>    // Gets or sets month type.
85161>>>>>>>>>    Function ComMonthType Returns CRMonthType
85163>>>>>>>>>        Handle hDispatchDriver
85163>>>>>>>>>        CRMonthType retVal
85163>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85164>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 141 OLE_VT_I4 to retVal
85165>>>>>>>>>        Function_Return retVal
85166>>>>>>>>>    End_Function
85167>>>>>>>>>
85167>>>>>>>>>    // Gets or sets month type.
85167>>>>>>>>>    Procedure Set ComMonthType CRMonthType value
85169>>>>>>>>>        Handle hDispatchDriver
85169>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85170>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85171>>>>>>>>>        Set ComProperty of hDispatchDriver 141 OLE_VT_I4 to value
85172>>>>>>>>>    End_Procedure
85173>>>>>>>>>
85173>>>>>>>>>    // Gets or sets day type.
85173>>>>>>>>>    Function ComDayType Returns CRDayType
85175>>>>>>>>>        Handle hDispatchDriver
85175>>>>>>>>>        CRDayType retVal
85175>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85176>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 142 OLE_VT_I4 to retVal
85177>>>>>>>>>        Function_Return retVal
85178>>>>>>>>>    End_Function
85179>>>>>>>>>
85179>>>>>>>>>    // Gets or sets day type.
85179>>>>>>>>>    Procedure Set ComDayType CRDayType value
85181>>>>>>>>>        Handle hDispatchDriver
85181>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85182>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85183>>>>>>>>>        Set ComProperty of hDispatchDriver 142 OLE_VT_I4 to value
85184>>>>>>>>>    End_Procedure
85185>>>>>>>>>
85185>>>>>>>>>    // Gets or sets leading day type.
85185>>>>>>>>>    Function ComLeadingDayType Returns CRLeadingDayType
85187>>>>>>>>>        Handle hDispatchDriver
85187>>>>>>>>>        CRLeadingDayType retVal
85187>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85188>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 143 OLE_VT_I4 to retVal
85189>>>>>>>>>        Function_Return retVal
85190>>>>>>>>>    End_Function
85191>>>>>>>>>
85191>>>>>>>>>    // Gets or sets leading day type.
85191>>>>>>>>>    Procedure Set ComLeadingDayType CRLeadingDayType value
85193>>>>>>>>>        Handle hDispatchDriver
85193>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85194>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85195>>>>>>>>>        Set ComProperty of hDispatchDriver 143 OLE_VT_I4 to value
85196>>>>>>>>>    End_Procedure
85197>>>>>>>>>
85197>>>>>>>>>    // Gets or sets leading day separator.
85197>>>>>>>>>    Function ComLeadingDaySeparator Returns String
85199>>>>>>>>>        Handle hDispatchDriver
85199>>>>>>>>>        String retVal
85199>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85200>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 144 OLE_VT_BSTR to retVal
85201>>>>>>>>>        Function_Return retVal
85202>>>>>>>>>    End_Function
85203>>>>>>>>>
85203>>>>>>>>>    // Gets or sets leading day separator.
85203>>>>>>>>>    Procedure Set ComLeadingDaySeparator String value
85205>>>>>>>>>        Handle hDispatchDriver
85205>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85206>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85207>>>>>>>>>        Set ComProperty of hDispatchDriver 144 OLE_VT_BSTR to value
85208>>>>>>>>>    End_Procedure
85209>>>>>>>>>
85209>>>>>>>>>    // Gets or sets date first separator.
85209>>>>>>>>>    Function ComDateFirstSeparator Returns String
85211>>>>>>>>>        Handle hDispatchDriver
85211>>>>>>>>>        String retVal
85211>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85212>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 145 OLE_VT_BSTR to retVal
85213>>>>>>>>>        Function_Return retVal
85214>>>>>>>>>    End_Function
85215>>>>>>>>>
85215>>>>>>>>>    // Gets or sets date first separator.
85215>>>>>>>>>    Procedure Set ComDateFirstSeparator String value
85217>>>>>>>>>        Handle hDispatchDriver
85217>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85218>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85219>>>>>>>>>        Set ComProperty of hDispatchDriver 145 OLE_VT_BSTR to value
85220>>>>>>>>>    End_Procedure
85221>>>>>>>>>
85221>>>>>>>>>    // Gets or sets date second separator.
85221>>>>>>>>>    Function ComDateSecondSeparator Returns String
85223>>>>>>>>>        Handle hDispatchDriver
85223>>>>>>>>>        String retVal
85223>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85224>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 146 OLE_VT_BSTR to retVal
85225>>>>>>>>>        Function_Return retVal
85226>>>>>>>>>    End_Function
85227>>>>>>>>>
85227>>>>>>>>>    // Gets or sets date second separator.
85227>>>>>>>>>    Procedure Set ComDateSecondSeparator String value
85229>>>>>>>>>        Handle hDispatchDriver
85229>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85230>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85231>>>>>>>>>        Set ComProperty of hDispatchDriver 146 OLE_VT_BSTR to value
85232>>>>>>>>>    End_Procedure
85233>>>>>>>>>
85233>>>>>>>>>    // Gets or sets time base.
85233>>>>>>>>>    Function ComTimeBase Returns CRTimeBase
85235>>>>>>>>>        Handle hDispatchDriver
85235>>>>>>>>>        CRTimeBase retVal
85235>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85236>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 147 OLE_VT_I4 to retVal
85237>>>>>>>>>        Function_Return retVal
85238>>>>>>>>>    End_Function
85239>>>>>>>>>
85239>>>>>>>>>    // Gets or sets time base.
85239>>>>>>>>>    Procedure Set ComTimeBase CRTimeBase value
85241>>>>>>>>>        Handle hDispatchDriver
85241>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85242>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85243>>>>>>>>>        Set ComProperty of hDispatchDriver 147 OLE_VT_I4 to value
85244>>>>>>>>>    End_Procedure
85245>>>>>>>>>
85245>>>>>>>>>    // Gets or sets AM/PM type.
85245>>>>>>>>>    Function ComAmPmType Returns CRAmPmType
85247>>>>>>>>>        Handle hDispatchDriver
85247>>>>>>>>>        CRAmPmType retVal
85247>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85248>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 148 OLE_VT_I4 to retVal
85249>>>>>>>>>        Function_Return retVal
85250>>>>>>>>>    End_Function
85251>>>>>>>>>
85251>>>>>>>>>    // Gets or sets AM/PM type.
85251>>>>>>>>>    Procedure Set ComAmPmType CRAmPmType value
85253>>>>>>>>>        Handle hDispatchDriver
85253>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85254>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85255>>>>>>>>>        Set ComProperty of hDispatchDriver 148 OLE_VT_I4 to value
85256>>>>>>>>>    End_Procedure
85257>>>>>>>>>
85257>>>>>>>>>    // Gets or sets hour type.
85257>>>>>>>>>    Function ComHourType Returns CRHourType
85259>>>>>>>>>        Handle hDispatchDriver
85259>>>>>>>>>        CRHourType retVal
85259>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85260>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 149 OLE_VT_I4 to retVal
85261>>>>>>>>>        Function_Return retVal
85262>>>>>>>>>    End_Function
85263>>>>>>>>>
85263>>>>>>>>>    // Gets or sets hour type.
85263>>>>>>>>>    Procedure Set ComHourType CRHourType value
85265>>>>>>>>>        Handle hDispatchDriver
85265>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85266>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85267>>>>>>>>>        Set ComProperty of hDispatchDriver 149 OLE_VT_I4 to value
85268>>>>>>>>>    End_Procedure
85269>>>>>>>>>
85269>>>>>>>>>    // Gets or sets minute type.
85269>>>>>>>>>    Function ComMinuteType Returns CRMinuteType
85271>>>>>>>>>        Handle hDispatchDriver
85271>>>>>>>>>        CRMinuteType retVal
85271>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85272>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 150 OLE_VT_I4 to retVal
85273>>>>>>>>>        Function_Return retVal
85274>>>>>>>>>    End_Function
85275>>>>>>>>>
85275>>>>>>>>>    // Gets or sets minute type.
85275>>>>>>>>>    Procedure Set ComMinuteType CRMinuteType value
85277>>>>>>>>>        Handle hDispatchDriver
85277>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85278>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85279>>>>>>>>>        Set ComProperty of hDispatchDriver 150 OLE_VT_I4 to value
85280>>>>>>>>>    End_Procedure
85281>>>>>>>>>
85281>>>>>>>>>    // Gets or sets second type.
85281>>>>>>>>>    Function ComSecondType Returns CRSecondType
85283>>>>>>>>>        Handle hDispatchDriver
85283>>>>>>>>>        CRSecondType retVal
85283>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85284>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 151 OLE_VT_I4 to retVal
85285>>>>>>>>>        Function_Return retVal
85286>>>>>>>>>    End_Function
85287>>>>>>>>>
85287>>>>>>>>>    // Gets or sets second type.
85287>>>>>>>>>    Procedure Set ComSecondType CRSecondType value
85289>>>>>>>>>        Handle hDispatchDriver
85289>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85290>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85291>>>>>>>>>        Set ComProperty of hDispatchDriver 151 OLE_VT_I4 to value
85292>>>>>>>>>    End_Procedure
85293>>>>>>>>>
85293>>>>>>>>>    // Gets or sets PM string.
85293>>>>>>>>>    Function ComPmString Returns String
85295>>>>>>>>>        Handle hDispatchDriver
85295>>>>>>>>>        String retVal
85295>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85296>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 152 OLE_VT_BSTR to retVal
85297>>>>>>>>>        Function_Return retVal
85298>>>>>>>>>    End_Function
85299>>>>>>>>>
85299>>>>>>>>>    // Gets or sets PM string.
85299>>>>>>>>>    Procedure Set ComPmString String value
85301>>>>>>>>>        Handle hDispatchDriver
85301>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85302>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85303>>>>>>>>>        Set ComProperty of hDispatchDriver 152 OLE_VT_BSTR to value
85304>>>>>>>>>    End_Procedure
85305>>>>>>>>>
85305>>>>>>>>>    // Gets or sets AM string.
85305>>>>>>>>>    Function ComAmString Returns String
85307>>>>>>>>>        Handle hDispatchDriver
85307>>>>>>>>>        String retVal
85307>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85308>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 153 OLE_VT_BSTR to retVal
85309>>>>>>>>>        Function_Return retVal
85310>>>>>>>>>    End_Function
85311>>>>>>>>>
85311>>>>>>>>>    // Gets or sets AM string.
85311>>>>>>>>>    Procedure Set ComAmString String value
85313>>>>>>>>>        Handle hDispatchDriver
85313>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85314>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85315>>>>>>>>>        Set ComProperty of hDispatchDriver 153 OLE_VT_BSTR to value
85316>>>>>>>>>    End_Procedure
85317>>>>>>>>>
85317>>>>>>>>>    // Gets or sets minute second separator.
85317>>>>>>>>>    Function ComMinuteSecondSeparator Returns String
85319>>>>>>>>>        Handle hDispatchDriver
85319>>>>>>>>>        String retVal
85319>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85320>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 154 OLE_VT_BSTR to retVal
85321>>>>>>>>>        Function_Return retVal
85322>>>>>>>>>    End_Function
85323>>>>>>>>>
85323>>>>>>>>>    // Gets or sets minute second separator.
85323>>>>>>>>>    Procedure Set ComMinuteSecondSeparator String value
85325>>>>>>>>>        Handle hDispatchDriver
85325>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85326>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85327>>>>>>>>>        Set ComProperty of hDispatchDriver 154 OLE_VT_BSTR to value
85328>>>>>>>>>    End_Procedure
85329>>>>>>>>>
85329>>>>>>>>>    // Gets or sets hour minute separator.
85329>>>>>>>>>    Function ComHourMinuteSeparator Returns String
85331>>>>>>>>>        Handle hDispatchDriver
85331>>>>>>>>>        String retVal
85331>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85332>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 155 OLE_VT_BSTR to retVal
85333>>>>>>>>>        Function_Return retVal
85334>>>>>>>>>    End_Function
85335>>>>>>>>>
85335>>>>>>>>>    // Gets or sets hour minute separator.
85335>>>>>>>>>    Procedure Set ComHourMinuteSeparator String value
85337>>>>>>>>>        Handle hDispatchDriver
85337>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85338>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85339>>>>>>>>>        Set ComProperty of hDispatchDriver 155 OLE_VT_BSTR to value
85340>>>>>>>>>    End_Procedure
85341>>>>>>>>>
85341>>>>>>>>>    // Gets or sets max of number of line for string memo field.
85341>>>>>>>>>    Function ComMaxNumberOfLines Returns Short
85343>>>>>>>>>        Handle hDispatchDriver
85343>>>>>>>>>        Short retVal
85343>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85344>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 156 OLE_VT_I2 to retVal
85345>>>>>>>>>        Function_Return retVal
85346>>>>>>>>>    End_Function
85347>>>>>>>>>
85347>>>>>>>>>    // Gets or sets max of number of line for string memo field.
85347>>>>>>>>>    Procedure Set ComMaxNumberOfLines Short value
85349>>>>>>>>>        Handle hDispatchDriver
85349>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85350>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85351>>>>>>>>>        Set ComProperty of hDispatchDriver 156 OLE_VT_I2 to value
85352>>>>>>>>>    End_Procedure
85353>>>>>>>>>
85353>>>>>>>>>    // Gets or sets leading day position type.
85353>>>>>>>>>    Function ComLeadingDayPosition Returns CRLeadingDayPosition
85355>>>>>>>>>        Handle hDispatchDriver
85355>>>>>>>>>        CRLeadingDayPosition retVal
85355>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85356>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 399 OLE_VT_I4 to retVal
85357>>>>>>>>>        Function_Return retVal
85358>>>>>>>>>    End_Function
85359>>>>>>>>>
85359>>>>>>>>>    // Gets or sets leading day position type.
85359>>>>>>>>>    Procedure Set ComLeadingDayPosition CRLeadingDayPosition value
85361>>>>>>>>>        Handle hDispatchDriver
85361>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85362>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85363>>>>>>>>>        Set ComProperty of hDispatchDriver 399 OLE_VT_I4 to value
85364>>>>>>>>>    End_Procedure
85365>>>>>>>>>
85365>>>>>>>>>    // Gets or sets date era type.
85365>>>>>>>>>    Function ComDateEraType Returns CRDateEraType
85367>>>>>>>>>        Handle hDispatchDriver
85367>>>>>>>>>        CRDateEraType retVal
85367>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85368>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 400 OLE_VT_I4 to retVal
85369>>>>>>>>>        Function_Return retVal
85370>>>>>>>>>    End_Function
85371>>>>>>>>>
85371>>>>>>>>>    // Gets or sets date era type.
85371>>>>>>>>>    Procedure Set ComDateEraType CRDateEraType value
85373>>>>>>>>>        Handle hDispatchDriver
85373>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85374>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85375>>>>>>>>>        Set ComProperty of hDispatchDriver 400 OLE_VT_I4 to value
85376>>>>>>>>>    End_Procedure
85377>>>>>>>>>
85377>>>>>>>>>    // Gets or sets date calendar type.
85377>>>>>>>>>    Function ComDateCalendarType Returns CRDateCalendarType
85379>>>>>>>>>        Handle hDispatchDriver
85379>>>>>>>>>        CRDateCalendarType retVal
85379>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85380>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 401 OLE_VT_I4 to retVal
85381>>>>>>>>>        Function_Return retVal
85382>>>>>>>>>    End_Function
85383>>>>>>>>>
85383>>>>>>>>>    // Gets or sets date calendar type.
85383>>>>>>>>>    Procedure Set ComDateCalendarType CRDateCalendarType value
85385>>>>>>>>>        Handle hDispatchDriver
85385>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85386>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85387>>>>>>>>>        Set ComProperty of hDispatchDriver 401 OLE_VT_I4 to value
85388>>>>>>>>>    End_Procedure
85389>>>>>>>>>
85389>>>>>>>>>    // Gets or sets date prefix separator.
85389>>>>>>>>>    Function ComDatePrefixSeparator Returns String
85391>>>>>>>>>        Handle hDispatchDriver
85391>>>>>>>>>        String retVal
85391>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85392>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 402 OLE_VT_BSTR to retVal
85393>>>>>>>>>        Function_Return retVal
85394>>>>>>>>>    End_Function
85395>>>>>>>>>
85395>>>>>>>>>    // Gets or sets date prefix separator.
85395>>>>>>>>>    Procedure Set ComDatePrefixSeparator String value
85397>>>>>>>>>        Handle hDispatchDriver
85397>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85398>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85399>>>>>>>>>        Set ComProperty of hDispatchDriver 402 OLE_VT_BSTR to value
85400>>>>>>>>>    End_Procedure
85401>>>>>>>>>
85401>>>>>>>>>    // Gets or sets date suffix separator.
85401>>>>>>>>>    Function ComDateSuffixSeparator Returns String
85403>>>>>>>>>        Handle hDispatchDriver
85403>>>>>>>>>        String retVal
85403>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85404>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 403 OLE_VT_BSTR to retVal
85405>>>>>>>>>        Function_Return retVal
85406>>>>>>>>>    End_Function
85407>>>>>>>>>
85407>>>>>>>>>    // Gets or sets date suffix separator.
85407>>>>>>>>>    Procedure Set ComDateSuffixSeparator String value
85409>>>>>>>>>        Handle hDispatchDriver
85409>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85410>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85411>>>>>>>>>        Set ComProperty of hDispatchDriver 403 OLE_VT_BSTR to value
85412>>>>>>>>>    End_Procedure
85413>>>>>>>>>
85413>>>>>>>>>    // Gets or sets reverse sign option.
85413>>>>>>>>>    Function ComDisplayReverseSign Returns Boolean
85415>>>>>>>>>        Handle hDispatchDriver
85415>>>>>>>>>        Boolean retVal
85415>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85416>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 497 OLE_VT_BOOL to retVal
85417>>>>>>>>>        Function_Return retVal
85418>>>>>>>>>    End_Function
85419>>>>>>>>>
85419>>>>>>>>>    // Gets or sets reverse sign option.
85419>>>>>>>>>    Procedure Set ComDisplayReverseSign Boolean value
85421>>>>>>>>>        Handle hDispatchDriver
85421>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85422>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85423>>>>>>>>>        Set ComProperty of hDispatchDriver 497 OLE_VT_BOOL to value
85424>>>>>>>>>    End_Procedure
85425>>>>>>>>>
85425>>>>>>>>>    // Gets or sets zero value string for number field format.
85425>>>>>>>>>    Function ComZeroValueString Returns String
85427>>>>>>>>>        Handle hDispatchDriver
85427>>>>>>>>>        String retVal
85427>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85428>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 498 OLE_VT_BSTR to retVal
85429>>>>>>>>>        Function_Return retVal
85430>>>>>>>>>    End_Function
85431>>>>>>>>>
85431>>>>>>>>>    // Gets or sets zero value string for number field format.
85431>>>>>>>>>    Procedure Set ComZeroValueString String value
85433>>>>>>>>>        Handle hDispatchDriver
85433>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85434>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85435>>>>>>>>>        Set ComProperty of hDispatchDriver 498 OLE_VT_BSTR to value
85436>>>>>>>>>    End_Procedure
85437>>>>>>>>>
85437>>>>>>>>>    // Gets or sets character spacing.
85437>>>>>>>>>    Function ComCharacterSpacing Returns Integer
85439>>>>>>>>>        Handle hDispatchDriver
85439>>>>>>>>>        Integer retVal
85439>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85440>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 499 OLE_VT_I4 to retVal
85441>>>>>>>>>        Function_Return retVal
85442>>>>>>>>>    End_Function
85443>>>>>>>>>
85443>>>>>>>>>    // Gets or sets character spacing.
85443>>>>>>>>>    Procedure Set ComCharacterSpacing Integer value
85445>>>>>>>>>        Handle hDispatchDriver
85445>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85446>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85447>>>>>>>>>        Set ComProperty of hDispatchDriver 499 OLE_VT_I4 to value
85448>>>>>>>>>    End_Procedure
85449>>>>>>>>>
85449>>>>>>>>>    // Gets or sets line spacing.
85449>>>>>>>>>    Function ComLineSpacing Returns Real
85451>>>>>>>>>        Handle hDispatchDriver
85451>>>>>>>>>        Real retVal
85451>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85452>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 500 OLE_VT_R8 to retVal
85453>>>>>>>>>        Function_Return retVal
85454>>>>>>>>>    End_Function
85455>>>>>>>>>
85455>>>>>>>>>    // Gets or sets line spacing type.
85455>>>>>>>>>    Function ComLineSpacingType Returns CRLineSpacingType
85457>>>>>>>>>        Handle hDispatchDriver
85457>>>>>>>>>        CRLineSpacingType retVal
85457>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85458>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 501 OLE_VT_I4 to retVal
85459>>>>>>>>>        Function_Return retVal
85460>>>>>>>>>    End_Function
85461>>>>>>>>>
85461>>>>>>>>>    // Sets line spacing type and line spacing.
85461>>>>>>>>>    Procedure ComSetLineSpacing Real llLineSpacing CRLineSpacingType llLineSpacingType
85463>>>>>>>>>        Handle hDispatchDriver
85463>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85464>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
85465>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_R8 llLineSpacing
85466>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llLineSpacingType
85467>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 503 OLE_VT_VOID
85468>>>>>>>>>    End_Procedure
85469>>>>>>>>>
85469>>>>>>>>>    // Gets or sets first line indent.
85469>>>>>>>>>    Function ComFirstLineIndent Returns Integer
85471>>>>>>>>>        Handle hDispatchDriver
85471>>>>>>>>>        Integer retVal
85471>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85472>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 504 OLE_VT_I4 to retVal
85473>>>>>>>>>        Function_Return retVal
85474>>>>>>>>>    End_Function
85475>>>>>>>>>
85475>>>>>>>>>    // Gets or sets first line indent.
85475>>>>>>>>>    Procedure Set ComFirstLineIndent Integer value
85477>>>>>>>>>        Handle hDispatchDriver
85477>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85478>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85479>>>>>>>>>        Set ComProperty of hDispatchDriver 504 OLE_VT_I4 to value
85480>>>>>>>>>    End_Procedure
85481>>>>>>>>>
85481>>>>>>>>>    // Gets or sets left indent.
85481>>>>>>>>>    Function ComLeftIndent Returns Integer
85483>>>>>>>>>        Handle hDispatchDriver
85483>>>>>>>>>        Integer retVal
85483>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85484>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 505 OLE_VT_I4 to retVal
85485>>>>>>>>>        Function_Return retVal
85486>>>>>>>>>    End_Function
85487>>>>>>>>>
85487>>>>>>>>>    // Gets or sets left indent.
85487>>>>>>>>>    Procedure Set ComLeftIndent Integer value
85489>>>>>>>>>        Handle hDispatchDriver
85489>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85490>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85491>>>>>>>>>        Set ComProperty of hDispatchDriver 505 OLE_VT_I4 to value
85492>>>>>>>>>    End_Procedure
85493>>>>>>>>>
85493>>>>>>>>>    // Gets or sets right indent.
85493>>>>>>>>>    Function ComRightIndent Returns Integer
85495>>>>>>>>>        Handle hDispatchDriver
85495>>>>>>>>>        Integer retVal
85495>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85496>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 506 OLE_VT_I4 to retVal
85497>>>>>>>>>        Function_Return retVal
85498>>>>>>>>>    End_Function
85499>>>>>>>>>
85499>>>>>>>>>    // Gets or sets right indent.
85499>>>>>>>>>    Procedure Set ComRightIndent Integer value
85501>>>>>>>>>        Handle hDispatchDriver
85501>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85502>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85503>>>>>>>>>        Set ComProperty of hDispatchDriver 506 OLE_VT_I4 to value
85504>>>>>>>>>    End_Procedure
85505>>>>>>>>>
85505>>>>>>>>>    // Gets or sets text format option for string memo field.
85505>>>>>>>>>    Function ComTextFormat Returns CRTextFormat
85507>>>>>>>>>        Handle hDispatchDriver
85507>>>>>>>>>        CRTextFormat retVal
85507>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85508>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 507 OLE_VT_I4 to retVal
85509>>>>>>>>>        Function_Return retVal
85510>>>>>>>>>    End_Function
85511>>>>>>>>>
85511>>>>>>>>>    // Gets or sets text format option for string memo field.
85511>>>>>>>>>    Procedure Set ComTextFormat CRTextFormat value
85513>>>>>>>>>        Handle hDispatchDriver
85513>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85514>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85515>>>>>>>>>        Set ComProperty of hDispatchDriver 507 OLE_VT_I4 to value
85516>>>>>>>>>    End_Procedure
85517>>>>>>>>>
85517>>>>>>>>>    // Gets or sets conditional formula.
85517>>>>>>>>>    Function ComConditionFormula Variant llFormulaType Returns String
85519>>>>>>>>>        Handle hDispatchDriver
85519>>>>>>>>>        String retVal
85519>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85520>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85521>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
85522>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 760 OLE_VT_BSTR to retVal
85523>>>>>>>>>        Function_Return retVal
85524>>>>>>>>>    End_Function
85525>>>>>>>>>
85525>>>>>>>>>    // Gets or sets conditional formula.
85525>>>>>>>>>    Procedure Set ComConditionFormula Variant llFormulaType String value
85527>>>>>>>>>        Handle hDispatchDriver
85527>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85528>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
85529>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFormulaType
85530>>>>>>>>>        Set ComProperty of hDispatchDriver 760 OLE_VT_BSTR to value
85531>>>>>>>>>    End_Procedure
85532>>>>>>>>>End_Class
85533>>>>>>>>>
85533>>>>>>>>>// CoClass
85533>>>>>>>>>// CLSID: {538B038A-275B-4E3C-9C25-D11A8B7E06FF}
85533>>>>>>>>>Class cCrystalFieldElement is a cComAutomationObject
85534>>>>>>>>>    Import_Class_Protocol cCrystalIFieldElement
85535>>>>>>>>>
85535>>>>>>>>>    Procedure Construct_Object
85537>>>>>>>>>        Forward Send Construct_Object
85539>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
85540>>>>>>>>>    End_Procedure
85541>>>>>>>>>End_Class
85542>>>>>>>>>
85542>>>>>>>>>// CLSID: {AF376860-6120-4E28-96DD-63FD2DC27B7A}
85542>>>>>>>>>Class cCrystalINameValuePairs is a Mixin
85543>>>>>>>>>
85543>>>>>>>>>    Function Com_NewEnum Returns Variant
85545>>>>>>>>>        Handle hDispatchDriver
85545>>>>>>>>>        Variant retVal
85545>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85546>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
85547>>>>>>>>>        Function_Return retVal
85548>>>>>>>>>    End_Function
85549>>>>>>>>>
85549>>>>>>>>>    // Gets value by name.
85549>>>>>>>>>    Function ComItem String llName Returns Variant
85551>>>>>>>>>        Handle hDispatchDriver
85551>>>>>>>>>        Variant retVal
85551>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85552>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85553>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
85554>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_VARIANT to retVal
85555>>>>>>>>>        Function_Return retVal
85556>>>>>>>>>    End_Function
85557>>>>>>>>>
85557>>>>>>>>>    // Gets collection count.
85557>>>>>>>>>    Function ComCount Returns Integer
85559>>>>>>>>>        Handle hDispatchDriver
85559>>>>>>>>>        Integer retVal
85559>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85560>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
85561>>>>>>>>>        Function_Return retVal
85562>>>>>>>>>    End_Function
85563>>>>>>>>>
85563>>>>>>>>>    // Adds a name value pair
85563>>>>>>>>>    Procedure ComAdd String llName Variant llValue
85565>>>>>>>>>        Handle hDispatchDriver
85565>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85566>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
85567>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llName
85568>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llValue
85569>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 230 OLE_VT_VOID
85570>>>>>>>>>    End_Procedure
85571>>>>>>>>>
85571>>>>>>>>>    // Deletes a name value pair
85571>>>>>>>>>    Procedure ComDelete Variant llindex
85573>>>>>>>>>        Handle hDispatchDriver
85573>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85574>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85575>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llindex
85576>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 377 OLE_VT_VOID
85577>>>>>>>>>    End_Procedure
85578>>>>>>>>>
85578>>>>>>>>>    // Deletes all name value pairs
85578>>>>>>>>>    Procedure ComDeleteAll
85580>>>>>>>>>        Handle hDispatchDriver
85580>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85581>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 782 OLE_VT_VOID
85582>>>>>>>>>    End_Procedure
85583>>>>>>>>>
85583>>>>>>>>>    // Gets all names in name value pairs
85583>>>>>>>>>    Function ComNameIDs Returns Variant
85585>>>>>>>>>        Handle hDispatchDriver
85585>>>>>>>>>        Variant retVal
85585>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85586>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 783 OLE_VT_VARIANT to retVal
85587>>>>>>>>>        Function_Return retVal
85588>>>>>>>>>    End_Function
85589>>>>>>>>>End_Class
85590>>>>>>>>>
85590>>>>>>>>>// CoClass
85590>>>>>>>>>// CLSID: {D657C40F-27E0-43D1-92F1-0D43FCE24044}
85590>>>>>>>>>Class cCrystalConnectionProperties is a cComAutomationObject
85591>>>>>>>>>    Import_Class_Protocol cCrystalINameValuePairs
85592>>>>>>>>>
85592>>>>>>>>>    Procedure Construct_Object
85594>>>>>>>>>        Forward Send Construct_Object
85596>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
85597>>>>>>>>>    End_Procedure
85598>>>>>>>>>End_Class
85599>>>>>>>>>
85599>>>>>>>>>// CLSID: {AF376861-6120-4E28-96DD-63FD2DC27B7A}
85599>>>>>>>>>Class cCrystalIConnectionProperty is a Mixin
85600>>>>>>>>>
85600>>>>>>>>>    // Gets or sets the connection property name
85600>>>>>>>>>    Function ComName Returns String
85602>>>>>>>>>        Handle hDispatchDriver
85602>>>>>>>>>        String retVal
85602>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85603>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 784 OLE_VT_BSTR to retVal
85604>>>>>>>>>        Function_Return retVal
85605>>>>>>>>>    End_Function
85606>>>>>>>>>
85606>>>>>>>>>    // Gets or sets the connection property name
85606>>>>>>>>>    Procedure Set ComName String value
85608>>>>>>>>>        Handle hDispatchDriver
85608>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85609>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85610>>>>>>>>>        Set ComProperty of hDispatchDriver 784 OLE_VT_BSTR to value
85611>>>>>>>>>    End_Procedure
85612>>>>>>>>>
85612>>>>>>>>>    // Gets or sets the connection property localized name
85612>>>>>>>>>    Function ComLocalizedName Returns String
85614>>>>>>>>>        Handle hDispatchDriver
85614>>>>>>>>>        String retVal
85614>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85615>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 785 OLE_VT_BSTR to retVal
85616>>>>>>>>>        Function_Return retVal
85617>>>>>>>>>    End_Function
85618>>>>>>>>>
85618>>>>>>>>>    // Gets or sets the connection property localized name
85618>>>>>>>>>    Procedure Set ComLocalizedName String value
85620>>>>>>>>>        Handle hDispatchDriver
85620>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85621>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85622>>>>>>>>>        Set ComProperty of hDispatchDriver 785 OLE_VT_BSTR to value
85623>>>>>>>>>    End_Procedure
85624>>>>>>>>>
85624>>>>>>>>>    // Gets or sets the connection property description
85624>>>>>>>>>    Function ComDescription Returns String
85626>>>>>>>>>        Handle hDispatchDriver
85626>>>>>>>>>        String retVal
85626>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85627>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 786 OLE_VT_BSTR to retVal
85628>>>>>>>>>        Function_Return retVal
85629>>>>>>>>>    End_Function
85630>>>>>>>>>
85630>>>>>>>>>    // Gets or sets the connection property description
85630>>>>>>>>>    Procedure Set ComDescription String value
85632>>>>>>>>>        Handle hDispatchDriver
85632>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85633>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85634>>>>>>>>>        Set ComProperty of hDispatchDriver 786 OLE_VT_BSTR to value
85635>>>>>>>>>    End_Procedure
85636>>>>>>>>>
85636>>>>>>>>>    // Gets or sets the connection property value
85636>>>>>>>>>    Function ComValue Returns Variant
85638>>>>>>>>>        Handle hDispatchDriver
85638>>>>>>>>>        Variant retVal
85638>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85639>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_VARIANT to retVal
85640>>>>>>>>>        Function_Return retVal
85641>>>>>>>>>    End_Function
85642>>>>>>>>>
85642>>>>>>>>>    // Gets or sets the connection property value
85642>>>>>>>>>    Procedure Set ComValue Variant value
85644>>>>>>>>>        Handle hDispatchDriver
85644>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85645>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85646>>>>>>>>>        Set ComProperty of hDispatchDriver 0 OLE_VT_VARIANT to value
85647>>>>>>>>>    End_Procedure
85648>>>>>>>>>
85648>>>>>>>>>    // Gets the child properties of this property in a hierarchical property structure.
85648>>>>>>>>>    Function ComChildProperties Returns Variant
85650>>>>>>>>>        Handle hDispatchDriver
85650>>>>>>>>>        Variant retVal
85650>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85651>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 788 OLE_VT_DISPATCH to retVal
85652>>>>>>>>>        Function_Return retVal
85653>>>>>>>>>    End_Function
85654>>>>>>>>>End_Class
85655>>>>>>>>>
85655>>>>>>>>>// CoClass
85655>>>>>>>>>// CLSID: {54D014E7-7EDC-4092-9D91-B1C8702C8C3D}
85655>>>>>>>>>Class cCrystalConnectionProperty is a cComAutomationObject
85656>>>>>>>>>    Import_Class_Protocol cCrystalIConnectionProperty
85657>>>>>>>>>
85657>>>>>>>>>    Procedure Construct_Object
85659>>>>>>>>>        Forward Send Construct_Object
85661>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
85662>>>>>>>>>    End_Procedure
85663>>>>>>>>>End_Class
85664>>>>>>>>>
85664>>>>>>>>>// CLSID: {2B78E414-E7D0-49BF-8F16-CFD6324DB307}
85664>>>>>>>>>Class cCrystalICSFontDescription is a Mixin
85665>>>>>>>>>
85665>>>>>>>>>    // Gets or sets face name.
85665>>>>>>>>>    Function ComFaceName String ByRef llpName Returns Integer
85667>>>>>>>>>        Handle hDispatchDriver
85667>>>>>>>>>        Integer retVal
85667>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85668>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85669>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_BSTR) llpName
85670>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 752 OLE_VT_HRESULT to retVal
85671>>>>>>>>>        Function_Return retVal
85672>>>>>>>>>    End_Function
85673>>>>>>>>>
85673>>>>>>>>>    // Gets or sets face name.
85673>>>>>>>>>    Procedure Set ComFaceName String value
85675>>>>>>>>>        Handle hDispatchDriver
85675>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85676>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85677>>>>>>>>>        Set ComProperty of hDispatchDriver 752 OLE_VT_BSTR to value
85678>>>>>>>>>    End_Procedure
85679>>>>>>>>>
85679>>>>>>>>>    // Gets or sets mask.
85679>>>>>>>>>    Function ComMask Integer ByRef llpMask Returns Integer
85681>>>>>>>>>        Handle hDispatchDriver
85681>>>>>>>>>        Integer retVal
85681>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85682>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85683>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llpMask
85684>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 753 OLE_VT_HRESULT to retVal
85685>>>>>>>>>        Function_Return retVal
85686>>>>>>>>>    End_Function
85687>>>>>>>>>
85687>>>>>>>>>    // Gets or sets mask.
85687>>>>>>>>>    Procedure Set ComMask Integer value
85689>>>>>>>>>        Handle hDispatchDriver
85689>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85690>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85691>>>>>>>>>        Set ComProperty of hDispatchDriver 753 OLE_VT_I4 to value
85692>>>>>>>>>    End_Procedure
85693>>>>>>>>>
85693>>>>>>>>>    // Gets or sets font type.
85693>>>>>>>>>    Function ComFontType Integer ByRef llpFontType Returns Integer
85695>>>>>>>>>        Handle hDispatchDriver
85695>>>>>>>>>        Integer retVal
85695>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85696>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85697>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llpFontType
85698>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 754 OLE_VT_HRESULT to retVal
85699>>>>>>>>>        Function_Return retVal
85700>>>>>>>>>    End_Function
85701>>>>>>>>>
85701>>>>>>>>>    // Gets or sets font type.
85701>>>>>>>>>    Procedure Set ComFontType Integer value
85703>>>>>>>>>        Handle hDispatchDriver
85703>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85704>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85705>>>>>>>>>        Set ComProperty of hDispatchDriver 754 OLE_VT_I4 to value
85706>>>>>>>>>    End_Procedure
85707>>>>>>>>>
85707>>>>>>>>>    // Gets or sets effects.
85707>>>>>>>>>    Function ComEffects Integer ByRef llpEffects Returns Integer
85709>>>>>>>>>        Handle hDispatchDriver
85709>>>>>>>>>        Integer retVal
85709>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85710>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85711>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llpEffects
85712>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 755 OLE_VT_HRESULT to retVal
85713>>>>>>>>>        Function_Return retVal
85714>>>>>>>>>    End_Function
85715>>>>>>>>>
85715>>>>>>>>>    // Gets or sets effects.
85715>>>>>>>>>    Procedure Set ComEffects Integer value
85717>>>>>>>>>        Handle hDispatchDriver
85717>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85718>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85719>>>>>>>>>        Set ComProperty of hDispatchDriver 755 OLE_VT_I4 to value
85720>>>>>>>>>    End_Procedure
85721>>>>>>>>>
85721>>>>>>>>>    // Gets or sets weight.
85721>>>>>>>>>    Function ComWeight Integer ByRef llpWeight Returns Integer
85723>>>>>>>>>        Handle hDispatchDriver
85723>>>>>>>>>        Integer retVal
85723>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85724>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85725>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llpWeight
85726>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 756 OLE_VT_HRESULT to retVal
85727>>>>>>>>>        Function_Return retVal
85728>>>>>>>>>    End_Function
85729>>>>>>>>>
85729>>>>>>>>>    // Gets or sets weight.
85729>>>>>>>>>    Procedure Set ComWeight Integer value
85731>>>>>>>>>        Handle hDispatchDriver
85731>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85732>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85733>>>>>>>>>        Set ComProperty of hDispatchDriver 756 OLE_VT_I4 to value
85734>>>>>>>>>    End_Procedure
85735>>>>>>>>>
85735>>>>>>>>>    // Gets or sets size.
85735>>>>>>>>>    Function ComSize Integer ByRef llpSize Returns Integer
85737>>>>>>>>>        Handle hDispatchDriver
85737>>>>>>>>>        Integer retVal
85737>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85738>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85739>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llpSize
85740>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 757 OLE_VT_HRESULT to retVal
85741>>>>>>>>>        Function_Return retVal
85742>>>>>>>>>    End_Function
85743>>>>>>>>>
85743>>>>>>>>>    // Gets or sets size.
85743>>>>>>>>>    Procedure Set ComSize Integer value
85745>>>>>>>>>        Handle hDispatchDriver
85745>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85746>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85747>>>>>>>>>        Set ComProperty of hDispatchDriver 757 OLE_VT_I4 to value
85748>>>>>>>>>    End_Procedure
85749>>>>>>>>>
85749>>>>>>>>>    // Gets or sets pitchAndFamily.
85749>>>>>>>>>    Function ComPitchAndFamily UChar ByRef llpPitchAndFamily Returns Integer
85751>>>>>>>>>        Handle hDispatchDriver
85751>>>>>>>>>        Integer retVal
85751>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85752>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85753>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_UI1) llpPitchAndFamily
85754>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 758 OLE_VT_HRESULT to retVal
85755>>>>>>>>>        Function_Return retVal
85756>>>>>>>>>    End_Function
85757>>>>>>>>>
85757>>>>>>>>>    // Gets or sets pitchAndFamily.
85757>>>>>>>>>    Procedure Set ComPitchAndFamily UChar value
85759>>>>>>>>>        Handle hDispatchDriver
85759>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85760>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85761>>>>>>>>>        Set ComProperty of hDispatchDriver 758 OLE_VT_UI1 to value
85762>>>>>>>>>    End_Procedure
85763>>>>>>>>>End_Class
85764>>>>>>>>>
85764>>>>>>>>>// CoClass
85764>>>>>>>>>// CLSID: {6591EBB6-745D-4F34-8C90-3B05F412318F}
85764>>>>>>>>>Class cCrystalCSFontDescription is a cComAutomationObject
85765>>>>>>>>>    Import_Class_Protocol cCrystalICSFontDescription
85766>>>>>>>>>
85766>>>>>>>>>    Procedure Construct_Object
85768>>>>>>>>>        Forward Send Construct_Object
85770>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
85771>>>>>>>>>    End_Procedure
85772>>>>>>>>>End_Class
85773>>>>>>>>>
85773>>>>>>>>>// CLSID: {18B4704D-8501-444C-8207-256BADB31F07}
85773>>>>>>>>>Class cCrystalITableQualifiers is a Mixin
85774>>>>>>>>>
85774>>>>>>>>>    Function Com_NewEnum Returns Variant
85776>>>>>>>>>        Handle hDispatchDriver
85776>>>>>>>>>        Variant retVal
85776>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85777>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
85778>>>>>>>>>        Function_Return retVal
85779>>>>>>>>>    End_Function
85780>>>>>>>>>
85780>>>>>>>>>    // Gets the qualifier by index.
85780>>>>>>>>>    Function ComItem Integer llindex Returns String
85782>>>>>>>>>        Handle hDispatchDriver
85782>>>>>>>>>        String retVal
85782>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85783>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85784>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llindex
85785>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_BSTR to retVal
85786>>>>>>>>>        Function_Return retVal
85787>>>>>>>>>    End_Function
85788>>>>>>>>>
85788>>>>>>>>>    // Gets the count of qualifiers.
85788>>>>>>>>>    Function ComCount Returns Integer
85790>>>>>>>>>        Handle hDispatchDriver
85790>>>>>>>>>        Integer retVal
85790>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85791>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 161 OLE_VT_I4 to retVal
85792>>>>>>>>>        Function_Return retVal
85793>>>>>>>>>    End_Function
85794>>>>>>>>>End_Class
85795>>>>>>>>>
85795>>>>>>>>>// CoClass
85795>>>>>>>>>// CLSID: {F6DD4F4D-814F-4E16-BFB0-27194A621157}
85795>>>>>>>>>Class cCrystalTableQualifiers is a cComAutomationObject
85796>>>>>>>>>    Import_Class_Protocol cCrystalITableQualifiers
85797>>>>>>>>>
85797>>>>>>>>>    Procedure Construct_Object
85799>>>>>>>>>        Forward Send Construct_Object
85801>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
85802>>>>>>>>>    End_Procedure
85803>>>>>>>>>End_Class
85804>>>>>>>Use cCrystalCDO32.pkg
Including file: cCrystalcdo32.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cCrystalcdo32.pkg)
85804>>>>>>>>>// Visual DataFlex COM proxy classes generated from C:\Program Files\Common Files\Business Objects\3.0\bin\Cdo32.dll
85804>>>>>>>>>Use FlexCom20.pkg
85804>>>>>>>>>
85804>>>>>>>>>
85804>>>>>>>>>// CLSID: {7C5A4C13-A559-11D0-881A-00AA00BA30B7}
85804>>>>>>>>>// ICrystalDataObject Interface
85804>>>>>>>>>Class cCrystalICrystalDataObject is a Mixin
85805>>>>>>>>>
85805>>>>>>>>>    // property RowCount
85805>>>>>>>>>    Function ComRowCount Returns Integer
85807>>>>>>>>>        Handle hDispatchDriver
85807>>>>>>>>>        Integer retVal
85807>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85808>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
85809>>>>>>>>>        Function_Return retVal
85810>>>>>>>>>    End_Function
85811>>>>>>>>>
85811>>>>>>>>>    // method AddRows
85811>>>>>>>>>    Procedure ComAddRows Variant llRowData
85813>>>>>>>>>        Handle hDispatchDriver
85813>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85814>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85815>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llRowData
85816>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 2 OLE_VT_VOID
85817>>>>>>>>>    End_Procedure
85818>>>>>>>>>
85818>>>>>>>>>    // method Reset
85818>>>>>>>>>    Procedure ComReset
85820>>>>>>>>>        Handle hDispatchDriver
85820>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85821>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 3 OLE_VT_VOID
85822>>>>>>>>>    End_Procedure
85823>>>>>>>>>
85823>>>>>>>>>    // method DeleteField
85823>>>>>>>>>    Function ComDeleteField String llFieldName Returns Boolean
85825>>>>>>>>>        Handle hDispatchDriver
85825>>>>>>>>>        Boolean retVal
85825>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85826>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85827>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llFieldName
85828>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_BOOL to retVal
85829>>>>>>>>>        Function_Return retVal
85830>>>>>>>>>    End_Function
85831>>>>>>>>>
85831>>>>>>>>>    // method getEOF
85831>>>>>>>>>    Function ComGetEOF Returns Boolean
85833>>>>>>>>>        Handle hDispatchDriver
85833>>>>>>>>>        Boolean retVal
85833>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85834>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_BOOL to retVal
85835>>>>>>>>>        Function_Return retVal
85836>>>>>>>>>    End_Function
85837>>>>>>>>>
85837>>>>>>>>>    // method MoveNext
85837>>>>>>>>>    Function ComMoveNext Returns Boolean
85839>>>>>>>>>        Handle hDispatchDriver
85839>>>>>>>>>        Boolean retVal
85839>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85840>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_BOOL to retVal
85841>>>>>>>>>        Function_Return retVal
85842>>>>>>>>>    End_Function
85843>>>>>>>>>
85843>>>>>>>>>    // method MoveFirst
85843>>>>>>>>>    Function ComMoveFirst Returns Boolean
85845>>>>>>>>>        Handle hDispatchDriver
85845>>>>>>>>>        Boolean retVal
85845>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85846>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 7 OLE_VT_BOOL to retVal
85847>>>>>>>>>        Function_Return retVal
85848>>>>>>>>>    End_Function
85849>>>>>>>>>
85849>>>>>>>>>    // method GetColCount
85849>>>>>>>>>    Function ComGetColCount Returns Short
85851>>>>>>>>>        Handle hDispatchDriver
85851>>>>>>>>>        Short retVal
85851>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85852>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 8 OLE_VT_I2 to retVal
85853>>>>>>>>>        Function_Return retVal
85854>>>>>>>>>    End_Function
85855>>>>>>>>>
85855>>>>>>>>>    // method MoveTo
85855>>>>>>>>>    Function ComMoveTo Integer llrecordNum Returns Boolean
85857>>>>>>>>>        Handle hDispatchDriver
85857>>>>>>>>>        Boolean retVal
85857>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85858>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85859>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llrecordNum
85860>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 9 OLE_VT_BOOL to retVal
85861>>>>>>>>>        Function_Return retVal
85862>>>>>>>>>    End_Function
85863>>>>>>>>>
85863>>>>>>>>>    // method AddField
85863>>>>>>>>>    Function ComAddField String llFieldName Variant llFieldType Returns Boolean
85865>>>>>>>>>        Handle hDispatchDriver
85865>>>>>>>>>        Boolean retVal
85865>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85866>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
85867>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llFieldName
85868>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llFieldType
85869>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 10 OLE_VT_BOOL to retVal
85870>>>>>>>>>        Function_Return retVal
85871>>>>>>>>>    End_Function
85872>>>>>>>>>
85872>>>>>>>>>    // method GetFieldData
85872>>>>>>>>>    Function ComGetFieldData Short llcolumn Returns Variant
85874>>>>>>>>>        Handle hDispatchDriver
85874>>>>>>>>>        Variant retVal
85874>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85875>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85876>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llcolumn
85877>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 11 OLE_VT_VARIANT to retVal
85878>>>>>>>>>        Function_Return retVal
85879>>>>>>>>>    End_Function
85880>>>>>>>>>
85880>>>>>>>>>    // method GetFieldName
85880>>>>>>>>>    Function ComGetFieldName Short llcolumn Returns String
85882>>>>>>>>>        Handle hDispatchDriver
85882>>>>>>>>>        String retVal
85882>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85883>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85884>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llcolumn
85885>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 12 OLE_VT_BSTR to retVal
85886>>>>>>>>>        Function_Return retVal
85887>>>>>>>>>    End_Function
85888>>>>>>>>>
85888>>>>>>>>>    // method GetFieldType
85888>>>>>>>>>    Function ComGetFieldType Variant llField Returns Short
85890>>>>>>>>>        Handle hDispatchDriver
85890>>>>>>>>>        Short retVal
85890>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85891>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85892>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llField
85893>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 13 OLE_VT_I2 to retVal
85894>>>>>>>>>        Function_Return retVal
85895>>>>>>>>>    End_Function
85896>>>>>>>>>End_Class
85897>>>>>>>>>
85897>>>>>>>>>// CoClass
85897>>>>>>>>>// ProgID: CrystalDataObject.CrystalComObject
85897>>>>>>>>>// CLSID: {41B60FA4-AB20-4E3E-A515-E3A87D3EB0A9}
85897>>>>>>>>>// Crystal Data Object 2.7
85897>>>>>>>>>Class cCrystalCrystalComObject is a cComAutomationObject
85898>>>>>>>>>    Import_Class_Protocol cCrystalICrystalDataObject
85899>>>>>>>>>
85899>>>>>>>>>    Procedure Construct_Object
85901>>>>>>>>>        Forward Send Construct_Object
85903>>>>>>>>>        Set psProgID to "{41B60FA4-AB20-4E3E-A515-E3A87D3EB0A9}"
85904>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
85905>>>>>>>>>    End_Procedure
85906>>>>>>>>>End_Class
85907>>>>>>>Use cCrystalPreview.pkg // activeX preview
Including file: cCrystalPreview.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cCrystalPreview.pkg)
85907>>>>>>>>>Use DFADlg.pkg   // defines view class
85907>>>>>>>>>Use cCrystalActiveXReportViewer.pkg
Including file: cCrystalActiveXReportViewer.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cCrystalActiveXReportViewer.pkg)
85907>>>>>>>>>>>// Visual DataFlex COM proxy classes generated from C:\Program Files\Common Files\Business Objects\3.0\crystalreportviewers11\ActiveXControls\CRViewer.dll
85907>>>>>>>>>>>Use FlexCom20.pkg
85907>>>>>>>>>>>
85907>>>>>>>>>>>
85907>>>>>>>>>>>Define CRLoadingType for Integer
85907>>>>>>>>>>>    Define crLoadingNothing for 0
85907>>>>>>>>>>>    Define crLoadingPages for 1
85907>>>>>>>>>>>    Define crLoadingTotaller for 2
85907>>>>>>>>>>>    Define crLoadingQueryInfo for 3
85907>>>>>>>>>>>
85907>>>>>>>>>>>Define CRDrillType for Integer
85907>>>>>>>>>>>    Define crDrillOnGroup for 0
85907>>>>>>>>>>>    Define crDrillOnGroupTree for 1
85907>>>>>>>>>>>    Define crDrillOnGraph for 2
85907>>>>>>>>>>>    Define crDrillOnMap for 3
85907>>>>>>>>>>>    Define crDrillOnSubreport for 4
85907>>>>>>>>>>>
85907>>>>>>>>>>>Define CRTrackCursor for Integer
85907>>>>>>>>>>>    Define crDefaultCursor for 0
85907>>>>>>>>>>>    Define crArrowCursor for 1
85907>>>>>>>>>>>    Define crCrossCursor for 2
85907>>>>>>>>>>>    Define crIBeamCursor for 3
85907>>>>>>>>>>>    Define crNoCursor for 10
85907>>>>>>>>>>>    Define crWaitCursor for 11
85907>>>>>>>>>>>    Define crAppStartingCursor for 12
85907>>>>>>>>>>>    Define crHelpCursor for 13
85907>>>>>>>>>>>    Define crMagnifyCursor for 99
85907>>>>>>>>>>>
85907>>>>>>>>>>>Define CRFieldType for Integer
85907>>>>>>>>>>>    Define crInt8 for 0
85907>>>>>>>>>>>    Define crInt16 for 1
85907>>>>>>>>>>>    Define crInt32 for 2
85907>>>>>>>>>>>    Define crNumber for 3
85907>>>>>>>>>>>    Define crCurrency for 4
85907>>>>>>>>>>>    Define crBoolean for 5
85907>>>>>>>>>>>    Define crDate for 6
85907>>>>>>>>>>>    Define crTime for 7
85907>>>>>>>>>>>    Define crDateTime for 8
85907>>>>>>>>>>>    Define crString for 9
85907>>>>>>>>>>>    Define crUnknownFieldType for 255
85907>>>>>>>>>>>
85907>>>>>>>>>>>Define CRObjectType for Integer
85907>>>>>>>>>>>    Define crUnknownFieldDefType for 0
85907>>>>>>>>>>>    Define crDatabaseFieldType for 1
85907>>>>>>>>>>>    Define crOLAPDimensionFieldType for 2
85907>>>>>>>>>>>    Define crOLAPDataFieldType for 3
85907>>>>>>>>>>>    Define crOLAPCrossTabFieldType for 4
85907>>>>>>>>>>>    Define crFormulaFieldType for 5
85907>>>>>>>>>>>    Define crSummaryFieldType for 6
85907>>>>>>>>>>>    Define crSpecialVarFieldType for 7
85907>>>>>>>>>>>    Define crGroupNameFieldType for 8
85907>>>>>>>>>>>    Define crPromptingVarFieldType for 9
85907>>>>>>>>>>>    Define crText for 100
85907>>>>>>>>>>>    Define crOLEObject for 101
85907>>>>>>>>>>>    Define crSubreport for 102
85907>>>>>>>>>>>    Define crBitmap for 103
85907>>>>>>>>>>>    Define crBlob for 104
85907>>>>>>>>>>>    Define crLine for 105
85907>>>>>>>>>>>    Define crBox for 106
85907>>>>>>>>>>>    Define crGroupChart for 107
85907>>>>>>>>>>>    Define crCrosstabChart for 108
85907>>>>>>>>>>>    Define crDetailChart for 109
85907>>>>>>>>>>>    Define crCrossTab for 110
85907>>>>>>>>>>>    Define crGraphic for 111
85907>>>>>>>>>>>    Define crOOPSubreport for 112
85907>>>>>>>>>>>    Define crOLAPChart for 113
85907>>>>>>>>>>>    Define crGroupMap for 114
85907>>>>>>>>>>>    Define crCrosstabMap for 115
85907>>>>>>>>>>>    Define crDetailMap for 116
85907>>>>>>>>>>>    Define crOLAPMap for 117
85907>>>>>>>>>>>    Define crGroupHeaderSection for 200
85907>>>>>>>>>>>    Define crGroupFooterSection for 201
85907>>>>>>>>>>>    Define crDetailSection for 202
85907>>>>>>>>>>>    Define crReportHeaderSection for 203
85907>>>>>>>>>>>    Define crReportFooterSection for 204
85907>>>>>>>>>>>    Define crPageHeaderSection for 205
85907>>>>>>>>>>>    Define crPageFooterSection for 206
85907>>>>>>>>>>>
85907>>>>>>>>>>>Struct tagRECT
85907>>>>>>>>>>>    Integer left
85907>>>>>>>>>>>    Integer top
85907>>>>>>>>>>>    Integer right
85907>>>>>>>>>>>    Integer bottom
85907>>>>>>>>>>>End_Struct
85907>>>>>>>>>>>
85907>>>>>>>>>>>// CLSID: {3FA3EA6B-D886-4689-87E5-2EFB3101F16B}
85907>>>>>>>>>>>// Interface to the Crystal Report Viewer Control
85907>>>>>>>>>>>Class cCrystalICrystalReportViewer11 is a Mixin
85908>>>>>>>>>>>
85908>>>>>>>>>>>    // Get the report source
85908>>>>>>>>>>>    Function ComReportSource Returns Variant
85910>>>>>>>>>>>        Handle hDispatchDriver
85910>>>>>>>>>>>        Variant retVal
85910>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85911>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 250 OLE_VT_UNKNOWN to retVal
85912>>>>>>>>>>>        Function_Return retVal
85913>>>>>>>>>>>    End_Function
85914>>>>>>>>>>>
85914>>>>>>>>>>>    // Get the report source
85914>>>>>>>>>>>    Procedure Set ComReportSource Variant value
85916>>>>>>>>>>>        Handle hDispatchDriver
85916>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85917>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85918>>>>>>>>>>>        Set ComProperty of hDispatchDriver 250 OLE_VT_UNKNOWN to value
85919>>>>>>>>>>>    End_Procedure
85920>>>>>>>>>>>
85920>>>>>>>>>>>    // Determine if the group tree is visible
85920>>>>>>>>>>>    Function ComDisplayGroupTree Returns Boolean
85922>>>>>>>>>>>        Handle hDispatchDriver
85922>>>>>>>>>>>        Boolean retVal
85922>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85923>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 251 OLE_VT_BOOL to retVal
85924>>>>>>>>>>>        Function_Return retVal
85925>>>>>>>>>>>    End_Function
85926>>>>>>>>>>>
85926>>>>>>>>>>>    // Determine if the group tree is visible
85926>>>>>>>>>>>    Procedure Set ComDisplayGroupTree Boolean value
85928>>>>>>>>>>>        Handle hDispatchDriver
85928>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85929>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85930>>>>>>>>>>>        Set ComProperty of hDispatchDriver 251 OLE_VT_BOOL to value
85931>>>>>>>>>>>    End_Procedure
85932>>>>>>>>>>>
85932>>>>>>>>>>>    // Determine if the toolbar is visible
85932>>>>>>>>>>>    Function ComDisplayToolbar Returns Boolean
85934>>>>>>>>>>>        Handle hDispatchDriver
85934>>>>>>>>>>>        Boolean retVal
85934>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85935>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 252 OLE_VT_BOOL to retVal
85936>>>>>>>>>>>        Function_Return retVal
85937>>>>>>>>>>>    End_Function
85938>>>>>>>>>>>
85938>>>>>>>>>>>    // Determine if the toolbar is visible
85938>>>>>>>>>>>    Procedure Set ComDisplayToolbar Boolean value
85940>>>>>>>>>>>        Handle hDispatchDriver
85940>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85941>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85942>>>>>>>>>>>        Set ComProperty of hDispatchDriver 252 OLE_VT_BOOL to value
85943>>>>>>>>>>>    End_Procedure
85944>>>>>>>>>>>
85944>>>>>>>>>>>    // Determine if the group tree is available
85944>>>>>>>>>>>    Function ComEnableGroupTree Returns Boolean
85946>>>>>>>>>>>        Handle hDispatchDriver
85946>>>>>>>>>>>        Boolean retVal
85946>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85947>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 253 OLE_VT_BOOL to retVal
85948>>>>>>>>>>>        Function_Return retVal
85949>>>>>>>>>>>    End_Function
85950>>>>>>>>>>>
85950>>>>>>>>>>>    // Determine if the group tree is available
85950>>>>>>>>>>>    Procedure Set ComEnableGroupTree Boolean value
85952>>>>>>>>>>>        Handle hDispatchDriver
85952>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85953>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85954>>>>>>>>>>>        Set ComProperty of hDispatchDriver 253 OLE_VT_BOOL to value
85955>>>>>>>>>>>    End_Procedure
85956>>>>>>>>>>>
85956>>>>>>>>>>>    // Determines if the viewer has navigation controls
85956>>>>>>>>>>>    Function ComEnableNavigationControls Returns Boolean
85958>>>>>>>>>>>        Handle hDispatchDriver
85958>>>>>>>>>>>        Boolean retVal
85958>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85959>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 254 OLE_VT_BOOL to retVal
85960>>>>>>>>>>>        Function_Return retVal
85961>>>>>>>>>>>    End_Function
85962>>>>>>>>>>>
85962>>>>>>>>>>>    // Determines if the viewer has navigation controls
85962>>>>>>>>>>>    Procedure Set ComEnableNavigationControls Boolean value
85964>>>>>>>>>>>        Handle hDispatchDriver
85964>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85965>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85966>>>>>>>>>>>        Set ComProperty of hDispatchDriver 254 OLE_VT_BOOL to value
85967>>>>>>>>>>>    End_Procedure
85968>>>>>>>>>>>
85968>>>>>>>>>>>    // Determines if the viewer has a stop button
85968>>>>>>>>>>>    Function ComEnableStopButton Returns Boolean
85970>>>>>>>>>>>        Handle hDispatchDriver
85970>>>>>>>>>>>        Boolean retVal
85970>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85971>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 255 OLE_VT_BOOL to retVal
85972>>>>>>>>>>>        Function_Return retVal
85973>>>>>>>>>>>    End_Function
85974>>>>>>>>>>>
85974>>>>>>>>>>>    // Determines if the viewer has a stop button
85974>>>>>>>>>>>    Procedure Set ComEnableStopButton Boolean value
85976>>>>>>>>>>>        Handle hDispatchDriver
85976>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85977>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85978>>>>>>>>>>>        Set ComProperty of hDispatchDriver 255 OLE_VT_BOOL to value
85979>>>>>>>>>>>    End_Procedure
85980>>>>>>>>>>>
85980>>>>>>>>>>>    // Determine if the print button is visible
85980>>>>>>>>>>>    Function ComEnablePrintButton Returns Boolean
85982>>>>>>>>>>>        Handle hDispatchDriver
85982>>>>>>>>>>>        Boolean retVal
85982>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85983>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 256 OLE_VT_BOOL to retVal
85984>>>>>>>>>>>        Function_Return retVal
85985>>>>>>>>>>>    End_Function
85986>>>>>>>>>>>
85986>>>>>>>>>>>    // Determine if the print button is visible
85986>>>>>>>>>>>    Procedure Set ComEnablePrintButton Boolean value
85988>>>>>>>>>>>        Handle hDispatchDriver
85988>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85989>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
85990>>>>>>>>>>>        Set ComProperty of hDispatchDriver 256 OLE_VT_BOOL to value
85991>>>>>>>>>>>    End_Procedure
85992>>>>>>>>>>>
85992>>>>>>>>>>>    // Determine if the zoom control is visible
85992>>>>>>>>>>>    Function ComEnableZoomControl Returns Boolean
85994>>>>>>>>>>>        Handle hDispatchDriver
85994>>>>>>>>>>>        Boolean retVal
85994>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
85995>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 257 OLE_VT_BOOL to retVal
85996>>>>>>>>>>>        Function_Return retVal
85997>>>>>>>>>>>    End_Function
85998>>>>>>>>>>>
85998>>>>>>>>>>>    // Determine if the zoom control is visible
85998>>>>>>>>>>>    Procedure Set ComEnableZoomControl Boolean value
86000>>>>>>>>>>>        Handle hDispatchDriver
86000>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86001>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86002>>>>>>>>>>>        Set ComProperty of hDispatchDriver 257 OLE_VT_BOOL to value
86003>>>>>>>>>>>    End_Procedure
86004>>>>>>>>>>>
86004>>>>>>>>>>>    // Determine if the close button is visible
86004>>>>>>>>>>>    Function ComEnableCloseButton Returns Boolean
86006>>>>>>>>>>>        Handle hDispatchDriver
86006>>>>>>>>>>>        Boolean retVal
86006>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86007>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 258 OLE_VT_BOOL to retVal
86008>>>>>>>>>>>        Function_Return retVal
86009>>>>>>>>>>>    End_Function
86010>>>>>>>>>>>
86010>>>>>>>>>>>    // Determine if the close button is visible
86010>>>>>>>>>>>    Procedure Set ComEnableCloseButton Boolean value
86012>>>>>>>>>>>        Handle hDispatchDriver
86012>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86013>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86014>>>>>>>>>>>        Set ComProperty of hDispatchDriver 258 OLE_VT_BOOL to value
86015>>>>>>>>>>>    End_Procedure
86016>>>>>>>>>>>
86016>>>>>>>>>>>    // Determine if the progress control will be shown
86016>>>>>>>>>>>    Function ComEnableProgressControl Returns Boolean
86018>>>>>>>>>>>        Handle hDispatchDriver
86018>>>>>>>>>>>        Boolean retVal
86018>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86019>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 259 OLE_VT_BOOL to retVal
86020>>>>>>>>>>>        Function_Return retVal
86021>>>>>>>>>>>    End_Function
86022>>>>>>>>>>>
86022>>>>>>>>>>>    // Determine if the progress control will be shown
86022>>>>>>>>>>>    Procedure Set ComEnableProgressControl Boolean value
86024>>>>>>>>>>>        Handle hDispatchDriver
86024>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86025>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86026>>>>>>>>>>>        Set ComProperty of hDispatchDriver 259 OLE_VT_BOOL to value
86027>>>>>>>>>>>    End_Procedure
86028>>>>>>>>>>>
86028>>>>>>>>>>>    // Determine if the search control is visible
86028>>>>>>>>>>>    Function ComEnableSearchControl Returns Boolean
86030>>>>>>>>>>>        Handle hDispatchDriver
86030>>>>>>>>>>>        Boolean retVal
86030>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86031>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 260 OLE_VT_BOOL to retVal
86032>>>>>>>>>>>        Function_Return retVal
86033>>>>>>>>>>>    End_Function
86034>>>>>>>>>>>
86034>>>>>>>>>>>    // Determine if the search control is visible
86034>>>>>>>>>>>    Procedure Set ComEnableSearchControl Boolean value
86036>>>>>>>>>>>        Handle hDispatchDriver
86036>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86037>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86038>>>>>>>>>>>        Set ComProperty of hDispatchDriver 260 OLE_VT_BOOL to value
86039>>>>>>>>>>>    End_Procedure
86040>>>>>>>>>>>
86040>>>>>>>>>>>    // Determine if the Refresh button is visible
86040>>>>>>>>>>>    Function ComEnableRefreshButton Returns Boolean
86042>>>>>>>>>>>        Handle hDispatchDriver
86042>>>>>>>>>>>        Boolean retVal
86042>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86043>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 261 OLE_VT_BOOL to retVal
86044>>>>>>>>>>>        Function_Return retVal
86045>>>>>>>>>>>    End_Function
86046>>>>>>>>>>>
86046>>>>>>>>>>>    // Determine if the Refresh button is visible
86046>>>>>>>>>>>    Procedure Set ComEnableRefreshButton Boolean value
86048>>>>>>>>>>>        Handle hDispatchDriver
86048>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86049>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86050>>>>>>>>>>>        Set ComProperty of hDispatchDriver 261 OLE_VT_BOOL to value
86051>>>>>>>>>>>    End_Procedure
86052>>>>>>>>>>>
86052>>>>>>>>>>>    // Deterimine if drill down is allowed
86052>>>>>>>>>>>    Function ComEnableDrillDown Returns Boolean
86054>>>>>>>>>>>        Handle hDispatchDriver
86054>>>>>>>>>>>        Boolean retVal
86054>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86055>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 262 OLE_VT_BOOL to retVal
86056>>>>>>>>>>>        Function_Return retVal
86057>>>>>>>>>>>    End_Function
86058>>>>>>>>>>>
86058>>>>>>>>>>>    // Deterimine if drill down is allowed
86058>>>>>>>>>>>    Procedure Set ComEnableDrillDown Boolean value
86060>>>>>>>>>>>        Handle hDispatchDriver
86060>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86061>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86062>>>>>>>>>>>        Set ComProperty of hDispatchDriver 262 OLE_VT_BOOL to value
86063>>>>>>>>>>>    End_Procedure
86064>>>>>>>>>>>
86064>>>>>>>>>>>    // Determine if the animation control is visible
86064>>>>>>>>>>>    Function ComEnableAnimationCtrl Returns Boolean
86066>>>>>>>>>>>        Handle hDispatchDriver
86066>>>>>>>>>>>        Boolean retVal
86066>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86067>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 263 OLE_VT_BOOL to retVal
86068>>>>>>>>>>>        Function_Return retVal
86069>>>>>>>>>>>    End_Function
86070>>>>>>>>>>>
86070>>>>>>>>>>>    // Determine if the animation control is visible
86070>>>>>>>>>>>    Procedure Set ComEnableAnimationCtrl Boolean value
86072>>>>>>>>>>>        Handle hDispatchDriver
86072>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86073>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86074>>>>>>>>>>>        Set ComProperty of hDispatchDriver 263 OLE_VT_BOOL to value
86075>>>>>>>>>>>    End_Procedure
86076>>>>>>>>>>>
86076>>>>>>>>>>>    // Determine if the Select Expert button is showing
86076>>>>>>>>>>>    Function ComEnableSelectExpertButton Returns Boolean
86078>>>>>>>>>>>        Handle hDispatchDriver
86078>>>>>>>>>>>        Boolean retVal
86078>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86079>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 264 OLE_VT_BOOL to retVal
86080>>>>>>>>>>>        Function_Return retVal
86081>>>>>>>>>>>    End_Function
86082>>>>>>>>>>>
86082>>>>>>>>>>>    // Determine if the Select Expert button is showing
86082>>>>>>>>>>>    Procedure Set ComEnableSelectExpertButton Boolean value
86084>>>>>>>>>>>        Handle hDispatchDriver
86084>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86085>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86086>>>>>>>>>>>        Set ComProperty of hDispatchDriver 264 OLE_VT_BOOL to value
86087>>>>>>>>>>>    End_Procedure
86088>>>>>>>>>>>
86088>>>>>>>>>>>    // ViewReport
86088>>>>>>>>>>>    Procedure ComViewReport
86090>>>>>>>>>>>        Handle hDispatchDriver
86090>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86091>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 265 OLE_VT_VOID
86092>>>>>>>>>>>    End_Procedure
86093>>>>>>>>>>>
86093>>>>>>>>>>>    // EnableToolbar indicates if the viewer has a toolbar (shown or hidden)
86093>>>>>>>>>>>    Function ComEnableToolbar Returns Boolean
86095>>>>>>>>>>>        Handle hDispatchDriver
86095>>>>>>>>>>>        Boolean retVal
86095>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86096>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 340 OLE_VT_BOOL to retVal
86097>>>>>>>>>>>        Function_Return retVal
86098>>>>>>>>>>>    End_Function
86099>>>>>>>>>>>
86099>>>>>>>>>>>    // EnableToolbar indicates if the viewer has a toolbar (shown or hidden)
86099>>>>>>>>>>>    Procedure Set ComEnableToolbar Boolean value
86101>>>>>>>>>>>        Handle hDispatchDriver
86101>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86102>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86103>>>>>>>>>>>        Set ComProperty of hDispatchDriver 340 OLE_VT_BOOL to value
86104>>>>>>>>>>>    End_Procedure
86105>>>>>>>>>>>
86105>>>>>>>>>>>    // DisplayBorder indicates if the viewer has a border
86105>>>>>>>>>>>    Function ComDisplayBorder Returns Boolean
86107>>>>>>>>>>>        Handle hDispatchDriver
86107>>>>>>>>>>>        Boolean retVal
86107>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86108>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 341 OLE_VT_BOOL to retVal
86109>>>>>>>>>>>        Function_Return retVal
86110>>>>>>>>>>>    End_Function
86111>>>>>>>>>>>
86111>>>>>>>>>>>    // DisplayBorder indicates if the viewer has a border
86111>>>>>>>>>>>    Procedure Set ComDisplayBorder Boolean value
86113>>>>>>>>>>>        Handle hDispatchDriver
86113>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86114>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86115>>>>>>>>>>>        Set ComProperty of hDispatchDriver 341 OLE_VT_BOOL to value
86116>>>>>>>>>>>    End_Procedure
86117>>>>>>>>>>>
86117>>>>>>>>>>>    // DisplayTabs indicates if the viewer has tabs for navigation between views
86117>>>>>>>>>>>    Function ComDisplayTabs Returns Boolean
86119>>>>>>>>>>>        Handle hDispatchDriver
86119>>>>>>>>>>>        Boolean retVal
86119>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86120>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 342 OLE_VT_BOOL to retVal
86121>>>>>>>>>>>        Function_Return retVal
86122>>>>>>>>>>>    End_Function
86123>>>>>>>>>>>
86123>>>>>>>>>>>    // DisplayTabs indicates if the viewer has tabs for navigation between views
86123>>>>>>>>>>>    Procedure Set ComDisplayTabs Boolean value
86125>>>>>>>>>>>        Handle hDispatchDriver
86125>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86126>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86127>>>>>>>>>>>        Set ComProperty of hDispatchDriver 342 OLE_VT_BOOL to value
86128>>>>>>>>>>>    End_Procedure
86129>>>>>>>>>>>
86129>>>>>>>>>>>    // Determines if the report is offset from the edge of its view window.
86129>>>>>>>>>>>    Function ComDisplayBackgroundEdge Returns Boolean
86131>>>>>>>>>>>        Handle hDispatchDriver
86131>>>>>>>>>>>        Boolean retVal
86131>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86132>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 343 OLE_VT_BOOL to retVal
86133>>>>>>>>>>>        Function_Return retVal
86134>>>>>>>>>>>    End_Function
86135>>>>>>>>>>>
86135>>>>>>>>>>>    // Determines if the report is offset from the edge of its view window.
86135>>>>>>>>>>>    Procedure Set ComDisplayBackgroundEdge Boolean value
86137>>>>>>>>>>>        Handle hDispatchDriver
86137>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86138>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86139>>>>>>>>>>>        Set ComProperty of hDispatchDriver 343 OLE_VT_BOOL to value
86140>>>>>>>>>>>    End_Procedure
86141>>>>>>>>>>>
86141>>>>>>>>>>>    // Get the TrackCursorInfo object
86141>>>>>>>>>>>    Function ComTrackCursorInfo Returns Variant
86143>>>>>>>>>>>        Handle hDispatchDriver
86143>>>>>>>>>>>        Variant retVal
86143>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86144>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 345 OLE_VT_DISPATCH to retVal
86145>>>>>>>>>>>        Function_Return retVal
86146>>>>>>>>>>>    End_Function
86147>>>>>>>>>>>
86147>>>>>>>>>>>    // ActiveViewIndex returns the 1-based index of the current view (tab)
86147>>>>>>>>>>>    Function ComActiveViewIndex Returns Short
86149>>>>>>>>>>>        Handle hDispatchDriver
86149>>>>>>>>>>>        Short retVal
86149>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86150>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 346 OLE_VT_I2 to retVal
86151>>>>>>>>>>>        Function_Return retVal
86152>>>>>>>>>>>    End_Function
86153>>>>>>>>>>>
86153>>>>>>>>>>>    // ViewCount returns the current number of views (tabs)
86153>>>>>>>>>>>    Function ComViewCount Returns Short
86155>>>>>>>>>>>        Handle hDispatchDriver
86155>>>>>>>>>>>        Short retVal
86155>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86156>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 347 OLE_VT_I2 to retVal
86157>>>>>>>>>>>        Function_Return retVal
86158>>>>>>>>>>>    End_Function
86159>>>>>>>>>>>
86159>>>>>>>>>>>    // ActivateView activates a particular view by 1-based index
86159>>>>>>>>>>>    Procedure ComActivateView Variant llIndex
86161>>>>>>>>>>>        Handle hDispatchDriver
86161>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86162>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86163>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llIndex
86164>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 348 OLE_VT_VOID
86165>>>>>>>>>>>    End_Procedure
86166>>>>>>>>>>>
86166>>>>>>>>>>>    // AddView adds a new view (tab).  GroupPath can be a colon-delimited string (Country:State:City), a safe array of strings (Country, State, City), or a safe array of longs (1, 2, 0).
86166>>>>>>>>>>>    Procedure ComAddView Variant llGroupPath
86168>>>>>>>>>>>        Handle hDispatchDriver
86168>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86169>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86170>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llGroupPath
86171>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 349 OLE_VT_VOID
86172>>>>>>>>>>>    End_Procedure
86173>>>>>>>>>>>
86173>>>>>>>>>>>    // CloseView closes the view, given the 1-based index number of the view. S_FALSE is returned if the user was prompted to close drill-down or subreport views and elected not to proceed.
86173>>>>>>>>>>>    Procedure ComCloseView Variant llIndex
86175>>>>>>>>>>>        Handle hDispatchDriver
86175>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86176>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86177>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llIndex
86178>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 350 OLE_VT_VOID
86179>>>>>>>>>>>    End_Procedure
86180>>>>>>>>>>>
86180>>>>>>>>>>>    // GetViewPath returns the path to the current view, given the 1-based index number of the view.  Path contains a safe array of strings
86180>>>>>>>>>>>    Function ComGetViewPath Short llIndex Returns Variant
86182>>>>>>>>>>>        Handle hDispatchDriver
86182>>>>>>>>>>>        Variant retVal
86182>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86183>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86184>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llIndex
86185>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 351 OLE_VT_VARIANT to retVal
86186>>>>>>>>>>>        Function_Return retVal
86187>>>>>>>>>>>    End_Function
86188>>>>>>>>>>>
86188>>>>>>>>>>>    // PrintReport initiates printing of the report in the current view
86188>>>>>>>>>>>    Procedure ComPrintReport
86190>>>>>>>>>>>        Handle hDispatchDriver
86190>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86191>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 352 OLE_VT_VOID
86192>>>>>>>>>>>    End_Procedure
86193>>>>>>>>>>>
86193>>>>>>>>>>>    // Refresh causes the view information to be reloaded and displayed
86193>>>>>>>>>>>    Procedure ComRefresh
86195>>>>>>>>>>>        Handle hDispatchDriver
86195>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86196>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 353 OLE_VT_VOID
86197>>>>>>>>>>>    End_Procedure
86198>>>>>>>>>>>
86198>>>>>>>>>>>    // SearchForText allows searching for text across pages of the current view
86198>>>>>>>>>>>    Procedure ComSearchForText String llText
86200>>>>>>>>>>>        Handle hDispatchDriver
86200>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86201>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86202>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llText
86203>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 354 OLE_VT_VOID
86204>>>>>>>>>>>    End_Procedure
86205>>>>>>>>>>>
86205>>>>>>>>>>>    // ShowFirstPage shows the first page of the current view
86205>>>>>>>>>>>    Procedure ComShowFirstPage
86207>>>>>>>>>>>        Handle hDispatchDriver
86207>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86208>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 355 OLE_VT_VOID
86209>>>>>>>>>>>    End_Procedure
86210>>>>>>>>>>>
86210>>>>>>>>>>>    // ShowNextPage shows the next page of the current view
86210>>>>>>>>>>>    Procedure ComShowNextPage
86212>>>>>>>>>>>        Handle hDispatchDriver
86212>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86213>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 356 OLE_VT_VOID
86214>>>>>>>>>>>    End_Procedure
86215>>>>>>>>>>>
86215>>>>>>>>>>>    // ShowPreviousPage shows the previous page of the current view
86215>>>>>>>>>>>    Procedure ComShowPreviousPage
86217>>>>>>>>>>>        Handle hDispatchDriver
86217>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86218>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 357 OLE_VT_VOID
86219>>>>>>>>>>>    End_Procedure
86220>>>>>>>>>>>
86220>>>>>>>>>>>    // ShowLastPage shows the last page of the current view
86220>>>>>>>>>>>    Procedure ComShowLastPage
86222>>>>>>>>>>>        Handle hDispatchDriver
86222>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86223>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 358 OLE_VT_VOID
86224>>>>>>>>>>>    End_Procedure
86225>>>>>>>>>>>
86225>>>>>>>>>>>    // ShowNthPage shows the desired page of the current view
86225>>>>>>>>>>>    Procedure ComShowNthPage Short llPageNumber
86227>>>>>>>>>>>        Handle hDispatchDriver
86227>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86228>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86229>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llPageNumber
86230>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 359 OLE_VT_VOID
86231>>>>>>>>>>>    End_Procedure
86232>>>>>>>>>>>
86232>>>>>>>>>>>    // Zoom changes the display of the report.  All numbers are percentages except:  1 - fit width, 2 - fit page
86232>>>>>>>>>>>    Procedure ComZoom Short llZoomLevel
86234>>>>>>>>>>>        Handle hDispatchDriver
86234>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86235>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86236>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I2 llZoomLevel
86237>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 360 OLE_VT_VOID
86238>>>>>>>>>>>    End_Procedure
86239>>>>>>>>>>>
86239>>>>>>>>>>>    // GetCurrentPageNumber returns the page number of the report being viewed
86239>>>>>>>>>>>    Function ComGetCurrentPageNumber Returns Integer
86241>>>>>>>>>>>        Handle hDispatchDriver
86241>>>>>>>>>>>        Integer retVal
86241>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86242>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 361 OLE_VT_I4 to retVal
86243>>>>>>>>>>>        Function_Return retVal
86244>>>>>>>>>>>    End_Function
86245>>>>>>>>>>>
86245>>>>>>>>>>>    // ShowGroup displays the indicated group in the current view.  GroupPath can be a colon-delimited string (Country:State:City), a safe array of strings (Country, State, City), or a safe array of longs (1, 2, 0).
86245>>>>>>>>>>>    Procedure ComShowGroup Variant llGroupPath
86247>>>>>>>>>>>        Handle hDispatchDriver
86247>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86248>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86249>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_VARIANT llGroupPath
86250>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 362 OLE_VT_VOID
86251>>>>>>>>>>>    End_Procedure
86252>>>>>>>>>>>
86252>>>>>>>>>>>    // IsBusy indicates if the control is busy.
86252>>>>>>>>>>>    Function ComIsBusy Returns Boolean
86254>>>>>>>>>>>        Handle hDispatchDriver
86254>>>>>>>>>>>        Boolean retVal
86254>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86255>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 363 OLE_VT_BOOL to retVal
86256>>>>>>>>>>>        Function_Return retVal
86257>>>>>>>>>>>    End_Function
86258>>>>>>>>>>>
86258>>>>>>>>>>>    // Determine if the pop menu is available
86258>>>>>>>>>>>    Function ComEnablePopupMenu Returns Boolean
86260>>>>>>>>>>>        Handle hDispatchDriver
86260>>>>>>>>>>>        Boolean retVal
86260>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86261>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 364 OLE_VT_BOOL to retVal
86262>>>>>>>>>>>        Function_Return retVal
86263>>>>>>>>>>>    End_Function
86264>>>>>>>>>>>
86264>>>>>>>>>>>    // Determine if the pop menu is available
86264>>>>>>>>>>>    Procedure Set ComEnablePopupMenu Boolean value
86266>>>>>>>>>>>        Handle hDispatchDriver
86266>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86267>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86268>>>>>>>>>>>        Set ComProperty of hDispatchDriver 364 OLE_VT_BOOL to value
86269>>>>>>>>>>>    End_Procedure
86270>>>>>>>>>>>
86270>>>>>>>>>>>    // Status of the Export toolbar button
86270>>>>>>>>>>>    Function ComEnableExportButton Returns Boolean
86272>>>>>>>>>>>        Handle hDispatchDriver
86272>>>>>>>>>>>        Boolean retVal
86272>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86273>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 365 OLE_VT_BOOL to retVal
86274>>>>>>>>>>>        Function_Return retVal
86275>>>>>>>>>>>    End_Function
86276>>>>>>>>>>>
86276>>>>>>>>>>>    // Status of the Export toolbar button
86276>>>>>>>>>>>    Procedure Set ComEnableExportButton Boolean value
86278>>>>>>>>>>>        Handle hDispatchDriver
86278>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86279>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86280>>>>>>>>>>>        Set ComProperty of hDispatchDriver 365 OLE_VT_BOOL to value
86281>>>>>>>>>>>    End_Procedure
86282>>>>>>>>>>>
86282>>>>>>>>>>>    // Status of the Search Expert toolbar button
86282>>>>>>>>>>>    Function ComEnableSearchExpertButton Returns Boolean
86284>>>>>>>>>>>        Handle hDispatchDriver
86284>>>>>>>>>>>        Boolean retVal
86284>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86285>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 367 OLE_VT_BOOL to retVal
86286>>>>>>>>>>>        Function_Return retVal
86287>>>>>>>>>>>    End_Function
86288>>>>>>>>>>>
86288>>>>>>>>>>>    // Status of the Search Expert toolbar button
86288>>>>>>>>>>>    Procedure Set ComEnableSearchExpertButton Boolean value
86290>>>>>>>>>>>        Handle hDispatchDriver
86290>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86291>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86292>>>>>>>>>>>        Set ComProperty of hDispatchDriver 367 OLE_VT_BOOL to value
86293>>>>>>>>>>>    End_Procedure
86294>>>>>>>>>>>
86294>>>>>>>>>>>    // Search using the search formula.  Search UI is shown if formula is empty.
86294>>>>>>>>>>>    Procedure ComSearchByFormula String llformula
86296>>>>>>>>>>>        Handle hDispatchDriver
86296>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86297>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86298>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BSTR llformula
86299>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 368 OLE_VT_VOID
86300>>>>>>>>>>>    End_Procedure
86301>>>>>>>>>>>
86301>>>>>>>>>>>    // GetViewName returns the current view's tab name and the current report document's name.
86301>>>>>>>>>>>    Function ComGetViewName String ByRef llpTabName Returns String
86303>>>>>>>>>>>        Handle hDispatchDriver
86303>>>>>>>>>>>        String retVal
86303>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86304>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86305>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_BSTR) llpTabName
86306>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 369 OLE_VT_BSTR to retVal
86307>>>>>>>>>>>        Function_Return retVal
86308>>>>>>>>>>>    End_Function
86309>>>>>>>>>>>
86309>>>>>>>>>>>    // Enable the help button on the toolbar
86309>>>>>>>>>>>    Function ComEnableHelpButton Returns Boolean
86311>>>>>>>>>>>        Handle hDispatchDriver
86311>>>>>>>>>>>        Boolean retVal
86311>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86312>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 370 OLE_VT_BOOL to retVal
86313>>>>>>>>>>>        Function_Return retVal
86314>>>>>>>>>>>    End_Function
86315>>>>>>>>>>>
86315>>>>>>>>>>>    // Enable the help button on the toolbar
86315>>>>>>>>>>>    Procedure Set ComEnableHelpButton Boolean value
86317>>>>>>>>>>>        Handle hDispatchDriver
86317>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86318>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86319>>>>>>>>>>>        Set ComProperty of hDispatchDriver 370 OLE_VT_BOOL to value
86320>>>>>>>>>>>    End_Procedure
86321>>>>>>>>>>>
86321>>>>>>>>>>>    // Get the group path of the current view.  The the VT type of the VARIANT to control the type of result:  VT_ARRAY | VT_I4 or VT_BSTR
86321>>>>>>>>>>>    Function ComGetGroup Returns Variant
86323>>>>>>>>>>>        Handle hDispatchDriver
86323>>>>>>>>>>>        Variant retVal
86323>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86324>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 400 OLE_VT_VARIANT to retVal
86325>>>>>>>>>>>        Function_Return retVal
86326>>>>>>>>>>>    End_Function
86327>>>>>>>>>>>
86327>>>>>>>>>>>    // Get the last page number.  The last page number may not have been calculated so it may not be known.  For Visual Basic, a Long and a Boolean should be passed, Procedure style.
86327>>>>>>>>>>>    Procedure ComGetLastPageNumber Integer ByRef llpageN Boolean ByRef lllastPageKnown
86329>>>>>>>>>>>        Handle hDispatchDriver
86329>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86330>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
86331>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llpageN
86332>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_BOOL) lllastPageKnown
86333>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 401 OLE_VT_VOID
86334>>>>>>>>>>>    End_Procedure
86335>>>>>>>>>>>
86335>>>>>>>>>>>    // Refresh the report, optionally causing the server to refresh its data
86335>>>>>>>>>>>    Procedure ComRefreshEx Boolean llrefreshServerData
86337>>>>>>>>>>>        Handle hDispatchDriver
86337>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86338>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86339>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_BOOL llrefreshServerData
86340>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 402 OLE_VT_VOID
86341>>>>>>>>>>>    End_Procedure
86342>>>>>>>>>>>
86342>>>>>>>>>>>    // Launch HTTP Hyperlinks in a new browser
86342>>>>>>>>>>>    Function ComLaunchHTTPHyperlinksInNewBrowser Returns Boolean
86344>>>>>>>>>>>        Handle hDispatchDriver
86344>>>>>>>>>>>        Boolean retVal
86344>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86345>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 500 OLE_VT_BOOL to retVal
86346>>>>>>>>>>>        Function_Return retVal
86347>>>>>>>>>>>    End_Function
86348>>>>>>>>>>>
86348>>>>>>>>>>>    // Launch HTTP Hyperlinks in a new browser
86348>>>>>>>>>>>    Procedure Set ComLaunchHTTPHyperlinksInNewBrowser Boolean value
86350>>>>>>>>>>>        Handle hDispatchDriver
86350>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86351>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86352>>>>>>>>>>>        Set ComProperty of hDispatchDriver 500 OLE_VT_BOOL to value
86353>>>>>>>>>>>    End_Procedure
86354>>>>>>>>>>>
86354>>>>>>>>>>>    // Get the locale ID
86354>>>>>>>>>>>    Function ComLocaleID Returns UInteger
86356>>>>>>>>>>>        Handle hDispatchDriver
86356>>>>>>>>>>>        UInteger retVal
86356>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86357>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 601 OLE_VT_UI4 to retVal
86358>>>>>>>>>>>        Function_Return retVal
86359>>>>>>>>>>>    End_Function
86360>>>>>>>>>>>
86360>>>>>>>>>>>    // Get the locale ID
86360>>>>>>>>>>>    Procedure Set ComLocaleID UInteger value
86362>>>>>>>>>>>        Handle hDispatchDriver
86362>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86363>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86364>>>>>>>>>>>        Set ComProperty of hDispatchDriver 601 OLE_VT_UI4 to value
86365>>>>>>>>>>>    End_Procedure
86366>>>>>>>>>>>End_Class
86367>>>>>>>>>>>
86367>>>>>>>>>>>// CLSID: {C889ACF5-F43B-40E0-834D-EEF26B6C419C}
86367>>>>>>>>>>>// Crystal Report Viewer Control - Event Interface
86367>>>>>>>>>>>Class cCrystal_ICRViewerEvents is a Mixin
86368>>>>>>>>>>>
86368>>>>>>>>>>>    Procedure OnComCloseButtonClicked Boolean ByRef llUseDefault
86370>>>>>>>>>>>    End_Procedure
86371>>>>>>>>>>>
86371>>>>>>>>>>>    Procedure OnComFirstPageButtonClicked Boolean ByRef llUseDefault
86373>>>>>>>>>>>    End_Procedure
86374>>>>>>>>>>>
86374>>>>>>>>>>>    Procedure OnComLastPageButtonClicked Boolean ByRef llUseDefault
86376>>>>>>>>>>>    End_Procedure
86377>>>>>>>>>>>
86377>>>>>>>>>>>    Procedure OnComPrevPageButtonClicked Boolean ByRef llUseDefault
86379>>>>>>>>>>>    End_Procedure
86380>>>>>>>>>>>
86380>>>>>>>>>>>    Procedure OnComNextPageButtonClicked Boolean ByRef llUseDefault
86382>>>>>>>>>>>    End_Procedure
86383>>>>>>>>>>>
86383>>>>>>>>>>>    Procedure OnComGoToPageNClicked Boolean ByRef llUseDefault Short llPageNumber
86385>>>>>>>>>>>    End_Procedure
86386>>>>>>>>>>>
86386>>>>>>>>>>>    Procedure OnComStopButtonClicked CRLoadingType llloadingType Boolean ByRef llUseDefault
86388>>>>>>>>>>>    End_Procedure
86389>>>>>>>>>>>
86389>>>>>>>>>>>    Procedure OnComRefreshButtonClicked Boolean ByRef llUseDefault
86391>>>>>>>>>>>    End_Procedure
86392>>>>>>>>>>>
86392>>>>>>>>>>>    Procedure OnComPrintButtonClicked Boolean ByRef llUseDefault
86394>>>>>>>>>>>    End_Procedure
86395>>>>>>>>>>>
86395>>>>>>>>>>>    Procedure OnComGroupTreeButtonClicked Boolean llVisible
86397>>>>>>>>>>>    End_Procedure
86398>>>>>>>>>>>
86398>>>>>>>>>>>    Procedure OnComZoomLevelChanged Short llZoomLevel
86400>>>>>>>>>>>    End_Procedure
86401>>>>>>>>>>>
86401>>>>>>>>>>>    Procedure OnComSearchButtonClicked String llsearchText Boolean ByRef llUseDefault
86403>>>>>>>>>>>    End_Procedure
86404>>>>>>>>>>>
86404>>>>>>>>>>>    Procedure OnComDrillOnGroup Variant llGroupNameList CRDrillType llDrillType Boolean ByRef llUseDefault
86406>>>>>>>>>>>    End_Procedure
86407>>>>>>>>>>>
86407>>>>>>>>>>>    Procedure OnComShowGroup Variant llGroupNameList Boolean ByRef llUseDefault
86409>>>>>>>>>>>    End_Procedure
86410>>>>>>>>>>>
86410>>>>>>>>>>>    Procedure OnComSelectionFormulaButtonClicked String ByRef llselctionFormula Boolean ByRef llUseDefault
86412>>>>>>>>>>>    End_Procedure
86413>>>>>>>>>>>
86413>>>>>>>>>>>    Procedure OnComSelectionFormulaBuilt String llselctionFormula Boolean ByRef llUseDefault
86415>>>>>>>>>>>    End_Procedure
86416>>>>>>>>>>>
86416>>>>>>>>>>>    Procedure OnComClicked Integer llx Integer lly Variant llEventInfo Boolean ByRef llUseDefault
86418>>>>>>>>>>>    End_Procedure
86419>>>>>>>>>>>
86419>>>>>>>>>>>    Procedure OnComDblClicked Integer llx Integer lly Variant llEventInfo Boolean ByRef llUseDefault
86421>>>>>>>>>>>    End_Procedure
86422>>>>>>>>>>>
86422>>>>>>>>>>>    Procedure OnComDownloadStarted CRLoadingType llloadingType
86424>>>>>>>>>>>    End_Procedure
86425>>>>>>>>>>>
86425>>>>>>>>>>>    Procedure OnComDownloadFinished CRLoadingType llloadingType
86427>>>>>>>>>>>    End_Procedure
86428>>>>>>>>>>>
86428>>>>>>>>>>>    Procedure OnComViewChanging Integer lloldViewIndex Integer llnewViewIndex
86430>>>>>>>>>>>    End_Procedure
86431>>>>>>>>>>>
86431>>>>>>>>>>>    Procedure OnComViewChanged Integer lloldViewIndex Integer llnewViewIndex
86433>>>>>>>>>>>    End_Procedure
86434>>>>>>>>>>>
86434>>>>>>>>>>>    Procedure OnComReportSourceError String llerrorMsg Integer llerrorCode Boolean ByRef llUseDefault
86436>>>>>>>>>>>    End_Procedure
86437>>>>>>>>>>>
86437>>>>>>>>>>>    Procedure OnComExportButtonClicked Boolean ByRef llUseDefault
86439>>>>>>>>>>>    End_Procedure
86440>>>>>>>>>>>
86440>>>>>>>>>>>    Procedure OnComSearchExpertButtonClicked Boolean ByRef llUseDefault
86442>>>>>>>>>>>    End_Procedure
86443>>>>>>>>>>>
86443>>>>>>>>>>>    Procedure OnComDrillOnGraph Integer llPageNumber Integer llx Integer lly Boolean ByRef llUseDefault
86445>>>>>>>>>>>    End_Procedure
86446>>>>>>>>>>>
86446>>>>>>>>>>>    Procedure OnComDrillOnSubreport Variant llGroupNameList String llSubreportName String llTitle Integer llPageNumber Integer llIndex Boolean ByRef llUseDefault
86448>>>>>>>>>>>    End_Procedure
86449>>>>>>>>>>>
86449>>>>>>>>>>>    Procedure OnComHelpButtonClicked
86451>>>>>>>>>>>    End_Procedure
86452>>>>>>>>>>>
86452>>>>>>>>>>>    Procedure OnComFocusChanged Boolean llhasFocus
86454>>>>>>>>>>>    End_Procedure
86455>>>>>>>>>>>
86455>>>>>>>>>>>    // x,y are screen coordinates.  Set UseDefault to false if you want to display your own menu.
86455>>>>>>>>>>>    Procedure OnComContextMenu Variant llObjectDescription Integer llx Integer lly Boolean ByRef llUseDefault
86457>>>>>>>>>>>    End_Procedure
86458>>>>>>>>>>>
86458>>>>>>>>>>>    // x,y,width,height in document units (twips).
86458>>>>>>>>>>>    Procedure OnComChangeObjectRect Variant llObjectDescription Integer llx Integer lly Integer llwidth Integer llheight
86460>>>>>>>>>>>    End_Procedure
86461>>>>>>>>>>>
86461>>>>>>>>>>>    // Fired before launching a hyperlink.  Set UseDefalt to False to avoid launching.  Change the hyperlink to redirect elsewhere.
86461>>>>>>>>>>>    Procedure OnComLaunchHyperlink String ByRef llHyperlink Boolean ByRef llUseDefault
86463>>>>>>>>>>>    End_Procedure
86464>>>>>>>>>>>
86464>>>>>>>>>>>    // Fired when a view closes
86464>>>>>>>>>>>    Procedure OnComViewClosed Integer llviewIndex
86466>>>>>>>>>>>    End_Procedure
86467>>>>>>>>>>>
86467>>>>>>>>>>>    Procedure RegisterComEvents
86469>>>>>>>>>>>        Send RegisterComEvent 401 msg_OnComCloseButtonClicked
86470>>>>>>>>>>>        Send RegisterComEvent 402 msg_OnComFirstPageButtonClicked
86471>>>>>>>>>>>        Send RegisterComEvent 403 msg_OnComLastPageButtonClicked
86472>>>>>>>>>>>        Send RegisterComEvent 404 msg_OnComPrevPageButtonClicked
86473>>>>>>>>>>>        Send RegisterComEvent 405 msg_OnComNextPageButtonClicked
86474>>>>>>>>>>>        Send RegisterComEvent 406 msg_OnComGoToPageNClicked
86475>>>>>>>>>>>        Send RegisterComEvent 407 msg_OnComStopButtonClicked
86476>>>>>>>>>>>        Send RegisterComEvent 408 msg_OnComRefreshButtonClicked
86477>>>>>>>>>>>        Send RegisterComEvent 409 msg_OnComPrintButtonClicked
86478>>>>>>>>>>>        Send RegisterComEvent 410 msg_OnComGroupTreeButtonClicked
86479>>>>>>>>>>>        Send RegisterComEvent 411 msg_OnComZoomLevelChanged
86480>>>>>>>>>>>        Send RegisterComEvent 412 msg_OnComSearchButtonClicked
86481>>>>>>>>>>>        Send RegisterComEvent 413 msg_OnComDrillOnGroup
86482>>>>>>>>>>>        Send RegisterComEvent 415 msg_OnComShowGroup
86483>>>>>>>>>>>        Send RegisterComEvent 416 msg_OnComSelectionFormulaButtonClicked
86484>>>>>>>>>>>        Send RegisterComEvent 417 msg_OnComSelectionFormulaBuilt
86485>>>>>>>>>>>        Send RegisterComEvent 418 msg_OnComClicked
86486>>>>>>>>>>>        Send RegisterComEvent 419 msg_OnComDblClicked
86487>>>>>>>>>>>        Send RegisterComEvent 420 msg_OnComDownloadStarted
86488>>>>>>>>>>>        Send RegisterComEvent 421 msg_OnComDownloadFinished
86489>>>>>>>>>>>        Send RegisterComEvent 422 msg_OnComViewChanging
86490>>>>>>>>>>>        Send RegisterComEvent 423 msg_OnComViewChanged
86491>>>>>>>>>>>        Send RegisterComEvent 424 msg_OnComReportSourceError
86492>>>>>>>>>>>        Send RegisterComEvent 425 msg_OnComExportButtonClicked
86493>>>>>>>>>>>        Send RegisterComEvent 426 msg_OnComSearchExpertButtonClicked
86494>>>>>>>>>>>        Send RegisterComEvent 427 msg_OnComDrillOnGraph
86495>>>>>>>>>>>        Send RegisterComEvent 428 msg_OnComDrillOnSubreport
86496>>>>>>>>>>>        Send RegisterComEvent 429 msg_OnComHelpButtonClicked
86497>>>>>>>>>>>        Send RegisterComEvent 430 msg_OnComFocusChanged
86498>>>>>>>>>>>        Send RegisterComEvent 431 msg_OnComContextMenu
86499>>>>>>>>>>>        Send RegisterComEvent 432 msg_OnComChangeObjectRect
86500>>>>>>>>>>>        Send RegisterComEvent 433 msg_OnComLaunchHyperlink
86501>>>>>>>>>>>        Send RegisterComEvent 434 msg_OnComViewClosed
86502>>>>>>>>>>>    End_Procedure
86503>>>>>>>>>>>End_Class
86504>>>>>>>>>>>
86504>>>>>>>>>>>// CoClass
86504>>>>>>>>>>>// ProgID: CrystalReports11.ActiveXReportViewer.1
86504>>>>>>>>>>>// CLSID: {460324E8-CFB4-4357-85EF-CE3EBFE23A62}
86504>>>>>>>>>>>// Crystal ActiveX Report Viewer Control 11.0
86504>>>>>>>>>>>Class cCrystalActiveXReportViewer is a cComActiveXControl
86505>>>>>>>>>>>    Import_Class_Protocol cCrystalICrystalReportViewer11
86506>>>>>>>>>>>    Import_Class_Protocol cCrystal_ICRViewerEvents
86507>>>>>>>>>>>
86507>>>>>>>>>>>    Procedure Construct_Object
86509>>>>>>>>>>>        Forward Send Construct_Object
86511>>>>>>>>>>>        Set psProgID to "CrystalReports.ActiveXReportViewer"
86512>>>>>>>>>>>        Set psEventId to "{C889ACF5-F43B-40E0-834D-EEF26B6C419C}"
86513>>>>>>>>>>>        Set peAutoCreate to acDeferredAutoCreate
86514>>>>>>>>>>>    End_Procedure
86515>>>>>>>>>>>End_Class
86516>>>>>>>>>>>
86516>>>>>>>>>>>// CLSID: {13FA5946-561C-11D1-BE3F-00A0C95A6A5C}
86516>>>>>>>>>>>// Interface to control ICrystalReportViewer control cursor selection
86516>>>>>>>>>>>Class cCrystalICRVTrackCursorInfo is a Mixin
86517>>>>>>>>>>>
86517>>>>>>>>>>>    // Get the DetailAreaCursor type
86517>>>>>>>>>>>    Function ComDetailAreaCursor Returns CRTrackCursor
86519>>>>>>>>>>>        Handle hDispatchDriver
86519>>>>>>>>>>>        CRTrackCursor retVal
86519>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86520>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
86521>>>>>>>>>>>        Function_Return retVal
86522>>>>>>>>>>>    End_Function
86523>>>>>>>>>>>
86523>>>>>>>>>>>    // Get the DetailAreaCursor type
86523>>>>>>>>>>>    Procedure Set ComDetailAreaCursor CRTrackCursor value
86525>>>>>>>>>>>        Handle hDispatchDriver
86525>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86526>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86527>>>>>>>>>>>        Set ComProperty of hDispatchDriver 1 OLE_VT_I4 to value
86528>>>>>>>>>>>    End_Procedure
86529>>>>>>>>>>>
86529>>>>>>>>>>>    // Get the DetailAreaFieldCursor type
86529>>>>>>>>>>>    Function ComDetailAreaFieldCursor Returns CRTrackCursor
86531>>>>>>>>>>>        Handle hDispatchDriver
86531>>>>>>>>>>>        CRTrackCursor retVal
86531>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86532>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
86533>>>>>>>>>>>        Function_Return retVal
86534>>>>>>>>>>>    End_Function
86535>>>>>>>>>>>
86535>>>>>>>>>>>    // Get the DetailAreaFieldCursor type
86535>>>>>>>>>>>    Procedure Set ComDetailAreaFieldCursor CRTrackCursor value
86537>>>>>>>>>>>        Handle hDispatchDriver
86537>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86538>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86539>>>>>>>>>>>        Set ComProperty of hDispatchDriver 2 OLE_VT_I4 to value
86540>>>>>>>>>>>    End_Procedure
86541>>>>>>>>>>>
86541>>>>>>>>>>>    // Get the GraphCursor type
86541>>>>>>>>>>>    Function ComGraphCursor Returns CRTrackCursor
86543>>>>>>>>>>>        Handle hDispatchDriver
86543>>>>>>>>>>>        CRTrackCursor retVal
86543>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86544>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
86545>>>>>>>>>>>        Function_Return retVal
86546>>>>>>>>>>>    End_Function
86547>>>>>>>>>>>
86547>>>>>>>>>>>    // Get the GraphCursor type
86547>>>>>>>>>>>    Procedure Set ComGraphCursor CRTrackCursor value
86549>>>>>>>>>>>        Handle hDispatchDriver
86549>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86550>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86551>>>>>>>>>>>        Set ComProperty of hDispatchDriver 3 OLE_VT_I4 to value
86552>>>>>>>>>>>    End_Procedure
86553>>>>>>>>>>>
86553>>>>>>>>>>>    // Get the GroupAreaCursor type
86553>>>>>>>>>>>    Function ComGroupAreaCursor Returns CRTrackCursor
86555>>>>>>>>>>>        Handle hDispatchDriver
86555>>>>>>>>>>>        CRTrackCursor retVal
86555>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86556>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
86557>>>>>>>>>>>        Function_Return retVal
86558>>>>>>>>>>>    End_Function
86559>>>>>>>>>>>
86559>>>>>>>>>>>    // Get the GroupAreaCursor type
86559>>>>>>>>>>>    Procedure Set ComGroupAreaCursor CRTrackCursor value
86561>>>>>>>>>>>        Handle hDispatchDriver
86561>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86562>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86563>>>>>>>>>>>        Set ComProperty of hDispatchDriver 4 OLE_VT_I4 to value
86564>>>>>>>>>>>    End_Procedure
86565>>>>>>>>>>>
86565>>>>>>>>>>>    // Get the GroupAreaFieldCursor type
86565>>>>>>>>>>>    Function ComGroupAreaFieldCursor Returns CRTrackCursor
86567>>>>>>>>>>>        Handle hDispatchDriver
86567>>>>>>>>>>>        CRTrackCursor retVal
86567>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86568>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_I4 to retVal
86569>>>>>>>>>>>        Function_Return retVal
86570>>>>>>>>>>>    End_Function
86571>>>>>>>>>>>
86571>>>>>>>>>>>    // Get the GroupAreaFieldCursor type
86571>>>>>>>>>>>    Procedure Set ComGroupAreaFieldCursor CRTrackCursor value
86573>>>>>>>>>>>        Handle hDispatchDriver
86573>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86574>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86575>>>>>>>>>>>        Set ComProperty of hDispatchDriver 5 OLE_VT_I4 to value
86576>>>>>>>>>>>    End_Procedure
86577>>>>>>>>>>>End_Class
86578>>>>>>>>>>>
86578>>>>>>>>>>>// CoClass
86578>>>>>>>>>>>// ProgID: CrystalReports11.CRVTrackCursorInfo.1
86578>>>>>>>>>>>// CLSID: {2E451555-00A7-468B-8060-52B52D3F1DB0}
86578>>>>>>>>>>>// Crystal ActiveX Report Viewer Cursor Selection 11.0
86578>>>>>>>>>>>Class cCrystalCRVTrackCursorInfo is a cComAutomationObject
86579>>>>>>>>>>>    Import_Class_Protocol cCrystalICRVTrackCursorInfo
86580>>>>>>>>>>>
86580>>>>>>>>>>>    Procedure Construct_Object
86582>>>>>>>>>>>        Forward Send Construct_Object
86584>>>>>>>>>>>        Set psProgID to "{2E451555-00A7-468B-8060-52B52D3F1DB0}"
86585>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
86586>>>>>>>>>>>    End_Procedure
86587>>>>>>>>>>>End_Class
86588>>>>>>>>>>>
86588>>>>>>>>>>>// CLSID: {75C66E65-8949-11D2-BF6D-00A0C9DA4FA2}
86588>>>>>>>>>>>// Crystal Report Viewer Control - Fields Collection
86588>>>>>>>>>>>Class cCrystalICRFields is a Mixin
86589>>>>>>>>>>>
86589>>>>>>>>>>>    // Number of items in the collection
86589>>>>>>>>>>>    Function ComCount Returns Integer
86591>>>>>>>>>>>        Handle hDispatchDriver
86591>>>>>>>>>>>        Integer retVal
86591>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86592>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
86593>>>>>>>>>>>        Function_Return retVal
86594>>>>>>>>>>>    End_Function
86595>>>>>>>>>>>
86595>>>>>>>>>>>    // Item - index is 1-based
86595>>>>>>>>>>>    Function ComItem Integer llIndex Returns Variant
86597>>>>>>>>>>>        Handle hDispatchDriver
86597>>>>>>>>>>>        Variant retVal
86597>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86598>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86599>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_I4 llIndex
86600>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_VARIANT to retVal
86601>>>>>>>>>>>        Function_Return retVal
86602>>>>>>>>>>>    End_Function
86603>>>>>>>>>>>
86603>>>>>>>>>>>    // Fields Collection
86603>>>>>>>>>>>    Function Com_NewEnum Returns Variant
86605>>>>>>>>>>>        Handle hDispatchDriver
86605>>>>>>>>>>>        Variant retVal
86605>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86606>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver -4 OLE_VT_UNKNOWN to retVal
86607>>>>>>>>>>>        Function_Return retVal
86608>>>>>>>>>>>    End_Function
86609>>>>>>>>>>>
86609>>>>>>>>>>>    // Index of the selected field
86609>>>>>>>>>>>    Function ComSelectedFieldIndex Returns Integer
86611>>>>>>>>>>>        Handle hDispatchDriver
86611>>>>>>>>>>>        Integer retVal
86611>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86612>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
86613>>>>>>>>>>>        Function_Return retVal
86614>>>>>>>>>>>    End_Function
86615>>>>>>>>>>>End_Class
86616>>>>>>>>>>>
86616>>>>>>>>>>>// CoClass
86616>>>>>>>>>>>// ProgID: CrystalReports11.CRVFields.1
86616>>>>>>>>>>>// CLSID: {7CAF5AC6-EC50-45F5-83DA-4BD1D7E7A237}
86616>>>>>>>>>>>// Crystal ActiveX Report Viewer Fields 11.0
86616>>>>>>>>>>>Class cCrystalCRVFields is a cComAutomationObject
86617>>>>>>>>>>>    Import_Class_Protocol cCrystalICRFields
86618>>>>>>>>>>>
86618>>>>>>>>>>>    Procedure Construct_Object
86620>>>>>>>>>>>        Forward Send Construct_Object
86622>>>>>>>>>>>        Set psProgID to "{7CAF5AC6-EC50-45F5-83DA-4BD1D7E7A237}"
86623>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
86624>>>>>>>>>>>    End_Procedure
86625>>>>>>>>>>>End_Class
86626>>>>>>>>>>>
86626>>>>>>>>>>>// CLSID: {75C66E67-8949-11D2-BF6D-00A0C9DA4FA2}
86626>>>>>>>>>>>// Crystal Report Viewer Control - Field
86626>>>>>>>>>>>Class cCrystalICRField is a Mixin
86627>>>>>>>>>>>
86627>>>>>>>>>>>    // property Value
86627>>>>>>>>>>>    Function ComValue Returns Variant
86629>>>>>>>>>>>        Handle hDispatchDriver
86629>>>>>>>>>>>        Variant retVal
86629>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86630>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 0 OLE_VT_VARIANT to retVal
86631>>>>>>>>>>>        Function_Return retVal
86632>>>>>>>>>>>    End_Function
86633>>>>>>>>>>>
86633>>>>>>>>>>>    // property FieldType
86633>>>>>>>>>>>    Function ComFieldType Returns CRFieldType
86635>>>>>>>>>>>        Handle hDispatchDriver
86635>>>>>>>>>>>        CRFieldType retVal
86635>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86636>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_I4 to retVal
86637>>>>>>>>>>>        Function_Return retVal
86638>>>>>>>>>>>    End_Function
86639>>>>>>>>>>>
86639>>>>>>>>>>>    // property Name
86639>>>>>>>>>>>    Function ComName Returns String
86641>>>>>>>>>>>        Handle hDispatchDriver
86641>>>>>>>>>>>        String retVal
86641>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86642>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_BSTR to retVal
86643>>>>>>>>>>>        Function_Return retVal
86644>>>>>>>>>>>    End_Function
86645>>>>>>>>>>>
86645>>>>>>>>>>>    // property IsRawData
86645>>>>>>>>>>>    Function ComIsRawData Returns Boolean
86647>>>>>>>>>>>        Handle hDispatchDriver
86647>>>>>>>>>>>        Boolean retVal
86647>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86648>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_BOOL to retVal
86649>>>>>>>>>>>        Function_Return retVal
86650>>>>>>>>>>>    End_Function
86651>>>>>>>>>>>End_Class
86652>>>>>>>>>>>
86652>>>>>>>>>>>// CoClass
86652>>>>>>>>>>>// ProgID: CrystalReports11.CRVField.1
86652>>>>>>>>>>>// CLSID: {E06ADB3A-E85D-4A11-AF91-83F00B4F0E07}
86652>>>>>>>>>>>// Crystal ActiveX Report Viewer Field 11.0
86652>>>>>>>>>>>Class cCrystalCRVField is a cComAutomationObject
86653>>>>>>>>>>>    Import_Class_Protocol cCrystalICRField
86654>>>>>>>>>>>
86654>>>>>>>>>>>    Procedure Construct_Object
86656>>>>>>>>>>>        Forward Send Construct_Object
86658>>>>>>>>>>>        Set psProgID to "{E06ADB3A-E85D-4A11-AF91-83F00B4F0E07}"
86659>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
86660>>>>>>>>>>>    End_Procedure
86661>>>>>>>>>>>End_Class
86662>>>>>>>>>>>
86662>>>>>>>>>>>// CLSID: {75347085-7260-11D1-BE46-00A0C95A6A5C}
86662>>>>>>>>>>>// Interface to event information objects returned through _ICRViewerEvents from ICrystalReportViewer
86662>>>>>>>>>>>Class cCrystalICRVEventInfo is a Mixin
86663>>>>>>>>>>>
86663>>>>>>>>>>>    // Object's Text
86663>>>>>>>>>>>    Function ComText Returns String
86665>>>>>>>>>>>        Handle hDispatchDriver
86665>>>>>>>>>>>        String retVal
86665>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86666>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1 OLE_VT_BSTR to retVal
86667>>>>>>>>>>>        Function_Return retVal
86668>>>>>>>>>>>    End_Function
86669>>>>>>>>>>>
86669>>>>>>>>>>>    // Index
86669>>>>>>>>>>>    Function ComIndex Returns Integer
86671>>>>>>>>>>>        Handle hDispatchDriver
86671>>>>>>>>>>>        Integer retVal
86671>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86672>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 2 OLE_VT_I4 to retVal
86673>>>>>>>>>>>        Function_Return retVal
86674>>>>>>>>>>>    End_Function
86675>>>>>>>>>>>
86675>>>>>>>>>>>    // Parent's index
86675>>>>>>>>>>>    Function ComParentIndex Returns Integer
86677>>>>>>>>>>>        Handle hDispatchDriver
86677>>>>>>>>>>>        Integer retVal
86677>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86678>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 3 OLE_VT_I4 to retVal
86679>>>>>>>>>>>        Function_Return retVal
86680>>>>>>>>>>>    End_Function
86681>>>>>>>>>>>
86681>>>>>>>>>>>    // Object type
86681>>>>>>>>>>>    Function ComType Returns CRObjectType
86683>>>>>>>>>>>        Handle hDispatchDriver
86683>>>>>>>>>>>        CRObjectType retVal
86683>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86684>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 4 OLE_VT_I4 to retVal
86685>>>>>>>>>>>        Function_Return retVal
86686>>>>>>>>>>>    End_Function
86687>>>>>>>>>>>
86687>>>>>>>>>>>    // Indicates if the object is drillable
86687>>>>>>>>>>>    Function ComCanDrillDown Returns Boolean
86689>>>>>>>>>>>        Handle hDispatchDriver
86689>>>>>>>>>>>        Boolean retVal
86689>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86690>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 5 OLE_VT_BOOL to retVal
86691>>>>>>>>>>>        Function_Return retVal
86692>>>>>>>>>>>    End_Function
86693>>>>>>>>>>>
86693>>>>>>>>>>>    // Get the fields collection
86693>>>>>>>>>>>    Function ComGetFields Returns Variant
86695>>>>>>>>>>>        Handle hDispatchDriver
86695>>>>>>>>>>>        Variant retVal
86695>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86696>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 6 OLE_VT_VARIANT to retVal
86697>>>>>>>>>>>        Function_Return retVal
86698>>>>>>>>>>>    End_Function
86699>>>>>>>>>>>End_Class
86700>>>>>>>>>>>
86700>>>>>>>>>>>// CoClass
86700>>>>>>>>>>>// ProgID: CrystalReports11.CRVEventInfo.1
86700>>>>>>>>>>>// CLSID: {DCDB69EE-B89E-4D21-BD52-0E3C92A43FEA}
86700>>>>>>>>>>>// Crystal ActiveX Report Viewer Event Info 11.0
86700>>>>>>>>>>>Class cCrystalCRVEventInfo is a cComAutomationObject
86701>>>>>>>>>>>    Import_Class_Protocol cCrystalICRVEventInfo
86702>>>>>>>>>>>
86702>>>>>>>>>>>    Procedure Construct_Object
86704>>>>>>>>>>>        Forward Send Construct_Object
86706>>>>>>>>>>>        Set psProgID to "{DCDB69EE-B89E-4D21-BD52-0E3C92A43FEA}"
86707>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
86708>>>>>>>>>>>    End_Procedure
86709>>>>>>>>>>>End_Class
86710>>>>>>>>>>>
86710>>>>>>>>>>>// CLSID: {04AA0267-F803-44DD-AA9B-D1265FCCF0F4}
86710>>>>>>>>>>>Class cCrystalICrystalReportViewerViewInfo is a Mixin
86711>>>>>>>>>>>
86711>>>>>>>>>>>    Function ComGetReportName String ByRef llpName Returns Integer
86713>>>>>>>>>>>        Handle hDispatchDriver
86713>>>>>>>>>>>        Integer retVal
86713>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86714>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86715>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_BSTR) llpName
86716>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678272 OLE_VT_HRESULT to retVal
86717>>>>>>>>>>>        Function_Return retVal
86718>>>>>>>>>>>    End_Function
86719>>>>>>>>>>>
86719>>>>>>>>>>>    Function ComGetSubreportName String ByRef llpName Returns Integer
86721>>>>>>>>>>>        Handle hDispatchDriver
86721>>>>>>>>>>>        Integer retVal
86721>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86722>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86723>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_BSTR) llpName
86724>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678273 OLE_VT_HRESULT to retVal
86725>>>>>>>>>>>        Function_Return retVal
86726>>>>>>>>>>>    End_Function
86727>>>>>>>>>>>
86727>>>>>>>>>>>    // VARIANT contains a safe array of integers.  vt = VT_I4 | VT_ARRAY
86727>>>>>>>>>>>    Function ComGetGroupPath Variant llpVal Returns Integer
86729>>>>>>>>>>>        Handle hDispatchDriver
86729>>>>>>>>>>>        Integer retVal
86729>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86730>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86731>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_VARIANT) llpVal
86732>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678274 OLE_VT_HRESULT to retVal
86733>>>>>>>>>>>        Function_Return retVal
86734>>>>>>>>>>>    End_Function
86735>>>>>>>>>>>End_Class
86736>>>>>>>>>>>
86736>>>>>>>>>>>// CoClass
86736>>>>>>>>>>>// CLSID: {033C5369-1B0C-44D7-B9F8-E3E73492110F}
86736>>>>>>>>>>>// Crystal ActiveX Report Viewer View Info 11.0
86736>>>>>>>>>>>Class cCrystalCRCrystalReportViewerViewInfo is a cComAutomationObject
86737>>>>>>>>>>>    Import_Class_Protocol cCrystalICrystalReportViewerViewInfo
86738>>>>>>>>>>>
86738>>>>>>>>>>>    Procedure Construct_Object
86740>>>>>>>>>>>        Forward Send Construct_Object
86742>>>>>>>>>>>        Set psProgID to "{033C5369-1B0C-44D7-B9F8-E3E73492110F}"
86743>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
86744>>>>>>>>>>>    End_Procedure
86745>>>>>>>>>>>End_Class
86746>>>>>>>>>>>
86746>>>>>>>>>>>// CLSID: {A0E5F37D-CA67-11D1-A817-00A0C92784CD}
86746>>>>>>>>>>>// ICrystalReportSourceRouter Interface
86746>>>>>>>>>>>Class cCrystalICrystalReportSourceRouter is a Mixin
86747>>>>>>>>>>>
86747>>>>>>>>>>>    // method AddReport
86747>>>>>>>>>>>    Procedure ComAddReport Variant llpUnknown
86749>>>>>>>>>>>        Handle hDispatchDriver
86749>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86750>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86751>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_UNKNOWN llpUnknown
86752>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1 OLE_VT_VOID
86753>>>>>>>>>>>    End_Procedure
86754>>>>>>>>>>>End_Class
86755>>>>>>>>>>>
86755>>>>>>>>>>>// CoClass
86755>>>>>>>>>>>// ProgID: CrystalReports11.ReportSourceRouter.1
86755>>>>>>>>>>>// CLSID: {60860AF6-5DC3-49E2-99CD-13CE17C47E9D}
86755>>>>>>>>>>>// Crystal Report Source Router 11.0
86755>>>>>>>>>>>Class cCrystalReportSourceRouter is a cComAutomationObject
86756>>>>>>>>>>>    Import_Class_Protocol cCrystalICrystalReportSourceRouter
86757>>>>>>>>>>>
86757>>>>>>>>>>>    Procedure Construct_Object
86759>>>>>>>>>>>        Forward Send Construct_Object
86761>>>>>>>>>>>        Set psProgID to "CrystalReports.ReportSourceRouter"
86762>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
86763>>>>>>>>>>>    End_Procedure
86764>>>>>>>>>>>End_Class
86765>>>>>>>>>>>
86765>>>>>>>>>>>// CLSID: {40CC9753-670D-4FBC-A99D-CE237D0C7BC1}
86765>>>>>>>>>>>// ICRVSelectionItem Interface
86765>>>>>>>>>>>Class cCrystalICRVSelectionItem is a Mixin
86766>>>>>>>>>>>
86766>>>>>>>>>>>    // Object Type
86766>>>>>>>>>>>    Function ComObjectType CRObjectType ByRef llpVal Returns Integer
86768>>>>>>>>>>>        Handle hDispatchDriver
86768>>>>>>>>>>>        Integer retVal
86768>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86769>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86770>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llpVal
86771>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678272 OLE_VT_HRESULT to retVal
86772>>>>>>>>>>>        Function_Return retVal
86773>>>>>>>>>>>    End_Function
86774>>>>>>>>>>>
86774>>>>>>>>>>>    // Object Type
86774>>>>>>>>>>>    Procedure Set ComObjectType CRObjectType value
86776>>>>>>>>>>>        Handle hDispatchDriver
86776>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86777>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86778>>>>>>>>>>>        Set ComProperty of hDispatchDriver 1610678272 OLE_VT_I4 to value
86779>>>>>>>>>>>    End_Procedure
86780>>>>>>>>>>>
86780>>>>>>>>>>>    // Object Name
86780>>>>>>>>>>>    Function ComObjectName String ByRef llpVal Returns Integer
86782>>>>>>>>>>>        Handle hDispatchDriver
86782>>>>>>>>>>>        Integer retVal
86782>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86783>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86784>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_BSTR) llpVal
86785>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678274 OLE_VT_HRESULT to retVal
86786>>>>>>>>>>>        Function_Return retVal
86787>>>>>>>>>>>    End_Function
86788>>>>>>>>>>>
86788>>>>>>>>>>>    // Object Name
86788>>>>>>>>>>>    Procedure Set ComObjectName String value
86790>>>>>>>>>>>        Handle hDispatchDriver
86790>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86791>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86792>>>>>>>>>>>        Set ComProperty of hDispatchDriver 1610678274 OLE_VT_BSTR to value
86793>>>>>>>>>>>    End_Procedure
86794>>>>>>>>>>>
86794>>>>>>>>>>>    // Object Position
86794>>>>>>>>>>>    Function ComObjectPosition tagRECT ByRef llpVal Returns Integer
86796>>>>>>>>>>>        Handle hDispatchDriver
86796>>>>>>>>>>>        Integer retVal
86796>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86797>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86798>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_RECORD) llpVal
86799>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678276 OLE_VT_HRESULT to retVal
86800>>>>>>>>>>>        Function_Return retVal
86801>>>>>>>>>>>    End_Function
86802>>>>>>>>>>>
86802>>>>>>>>>>>    // Object Position
86802>>>>>>>>>>>    Procedure Set ComObjectPosition tagRECT value
86804>>>>>>>>>>>        Handle hDispatchDriver
86804>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86805>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86806>>>>>>>>>>>        Set ComProperty of hDispatchDriver 1610678276 OLE_VT_RECORD to value
86807>>>>>>>>>>>    End_Procedure
86808>>>>>>>>>>>
86808>>>>>>>>>>>    // Section Name
86808>>>>>>>>>>>    Function ComSectionName String ByRef llpVal Returns Integer
86810>>>>>>>>>>>        Handle hDispatchDriver
86810>>>>>>>>>>>        Integer retVal
86810>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86811>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86812>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_BSTR) llpVal
86813>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678278 OLE_VT_HRESULT to retVal
86814>>>>>>>>>>>        Function_Return retVal
86815>>>>>>>>>>>    End_Function
86816>>>>>>>>>>>
86816>>>>>>>>>>>    // Section Name
86816>>>>>>>>>>>    Procedure Set ComSectionName String value
86818>>>>>>>>>>>        Handle hDispatchDriver
86818>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86819>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86820>>>>>>>>>>>        Set ComProperty of hDispatchDriver 1610678278 OLE_VT_BSTR to value
86821>>>>>>>>>>>    End_Procedure
86822>>>>>>>>>>>
86822>>>>>>>>>>>    // Section Type
86822>>>>>>>>>>>    Function ComSectionType CRObjectType ByRef llpVal Returns Integer
86824>>>>>>>>>>>        Handle hDispatchDriver
86824>>>>>>>>>>>        Integer retVal
86824>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86825>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86826>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llpVal
86827>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678280 OLE_VT_HRESULT to retVal
86828>>>>>>>>>>>        Function_Return retVal
86829>>>>>>>>>>>    End_Function
86830>>>>>>>>>>>
86830>>>>>>>>>>>    // Section Type
86830>>>>>>>>>>>    Procedure Set ComSectionType CRObjectType value
86832>>>>>>>>>>>        Handle hDispatchDriver
86832>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86833>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86834>>>>>>>>>>>        Set ComProperty of hDispatchDriver 1610678280 OLE_VT_I4 to value
86835>>>>>>>>>>>    End_Procedure
86836>>>>>>>>>>>
86836>>>>>>>>>>>    // Get Section Group Path
86836>>>>>>>>>>>    Function ComGetSectionGroupPath UInteger ByRef llpSize UInteger ByRef llpVal Returns Integer
86838>>>>>>>>>>>        Handle hDispatchDriver
86838>>>>>>>>>>>        Integer retVal
86838>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86839>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
86840>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_UI4) llpSize
86841>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior (OLE_VT_BYREF ior OLE_VT_UI4)) llpVal
86842>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678282 OLE_VT_HRESULT to retVal
86843>>>>>>>>>>>        Function_Return retVal
86844>>>>>>>>>>>    End_Function
86845>>>>>>>>>>>
86845>>>>>>>>>>>    // Put Section Group Path
86845>>>>>>>>>>>    Function ComPutSectionGroupPath UInteger llsize UInteger ByRef llnewVal Returns Integer
86847>>>>>>>>>>>        Handle hDispatchDriver
86847>>>>>>>>>>>        Integer retVal
86847>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86848>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
86849>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_UI4 llsize
86850>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_UI4) llnewVal
86851>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678283 OLE_VT_HRESULT to retVal
86852>>>>>>>>>>>        Function_Return retVal
86853>>>>>>>>>>>    End_Function
86854>>>>>>>>>>>
86854>>>>>>>>>>>    // Get Section Group Path
86854>>>>>>>>>>>    Function ComGetViewContext UInteger ByRef llpSize UInteger ByRef llpVal Returns Integer
86856>>>>>>>>>>>        Handle hDispatchDriver
86856>>>>>>>>>>>        Integer retVal
86856>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86857>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
86858>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_UI4) llpSize
86859>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior (OLE_VT_BYREF ior OLE_VT_UI4)) llpVal
86860>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678284 OLE_VT_HRESULT to retVal
86861>>>>>>>>>>>        Function_Return retVal
86862>>>>>>>>>>>    End_Function
86863>>>>>>>>>>>
86863>>>>>>>>>>>    // Put Section Group Path
86863>>>>>>>>>>>    Function ComPutViewContext UInteger llsize UInteger ByRef llnewVal Returns Integer
86865>>>>>>>>>>>        Handle hDispatchDriver
86865>>>>>>>>>>>        Integer retVal
86865>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86866>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
86867>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_UI4 llsize
86868>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_UI4) llnewVal
86869>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678285 OLE_VT_HRESULT to retVal
86870>>>>>>>>>>>        Function_Return retVal
86871>>>>>>>>>>>    End_Function
86872>>>>>>>>>>>
86872>>>>>>>>>>>    // Page Number
86872>>>>>>>>>>>    Function ComPageNumber UInteger ByRef llpVal Returns Integer
86874>>>>>>>>>>>        Handle hDispatchDriver
86874>>>>>>>>>>>        Integer retVal
86874>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86875>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86876>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_UI4) llpVal
86877>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678286 OLE_VT_HRESULT to retVal
86878>>>>>>>>>>>        Function_Return retVal
86879>>>>>>>>>>>    End_Function
86880>>>>>>>>>>>
86880>>>>>>>>>>>    // Page Number
86880>>>>>>>>>>>    Procedure Set ComPageNumber UInteger value
86882>>>>>>>>>>>        Handle hDispatchDriver
86882>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86883>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86884>>>>>>>>>>>        Set ComProperty of hDispatchDriver 1610678286 OLE_VT_UI4 to value
86885>>>>>>>>>>>    End_Procedure
86886>>>>>>>>>>>
86886>>>>>>>>>>>    // Selection Uses View Context
86886>>>>>>>>>>>    Function ComSelectionUsesViewContext Integer ByRef llpVal Returns Integer
86888>>>>>>>>>>>        Handle hDispatchDriver
86888>>>>>>>>>>>        Integer retVal
86888>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86889>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86890>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_I4) llpVal
86891>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678288 OLE_VT_HRESULT to retVal
86892>>>>>>>>>>>        Function_Return retVal
86893>>>>>>>>>>>    End_Function
86894>>>>>>>>>>>
86894>>>>>>>>>>>    // Selection Uses View Context
86894>>>>>>>>>>>    Procedure Set ComSelectionUsesViewContext Integer value
86896>>>>>>>>>>>        Handle hDispatchDriver
86896>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86897>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86898>>>>>>>>>>>        Set ComProperty of hDispatchDriver 1610678288 OLE_VT_I4 to value
86899>>>>>>>>>>>    End_Procedure
86900>>>>>>>>>>>
86900>>>>>>>>>>>    // Group Name Path
86900>>>>>>>>>>>    Function ComSectionGroupNamePath String ByRef llpVal Returns Integer
86902>>>>>>>>>>>        Handle hDispatchDriver
86902>>>>>>>>>>>        Integer retVal
86902>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86903>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86904>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_BSTR) llpVal
86905>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678290 OLE_VT_HRESULT to retVal
86906>>>>>>>>>>>        Function_Return retVal
86907>>>>>>>>>>>    End_Function
86908>>>>>>>>>>>
86908>>>>>>>>>>>    // Group Name Path
86908>>>>>>>>>>>    Procedure Set ComSectionGroupNamePath String value
86910>>>>>>>>>>>        Handle hDispatchDriver
86910>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86911>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86912>>>>>>>>>>>        Set ComProperty of hDispatchDriver 1610678290 OLE_VT_BSTR to value
86913>>>>>>>>>>>    End_Procedure
86914>>>>>>>>>>>End_Class
86915>>>>>>>>>>>
86915>>>>>>>>>>>// CoClass
86915>>>>>>>>>>>// ProgID: CrystalReports11.CRVSelectionItem.1
86915>>>>>>>>>>>// CLSID: {D5CA3655-16C0-471E-A897-6DCEBA7541D6}
86915>>>>>>>>>>>// Crystal ActiveX Report Viewer Selection Item 11.0
86915>>>>>>>>>>>Class cCrystalCRVSelectionItem is a cComAutomationObject
86916>>>>>>>>>>>    Import_Class_Protocol cCrystalICRVSelectionItem
86917>>>>>>>>>>>
86917>>>>>>>>>>>    Procedure Construct_Object
86919>>>>>>>>>>>        Forward Send Construct_Object
86921>>>>>>>>>>>        Set psProgID to "{D5CA3655-16C0-471E-A897-6DCEBA7541D6}"
86922>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
86923>>>>>>>>>>>    End_Procedure
86924>>>>>>>>>>>End_Class
86925>>>>>>>>>>>
86925>>>>>>>>>>>// CLSID: {A6C2FA77-4242-44DD-8A20-83A29E6DDBF4}
86925>>>>>>>>>>>// ICRVSelectionItems Collection Interface
86925>>>>>>>>>>>Class cCrystalICRVSelectionItems is a Mixin
86926>>>>>>>>>>>
86926>>>>>>>>>>>    // Item count
86926>>>>>>>>>>>    Function ComCount UInteger ByRef llpVal Returns Integer
86928>>>>>>>>>>>        Handle hDispatchDriver
86928>>>>>>>>>>>        Integer retVal
86928>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86929>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86930>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_UI4) llpVal
86931>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678272 OLE_VT_HRESULT to retVal
86932>>>>>>>>>>>        Function_Return retVal
86933>>>>>>>>>>>    End_Function
86934>>>>>>>>>>>
86934>>>>>>>>>>>    // Get an item
86934>>>>>>>>>>>    Function ComItem UInteger llIndex Variant llpVal Returns Integer
86936>>>>>>>>>>>        Handle hDispatchDriver
86936>>>>>>>>>>>        Integer retVal
86936>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86937>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 2
86938>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_UI4 llIndex
86939>>>>>>>>>>>        Send DefineParam to hDispatchDriver (OLE_VT_BYREF ior OLE_VT_UNKNOWN) llpVal
86940>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678273 OLE_VT_HRESULT to retVal
86941>>>>>>>>>>>        Function_Return retVal
86942>>>>>>>>>>>    End_Function
86943>>>>>>>>>>>
86943>>>>>>>>>>>    Function ComAddItem Variant llpVal Returns Integer
86945>>>>>>>>>>>        Handle hDispatchDriver
86945>>>>>>>>>>>        Integer retVal
86945>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86946>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86947>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_UNKNOWN llpVal
86948>>>>>>>>>>>        Get InvokeComMethod of hDispatchDriver 1610678274 OLE_VT_HRESULT to retVal
86949>>>>>>>>>>>        Function_Return retVal
86950>>>>>>>>>>>    End_Function
86951>>>>>>>>>>>End_Class
86952>>>>>>>>>>>
86952>>>>>>>>>>>// CoClass
86952>>>>>>>>>>>// ProgID: CrystalReports11.CRVSelectionItems.1
86952>>>>>>>>>>>// CLSID: {C5562FBD-571A-4C0D-842F-C535C06C22E9}
86952>>>>>>>>>>>// Crystal ActiveX Report Viewer Selection Items Collection 11.0
86952>>>>>>>>>>>Class cCrystalCRVSelectionItems is a cComAutomationObject
86953>>>>>>>>>>>    Import_Class_Protocol cCrystalICRVSelectionItems
86954>>>>>>>>>>>
86954>>>>>>>>>>>    Procedure Construct_Object
86956>>>>>>>>>>>        Forward Send Construct_Object
86958>>>>>>>>>>>        Set psProgID to "{C5562FBD-571A-4C0D-842F-C535C06C22E9}"
86959>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
86960>>>>>>>>>>>    End_Procedure
86961>>>>>>>>>>>End_Class
86962>>>>>>>>>>>
86962>>>>>>>>>>>// CLSID: {48C23B8C-AF4A-46C4-84F0-60B0F8DECC83}
86962>>>>>>>>>>>// ICRVParameterPromptRuntimeOM Interface
86962>>>>>>>>>>>Class cCrystalICRVParameterPromptRuntimeOM is a Mixin
86963>>>>>>>>>>>
86963>>>>>>>>>>>    // submit the form data
86963>>>>>>>>>>>    Procedure ComSubmit Variant llpVal
86965>>>>>>>>>>>        Handle hDispatchDriver
86965>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86966>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86967>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_DISPATCH llpVal
86968>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 1 OLE_VT_VOID
86969>>>>>>>>>>>    End_Procedure
86970>>>>>>>>>>>End_Class
86971>>>>>>>>>>>
86971>>>>>>>>>>>// CoClass
86971>>>>>>>>>>>// CLSID: {8118BB3B-77A6-4739-8876-4DCAC2379827}
86971>>>>>>>>>>>// Crystal ActiveX Report Viewer Parameter Prompt Runtime Object Model 11.0
86971>>>>>>>>>>>Class cCrystalCRVParameterPromptRuntimeOM is a cComAutomationObject
86972>>>>>>>>>>>    Import_Class_Protocol cCrystalICRVParameterPromptRuntimeOM
86973>>>>>>>>>>>
86973>>>>>>>>>>>    Procedure Construct_Object
86975>>>>>>>>>>>        Forward Send Construct_Object
86977>>>>>>>>>>>        Set psProgID to "{8118BB3B-77A6-4739-8876-4DCAC2379827}"
86978>>>>>>>>>>>        Set peAutoCreate to acNoAutoCreate
86979>>>>>>>>>>>    End_Procedure
86980>>>>>>>>>>>End_Class
86981>>>>>>>>>>>
86981>>>>>>>>>>>// CLSID: {C6F8A46C-B1B3-42A0-9C6A-8F65DC112E30}
86981>>>>>>>>>>>// Crystal Report Viewer Control - Selection Event Interface
86981>>>>>>>>>>>Class cCrystal_ICRViewerSelectionEvents is a cComAutomationObject
86982>>>>>>>>>>>
86982>>>>>>>>>>>    Procedure ComSelectionStatusUpdate UInteger llSelectionHintFlags
86984>>>>>>>>>>>        Handle hDispatchDriver
86984>>>>>>>>>>>        Get phDispatchDriver to hDispatchDriver
86985>>>>>>>>>>>        Send PrepareParams to hDispatchDriver 1
86986>>>>>>>>>>>        Send DefineParam to hDispatchDriver OLE_VT_UI4 llSelectionHintFlags
86987>>>>>>>>>>>        Send InvokeComMethod to hDispatchDriver 600 OLE_VT_VOID
86988>>>>>>>>>>>    End_Procedure
86989>>>>>>>>>>>End_Class
86990>>>>>>>>>
86990>>>>>>>>>// PREVIEW WINDOW - Object is created for each PRINT_TO_WINDOW
86990>>>>>>>>>
86990>>>>>>>>>// This subclass will be used to display reports to the screen.
86990>>>>>>>>>
86990>>>>>>>>>Class cCrystalPreview Is A View
86991>>>>>>>>>
86991>>>>>>>>>    Procedure Construct_Object
86993>>>>>>>>>        Boolean bAttached
86993>>>>>>>>>        Handle  hoViewer
86993>>>>>>>>>        Forward Send Construct_Object
86995>>>>>>>>>        Set Border_Style To Border_Thick    // Makes preview resizable
86996>>>>>>>>>        Set Maximize_Icon To True           // Allow maximize
86997>>>>>>>>>
86997>>>>>>>>>        Property Integer piZoom 1           // 1- fit width, 2 fit page, all other numbers are a percentage
86998>>>>>>>>>        Property Handle phoActiveXReportViewer 0
86999>>>>>>>>>
86999>>>>>>>>>        // create RDC Previewer
86999>>>>>>>>>        Get Create U_cCrystalActiveXReportViewer to hoViewer
87000>>>>>>>>>        Set Location  of hoViewer To 0 0
87001>>>>>>>>>        Set peAnchors of hoViewer To anAll
87002>>>>>>>>>        Send CreateComObject of hoViewer
87003>>>>>>>>>        Send AssignViewerDefaults hoViewer
87004>>>>>>>>>        Set phoActiveXReportViewer to hoViewer
87005>>>>>>>>>        Set GuiSize to (GetSystemMetrics (SM_CYSCREEN)-150)  (GetSystemMetrics (SM_CXSCREEN)-75) // client area size
87006>>>>>>>>>        Send Adjust_Logicals
87007>>>>>>>>>        Set GuiSize of hoViewer to (Hi(GuiSize(Self))) (Low(GuiSize(Self))) // window size same as parent client area size
87008>>>>>>>>>        Send Adjust_Logicals of hoViewer
87009>>>>>>>>>    End_Procedure  // Construct_Object
87010>>>>>>>>>
87010>>>>>>>>>    // this is called when the com viewer is created and is used to set properties of the
87010>>>>>>>>>    // viewer. This could be augmented in a sub-class to create you own preferences.
87010>>>>>>>>>    Procedure AssignViewerDefaults handle hoViewer
87012>>>>>>>>>        Set ComDisplayToolbar           of hoViewer To True
87013>>>>>>>>>        Set ComDisplayBorder            of hoViewer To False
87014>>>>>>>>>        Set ComDisplayTabs              of hoViewer To False
87015>>>>>>>>>        Set ComDisplayBackgroundEdge    of hoViewer To True
87016>>>>>>>>>        Set ComDisplayGroupTree         of hoViewer To False
87017>>>>>>>>>        //
87017>>>>>>>>>        Set ComEnableGroupTree          of hoViewer To False
87018>>>>>>>>>        Set ComEnableStopButton         of hoViewer To False
87019>>>>>>>>>        Set ComEnablePrintButton        of hoViewer To True
87020>>>>>>>>>        Set ComEnableCloseButton        of hoViewer To False
87021>>>>>>>>>        Set ComEnableRefreshButton      of hoViewer To False
87022>>>>>>>>>        Set ComEnableExportButton       of hoViewer To True
87023>>>>>>>>>        Set ComEnableSearchExpertButton of hoViewer To True
87024>>>>>>>>>        Set ComEnableHelpButton         of hoViewer To False
87025>>>>>>>>>        //
87025>>>>>>>>>        Set ComEnableZoomControl        of hoViewer To True
87026>>>>>>>>>        Set ComEnableProgressControl    of hoViewer To True
87027>>>>>>>>>        Set ComEnableSearchControl      of hoViewer To True
87028>>>>>>>>>        Set ComEnableNavigationControls of hoViewer To True
87029>>>>>>>>>        //
87029>>>>>>>>>        Set ComEnableDrillDown          of hoViewer To False
87030>>>>>>>>>        Set ComEnableAnimationCtrl      of hoViewer To True
87031>>>>>>>>>        Set ComEnableSelectExpertButton of hoViewer To False
87032>>>>>>>>>        Set ComEnablePopupMenu          of hoViewer To False
87033>>>>>>>>>        Set ComLaunchHTTPHyperlinksInNewBrowser of hoViewer To True
87034>>>>>>>>>    End_Procedure
87035>>>>>>>>>
87035>>>>>>>>>    //Displays report in the preview control.
87035>>>>>>>>>    Procedure DisplayReport Handle hoReport
87037>>>>>>>>>        Handle hoViewer
87037>>>>>>>>>        Get phoActiveXReportViewer to hoViewer
87038>>>>>>>>>        If (hoViewer) Begin
87040>>>>>>>>>            Send Popup Of (Self)
87041>>>>>>>>>            Set  ComReportSource Of hoViewer To (pvComObject(hoReport))
87042>>>>>>>>>            Send ComViewReport   Of hoViewer
87043>>>>>>>>>            Send ComZoom         Of hoViewer (piZoom(Self))
87044>>>>>>>>>        End
87044>>>>>>>>>>
87044>>>>>>>>>        Else Begin
87045>>>>>>>>>            Error DFERR_CRYSTAL_REPORT C_$CrystalCOMPreviewerNotCreated
87046>>>>>>>>>>
87046>>>>>>>>>            Send Destroy
87047>>>>>>>>>        End
87047>>>>>>>>>>
87047>>>>>>>>>    End_Procedure // DisplayReport
87048>>>>>>>>>
87048>>>>>>>>>    //Destroy report when it is closed.
87048>>>>>>>>>    Procedure Deactivate Integer iScope Returns Integer
87050>>>>>>>>>        Integer iRet
87050>>>>>>>>>        If (Num_Arguments) Begin
87052>>>>>>>>>            Forward Get msg_Deactivate iScope To iRet
87054>>>>>>>>>        End
87054>>>>>>>>>>
87054>>>>>>>>>        Else Begin
87055>>>>>>>>>            Forward Get msg_Deactivate To iRet
87057>>>>>>>>>            Send Destroy
87058>>>>>>>>>        End
87058>>>>>>>>>>
87058>>>>>>>>>    End_Procedure
87059>>>>>>>>>End_Class // cCrystalPreview
87060>>>>>>>>>
87060>>>>>>>Use seq_chnl.pkg
87060>>>>>>>Use cApplication.pkg
87060>>>>>>>
87060>>>>>>>Struct tCRWCDO
87060>>>>>>>    String sTable
87060>>>>>>>    Handle hoCDO
87060>>>>>>>End_Struct
87060>>>>>>>
87060>>>>>>>Define ttDATAFLEX for "crdb_p2bdfapi.dll" // .dat
87060>>>>>>>Define ttCDO      for "crdb_fielddef.dll" // .ttx
87060>>>>>>>
87060>>>>>>>// This object is the server for all reports
87060>>>>>>>Handle ghoCrystalReportServer
87060>>>>>>>Move 0 to ghoCrystalReportServer
87061>>>>>>>
87061>>>>>>>Class cCrystalReport is a cComAutomationObject
87062>>>>>>>    Import_Class_Protocol cCrystalIReport
87063>>>>>>>    Import_Class_Protocol cCrystalIReportEvent
87064>>>>>>>
87064>>>>>>>    Procedure Construct_Object
87066>>>>>>>        Forward Send Construct_Object
87068>>>>>>>        Set psProgID to "CrystalDesignRunTime.Report"
87069>>>>>>>        Set psEventId to "{AF376802-6120-4E28-96DD-63FD2DC27B7A}"
87070>>>>>>>        Set peAutoCreate to acNoAutoCreate
87071>>>>>>>
87071>>>>>>>        //Path to report file that was opened.
87071>>>>>>>        Property String psReportLocation
87072>>>>>>>
87072>>>>>>>        //available objects within the report class
87072>>>>>>>        Property Handle phoDatabase 0
87073>>>>>>>
87073>>>>>>>        Property Handle phoDatabaseTables 0
87074>>>>>>>
87074>>>>>>>        Property Handle phoFormulaFieldDefinitions 0
87075>>>>>>>
87075>>>>>>>        Property Handle phoParamFieldDefinitions 0
87076>>>>>>>
87076>>>>>>>        Property Handle phoSortFields 0
87077>>>>>>>
87077>>>>>>>        //holds handles of all paramterFieldDefinition objects
87077>>>>>>>        Property Handle[] phoParams
87078>>>>>>>
87078>>>>>>>        //holds handles of all table objects
87078>>>>>>>        Property Handle[] phoTables
87079>>>>>>>
87079>>>>>>>        //holds handles of all cdo objects
87079>>>>>>>        Property tCRWCDO[] pCDOs
87080>>>>>>>
87080>>>>>>>        //## NOT FOR USE WITH MAINREPORT ##
87080>>>>>>>        // name of subreport (if main report, it is empty)
87080>>>>>>>        Property String  psSubReportName ""
87081>>>>>>>
87081>>>>>>>        //## NOT FOR USE WITH SUBREPORTS ##
87081>>>>>>>
87081>>>>>>>        Property Handle phoExportObject     0
87082>>>>>>>
87082>>>>>>>        Property Handle phoPreviewObject    0
87083>>>>>>>
87083>>>>>>>        //holds name and handle of all subreport objects
87083>>>>>>>        Property Handle[] phoSubReports
87084>>>>>>>
87084>>>>>>>        Property Boolean pbSubReportsLoaded FALSE
87085>>>>>>>
87085>>>>>>>        //Printer specific properties
87085>>>>>>>        Property Integer piPrinterCopies       1
87086>>>>>>>        Property Integer piPrinterStartPage    1
87087>>>>>>>        Property Integer piPrinterEndPage      0 // we treat zero as "to end of report"
87088>>>>>>>        Property Boolean pbPrinterCollate      TRUE
87089>>>>>>>        Property Boolean pbPrinterPrompt       False
87090>>>>>>>
87090>>>>>>>        Property Boolean pbExportPrompt        TRUE
87091>>>>>>>
87091>>>>>>>    End_Procedure // Construct_Object
87092>>>>>>>
87092>>>>>>>    //--------------------
87092>>>>>>>    // Database Functions
87092>>>>>>>
87092>>>>>>>    //Returns handle to database object
87092>>>>>>>    Function DatabaseObject Returns Handle
87094>>>>>>>        Handle hoDatabase
87094>>>>>>>        Variant vDatabase
87094>>>>>>>        Boolean bAttached
87094>>>>>>>
87094>>>>>>>        Get phoDatabase to hoDatabase
87095>>>>>>>        If (Not(hoDatabase)) Begin
87097>>>>>>>            Get Create U_cCrystalDatabase to hoDatabase
87098>>>>>>>            Get ComDatabase To vDatabase
87099>>>>>>>            Set pvComObject Of hoDatabase To vDatabase
87100>>>>>>>            Get IsComObjectCreated of hoDatabase to bAttached
87101>>>>>>>            If (bAttached) Begin
87103>>>>>>>                Set phoDatabase to hoDatabase
87104>>>>>>>            End
87104>>>>>>>>
87104>>>>>>>            Else Begin
87105>>>>>>>                Send Destroy of hoDatabase
87106>>>>>>>                Move 0 to hoDatabase
87107>>>>>>>                Error DFERR_CRYSTAL_REPORT C_$UnableToCreateDatabaseObject
87108>>>>>>>>
87108>>>>>>>            End
87108>>>>>>>>
87108>>>>>>>        End
87108>>>>>>>>
87108>>>>>>>        Function_Return hoDatabase
87109>>>>>>>    End_Function // DatabaseObject
87110>>>>>>>
87110>>>>>>>    //Creates all table objects
87110>>>>>>>    Procedure LoadDatabaseTables Handle hoDatabaseTables
87112>>>>>>>        Variant vComDatabaseTable
87112>>>>>>>        Handle hoDatabaseTable
87112>>>>>>>        Integer iTableItem iTableCount
87112>>>>>>>        Boolean bAttached
87112>>>>>>>        Handle[] hoTables
87113>>>>>>>        // create all tables
87113>>>>>>>        Get ComCount of hoDatabaseTables to iTableCount
87114>>>>>>>        For iTableItem From 1 To iTableCount
87120>>>>>>>>
87120>>>>>>>            Get ComItem of hoDatabaseTables Item iTableItem To vComDatabaseTable
87121>>>>>>>            Get Create of hoDatabaseTables U_cCrystalDatabaseTable To hoDatabaseTable
87122>>>>>>>            //Set Name of hoDatabaseTable to ("oTable_"-ComName(hoDatabaseTable)) // for debugging purposes only
87122>>>>>>>            Set pvComObject Of hoDatabaseTable To vComDatabaseTable
87123>>>>>>>            Get IsComObjectCreated Of hoDatabaseTable To bAttached
87124>>>>>>>            If (bAttached) Begin
87126>>>>>>>                Move hoDatabaseTable to hoTables[iTableItem-1]
87127>>>>>>>            End
87127>>>>>>>>
87127>>>>>>>            Else Begin
87128>>>>>>>                Send Destroy of hoDatabaseTable
87129>>>>>>>                Error DFERR_CRYSTAL_REPORT C_$UnableToCreateTableObject
87130>>>>>>>>
87130>>>>>>>            End
87130>>>>>>>>
87130>>>>>>>        Loop
87131>>>>>>>>
87131>>>>>>>        Set phoTables to hoTables
87132>>>>>>>    End_Procedure // LoadDatabaseTables
87133>>>>>>>
87133>>>>>>>    // Returns handle to database collection comautomation object. Creates connection if connection does not already exist.
87133>>>>>>>    // This is used privately to fill the table array which is accessed publicly via get TableObjects.
87133>>>>>>>    // We could destroy phoDatatables if we wanted but we are not currently doing so.
87133>>>>>>>    Function DatabaseTablesObject Returns Handle
87135>>>>>>>        Boolean bAttached
87135>>>>>>>        Handle hoDatabaseTables hoDatabase
87135>>>>>>>        Variant vComDatabaseTables
87135>>>>>>>
87135>>>>>>>        Get phoDatabaseTables To hoDatabaseTables
87136>>>>>>>        If Not (hoDatabaseTables) Begin
87138>>>>>>>            Get DatabaseObject to hoDatabase // this will return a valid object or generate an error
87139>>>>>>>            If hoDatabase Begin
87141>>>>>>>                Get Create Of hoDatabase U_cCrystalDatabaseTables To hoDatabaseTables
87142>>>>>>>                Get ComTables Of hoDatabase To vComDatabaseTables
87143>>>>>>>                Set pvComObject Of hoDatabaseTables To vComDatabaseTables
87144>>>>>>>                //Set Name of hoDatabaseTables to "oComDatabaseTables" // for debugging purposes only
87144>>>>>>>                Get IsComObjectCreated Of hoDatabaseTables To bAttached
87145>>>>>>>                If (bAttached) Begin
87147>>>>>>>                    Send LoadDatabaseTables hoDatabaseTables
87148>>>>>>>                    Set phoDatabaseTables To hoDatabaseTables
87149>>>>>>>                End
87149>>>>>>>>
87149>>>>>>>                Else Begin
87150>>>>>>>                    Send Destroy of hoDatabaseTables // remove main object if failed.
87151>>>>>>>                    Move 0 to hoDatabaseTables
87152>>>>>>>                    Error DFERR_CRYSTAL_REPORT C_$UnableToCreateTableObjects
87153>>>>>>>>
87153>>>>>>>                End
87153>>>>>>>>
87153>>>>>>>            End
87153>>>>>>>>
87153>>>>>>>        End
87153>>>>>>>>
87153>>>>>>>        Function_Return hoDatabaseTables
87154>>>>>>>    End_Function // DatabaseTablesObject
87155>>>>>>>
87155>>>>>>>    //Returns an array of tables in report
87155>>>>>>>    Function TableObjects Returns Handle[]
87157>>>>>>>        Handle hoDatabaseTables
87157>>>>>>>        Handle[] hoTables
87158>>>>>>>
87158>>>>>>>        If Not (phoDatabaseTables(Self)) Begin
87160>>>>>>>            // If tables haven't been loaded, load them now.
87160>>>>>>>            Get DatabaseTablesObject to hoDatabaseTables
87161>>>>>>>        End
87161>>>>>>>>
87161>>>>>>>        Get phoTables to hoTables
87162>>>>>>>        Function_Return hoTables
87163>>>>>>>    End_Function // TableObjects
87164>>>>>>>
87164>>>>>>>    //Returns handle of table from name. Note:ComName returns the object name. This is the
87164>>>>>>>    //name given to a file (such as an alias name). ComLocation and ComConnectBufferString
87164>>>>>>>    //return the file the connection is made to.
87164>>>>>>>    Function GetTableObjectByName String sTable Returns Handle
87166>>>>>>>        String sHoldName
87166>>>>>>>        Integer iTableItem iTableCount
87166>>>>>>>        Handle[] hoTables
87167>>>>>>>
87167>>>>>>>        Get TableObjects to hoTables
87168>>>>>>>        Move (SizeOfArray(hoTables)) to iTableCount
87169>>>>>>>        For iTableItem From 0 To (iTableCount-1)
87175>>>>>>>>
87175>>>>>>>            Get ComName Of hoTables[iTableItem] To sHoldName
87176>>>>>>>            If (Lowercase(sHoldName) = Lowercase(sTable)) Begin
87178>>>>>>>                Function_Return hoTables[iTableItem]
87179>>>>>>>            End
87179>>>>>>>>
87179>>>>>>>        Loop
87180>>>>>>>>
87180>>>>>>>        Function_Return 0
87181>>>>>>>    End_Function // GetTableObjectByName
87182>>>>>>>
87182>>>>>>>    // Set the location of a dataflex datafile (.dat or .int) to the data directory
87182>>>>>>>    Function LocateDFFile Handle hoDatabaseTable Returns Boolean
87184>>>>>>>        Integer iPath iNumPaths
87184>>>>>>>        Boolean bExists
87184>>>>>>>        String DirSep sTable sLocation
87184>>>>>>>        //
87184>>>>>>>        Move (Sysconf(SYSCONF_DIR_SEPARATOR)) To DirSep
87185>>>>>>>        Get ComConnectBufferString of hoDatabaseTable to sTable
87186>>>>>>>        While (Pos("=",sTable))
87190>>>>>>>            Move (Replace(Left(sTable, Pos("=",sTable)), sTable, "")) to sTable
87191>>>>>>>        Loop
87192>>>>>>>>
87192>>>>>>>        While (Pos(DirSep,sTable))
87196>>>>>>>            // strip out path until left with filename + extension
87196>>>>>>>            Move (Replace(Left(sTable, Pos(DirSep,sTable)), sTable, "")) to sTable
87197>>>>>>>        Loop
87198>>>>>>>>
87198>>>>>>>        Get psDataPath Of (phoWorkspace(ghoApplication)) To sLocation
87199>>>>>>>        If (Right(sLocation, 1) <> DirSep) Begin
87201>>>>>>>            Append sLocation DirSep
87202>>>>>>>        End
87202>>>>>>>>
87202>>>>>>>        Get CountOfPaths Of (phoWorkspace(ghoApplication)) sLocation To iNumPaths
87203>>>>>>>        Move (FALSE) to bExists
87204>>>>>>>        For iPath From 1 To iNumPaths
87210>>>>>>>>
87210>>>>>>>            Get psDataPath Of (phoWorkspace(ghoApplication)) To sLocation
87211>>>>>>>            Get PathAtIndex Of (phoWorkspace(ghoApplication)) sLocation iPath To sLocation
87212>>>>>>>            If (Right(sLocation, 1) <> DirSep) Begin
87214>>>>>>>                Append sLocation DirSep
87215>>>>>>>            End
87215>>>>>>>>
87215>>>>>>>            Append sLocation sTable
87216>>>>>>>            File_Exist sLocation bExists
87217>>>>>>>        Until ((bExists) Or (iPath=iNumPaths))
87219>>>>>>>        If (bExists) Begin
87221>>>>>>>            Set ComLocation Of hoDatabaseTable To sLocation
87222>>>>>>>        End
87222>>>>>>>>
87222>>>>>>>        Else Error DFERR_CRYSTAL_REPORT (SFormat(C_$NoLocationSpecifiedForTable, sTable))
87224>>>>>>>        Function_Return bExists
87225>>>>>>>    End_Function // LocateDFFile
87226>>>>>>>
87226>>>>>>>    //## NOT FOR USE WITH SUBREPORTS ##
87226>>>>>>>    // Locate all dataflex files for report and sub-report assign them to the data directory.
87226>>>>>>>    // If table cannot be relocated, process stops and false is returned; else return true.
87226>>>>>>>    Function LocateDFFiles Returns Boolean
87228>>>>>>>        Handle[] SubReportArray
87229>>>>>>>        Handle   hoSubReport
87229>>>>>>>        Integer  iReportItem iReportCount
87229>>>>>>>        Boolean  bOk
87229>>>>>>>
87229>>>>>>>        // locate for main report
87229>>>>>>>        Get LocateDFFilesForReport to bOk
87230>>>>>>>        If (Not(bOk)) Function_return False
87233>>>>>>>
87233>>>>>>>        // Set table locations for subreports
87233>>>>>>>        Get SubReportObjects to SubReportArray
87234>>>>>>>        Move (SizeOfArray(SubReportArray)) to iReportCount
87235>>>>>>>        For iReportItem From 0 To (iReportCount-1)
87241>>>>>>>>
87241>>>>>>>            Move SubReportArray[iReportItem] to hoSubReport
87242>>>>>>>            If (hoSubReport) Begin
87244>>>>>>>                Get LocateDFFilesForReport of hoSubReport to bOk
87245>>>>>>>                If (not(bOk)) Function_Return False
87248>>>>>>>            End
87248>>>>>>>>
87248>>>>>>>        Loop
87249>>>>>>>>
87249>>>>>>>        Function_return True
87250>>>>>>>    End_Function // LocateDFFiles
87251>>>>>>>
87251>>>>>>>
87251>>>>>>>    // Locate all dataflex files for this one report assign them to the data directory.
87251>>>>>>>    // If table cannot be relocated, process stops and false is returned; else return true
87251>>>>>>>    Function LocateDFFilesForReport Returns Boolean
87253>>>>>>>        String sTableType
87253>>>>>>>        Integer iTableItem iTableCount
87253>>>>>>>        Handle hoDatabaseTable
87253>>>>>>>        Handle[] hoTables
87254>>>>>>>        Boolean bOK
87254>>>>>>>        //
87254>>>>>>>        Get TableObjects to hoTables
87255>>>>>>>        Move (SizeOfArray(hoTables)) to iTableCount
87256>>>>>>>        // Loop through all tables
87256>>>>>>>        For iTableItem From 0 To (iTableCount-1)
87262>>>>>>>>
87262>>>>>>>            Move hoTables[iTableItem] To hoDatabaseTable
87263>>>>>>>            If (hoDatabaseTable) Begin
87265>>>>>>>                // Check database type and set location if it matches.
87265>>>>>>>                Get ComDllName of hoDatabaseTable to sTableType
87266>>>>>>>                If (sTableType = ttDATAFLEX and ghoApplication) Begin
87268>>>>>>>                    Get LocateDFFile hoDatabaseTable to bOK
87269>>>>>>>                    If (Not(bOK)) Function_return False // Exit loop with error (so we don't get redundant errors)
87272>>>>>>>                End
87272>>>>>>>>
87272>>>>>>>            End
87272>>>>>>>>
87272>>>>>>>        Loop
87273>>>>>>>>
87273>>>>>>>        Function_return True // it worked
87274>>>>>>>    End_Function // LocateDFFilesForReport
87275>>>>>>>
87275>>>>>>>    //## NOT FOR USE WITH SUBREPORTS ##
87275>>>>>>>    // Creates a CDO based on a TTX file.
87275>>>>>>>    Function CreateCDO String sFileName Returns Handle
87277>>>>>>>        Handle hoCDO
87277>>>>>>>        tCRWCDO[] CRWCDOs
87277>>>>>>>        tCRWCDO[] CRWCDOs
87278>>>>>>>        Integer iCDOCount iFieldType iChannel
87278>>>>>>>        Boolean bOK
87278>>>>>>>        String sLocation sLine sField sFieldType DirSep
87278>>>>>>>
87278>>>>>>>        // Create CDO object
87278>>>>>>>        Get Create U_cCrystalCrystalComObject to hoCDO
87279>>>>>>>        // Set Name of hoCDO to ("oCDO_"-sFilename) // for debugging purposes only
87279>>>>>>>        Send CreateComObject of hoCDO
87280>>>>>>>        Get IsComObjectCreated of hoCDO To bOk
87281>>>>>>>        If (bOk) Begin
87283>>>>>>>            Get pCDOs to CRWCDOs
87284>>>>>>>            Move (SizeOfArray(CRWCDOs)) to iCDOCount
87285>>>>>>>            //
87285>>>>>>>            Move (Sysconf(SYSCONF_DIR_SEPARATOR)) To DirSep
87286>>>>>>>            Indicate Err FALSE
87287>>>>>>>            Move (lowercase(sFileName)) to sFileName
87288>>>>>>>            //
87288>>>>>>>            Send ComReset of hoCDO
87289>>>>>>>            If (ghoApplication) begin
87291>>>>>>>                // Locate Filename in Datapath. This should be replaced with report directory.
87291>>>>>>>                Get psDataPath Of (phoWorkspace(ghoApplication)) To sLocation
87292>>>>>>>                If (Right(sLocation, 1) <> DirSep) Begin
87294>>>>>>>                    Append sLocation DirSep
87295>>>>>>>                End
87295>>>>>>>>
87295>>>>>>>                Get psReportLocation to sLocation
87296>>>>>>>                If (Right(sLocation, 1) <> DirSep) Begin
87298>>>>>>>                    Append sLocation DirSep
87299>>>>>>>                End
87299>>>>>>>>
87299>>>>>>>            End
87299>>>>>>>>
87299>>>>>>>            File_Exist (sLocation-sFileName) bOk // True if file exists
87300>>>>>>>            // If file exists...
87300>>>>>>>            If (bOk) Begin
87302>>>>>>>                Get Seq_New_Channel to iChannel
87303>>>>>>>                If (iChannel = DF_SEQ_CHANNEL_NOT_AVAILABLE) Begin
87305>>>>>>>                    Error DFERR_CRYSTAL_REPORT C_$NoIOChannelAvailableForCDO
87306>>>>>>>>
87306>>>>>>>                    Move False to bOk
87307>>>>>>>                End
87307>>>>>>>>
87307>>>>>>>                Else Begin
87308>>>>>>>                    Direct_Input channel iChannel (sLocation-sFileName)
87310>>>>>>>                    Repeat
87310>>>>>>>>
87310>>>>>>>                        Readln sLine
87311>>>>>>>                        If ( Not(SeqEof) and Trim(sLine<>"")) Begin
87313>>>>>>>                            // Reset variables
87313>>>>>>>                            Move "" to sField
87314>>>>>>>                            Move "" to sFieldType
87315>>>>>>>                            Move 0  to iFieldType
87316>>>>>>>                            //
87316>>>>>>>                            Move (Left(sLine, (Pos(" ", sLine)))) to sField
87317>>>>>>>                            Move (Replace(sField, sLine, "")) to sLine
87318>>>>>>>                            Move (Trim(sLine)) to sLine
87319>>>>>>>                            If (Pos(" ", sLine)) Begin
87321>>>>>>>                                Move (Left(sLine, (Pos(" ", sLine)))) to sFieldType
87322>>>>>>>                            End
87322>>>>>>>>
87322>>>>>>>                            Else Move sLine to sFieldType
87324>>>>>>>                            Move (Trim(lowercase(sFieldType))) to sFieldType
87325>>>>>>>                            //
87325>>>>>>>                            If (sFieldType = "blob")          Move OLE_VT_BSTR to iFieldType
87328>>>>>>>                            Else If (sFieldType = "boolean")  Move OLE_VT_BOOL to iFieldType
87332>>>>>>>                            Else If (sFieldType = "byte")     Move OLE_VT_UI1  to iFieldType
87336>>>>>>>                            Else If (sFieldType = "currency") Move OLE_VT_CY to iFieldType
87340>>>>>>>                            Else If (sFieldType = "date")     Move OLE_VT_DATE to iFieldType
87344>>>>>>>                            Else If (sFieldType = "datetime") Move OLE_VT_DATE to iFieldType
87348>>>>>>>                            Else If (sFieldType = "long")     Move OLE_VT_I4 to iFieldType
87352>>>>>>>                            Else If (sFieldType = "memo")     Move OLE_VT_BSTR to iFieldType
87356>>>>>>>                            Else If (sFieldType = "number")   Move OLE_VT_R8 to iFieldType
87360>>>>>>>                            Else If (sFieldType = "short")    Move OLE_VT_I2 to iFieldType
87364>>>>>>>                            Else If (sFieldType = "string")   Move OLE_VT_BSTR to iFieldType
87368>>>>>>>                            Else                              Move False to bOK // we didn't find a legal datatype in the ttx file
87370>>>>>>>
87370>>>>>>>                            If (bOk) Begin
87372>>>>>>>                                Get ComAddField of hoCDO (Trim(sField)) iFieldType to bOk
87373>>>>>>>                                If (Not(bOk)) Begin
87375>>>>>>>                                    Error DFERR_CRYSTAL_REPORT (SFormat(C_$ErrorCreatingCDOField, sField))
87376>>>>>>>>
87376>>>>>>>                                End
87376>>>>>>>>
87376>>>>>>>                            End
87376>>>>>>>>
87376>>>>>>>                            else Begin
87377>>>>>>>                                Error DFERR_CRYSTAL_REPORT (SFormat(C_$UnknownFieldTypeForCDO, sFieldType, sField))
87378>>>>>>>>
87378>>>>>>>                            end
87378>>>>>>>>
87378>>>>>>>                        end
87378>>>>>>>>
87378>>>>>>>                    Until ((SeqEof) or not(bOk))
87380>>>>>>>                    Close_Input channel iChannel
87382>>>>>>>                    Send Seq_Release_Channel iChannel
87383>>>>>>>                End
87383>>>>>>>>
87383>>>>>>>            End
87383>>>>>>>>
87383>>>>>>>            Else Begin
87384>>>>>>>                Error DFERR_CRYSTAL_REPORT (SFormat(C_$UnableToLocateCDOFile, sFileName))
87385>>>>>>>>
87385>>>>>>>            End
87385>>>>>>>>
87385>>>>>>>        End
87385>>>>>>>>
87385>>>>>>>        Else Begin
87386>>>>>>>            Error DFERR_CRYSTAL_REPORT (SFormat(C_$UnableToCreateCDOobject,sFileName))
87387>>>>>>>>
87387>>>>>>>        End
87387>>>>>>>>
87387>>>>>>>
87387>>>>>>>        If bOk Begin
87389>>>>>>>            Move (Left(sFileName, (Length(sFileName)-4))) to CRWCDOs[iCDOCount].sTable
87390>>>>>>>            Move hoCDO to CRWCDOs[iCDOCount].hoCDO
87391>>>>>>>            Set pCDOs to CRWCDOs
87392>>>>>>>        End
87392>>>>>>>>
87392>>>>>>>        Else Begin
87393>>>>>>>            Send Destroy of hoCDO
87394>>>>>>>            Move 0 to hoCDO
87395>>>>>>>        End
87395>>>>>>>>
87395>>>>>>>
87395>>>>>>>        Function_Return hoCDO
87396>>>>>>>    End_Function // CreateCDO
87397>>>>>>>
87397>>>>>>>    //## NOT FOR USE WITH SUBREPORTS ##
87397>>>>>>>    // Converts a safe array to the correct datatypes used by the CDO and attaches data to CDO.
87397>>>>>>>    // Example usage within OnInitializeReport: Send AppendCDOData of hoReport hoCDO vData
87397>>>>>>>    Procedure AppendCDOData Handle hoCDO Variant[][] vCDOData
87399>>>>>>>        Integer iCol iMaxCol iItem iCount iType
87399>>>>>>>
87399>>>>>>>        // Get number of columns
87399>>>>>>>        Get ComGetColCount of hoCDO to iMaxCol
87400>>>>>>>        // Get number of rows of data in array
87400>>>>>>>        Move (SizeOfArray(vCDOData)) to iCount
87401>>>>>>>        For iCol from 0 to (iMaxCol-1)
87407>>>>>>>>
87407>>>>>>>            Get ComGetFieldType of hoCDO iCol to iType
87408>>>>>>>            // For each column Loop through each row and set the proper datatypes according to the CDO
87408>>>>>>>            For iItem from 0 to (iCount-1)
87414>>>>>>>>
87414>>>>>>>                If (iType=OLE_VT_I4)            Move (Cast(vCDOData[iItem][iCol],Integer))   to vCDOData[iItem][iCol]
87417>>>>>>>                Else If (iType = OLE_VT_BSTR)   Move (Cast(vCDOData[iItem][iCol],String))    to vCDOData[iItem][iCol]
87421>>>>>>>                Else If (iType = OLE_VT_BOOL)   Move (Cast(vCDOData[iItem][iCol],Boolean))   to vCDOData[iItem][iCol]
87425>>>>>>>                Else If (iType = OLE_VT_CY)     Move (Cast(vCDOData[iItem][iCol],Currency))  to vCDOData[iItem][iCol]
87429>>>>>>>                Else If (iType = OLE_VT_DATE)   Move (Cast(vCDOData[iItem][iCol],Date))      to vCDOData[iItem][iCol]
87433>>>>>>>                Else If (iType = OLE_VT_R8)     Move (Cast(vCDOData[iItem][iCol],Real))      to vCDOData[iItem][iCol]
87437>>>>>>>                Else If (iType = OLE_VT_I2)     Move (Cast(vCDOData[iItem][iCol],Short))     to vCDOData[iItem][iCol]
87441>>>>>>>                Else If (iType = OLE_VT_UI1)    Move (Cast(vCDOData[iItem][iCol],UChar))     to vCDOData[iItem][iCol]
87445>>>>>>>            Loop
87446>>>>>>>>
87446>>>>>>>        Loop
87447>>>>>>>>
87447>>>>>>>        If (SizeOfArray(vCDOData)) Send ComAddRows of hoCDO vCDOData
87450>>>>>>>    End_Procedure // AppendCDOData
87451>>>>>>>
87451>>>>>>>
87451>>>>>>>    //## NOT FOR USE WITH SUBREPORTS ##
87451>>>>>>>    // Attaches an existing CDO to a report. This is usefull when a cdo is shared by multiple reports.
87451>>>>>>>    // Create the cdo once and attach it to each report.
87451>>>>>>>    Procedure AttachCDO String sFileName Handle hoCDO
87453>>>>>>>        Integer iCDOCount
87453>>>>>>>        tCRWCDO[] CRWCDOs
87453>>>>>>>        tCRWCDO[] CRWCDOs
87454>>>>>>>        Get pCDOs to CRWCDOs
87455>>>>>>>        Move (SizeOfArray(CRWCDOs)) to iCDOCount
87456>>>>>>>        Move (Left(sFileName, (Length(sFileName)-4))) to CRWCDOs[iCDOCount].sTable
87457>>>>>>>        Move hoCDO to CRWCDOs[iCDOCount].hoCDO
87458>>>>>>>        Set pCDOs to CRWCDOs
87459>>>>>>>    End_Procedure // AttachCDO
87460>>>>>>>
87460>>>>>>>    //## NOT FOR USE WITH SUBREPORTS ##
87460>>>>>>>    // Attaches CDO data to report and subreport CDO objects
87460>>>>>>>    Procedure AssignCDODataSources tCRWCDO[] CRWCDOs
87462>>>>>>>        Handle hoCDO hoTable
87462>>>>>>>        Integer iCDOItem iCDOCount
87462>>>>>>>        String sTable DirSep sPath sType
87462>>>>>>>        Move (Sysconf(SYSCONF_DIR_SEPARATOR)) To DirSep
87463>>>>>>>        Move (SizeOfArray(CRWCDOs)) to iCDOCount
87464>>>>>>>        For iCDOItem from 0 to (iCDOCount-1)
87470>>>>>>>>
87470>>>>>>>            Move CRWCDOs[iCDOItem].hoCDO to hoCDO
87471>>>>>>>            If (hoCDO) Begin
87473>>>>>>>                Get GetTableObjectByName CRWCDOs[iCDOItem].sTable to hoTable
87474>>>>>>>                If (hoTable) Begin
87476>>>>>>>                    Get ComDllName of hoTable to sType
87477>>>>>>>                    If (sType=ttCDO) Begin
87479>>>>>>>                        // Setting the datasource seems to be enough. Even though the TTX file is
87479>>>>>>>                        // not in the same location on the deployment end as the development end,
87479>>>>>>>                        // this does not appear to need to be set. I am leaving this code here in
87479>>>>>>>                        // case someone has a problem with it and needs to use it.
87479>>>>>>>                        //Get ComConnectBufferString of hoTable to sTable
87479>>>>>>>                        //While (Pos("=",sTable))
87479>>>>>>>                        //    Move (Replace(Left(sTable, Pos("=",sTable)), sTable, "")) to sTable
87479>>>>>>>                        //Loop
87479>>>>>>>                        //While (Pos(DirSep,sTable))
87479>>>>>>>                        //    // strip out path until left with filename + extension
87479>>>>>>>                        //    Move (Replace(Left(sTable, Pos(DirSep,sTable)), sTable, "")) to sTable
87479>>>>>>>                        //Loop
87479>>>>>>>                        // Set TTX location to same as report
87479>>>>>>>                        //Get psReportLocation to sPath
87479>>>>>>>                        //Set ComLocation of hoTable to (sPath-sTable)
87479>>>>>>>                        Send ComSetDataSource of hoTable (pvComObject(hoCDO)) 3 1
87480>>>>>>>                    End
87480>>>>>>>>
87480>>>>>>>                End
87480>>>>>>>>
87480>>>>>>>             End
87480>>>>>>>>
87480>>>>>>>        Loop
87481>>>>>>>>
87481>>>>>>>    End_Procedure // AssignCDODataSources
87482>>>>>>>
87482>>>>>>>
87482>>>>>>>    // End Database functions
87482>>>>>>>
87482>>>>>>>
87482>>>>>>>    //--------------------
87482>>>>>>>    // Formula Functions
87482>>>>>>>
87482>>>>>>>    //Returns handle to report formula fields collection comautomation object.
87482>>>>>>>    //Creates connection if connection does not already exist.
87482>>>>>>>    // This is used privately by AssignFormula
87482>>>>>>>    Function FormulaFieldDefinitionsObject Returns Handle
87484>>>>>>>        Variant vFormulaFields
87484>>>>>>>        Handle hoFormulaFieldDefinitions
87484>>>>>>>        Boolean bAttached
87484>>>>>>>
87484>>>>>>>        Get phoFormulaFieldDefinitions To hoFormulaFieldDefinitions
87485>>>>>>>        If Not (hoFormulaFieldDefinitions) Begin
87487>>>>>>>            Get Create U_cCrystalFormulaFieldDefinitions To hoFormulaFieldDefinitions
87488>>>>>>>            Set phoFormulaFieldDefinitions To hoFormulaFieldDefinitions
87489>>>>>>>            Get ComFormulaFields To vFormulaFields
87490>>>>>>>            Set pvComObject Of hoFormulaFieldDefinitions To vFormulaFields
87491>>>>>>>            //Set Name of hoFormulaFieldDefinitions to "oComFormulaFieldDefinitions" // for debugging purposes only
87491>>>>>>>        End
87491>>>>>>>>
87491>>>>>>>
87491>>>>>>>        Get IsComObjectCreated Of hoFormulaFieldDefinitions To bAttached
87492>>>>>>>        If (Not(bAttached)) Begin
87494>>>>>>>            Send Destroy of hoFormulaFieldDefinitions
87495>>>>>>>            Move 0 to hoFormulaFieldDefinitions
87496>>>>>>>            Set phoFormulaFieldDefinitions To 0
87497>>>>>>>            Error DFERR_CRYSTAL_REPORT C_$UnableToCreateFormulaFieldsObject
87498>>>>>>>>
87498>>>>>>>        End
87498>>>>>>>>
87498>>>>>>>        Function_Return hoFormulaFieldDefinitions
87499>>>>>>>    End_Function // FormulaFieldDefinitionsObject
87500>>>>>>>
87500>>>>>>>    //Sets report formula field to sValue
87500>>>>>>>    Procedure AssignFormula String sFormulaName String sValue
87502>>>>>>>        Variant vFormulaField
87502>>>>>>>        Handle hoFormulaFieldDefinitions hoFormulaFieldDefinition
87502>>>>>>>        Boolean bAttached bDisplay
87502>>>>>>>        // Find formula field and set it's value
87502>>>>>>>        Get FormulaFieldDefinitionsObject To hoFormulaFieldDefinitions
87503>>>>>>>        If (hoFormulaFieldDefinitions) Begin
87505>>>>>>>            Get Create Of hoFormulaFieldDefinitions U_cCrystalFormulaFieldDefinition To hoFormulaFieldDefinition
87506>>>>>>>            // if the name is not found, RDC generates an error which we want to suppress. We will show the error ourselves
87506>>>>>>>            Get Display_Error_State to bDisplay
87507>>>>>>>            Set Display_Error_State to false
87508>>>>>>>            Get ComGetItemByName Of hoFormulaFieldDefinitions sFormulaName To vFormulaField
87509>>>>>>>            Set Display_Error_State to bDisplay
87510>>>>>>>            Set pvComObject Of hoFormulaFieldDefinition To vFormulaField
87511>>>>>>>            Get IsComObjectCreated Of hoFormulaFieldDefinition To bAttached
87512>>>>>>>            //Set Name of hoFormulaFieldDefinition to ("Formula_"-ComName(hoFormulaFieldDefinition)) // for debugging purposes only
87512>>>>>>>            If (bAttached) Begin
87514>>>>>>>                Set ComText Of hoFormulaFieldDefinition To sValue
87515>>>>>>>            End
87515>>>>>>>>
87515>>>>>>>            Else Begin
87516>>>>>>>                Error DFERR_CRYSTAL_REPORT (SFormat(C_$UnableToCreateFormulaFieldObject, sFormulaName))
87517>>>>>>>>
87517>>>>>>>            End
87517>>>>>>>>
87517>>>>>>>            Send Destroy of hoFormulaFieldDefinition
87518>>>>>>>        End
87518>>>>>>>>
87518>>>>>>>    End_Procedure // AssignFormula
87519>>>>>>>
87519>>>>>>>    // End Formula Functions
87519>>>>>>>
87519>>>>>>>
87519>>>>>>>    //--------------------
87519>>>>>>>    // Parameter Functions
87519>>>>>>>
87519>>>>>>>    //Creates all Parameter objects
87519>>>>>>>    Procedure LoadParams handle hoParamFieldDefinitions
87521>>>>>>>        Variant vParameterFieldDefinition
87521>>>>>>>        Handle hoParameterFieldDefinition
87521>>>>>>>        Integer iParamItem iParamCount
87521>>>>>>>        Handle[] hoParams
87522>>>>>>>        Boolean bAttached
87522>>>>>>>        // create all parameters
87522>>>>>>>        Get ComCount of hoParamFieldDefinitions to iParamCount
87523>>>>>>>        For iParamItem From 1 To iParamCount
87529>>>>>>>>
87529>>>>>>>            Get ComItem of hoParamFieldDefinitions iParamItem To vParameterFieldDefinition
87530>>>>>>>            Get Create  of hoParamFieldDefinitions U_cCrystalParameterFieldDefinition To hoParameterFieldDefinition
87531>>>>>>>            Set pvComObject Of hoParameterFieldDefinition To vParameterFieldDefinition
87532>>>>>>>            //Set Name of hoParameterFieldDefinition to ("Parameter_"-ComName(hoParameterFieldDefinition)) // for debugging purposes only
87532>>>>>>>            Get IsComObjectCreated Of hoParameterFieldDefinition To bAttached
87533>>>>>>>            If (bAttached) Begin
87535>>>>>>>                Move hoParameterFieldDefinition to hoParams[iParamItem-1]
87536>>>>>>>            End
87536>>>>>>>>
87536>>>>>>>            Else Begin
87537>>>>>>>                Send Destroy of hoParameterFieldDefinition
87538>>>>>>>                Error DFERR_CRYSTAL_REPORT C_$ErrorLoadingParamFieldObjects
87539>>>>>>>>
87539>>>>>>>            End
87539>>>>>>>>
87539>>>>>>>        Loop
87540>>>>>>>>
87540>>>>>>>        Set phoParams to hoParams
87541>>>>>>>    End_Procedure // LoadParams
87542>>>>>>>
87542>>>>>>>    //Returns handle to report parameter fields collection comautomation object.
87542>>>>>>>    //Creates connection if connection does not already exist.
87542>>>>>>>    //This is used privately to load the params object which is accessed publicly via Get ParamObjects.
87542>>>>>>>    // We could destroy phoParamFieldDefinitions when this is done, but we are currently not doing so.
87542>>>>>>>    Function ParameterFieldDefinitionsObject Returns Handle
87544>>>>>>>        Variant vParamFields
87544>>>>>>>        Handle hoParamFieldDefinitions
87544>>>>>>>        Boolean bAttached
87544>>>>>>>
87544>>>>>>>        Get phoParamFieldDefinitions To hoParamFieldDefinitions
87545>>>>>>>        If Not (hoParamFieldDefinitions) Begin
87547>>>>>>>            Get Create U_cCrystalParameterFieldDefinitions To hoParamFieldDefinitions
87548>>>>>>>            Set phoParamFieldDefinitions To hoParamFieldDefinitions
87549>>>>>>>            Get ComParameterFields To vParamFields
87550>>>>>>>            Set pvComObject Of hoParamFieldDefinitions To vParamFields
87551>>>>>>>            Send LoadParams hoParamFieldDefinitions
87552>>>>>>>            //Set Name of hoParamFieldDefinitions to "oComParamFieldDefinitions" // for debugging purposes only
87552>>>>>>>        End
87552>>>>>>>>
87552>>>>>>>
87552>>>>>>>        Get IsComObjectCreated Of hoParamFieldDefinitions To bAttached
87553>>>>>>>        If not (bAttached) Begin
87555>>>>>>>            Send Destroy of hoParamFieldDefinitions
87556>>>>>>>            Move 0 to hoParamFieldDefinitions
87557>>>>>>>            Set phoParamFieldDefinitions To 0
87558>>>>>>>            Error DFERR_CRYSTAL_REPORT C_$UnableToCreateParamFieldsObject
87559>>>>>>>>
87559>>>>>>>        End
87559>>>>>>>>
87559>>>>>>>        Function_Return hoParamFieldDefinitions
87560>>>>>>>    End_Function // ParameterFieldDefinitionsObject
87561>>>>>>>
87561>>>>>>>    //Returns an array of Parameters in report
87561>>>>>>>    Function ParamObjects Returns Handle[]
87563>>>>>>>        Handle hoParamFieldDefinitions
87563>>>>>>>        Handle[] hoParams
87564>>>>>>>
87564>>>>>>>        If Not (phoParamFieldDefinitions(Self)) Begin
87566>>>>>>>            // If Params haven't been loaded, load them now.
87566>>>>>>>            Get ParameterFieldDefinitionsObject To hoParamFieldDefinitions
87567>>>>>>>        End
87567>>>>>>>>
87567>>>>>>>        Get phoParams to hoParams
87568>>>>>>>        Function_Return hoParams
87569>>>>>>>    End_Function // ParamObjects
87570>>>>>>>
87570>>>>>>>    //Returns handle of Parameter object from name
87570>>>>>>>    Function GetParamObjectByName String sParamName Returns Handle
87572>>>>>>>        String sHoldName
87572>>>>>>>        Integer iParamItem iParamCount
87572>>>>>>>        Handle[] hoParams
87573>>>>>>>
87573>>>>>>>        Get ParamObjects to hoParams
87574>>>>>>>        Move (SizeOfArray(hoParams)) to iParamCount
87575>>>>>>>        For iParamItem From 0 To (iParamCount-1)
87581>>>>>>>>
87581>>>>>>>            Get ComParameterFieldName Of hoParams[iParamItem] To sHoldName
87582>>>>>>>            If (Lowercase(sHoldName) = Lowercase(sParamName)) Begin
87584>>>>>>>                Function_Return hoParams[iParamItem]
87585>>>>>>>            End
87585>>>>>>>>
87585>>>>>>>        Loop
87586>>>>>>>>
87586>>>>>>>        Function_Return 0
87587>>>>>>>    End_Function // GetParamObjectByName
87588>>>>>>>
87588>>>>>>>    // End Parameter Functions
87588>>>>>>>
87588>>>>>>>
87588>>>>>>>    //--------------------
87588>>>>>>>    // Sort Functions
87588>>>>>>>
87588>>>>>>>    //Returns handle to report record sort fields collection comautomation object.
87588>>>>>>>    //Creates connection if connection does not already exist.
87588>>>>>>>    // This is used privately by the various sort methods (DeleteSortOrder, DeleteNthSortField and AppendSortField)
87588>>>>>>>    Function SortFieldsObject Returns Handle
87590>>>>>>>        Variant vSortFields
87590>>>>>>>        Handle hoSortFields
87590>>>>>>>        Boolean bAttached
87590>>>>>>>
87590>>>>>>>        Get phoSortFields To hoSortFields
87591>>>>>>>        If Not (hoSortFields) Begin
87593>>>>>>>            Get Create U_cCrystalSortFields To hoSortFields
87594>>>>>>>            Set phoSortFields To hoSortFields
87595>>>>>>>            Get ComRecordSortFields To vSortFields
87596>>>>>>>            Set pvComObject Of hoSortFields To vSortFields
87597>>>>>>>            //Set Name of hoSortFields to "oSortFields" // for debugging purposes only
87597>>>>>>>        End
87597>>>>>>>>
87597>>>>>>>
87597>>>>>>>        Get IsComObjectCreated Of hoSortFields To bAttached
87598>>>>>>>        If Not (bAttached) Begin
87600>>>>>>>            Send Destroy of hoSortFields
87601>>>>>>>            Move 0 to hoSortFields
87602>>>>>>>            Set phoSortFields To 0
87603>>>>>>>            Error DFERR_CRYSTAL_REPORT C_$UnableToCreateRecordSortObject
87604>>>>>>>>
87604>>>>>>>            Function_Return 0
87605>>>>>>>        End
87605>>>>>>>>
87605>>>>>>>        Function_Return hoSortFields
87606>>>>>>>    End_Function // SortFieldsObject
87607>>>>>>>
87607>>>>>>>    //Deletes current record sort order
87607>>>>>>>    Procedure DeleteSortOrder
87609>>>>>>>        Handle hoSortFields
87609>>>>>>>        Integer iSortItem iSortCount
87609>>>>>>>        Get SortFieldsObject To hoSortFields
87610>>>>>>>        If (hoSortFields) Begin
87612>>>>>>>            Get ComCount of hoSortFields to iSortCount
87613>>>>>>>            For iSortItem From 1 To iSortCount
87619>>>>>>>>
87619>>>>>>>                Send ComDelete Of hoSortFields 1
87620>>>>>>>            Loop
87621>>>>>>>>
87621>>>>>>>        End
87621>>>>>>>>
87621>>>>>>>    End_Procedure // DeleteSortOrder
87622>>>>>>>
87622>>>>>>>    //Deletes current record sort order at position iSortItem
87622>>>>>>>    Procedure DeleteNthSortField Integer iSortItem
87624>>>>>>>        Handle hoSortFields
87624>>>>>>>        Get SortFieldsObject To hoSortFields
87625>>>>>>>        If (hoSortFields) Begin
87627>>>>>>>            Send ComDelete Of hoSortFields iSortItem
87628>>>>>>>        End
87628>>>>>>>>
87628>>>>>>>    End_Procedure // DeleteNthSortField
87629>>>>>>>
87629>>>>>>>    //Adds table field to record sort order
87629>>>>>>>    Procedure AppendSortField String sTable String sField crSortDirection SortOrder
87631>>>>>>>        Variant vField vFields
87631>>>>>>>        Handle  hoSortFields hoDatabaseTable hoTableFields hoTableField
87631>>>>>>>        Boolean bOK bAttached
87631>>>>>>>        string  sName
87631>>>>>>>        integer iField iFieldCount
87631>>>>>>>
87631>>>>>>>        Get SortFieldsObject To hoSortFields
87632>>>>>>>        If (hoSortFields) Begin
87634>>>>>>>            Get GetTableObjectByName sTable To hoDatabaseTable
87635>>>>>>>            Move (hoDatabaseTable) to bOk
87636>>>>>>>            If bOk Begin
87638>>>>>>>                // create temporary object for all table fields
87638>>>>>>>                Get Create U_cCrystalDatabaseFieldDefinitions to hoTableFields
87639>>>>>>>                Get Create U_cCrystalDatabaseFieldDefinition  to hoTableField
87640>>>>>>>                Get ComFields of hoDatabaseTable To vFields
87641>>>>>>>                Set pvComObject of hoTableFields To vFields
87642>>>>>>>                Get IsComObjectCreated of hoTableFields to bAttached
87643>>>>>>>                If (bAttached) Begin
87645>>>>>>>                      Move (lowercase(sField)) to sField // we will do a lc comparison
87646>>>>>>>                      Get ComCount of hoTableFields to iFieldCount
87647>>>>>>>                      Move False to bOk
87648>>>>>>>                      Move 1 to iField
87649>>>>>>>                      While (not(bOk) and (iField<=iFieldCount))
87653>>>>>>>                            Get ComItem     of hoTableFields iField to vField
87654>>>>>>>                            Set pvComObject of hoTableField To vField
87655>>>>>>>                            Get IsComObjectCreated of hoTableField to bAttached
87656>>>>>>>                            If (bAttached) Begin
87658>>>>>>>                                Get ComDatabaseFieldName of hoTableField to sName
87659>>>>>>>                                If (lowercase(sName)=sField) Begin
87661>>>>>>>                                    Send ComAdd Of hoSortFields vField SortOrder
87662>>>>>>>                                    Move True to bOk
87663>>>>>>>                                end
87663>>>>>>>>
87663>>>>>>>                            end
87663>>>>>>>>
87663>>>>>>>                            Increment iField
87664>>>>>>>                      End
87665>>>>>>>>
87665>>>>>>>                End
87665>>>>>>>>
87665>>>>>>>                Send Destroy of hoTableField
87666>>>>>>>                Send Destroy of hoTableFields
87667>>>>>>>           End
87667>>>>>>>>
87667>>>>>>>            // if can't find table or field or whatever
87667>>>>>>>            If Not bOk Begin
87669>>>>>>>                Error DFERR_CRYSTAL_REPORT (SFormat(C_$CannotAddSortField, sTable, sField))
87670>>>>>>>>
87670>>>>>>>            end
87670>>>>>>>>
87670>>>>>>>        End
87670>>>>>>>>
87670>>>>>>>    End_Procedure // AppendSortField
87671>>>>>>>
87671>>>>>>>    //Adds formula field to record sort order
87671>>>>>>>    Procedure AppendSortFormulaField String sFormulaName crSortDirection SortOrder
87673>>>>>>>        Variant vField
87673>>>>>>>        Handle  hoSortFields hoFormulaFieldDefinitions
87673>>>>>>>        Boolean bOK bAttached bDisplay
87673>>>>>>>
87673>>>>>>>        Get SortFieldsObject To hoSortFields
87674>>>>>>>        If (hoSortFields) Begin
87676>>>>>>>            // Find formula field and set it's value
87676>>>>>>>            Get FormulaFieldDefinitionsObject To hoFormulaFieldDefinitions
87677>>>>>>>            If (hoFormulaFieldDefinitions) Begin
87679>>>>>>>                // if the name is not found, RDC generates an error which we want to suppress. We will show the error ourselves
87679>>>>>>>                Get Display_Error_State to bDisplay
87680>>>>>>>                Set Display_Error_State to false
87681>>>>>>>                Get ComGetItemByName Of hoFormulaFieldDefinitions sFormulaName To vField
87682>>>>>>>                Set Display_Error_State to bDisplay
87683>>>>>>>            End
87683>>>>>>>>
87683>>>>>>>            //
87683>>>>>>>            Move (Not(IsNullComObject(vField))) To bOK
87684>>>>>>>            If bOk Begin
87686>>>>>>>                Send ComAdd Of hoSortFields vField SortOrder
87687>>>>>>>            End
87687>>>>>>>>
87687>>>>>>>            // if can't find formula field
87687>>>>>>>            If Not bOk Begin
87689>>>>>>>                Error DFERR_CRYSTAL_REPORT (SFormat(C_$CannotAddSortFormulaField, sFormulaName))
87690>>>>>>>>
87690>>>>>>>            end
87690>>>>>>>>
87690>>>>>>>        End
87690>>>>>>>>
87690>>>>>>>    End_Procedure // AppendSortFormulaField
87691>>>>>>>
87691>>>>>>>
87691>>>>>>>    // End Sort Functions
87691>>>>>>>
87691>>>>>>>
87691>>>>>>>    //--------------------
87691>>>>>>>    // Begin Subreport Functions
87691>>>>>>>
87691>>>>>>>    //## NOT FOR USE WITH SUBREPORTS ##
87691>>>>>>>    //Loads all subreports into an array. Note: All objects are of a report are checked to check if it is
87691>>>>>>>    //a subreport. If it is a subreport, it is then created at the report level. All test objects are
87691>>>>>>>    //destroyed when this process is complete.
87691>>>>>>>    Procedure LoadSubreports
87693>>>>>>>        handle  hoAreas hoArea hoSections hoSection hoReportObjs hoSubReport hoTemp
87693>>>>>>>        variant vAreas vArea vSections vSection vReports vSubReport vReport
87693>>>>>>>        integer iArea iSection iSubReport iKind iCount
87693>>>>>>>        Handle[] SubReportArray
87694>>>>>>>        string  sName
87694>>>>>>>        Boolean bAttached
87694>>>>>>>
87694>>>>>>>        Get phoSubReports to SubReportArray
87695>>>>>>>        Get Create U_cCrystalAreas to hoAreas
87696>>>>>>>        Get Create U_cCrystalArea to hoArea
87697>>>>>>>        Get Create U_cCrystalSections to hoSections
87698>>>>>>>        Get Create U_cCrystalSection to hoSection
87699>>>>>>>        Get Create U_cCrystalReportObjects to hoReportObjs
87700>>>>>>>        Get Create U_cCrystalSubreportObject to hoTemp // temp subreport object to test ComKind
87701>>>>>>>
87701>>>>>>>        Get ComAreas to vAreas
87702>>>>>>>        Set pvComObject Of hoAreas To vAreas
87703>>>>>>>
87703>>>>>>>        For iArea from 1 to (ComCount(hoAreas))
87709>>>>>>>>
87709>>>>>>>            Get ComItem     of hoAreas iArea to vArea
87710>>>>>>>            Set pvComObject Of hoArea To vArea
87711>>>>>>>
87711>>>>>>>            Get ComSections of hoArea to vSections
87712>>>>>>>            Set pvComObject Of hoSections To vSections
87713>>>>>>>
87713>>>>>>>            For iSection from 1 to (ComCount(hoSections))
87719>>>>>>>>
87719>>>>>>>                Get ComItem     of hoSections iSection to vSection
87720>>>>>>>                Set pvComObject Of hoSection To vSection
87721>>>>>>>
87721>>>>>>>                Get ComReportObjects of hoSection to vReports
87722>>>>>>>                Set pvComObject Of hoReportObjs To vReports
87723>>>>>>>
87723>>>>>>>                For iSubReport from 1 to (ComCount(hoReportObjs))
87729>>>>>>>>
87729>>>>>>>                    Get ComItem     of hoReportObjs iSubReport to vSubReport
87730>>>>>>>                    Set pvComObject Of hoTemp To vSubReport
87731>>>>>>>
87731>>>>>>>                    Get ComKind of hoTemp to iKind
87732>>>>>>>                    If (iKind=crSubreportObject) begin
87734>>>>>>>                        Get ComSubReportName of hoTemp to sName
87735>>>>>>>                        // Open subreport
87735>>>>>>>                        Get ComOpenSubreport of hoTemp To vReport
87736>>>>>>>                        Get Create U_cCrystalReport To hoSubReport
87737>>>>>>>                        //Set Name of hoSubReport to ("oSubReport_"-sName) // for debugging purposes only
87737>>>>>>>                        Set pvComObject Of hoSubReport To vReport
87738>>>>>>>                        Get IsComObjectCreated of hoSubReport to bAttached
87739>>>>>>>                        If (bAttached) Begin
87741>>>>>>>                            // Assign subreport the same location as main report
87741>>>>>>>                            Set psReportLocation of hoSubReport to (psReportLocation(Self))
87742>>>>>>>                            Move hoSubReport to SubReportArray[iCount]
87743>>>>>>>                            Set psSubReportName of hoSubReport to (Trim(sName))
87744>>>>>>>                            Increment iCount
87745>>>>>>>                        End
87745>>>>>>>>
87745>>>>>>>                        Else Begin
87746>>>>>>>                            Error DFERR_CRYSTAL_REPORT (SFormat(C_$SubreportCouldNotBeOpened, sName))
87747>>>>>>>>
87747>>>>>>>                            Send Destroy of hoSubReport
87748>>>>>>>                        End
87748>>>>>>>>
87748>>>>>>>                    End
87748>>>>>>>>
87748>>>>>>>                Loop
87749>>>>>>>>
87749>>>>>>>            Loop
87750>>>>>>>>
87750>>>>>>>        Loop
87751>>>>>>>>
87751>>>>>>>        Send Destroy of hoAreas
87752>>>>>>>        Set phoSubReports to SubReportArray
87753>>>>>>>        Set pbSubReportsLoaded to TRUE
87754>>>>>>>    End_Procedure // LoadSubreports
87755>>>>>>>
87755>>>>>>>    //## NOT FOR USE WITH SUBREPORTS ##
87755>>>>>>>    //Returns an array of subreports in report
87755>>>>>>>    Function SubReportObjects Returns Handle[]
87757>>>>>>>        Handle[] SubReportArray
87758>>>>>>>        If not (pbSubReportsLoaded(Self)) Begin
87760>>>>>>>            // If subreports haven't been loaded, load them now.
87760>>>>>>>            Send LoadSubreports
87761>>>>>>>        End
87761>>>>>>>>
87761>>>>>>>        Get phoSubReports to SubReportArray
87762>>>>>>>        Function_Return SubReportArray
87763>>>>>>>    End_Function // SubReportObjects
87764>>>>>>>
87764>>>>>>>    //## NOT FOR USE WITH SUBREPORTS ##
87764>>>>>>>    //Returns handle of subreport object comautomation object. Creates
87764>>>>>>>    //connection if connection does not already exist
87764>>>>>>>    Function GetSubReportObjectbyName String sReportName Returns Handle
87766>>>>>>>        Integer iReportItem iReportCount
87766>>>>>>>        String sHoldName
87766>>>>>>>        Handle[] SubReportArray
87767>>>>>>>
87767>>>>>>>        // Check to see if subreport has already been accessed and return it's handle
87767>>>>>>>        Get SubReportObjects to SubReportArray
87768>>>>>>>        Move (SizeOfArray(SubReportArray)) to iReportCount
87769>>>>>>>        For iReportItem From 0 To (iReportCount-1)
87775>>>>>>>>
87775>>>>>>>            If (SubReportArray[iReportItem]) Begin
87777>>>>>>>                Move (psSubReportName(SubReportArray[iReportItem])) to sHoldName
87778>>>>>>>                If (lowercase(sHoldName)=lowercase(sReportName)) Begin
87780>>>>>>>                    Function_Return SubReportArray[iReportItem]
87781>>>>>>>                End
87781>>>>>>>>
87781>>>>>>>            End
87781>>>>>>>>
87781>>>>>>>        Loop
87782>>>>>>>>
87782>>>>>>>    End_Function // GetSubReportObjectbyName
87783>>>>>>>
87783>>>>>>>    // End Subreport Functions
87783>>>>>>>
87783>>>>>>>
87783>>>>>>>    //--------------------
87783>>>>>>>    // Begin Output Funtions
87783>>>>>>>
87783>>>>>>>    //## NOT FOR USE WITH SUBREPORTS ##
87783>>>>>>>    // Creates export object if it doesn't exist
87783>>>>>>>    Function ExportObject Returns Handle
87785>>>>>>>        Handle hoExport hcExportObject
87785>>>>>>>        Variant vExport
87785>>>>>>>        Boolean bAttached
87785>>>>>>>
87785>>>>>>>        Get phoExportObject to hoExport
87786>>>>>>>        If (Not(hoExport)) Begin
87788>>>>>>>            Delegate Get phcExportObject to hcExportObject
87790>>>>>>>            Get Create hcExportObject to hoExport
87791>>>>>>>            Get ComExportOptions To vExport
87792>>>>>>>            Set pvComObject Of hoExport To vExport
87793>>>>>>>            //Set Name of hoExport to "oExport" // for debugging purposes only
87793>>>>>>>            Get IsComObjectCreated of hoExport to bAttached
87794>>>>>>>            If (bAttached) Begin
87796>>>>>>>                Set phoExportObject to hoExport
87797>>>>>>>            End
87797>>>>>>>>
87797>>>>>>>            Else Begin
87798>>>>>>>                Send Destroy of hoExport
87799>>>>>>>                Move 0 to hoExport
87800>>>>>>>                Set phoExportObject to 0
87801>>>>>>>                Error DFERR_CRYSTAL_REPORT C_$ErrorCreatingExportObject
87802>>>>>>>>
87802>>>>>>>            End
87802>>>>>>>>
87802>>>>>>>        End
87802>>>>>>>>
87802>>>>>>>        Function_Return hoExport
87803>>>>>>>    End_Function // ExportObject
87804>>>>>>>    
87804>>>>>>>    Function PreviewerName Returns String
87806>>>>>>>        Handle hoPreviewerParent
87806>>>>>>>        String sPreviewerName
87806>>>>>>>
87806>>>>>>>        Get Parent of Self to hoPreviewerParent
87807>>>>>>>        If (hoPreviewerParent) Begin
87809>>>>>>>            Get Object_Label of hoPreviewerParent to sPreviewerName
87810>>>>>>>            Move (sPreviewerName - "_Previewer") to sPreviewerName
87811>>>>>>>        End
87811>>>>>>>>
87811>>>>>>>        Else Begin
87812>>>>>>>            Move "oPreviewer" to sPreviewerName
87813>>>>>>>        End
87813>>>>>>>>
87813>>>>>>>        
87813>>>>>>>        Function_Return sPreviewerName
87814>>>>>>>    End_Function
87815>>>>>>>
87815>>>>>>>
87815>>>>>>>    //## NOT FOR USE WITH SUBREPORTS ##
87815>>>>>>>    // Returns handle of preview object
87815>>>>>>>    Function PreviewObject Returns Handle
87817>>>>>>>        Handle hoPreview hoMain hoClientArea hcPreviewObject
87817>>>>>>>        String sTitle sPreviewerName
87817>>>>>>>        Boolean bAttached
87817>>>>>>>
87817>>>>>>>        Get phoPreviewObject to hoPreview
87818>>>>>>>        // This creates a MDI style viewer. The view that gets created (determined by phcPreviewObject)
87818>>>>>>>        // will get placed inside of the client-area-object within the main-panel-id. If either of these
87818>>>>>>>        // objects do not exist, this will not work (and you will get an error). In such a case, you'd
87818>>>>>>>        // want to create a replacement PreviewObject method using this as a model where you'd place
87818>>>>>>>        // the previewer wherever you want.
87818>>>>>>>        If (Not(hoPreview)) Begin
87820>>>>>>>            Delegate Get phcPreviewObject to hcPreviewObject
87822>>>>>>>            Get Main_Panel_ID To hoMain
87823>>>>>>>            If (not(hoMain)) Begin
87825>>>>>>>                Error DFERR_CRYSTAL_REPORT C_$NoMainPanelObject
87826>>>>>>>>
87826>>>>>>>                Function_return 0
87827>>>>>>>            end
87827>>>>>>>>
87827>>>>>>>            Get Client_Id of hoMain to hoClientArea
87828>>>>>>>            If (not(hoClientArea)) Begin
87830>>>>>>>                Error DFERR_CRYSTAL_REPORT C_$NoClientAreaObject
87831>>>>>>>>
87831>>>>>>>                Function_return 0
87832>>>>>>>            End
87832>>>>>>>>
87832>>>>>>>            Get Create Of hoClientArea hcPreviewObject To hoPreview
87833>>>>>>>            If (hoPreview) Begin
87835>>>>>>>                Get PreviewerName to sPreviewerName
87836>>>>>>>                Set Name of hoPreview to sPreviewerName
87837>>>>>>>                Set phoPreviewObject to hoPreview
87838>>>>>>>                Get ComReportTitle to sTitle
87839>>>>>>>                If (sTitle = "") Get psReportName to sTitle
87842>>>>>>>                // Note that this requires that the preview object understands the Label Message
87842>>>>>>>                Set Label Of hoPreview To sTitle
87843>>>>>>>            End
87843>>>>>>>>
87843>>>>>>>        End
87843>>>>>>>>
87843>>>>>>>        Function_Return hoPreview
87844>>>>>>>    End_Function // PreviewObject
87845>>>>>>>
87845>>>>>>>    //## NOT FOR USE WITH SUBREPORTS ##
87845>>>>>>>    // Override the default preview object
87845>>>>>>>    Procedure AssignPreviewObject Handle hoPreview
87847>>>>>>>        If (phoPreviewObject(Self)) Begin
87849>>>>>>>            Error DFERR_CRYSTAL_REPORT C_$PreviewObjectAlreadyAssigned
87850>>>>>>>>
87850>>>>>>>        End
87850>>>>>>>>
87850>>>>>>>        Else Set phoPreviewObject to hoPreview
87852>>>>>>>    End_Procedure // AssignPreviewObject
87853>>>>>>>
87853>>>>>>>    //## NOT FOR USE WITH SUBREPORTS ##
87853>>>>>>>    // Return handle of activeX preview object.
87853>>>>>>>    Function ActiveXReportViewerObject Returns Handle
87855>>>>>>>        Handle hoPreview
87855>>>>>>>        Get PreviewObject to hoPreview
87856>>>>>>>        If (hoPreview) Function_Return (phoActiveXReportViewer(hoPreview))
87859>>>>>>>        Function_Return 0
87860>>>>>>>    End_Function // ActiveXReportViewerObject
87861>>>>>>>
87861>>>>>>>    //## NOT FOR USE WITH SUBREPORTS ##
87861>>>>>>>    //Printer specific
87861>>>>>>>    Procedure PrintReport
87863>>>>>>>        Integer iStartPage iEndPage iCopies
87863>>>>>>>        Boolean bCollate bPrompt
87863>>>>>>>        Get piPrinterStartPage to iStartPage
87864>>>>>>>        Get piPrinterEndPage   to iEndPage
87865>>>>>>>        Get pbPrinterCollate   to bCollate
87866>>>>>>>        Get piPrinterCopies    to iCopies
87867>>>>>>>        Get pbPrinterPrompt    to bPrompt
87868>>>>>>>        // if endpage is 0, we assume end of report. Startpage must always be specified (default=1).
87868>>>>>>>        If (iEndPage=0) begin
87870>>>>>>>            Send ComPrintout bPrompt iCopies bCollate iStartPage nothing
87871>>>>>>>        end
87871>>>>>>>>
87871>>>>>>>        Else begin
87872>>>>>>>            Send ComPrintout bPrompt iCopies bCollate iStartPage iEndPage
87873>>>>>>>        end
87873>>>>>>>>
87873>>>>>>>    End_Procedure //PrintReport
87874>>>>>>>
87874>>>>>>>    //Export specific
87874>>>>>>>    Procedure ExportReport
87876>>>>>>>        Boolean bPrompt
87876>>>>>>>        Get pbExportPrompt to bPrompt
87877>>>>>>>        Send ComExport bPrompt
87878>>>>>>>    End_Procedure // ExportReport
87879>>>>>>>
87879>>>>>>>
87879>>>>>>>    // End Output Functions
87879>>>>>>>
87879>>>>>>>End_Class // cCrystalReport
87880>>>>>>>
87880>>>>>>>
87880>>>>>>>// Main crystal report class
87880>>>>>>>
87880>>>>>>>Class cCrystal is a cObject
87881>>>>>>>
87881>>>>>>>    Procedure Construct_Object
87883>>>>>>>        Forward Send Construct_Object
87885>>>>>>>
87885>>>>>>>        // destination of report
87885>>>>>>>        Property Integer peOutputDestination Print_To_Window
87886>>>>>>>
87886>>>>>>>        // name of report to be run
87886>>>>>>>        Property String  psReportName ""
87887>>>>>>>
87887>>>>>>>        // controls if dat or int files are automatically located.
87887>>>>>>>        Property Boolean pbAutoLocateDFFiles True
87888>>>>>>>
87888>>>>>>>        // Can be set true by the developer within the events to stop a report from running.
87888>>>>>>>        Property Boolean pbCanceled False
87889>>>>>>>
87889>>>>>>>        // Determines if a report is canceled if an error occurs. This can changed as often as needed to handle any particular
87889>>>>>>>        // section of code. If you want to try to handle an error, set this false (and be careful).
87889>>>>>>>        Property Boolean pbCancelIfError True
87890>>>>>>>
87890>>>>>>>        // Handle of classes used. Can be used to change the class of the composite child reportobject class
87890>>>>>>>        Property Handle phcReportObject      U_cCrystalReport
87891>>>>>>>        Property Handle phcPreviewObject     U_cCrystalPreview
87892>>>>>>>        Property Handle phcExportObject      U_cCrystalExportOptions
87893>>>>>>>
87893>>>>>>>        // if set to false, Crystal errors will not be sent to the error object.
87893>>>>>>>        Property Integer Display_Error_State True
87894>>>>>>>        Property Boolean pbHasErrors         False
87895>>>>>>>
87895>>>>>>>        Property Handle Old_Error_Object_Id  0
87896>>>>>>>
87896>>>>>>>        Property integer Error_Processing_State    False
87897>>>>>>>
87897>>>>>>>        // report com object.
87897>>>>>>>        Property Handle  phoReportObject 0
87898>>>>>>>
87898>>>>>>>    End_Procedure  // Construct_Object
87899>>>>>>>
87899>>>>>>>    // returns handle of attached com applicaton object. This creates this as a global object
87899>>>>>>>    // which is assigned to ghoCrystalReportServer. It then does a com attach. If the attach fails,
87899>>>>>>>    // zero is returned indicating failure. This can be used to test if the crystal rdc com objects
87899>>>>>>>    // are installed.
87899>>>>>>>    Function ApplicationObject returns handle
87901>>>>>>>        Boolean bDisplay bAttached
87901>>>>>>>        Handle  hoError
87901>>>>>>>
87901>>>>>>>        If (Not(ghoCrystalReportServer)) Begin
87903>>>>>>>            // if no application object, create this at the destkop level.
87903>>>>>>>            Get Create of (If(ghoApplication, ghoApplication, desktop)) U_cCrystalApplication to ghoCrystalReportServer
87904>>>>>>>        End
87904>>>>>>>>
87904>>>>>>>        Get IsComObjectCreated of ghoCrystalReportServer To bAttached
87905>>>>>>>
87905>>>>>>>        If not bAttached begin
87907>>>>>>>             Move Error_Object_Id to hoError
87908>>>>>>>             Get Display_Error_State to bDisplay
87909>>>>>>>             Move Self to Error_Object_Id
87910>>>>>>>             Set Display_Error_State to false
87911>>>>>>>             Send CreateComObject of ghoCrystalReportServer
87912>>>>>>>             Move hoError to Error_Object_Id
87913>>>>>>>             Set Display_Error_State to bDisplay
87914>>>>>>>
87914>>>>>>>             Get IsComObjectCreated of ghoCrystalReportServer To bAttached
87915>>>>>>>             If Not bAttached Begin
87917>>>>>>>                Function_Return 0
87918>>>>>>>             End
87918>>>>>>>>
87918>>>>>>>        End
87918>>>>>>>>
87918>>>>>>>        Function_return ghoCrystalReportServer
87919>>>>>>>    End_Function // ApplicationObject
87920>>>>>>>
87920>>>>>>>    // Return handle to existing report
87920>>>>>>>    Function ReportObject Returns Handle
87922>>>>>>>        Function_Return (phoReportObject(Self))
87923>>>>>>>    End_Function // ReportObject
87924>>>>>>>
87924>>>>>>>    // Intended to be used by developer
87924>>>>>>>    Procedure OnInitializeReport Handle hoReport
87926>>>>>>>    End_Procedure // OnInitializeReport
87927>>>>>>>
87927>>>>>>>    // Intended to be used by developer
87927>>>>>>>    Procedure OnPrintReport Handle hoReport
87929>>>>>>>    End_Procedure // OnPrintReport
87930>>>>>>>
87930>>>>>>>    // Intended to be used by developer
87930>>>>>>>    Procedure OnExportReport Handle hoReport
87932>>>>>>>    End_Procedure // OnExportReport
87933>>>>>>>
87933>>>>>>>    // Intended to be used by developer
87933>>>>>>>    Procedure OnDisplayReport Handle hoReport
87935>>>>>>>    End_Procedure // OnDisplayReport
87936>>>>>>>
87936>>>>>>>    // Can be sent by developer (and possible augmented) in more advanced situations
87936>>>>>>>    Procedure PrintReport Handle hoReport
87938>>>>>>>        boolean bCancel
87938>>>>>>>        Send OnPrintReport hoReport // developer event
87939>>>>>>>        Get pbCanceled to bCancel // developer might have canceled the report
87940>>>>>>>        If (not(bCancel)) Begin
87942>>>>>>>            Send PrintReport of hoReport
87943>>>>>>>        End
87943>>>>>>>>
87943>>>>>>>    End_Procedure // PrintReport
87944>>>>>>>
87944>>>>>>>    // Can be sent by developer (and possible augmented) in more advanced situations
87944>>>>>>>    Procedure ExportReport Handle hoReport
87946>>>>>>>        boolean bCancel
87946>>>>>>>        Send OnExportReport hoReport // developer event
87947>>>>>>>        Get pbCanceled to bCancel // developer might have canceled the report
87948>>>>>>>        If (not(bCancel)) Begin
87950>>>>>>>            Send ExportReport of hoReport
87951>>>>>>>        End
87951>>>>>>>>
87951>>>>>>>    End_Procedure // ExportReport
87952>>>>>>>
87952>>>>>>>    // Can be sent by developer (and possible augmented) in more advanced situations
87952>>>>>>>    Procedure DisplayReport Handle hoReport
87954>>>>>>>        boolean bCancel
87954>>>>>>>        Handle hoPreview
87954>>>>>>>        Send OnDisplayReport hoReport // developer event
87955>>>>>>>        Get pbCanceled to bCancel // developer might have canceled the report
87956>>>>>>>        If (not(bCancel)) Begin
87958>>>>>>>            Get PreviewObject of hoReport to hoPreview            
87959>>>>>>>            Send DisplayReport of hoPreview hoReport
87960>>>>>>>        End
87960>>>>>>>>
87960>>>>>>>    End_Procedure // DisplayReport
87961>>>>>>>
87961>>>>>>>    // Creates report object if it doesn't exist. Opens psReportName.
87961>>>>>>>    Function OpenReport Returns Boolean
87963>>>>>>>        Handle hoReport hoWorkspace hoSubReport hcReportObject hoApplicationObject
87963>>>>>>>        Variant vReport
87963>>>>>>>        Boolean bAttached bExists bOk bCanceled
87963>>>>>>>        String sReport sReportPath DirSep
87963>>>>>>>        Integer iPath iNumPaths iReportItem iReportCount
87963>>>>>>>        tCRWCDO[] CRWCDOs
87963>>>>>>>        tCRWCDO[] CRWCDOs
87964>>>>>>>        Handle[] SubReportArray
87965>>>>>>>
87965>>>>>>>
87965>>>>>>>        Set pbCanceled to False // this can be set true by developers within events to stop the report
87966>>>>>>>
87966>>>>>>>        // Check if Report application Server has already been created started. If not
87966>>>>>>>        // do so. If this returns 0, we failed and the report cannot be run.
87966>>>>>>>        Get ApplicationObject to hoApplicationObject
87967>>>>>>>        If not hoApplicationObject begin
87969>>>>>>>            Error DFERR_CRYSTAL_REPORT C_$FailedToConnectCrystalAutomation
87970>>>>>>>>
87970>>>>>>>            Function_Return FALSE
87971>>>>>>>        End
87971>>>>>>>>
87971>>>>>>>
87971>>>>>>>
87971>>>>>>>        // Create report Object if it doesn't exist
87971>>>>>>>        Get ReportObject to hoReport
87972>>>>>>>        If (hoReport) Begin
87974>>>>>>>            // Check to see if report object already has a report opened.
87974>>>>>>>            Get IsComObjectCreated Of hoReport To bAttached
87975>>>>>>>            If (bAttached) Begin
87977>>>>>>>                Error DFERR_CRYSTAL_REPORT C_$ReportIsAlreadyOpened
87978>>>>>>>>
87978>>>>>>>                Function_Return FALSE
87979>>>>>>>            End
87979>>>>>>>>
87979>>>>>>>        End
87979>>>>>>>>
87979>>>>>>>
87979>>>>>>>        If (Not(hoReport)) Begin
87981>>>>>>>            Get phcReportObject to hcReportObject
87982>>>>>>>            Get Create hcReportObject to hoReport
87983>>>>>>>            //Set Name of hoReport to "oReport" // for debugging purposes only
87983>>>>>>>            Set phoReportObject to hoReport
87984>>>>>>>        End
87984>>>>>>>>
87984>>>>>>>
87984>>>>>>>        If (not(hoReport)) Begin
87986>>>>>>>            Error DFERR_CRYSTAL_REPORT (SFormat(C_$ErrorOpeningReport, sReport))
87987>>>>>>>>
87987>>>>>>>            Function_Return FALSE
87988>>>>>>>        End
87988>>>>>>>>
87988>>>>>>>
87988>>>>>>>        // at this point the report is created (but not attached to a COM report).
87988>>>>>>>
87988>>>>>>>        Move True to bOk // keep track of errors during init process
87989>>>>>>>
87989>>>>>>>        Get psReportName to sReport
87990>>>>>>>        Move (Sysconf(SYSCONF_DIR_SEPARATOR)) To DirSep
87991>>>>>>>        // Did the user give us the path and file name?
87991>>>>>>>        If (Pos(DirSep, sReport)) Begin
87993>>>>>>>            File_Exist sReport bExists
87994>>>>>>>        End
87994>>>>>>>>
87994>>>>>>>        Else Move (FALSE) to bExists
87996>>>>>>>
87996>>>>>>>        If bExists Begin
87998>>>>>>>            Move sReport To sReportPath
87999>>>>>>>        End
87999>>>>>>>>
87999>>>>>>>        Else If (ghoApplication) Begin
88002>>>>>>>            // If no path was given, locate report in the workspace data directory(s). You can only
88002>>>>>>>            // do this if an application object exists.
88002>>>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
88003>>>>>>>            Get psDataPath of hoWorkspace To sReportPath
88004>>>>>>>            Get CountOfPaths Of hoWorkspace sReportPath To iNumPaths
88005>>>>>>>            // iterate through each datapath until report is located
88005>>>>>>>            For iPath From 1 To iNumPaths
88011>>>>>>>>
88011>>>>>>>                Get psDataPath Of hoWorkspace To sReportPath
88012>>>>>>>                Get PathAtIndex Of hoWorkspace sReportPath iPath To sReportPath
88013>>>>>>>                // Make sure path ends with a DirSep before we append the report name.
88013>>>>>>>                If (Right(sReportPath,1)<>DirSep) Begin
88015>>>>>>>                    Append sReportPath DirSep sReport
88017>>>>>>>                End
88017>>>>>>>>
88017>>>>>>>                File_Exist sReportPath bExists
88018>>>>>>>            Until ((bExists) Or (iPath=iNumPaths))
88020>>>>>>>        End
88020>>>>>>>>
88020>>>>>>>
88020>>>>>>>        If (Not(bExists)) Begin
88022>>>>>>>            Move False to bOk
88023>>>>>>>            Error DFERR_CRYSTAL_REPORT (SFormat(C_$UnabletoLocateReport, sReport))
88024>>>>>>>>
88024>>>>>>>        End
88024>>>>>>>>
88024>>>>>>>
88024>>>>>>>        // If Report was found, open it.
88024>>>>>>>        If (bOk) Begin
88026>>>>>>>            //open report
88026>>>>>>>            Get ComOpenReport of hoApplicationObject sReportPath crOpenReportByDefault to vReport
88027>>>>>>>            Set pvComObject Of hoReport To vReport
88028>>>>>>>            Get IsComObjectCreated Of hoReport To bOk
88029>>>>>>>            If (Not(bOk)) Begin
88031>>>>>>>                Error DFERR_CRYSTAL_REPORT (SFormat(C_$ErrorOpeningReport, sReport))
88032>>>>>>>>
88032>>>>>>>            End
88032>>>>>>>>
88032>>>>>>>        End
88032>>>>>>>>
88032>>>>>>>
88032>>>>>>>        If (bOk) Begin
88034>>>>>>>            //set report location
88034>>>>>>>            While (Right(sReportPath,1)<>DirSep)
88038>>>>>>>                Move (Left(sReportPath, (Length(sReportPath)-1))) to sReportPath
88039>>>>>>>            Loop
88040>>>>>>>>
88040>>>>>>>            Set psReportLocation of hoReport to sReportPath
88041>>>>>>>            //auto locate dat and int files.
88041>>>>>>>            If (pbAutoLocateDFFiles(Self)) Begin
88043>>>>>>>                Get LocateDFFiles of hoReport to bOk
88044>>>>>>>            End
88044>>>>>>>>
88044>>>>>>>        End
88044>>>>>>>>
88044>>>>>>>
88044>>>>>>>        If (bOk) Begin
88046>>>>>>>            // Always default forumula syntax to crystal syntax
88046>>>>>>>            Set ComFormulaSyntax of hoReport to crCrystalSyntaxFormula
88047>>>>>>>
88047>>>>>>>            Send OnInitializeReport hoReport
88048>>>>>>>            Get pbCanceled to bCanceled // developer might have canceled the report
88049>>>>>>>            If bCanceled Move False to bOk
88052>>>>>>>        End
88052>>>>>>>>
88052>>>>>>>
88052>>>>>>>        If (bOk) Begin
88054>>>>>>>            // Set CDO data source (if any)
88054>>>>>>>            Get pCDOs of hoReport to CRWCDOs
88055>>>>>>>            If (SizeOfArray(CRWCDOs)>0) Begin
88057>>>>>>>                Send AssignCDODataSources of hoReport CRWCDOs
88058>>>>>>>                // Set CDO data source (if any) for subreports
88058>>>>>>>                Get SubReportObjects of hoReport to SubReportArray
88059>>>>>>>                Move (SizeOfArray(SubReportArray)) to iReportCount
88060>>>>>>>                For iReportItem From 0 To (iReportCount-1)
88066>>>>>>>>
88066>>>>>>>                    Move SubReportArray[iReportItem] to hoSubReport
88067>>>>>>>                    If (hoSubReport) Begin
88069>>>>>>>                        Send AssignCDODataSources of hoSubReport CRWCDOs
88070>>>>>>>                    End
88070>>>>>>>>
88070>>>>>>>                Loop
88071>>>>>>>>
88071>>>>>>>            End
88071>>>>>>>>
88071>>>>>>>        End
88071>>>>>>>>
88071>>>>>>>
88071>>>>>>>        // we check pbCancaled one last time at the at end of the process. It is possible that OnError is setting this
88071>>>>>>>        // to True and that could happen any time. So we check at the very last moment here.
88071>>>>>>>        If (bOk) Begin
88073>>>>>>>            Get pbCanceled to bCanceled
88074>>>>>>>            If bCanceled Move False to bOk
88077>>>>>>>        End
88077>>>>>>>>
88077>>>>>>>
88077>>>>>>>        // if any error occured, destroy the report
88077>>>>>>>        If (not(bOk)) begin
88079>>>>>>>            Send DestroyReportObject
88080>>>>>>>        end
88080>>>>>>>>
88080>>>>>>>        Function_Return bOk
88081>>>>>>>
88081>>>>>>>    End_Function // OpenReport
88082>>>>>>>
88082>>>>>>>    Procedure OutputReport
88084>>>>>>>        Handle hoReport
88084>>>>>>>        Integer iDestination
88084>>>>>>>        Get ReportObject to hoReport
88085>>>>>>>        // We would not have a report object if there was a
88085>>>>>>>        If (hoReport) Begin
88087>>>>>>>            Get peOutputDestination to iDestination
88088>>>>>>>            If (iDestination= PRINT_TO_WINDOW) Begin
88090>>>>>>>                Send DisplayReport hoReport
88091>>>>>>>            End
88091>>>>>>>>
88091>>>>>>>            Else If (iDestination= PRINT_TO_FILE) Begin
88094>>>>>>>                Send ExportReport hoReport
88095>>>>>>>            End
88095>>>>>>>>
88095>>>>>>>            Else If ((iDestination=PRINT_TO_PRINTER_NO_DIALOG) or (iDestination=PRINT_TO_PRINTER)) Begin
88098>>>>>>>                Send PrintReport hoReport
88099>>>>>>>            End
88099>>>>>>>>
88099>>>>>>>            Else Error DFERR_CRYSTAL_REPORT C_$NoPrintDestinationDefined
88101>>>>>>>        End
88101>>>>>>>>
88101>>>>>>>    End_Procedure // OuputReport
88102>>>>>>>
88102>>>>>>>    Procedure DestroyReportObject
88104>>>>>>>        Boolean bCanClose
88104>>>>>>>
88104>>>>>>>        If (phoReportObject(Self)) Begin
88106>>>>>>>            Send Destroy of (phoReportObject(Self))
88107>>>>>>>            Set phoReportObject  to 0
88108>>>>>>>        End
88108>>>>>>>>
88108>>>>>>>
88108>>>>>>>        // also close the application object. Closing a report and not closing the application object it
88108>>>>>>>        // uses seems to create a memory leak (which is a Crystal RDC thing that we cannot control). See BT 3901
88108>>>>>>>        If (ghoCrystalReportServer) Begin
88110>>>>>>>
88110>>>>>>>            // assertion: I don't think this can ever be a can't close. If so, this will report an
88110>>>>>>>            // assertion but it will keep doing whatever it does.
88110>>>>>>>            If (IsComObjectCreated(ghoCrystalReportServer)) Begin
88112>>>>>>>                Get ComCanClose of ghoCrystalReportServer to bCanClose
88113>>>>>>>                If not bCanClose Begin
88115>>>>>>>                    Error DFERR_CRYSTAL_REPORT "Assert: Cannot close crystal application object"
88116>>>>>>>>
88116>>>>>>>                End
88116>>>>>>>>
88116>>>>>>>            End
88116>>>>>>>>
88116>>>>>>>
88116>>>>>>>            Send ReleaseComObject of ghoCrystalReportServer
88117>>>>>>>        End
88117>>>>>>>>
88117>>>>>>>    End_Procedure // DestroyReportObject
88118>>>>>>>
88118>>>>>>>    Procedure CloseReport
88120>>>>>>>        Send DestroyReportObject
88121>>>>>>>    End_Procedure // CloseReport
88122>>>>>>>
88122>>>>>>>    Procedure RunReport
88124>>>>>>>        Boolean bOK
88124>>>>>>>        Set pbHasErrors to false
88125>>>>>>>        // direct to local error handler
88125>>>>>>>        Set Old_Error_Object_id to Error_Object_id
88126>>>>>>>        Move self to Error_Object_id
88127>>>>>>>
88127>>>>>>>        Get OpenReport to bOK
88128>>>>>>>        If (bOK) Begin
88130>>>>>>>            Send OutputReport
88131>>>>>>>            Send CloseReport
88132>>>>>>>        End
88132>>>>>>>>
88132>>>>>>>
88132>>>>>>>        // restore error handler
88132>>>>>>>        Get Old_Error_Object_id to Error_Object_id
88133>>>>>>>    End_Procedure // RunReport
88134>>>>>>>
88134>>>>>>>    // when RunReport is called, errors are directed here.
88134>>>>>>>    Procedure Error_Report integer ErrNum integer iErrLine string ErrMsg
88136>>>>>>>        Handle  hoError
88136>>>>>>>        Boolean bCancelOnError
88136>>>>>>>        If (error_processing_state(self)=False) Begin
88138>>>>>>>            Set Error_processing_State to True // prevents recursion
88139>>>>>>>            Set pbHasErrors to True  // an error has occurred in the report
88140>>>>>>>            If (Display_Error_State(self)) Begin // if we display, direct to old error object
88142>>>>>>>                Get Old_Error_Object_Id to hoError
88143>>>>>>>                Send Error_Report of (if(hoError, hoError, desktop)) ErrNum iErrLine ErrMsg
88144>>>>>>>            End
88144>>>>>>>>
88144>>>>>>>            If (pbCancelIfError(self)) begin
88146>>>>>>>                Set pbCanceled to True
88147>>>>>>>            End
88147>>>>>>>>
88147>>>>>>>            Send onError ErrNum iErrLine ErrMsg
88148>>>>>>>            Set Error_processing_State to False
88149>>>>>>>        End
88149>>>>>>>>
88149>>>>>>>    End_procedure // Error_Report
88150>>>>>>>
88150>>>>>>>    // Event called by Error_Report. For augmentation.
88150>>>>>>>    Procedure OnError integer ErrNum integer iErrLine string ErrMsg
88152>>>>>>>    End_procedure // OnError
88153>>>>>>>
88153>>>>>>>    Function CrystalString String sVal Returns String
88155>>>>>>>        String sNewVal sHold
88155>>>>>>>        If (Not(Pos('"', sVal))) Function_Return ('"'+sVal+'"')
88158>>>>>>>        If (Not(Pos("'", sVal))) Function_Return ("'"+sVal+"'")
88161>>>>>>>        Move '"' To sNewVal
88162>>>>>>>        While (Pos('"', sVal))
88166>>>>>>>            Move (Left(sVal, (Pos('"', sVal)-1))) To sHold
88167>>>>>>>            Move (Replace((sHold+'"'), sVal, "")) To sVal
88168>>>>>>>            If (sNewVal <> '"') Append sNewVal '+"'
88171>>>>>>>            Append sNewVal sHold '"' "+'" '"' "'"
88176>>>>>>>        Loop
88177>>>>>>>>
88177>>>>>>>        If (Length(sVal)) Append sNewVal '+"' sVal '"'
88182>>>>>>>        Function_Return sNewVal
88183>>>>>>>    End_Function // CrystalString
88184>>>>>>>
88184>>>>>>>    Function CrystalInteger Integer iVal Returns String
88186>>>>>>>        Function_Return (String(iVal))
88187>>>>>>>    End_Function // CrystalInteger
88188>>>>>>>
88188>>>>>>>    Function CrystalNumber Number nVal Returns String
88190>>>>>>>        Integer iDecimalSeparator
88190>>>>>>>        String sFormattedNumber
88190>>>>>>>        // Crystal requires a string with a decimal point for numeric separator
88190>>>>>>>        Get_Attribute DF_DECIMAL_SEPARATOR To iDecimalSeparator
88193>>>>>>>        Move (string(nVal)) To sFormattedNumber
88194>>>>>>>        Move (Replace (Character (iDecimalSeparator), sFormattedNumber, ".")) To sFormattedNumber
88195>>>>>>>        Function_Return sFormattedNumber
88196>>>>>>>    End_Function // CrystalNumber
88197>>>>>>>
88197>>>>>>>    Function CrystalDate DateTime dtVal Returns String
88199>>>>>>>        Function_Return ("date(" + string(DateGetYear(dtVal)) + "," + string(DateGetMonth(dtVal)) + "," +string(DateGetDay(dtVal)) +")")
88200>>>>>>>    End_Function // CrystalDate
88201>>>>>>>
88201>>>>>>>    // compatibility methods
88201>>>>>>>
88201>>>>>>>    Procedure Run_Report
88203>>>>>>>        Send RunReport
88204>>>>>>>    End_Procedure // Run_Report
88205>>>>>>>
88205>>>>>>>    // Get / sets report name
88205>>>>>>>    Function Report_Name Returns String
88207>>>>>>>        Function_Return (psReportName(Self))
88208>>>>>>>    End_Function // Report_Name
88209>>>>>>>
88209>>>>>>>    Procedure Set Report_Name String sReportName
88211>>>>>>>        Set psReportName to sReportName
88212>>>>>>>    End_Procedure // Set Report_Name
88213>>>>>>>
88213>>>>>>>    // Gets / Sets report output destination. Will return output device mode of report view if none specified.
88213>>>>>>>    Function Output_Destination Returns Integer
88215>>>>>>>        Function_Return (peOutputDestination(Self))
88216>>>>>>>    End_Function // Output_Destination
88217>>>>>>>
88217>>>>>>>    Procedure Set Output_Destination Integer DevMode
88219>>>>>>>        Set peOutputDestination To DevMode
88220>>>>>>>    End_Procedure // Set Output_Destination
88221>>>>>>>
88221>>>>>>>End_Class // cCrystal
88222>>>>>>>
88222>>>>>
88222>>>>>Class cVDFD_CE_Crystal is a cCrystal
88223>>>>>    
88223>>>>>    Procedure Construct_Object
88225>>>>>        Forward Send Construct_Object
88227>>>>>
88227>>>>>    End_Procedure
88228>>>>>
88228>>>>>    Procedure End_Construct_Object
88230>>>>>        Forward Send End_Construct_Object
88232>>>>>
88232>>>>>    End_Procedure
88233>>>>>
88233>>>>>End_Class
88234>>>Use Base\cVDFD_CE_CrystalActiveXReportViewer.pkg
Including file: Base\cVDFD_CE_CrystalActiveXReportViewer.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_CrystalActiveXReportViewer.pkg)
88234>>>>>Use cCrystalActiveXReportViewer.pkg
88234>>>>>
88234>>>>>Class cVDFD_CE_CrystalActiveXReportViewer is a cCrystalActiveXReportViewer
88235>>>>>    
88235>>>>>    Procedure Construct_Object
88237>>>>>        Forward Send Construct_Object
88239>>>>>
88239>>>>>    End_Procedure
88240>>>>>
88240>>>>>    Procedure End_Construct_Object
88242>>>>>        Forward Send End_Construct_Object
88244>>>>>
88244>>>>>    End_Procedure
88245>>>>>
88245>>>>>End_Class
88246>>>Use Base\cVDFD_CE_DbCJGrid.pkg
Including file: Base\cVDFD_CE_DbCJGrid.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbCJGrid.pkg)
88246>>>>>Use cDbCJGrid.pkg
88246>>>>>
88246>>>>>Class cVDFD_CE_DbCJGrid is a cDbCJGrid
88247>>>>>    
88247>>>>>    Procedure Construct_Object
88249>>>>>        Forward Send Construct_Object
88251>>>>>
88251>>>>>    End_Procedure
88252>>>>>
88252>>>>>    Procedure End_Construct_Object
88254>>>>>        Forward Send End_Construct_Object
88256>>>>>
88256>>>>>    End_Procedure
88257>>>>>
88257>>>>>End_Class
88258>>>Use Base\cVDFD_CE_DbCJGridColumn.pkg
Including file: Base\cVDFD_CE_DbCJGridColumn.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbCJGridColumn.pkg)
88258>>>>>Use cDbCJGridColumn.pkg
88258>>>>>
88258>>>>>Class cVDFD_CE_DbCJGridColumn is a cDbCJGridColumn
88259>>>>>    
88259>>>>>    Procedure Construct_Object
88261>>>>>        Forward Send Construct_Object
88263>>>>>
88263>>>>>    End_Procedure
88264>>>>>
88264>>>>>    Procedure End_Construct_Object
88266>>>>>        Forward Send End_Construct_Object
88268>>>>>
88268>>>>>    End_Procedure
88269>>>>>
88269>>>>>End_Class
88270>>>Use Base\cVDFD_CE_DbCJGridPromptList.pkg
Including file: Base\cVDFD_CE_DbCJGridPromptList.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbCJGridPromptList.pkg)
88270>>>>>Use cDbCJGridPromptList.pkg
88270>>>>>
88270>>>>>Class cVDFD_CE_DbCJGridPromptList is a cDbCJGridPromptList
88271>>>>>    
88271>>>>>    Procedure Construct_Object
88273>>>>>        Forward Send Construct_Object
88275>>>>>
88275>>>>>    End_Procedure
88276>>>>>
88276>>>>>    Procedure End_Construct_Object
88278>>>>>        Forward Send End_Construct_Object
88280>>>>>
88280>>>>>    End_Procedure
88281>>>>>
88281>>>>>End_Class
88282>>>Use Base\cVDFD_CE_DbRichEdit.pkg
Including file: Base\cVDFD_CE_DbRichEdit.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbRichEdit.pkg)
88282>>>>>Use cDbRichEdit.pkg
Including file: cDbRichEdit.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cDbRichEdit.pkg)
88282>>>>>>>Use cRichEdit.pkg
Including file: cRichEdit.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cRichEdit.pkg)
88282>>>>>>>>>use Windows.pkg
88282>>>>>>>>>Use cEdit_Mixin.pkg
88282>>>>>>>>>
88282>>>>>>>>>// DFO: cRichEdit.Dfo
88282>>>>>>>>>// DFC: cRichEdit.Dfc
88282>>>>>>>>>
88282>>>>>>>>>// constants used for RichEdit Properties
88282>>>>>>>>>// peAlignment 
88282>>>>>>>>>Enum_List 
88282>>>>>>>>>    Define alLeft   for 1 
88282>>>>>>>>>    Define alRight  for 2 
88282>>>>>>>>>    Define alCenter for 3 
88282>>>>>>>>>End_Enum_List 
88282>>>>>>>>>
88282>>>>>>>>>// peBullets 
88282>>>>>>>>>Enum_List 
88282>>>>>>>>>    Define buNone 
88282>>>>>>>>>    Define buBullets 
88282>>>>>>>>>    Define buArabicNumbers 
88282>>>>>>>>>    Define buLowerLetters 
88282>>>>>>>>>    Define buUpperLetters 
88282>>>>>>>>>    Define buLowerRomans 
88282>>>>>>>>>    Define buUpperRomans 
88282>>>>>>>>>End_Enum_List 
88282>>>>>>>>>
88282>>>>>>>>>// peBulletStyle 
88282>>>>>>>>>Enum_List 
88282>>>>>>>>>    Define busRightParen   for 0 
88282>>>>>>>>>    Define busEncloseParen for 256 
88282>>>>>>>>>    Define busPeriod       for 512 
88282>>>>>>>>>    Define busNumberOnly   for 768 
88282>>>>>>>>>    Define busNoDisplay    for 1024 
88282>>>>>>>>>End_Enum_List
88282>>>>>>>>>    
88282>>>>>>>>>// peLineSpacingType
88282>>>>>>>>>Enum_List 
88282>>>>>>>>>    Define lstSingle
88282>>>>>>>>>    Define lstSingleAndOneHalf
88282>>>>>>>>>    Define lstDouble
88282>>>>>>>>>End_Enum_List
88282>>>>>>>>>
88282>>>>>>>>>Class cRichEdit Is A DFBaseRichEdit
88283>>>>>>>>>
88283>>>>>>>>>    Procedure Construct_Object
88285>>>>>>>>>        Forward Send Construct_Object
88287>>>>>>>>>        Send Define_cEdit_Mixin
88288>>>>>>>>>
88288>>>>>>>>>        On_key Key_Ctrl+Key_B send ToggleBold
88289>>>>>>>>>        On_key Key_Ctrl+Key_I send ToggleItalics
88290>>>>>>>>>        On_key Key_Ctrl+Key_U send ToggleUnderline
88291>>>>>>>>>
88291>>>>>>>>>    End_Procedure // Construct_Object
88292>>>>>>>>>
88292>>>>>>>>>    Import_Class_Protocol cEdit_Mixin
88293>>>>>>>>>    
88293>>>>>>>>>    Procedure ToggleBold
88295>>>>>>>>>        Set pbBold to (not(pbBold(self))) 
88296>>>>>>>>>    end_procedure
88297>>>>>>>>>    
88297>>>>>>>>>    Procedure ToggleItalics
88299>>>>>>>>>        Set pbItalics to (not(pbItalics(self))) 
88300>>>>>>>>>    end_procedure
88301>>>>>>>>>    
88301>>>>>>>>>    Procedure ToggleUnderline
88303>>>>>>>>>       Set pbUnderLine to (not(pbUnderLine(self))) 
88304>>>>>>>>>    end_procedure
88305>>>>>>>>>
88305>>>>>>>>>End_Class
88306>>>>>>>>>
88306>>>>>>>Use Text_Win.pkg
88306>>>>>>>Use DFNav_mx.pkg      // Navigation changes for DF DEOs
88306>>>>>>>Use DFCdDeo.pkg      // DEO Code message support
88306>>>>>>>Use DD_Deomx.pkg // mixin support for dd classes
88306>>>>>>>
88306>>>>>>>// DFO: cDbRichEdit.Dfo
88306>>>>>>>// DFC: cDbRichEdit.Dfc
88306>>>>>>>
88306>>>>>>>Class cDbRichEdit_ is a cRichEdit
88307>>>>>>>
88307>>>>>>>    Import_Class_Protocol Text_Window_mixin
88308>>>>>>>
88308>>>>>>>    //
88308>>>>>>>    // created for EntItem simulation and Server support:
88308>>>>>>>    //  if file# = 0, display only if Data_File is in Done-array
88308>>>>>>>    //  else display only if file# = Data_File
88308>>>>>>>    //
88308>>>>>>>    procedure Entry_Display integer iFile integer iFlag
88310>>>>>>>        Boolean bUpdate bOld
88310>>>>>>>        Integer iDataFile
88310>>>>>>>        get data_file to iDataFile
88311>>>>>>>        if (iDataFile) begin // if not data file, we have nothing to update
88313>>>>>>>            if (iFile=0) begin
88315>>>>>>>                is_file_included iDataFile 1
88316>>>>>>>                Move (found) to bUpdate
88317>>>>>>>            end
88317>>>>>>>>
88317>>>>>>>            else begin
88318>>>>>>>                Move (iFile=iDataFile or iFlag) to bUpdate
88319>>>>>>>            end
88319>>>>>>>>
88319>>>>>>>
88319>>>>>>>            If bUpdate begin
88321>>>>>>>                get dynamic_update_state to bOld
88322>>>>>>>                set dynamic_update_state to false
88323>>>>>>>                send Delete_Data   // init buffer
88324>>>>>>>                send DisplayData   // read buffer from file
88325>>>>>>>                send beginning_of_data
88326>>>>>>>                set dynamic_update_state to bOld
88327>>>>>>>            end
88327>>>>>>>>
88327>>>>>>>        end
88327>>>>>>>>
88327>>>>>>>    end_procedure
88328>>>>>>>
88328>>>>>>>    Procedure DisplayData
88330>>>>>>>        integer iFile iField iFldLen
88330>>>>>>>        Address pField
88330>>>>>>>        Boolean bOk bOld
88330>>>>>>>        Get Data_File to iFile
88331>>>>>>>        Get Data_Field to iField
88332>>>>>>>        If (iFile>0 and iField>0) begin
88334>>>>>>>            Get Change_Disabled_State to bOld
88335>>>>>>>            Set Change_Disabled_State to True
88336>>>>>>>            Get_Attribute DF_FIELD_LENGTH of iFile iField to iFldLen
88339>>>>>>>            // when allocating field lengths for get_field_value you *must* always add one
88339>>>>>>>            // extra character for a terminating 0.
88339>>>>>>>            Move (Alloc(iFldLen+1)) to pField
88340>>>>>>>            Get_Field_Value iFile iField to pField
88343>>>>>>>            Set paValue to pField
88344>>>>>>>            Move (Free(pField)) to bOk
88345>>>>>>>            Set Change_Disabled_State to bOld
88346>>>>>>>        end
88346>>>>>>>>
88346>>>>>>>    End_procedure
88347>>>>>>>
88347>>>>>>>    //
88347>>>>>>>    // This is designed onlt to work with DDs. With DDs, this is called under
88347>>>>>>>    // two conditons.
88347>>>>>>>    // 1. Update for find (passes iFile and Flag=1). We never want to update for finds. Text is not indexed
88347>>>>>>>    // 2. Update for save (passes iFile=0 and Flag=3).
88347>>>>>>>    // Thus we update if a ddo save (iFlag=3) the field is changed, and the file is in done array
88347>>>>>>>    //
88347>>>>>>>    procedure Entry_Update integer iFile integer iFlag
88349>>>>>>>        Integer iDataFile
88349>>>>>>>        Boolean bUpdate
88349>>>>>>>        If (iFlag=3 and changed_State(Self)) begin
88351>>>>>>>            get Data_File to iDataFile
88352>>>>>>>            If (iDataFile) begin
88354>>>>>>>                is_file_included iDataFile 1 // is file in done array (will it get saved)?
88355>>>>>>>                Move (found) to bUpdate
88356>>>>>>>            end
88356>>>>>>>>
88356>>>>>>>            If bUpdate begin
88358>>>>>>>                send UpdateData
88359>>>>>>>            end
88359>>>>>>>>
88359>>>>>>>        end
88359>>>>>>>>
88359>>>>>>>    end_procedure
88360>>>>>>>
88360>>>>>>>    // Move data from Text Control to the File/field buffer
88360>>>>>>>    Procedure UpdateData
88362>>>>>>>        integer iFile iField iFldLen
88362>>>>>>>        Address pField
88362>>>>>>>        Boolean bOk
88362>>>>>>>        Get Data_File  to iFile
88363>>>>>>>        Get Data_Field to iField
88364>>>>>>>        If (iFile>0 and iField>0) begin
88366>>>>>>>            Get paValue to pField
88367>>>>>>>            //Move (Length(pField)) to iFldLen
88367>>>>>>>            Move (CStringLength(pField)) to iFldLen
88368>>>>>>>            Set_Field_Value iFile iField to pField LENGTH iFldLen
88371>>>>>>>            Move (Free(pField)) to bOk
88372>>>>>>>        end
88372>>>>>>>>
88372>>>>>>>    End_procedure
88373>>>>>>>
88373>>>>>>>End_Class
88374>>>>>>>
88374>>>>>>>Class cDbRichEditDS_ is a cDbRichEdit_
88375>>>>>>>
88375>>>>>>>    Procedure Construct_Object
88377>>>>>>>        Forward Send Construct_Object
88379>>>>>>>        Send Define_DFNavigation  // GUI navigate changes
88380>>>>>>>        // restore standard begin/end of text window behavior (which
88380>>>>>>>        // is altered by CM packages
88380>>>>>>>        On_key kBegin_of_data send default_key
88381>>>>>>>        On_key kEnd_of_data send default_key
88382>>>>>>>
88382>>>>>>>        // if true, we dynamically test the length of the stream (i.e., the real length that gets
88382>>>>>>>        // written to the database) to see if it is too long. If you text is very long this may be
88382>>>>>>>        // too slow and you would therefore want to disable it. 
88382>>>>>>>        Property Boolean pbTestCharCount True
88383>>>>>>>
88383>>>>>>>        Property Integer piMaxStreamLength 0
88384>>>>>>>        Property Integer piLastCharCount 0
88385>>>>>>>
88385>>>>>>>    End_Procedure // Construct_Object
88386>>>>>>>
88386>>>>>>>    Import_Class_Protocol DFNavigate_Mixin
88387>>>>>>>    Import_Class_Protocol DFCode_DEO_Mixin
88388>>>>>>>    Import_Class_Protocol DataFile_Help_Mixin
88389>>>>>>>
88389>>>>>>>    // these should be in text_win.pkg All DEOs shoudld understand this
88389>>>>>>>    // message. Needed for smart pulldown shadowing of these items
88389>>>>>>>    //
88389>>>>>>>    Function Prompt_Object integer item# returns integer
88391>>>>>>>    End_Function
88392>>>>>>>
88392>>>>>>>    Function Zoom_Object integer item# returns integer
88394>>>>>>>    End_Function
88395>>>>>>>
88395>>>>>>>    Procedure Bind_Data integer File# Integer Field#
88397>>>>>>>        Set Data_File  to File#
88398>>>>>>>        Set Data_Field to Field#
88399>>>>>>>    End_Procedure // Bind_Data
88400>>>>>>>
88400>>>>>>>    // augment to raise an error if the field length is too long. With Rich edit we only know this when we try
88400>>>>>>>    // to update the buffer
88400>>>>>>>    function Validate_Items integer flag returns integer
88402>>>>>>>        integer iFile iField iFldLen iEditLen
88402>>>>>>>        Address pField
88402>>>>>>>        Boolean bOk
88402>>>>>>>        Get Data_File to iFile
88403>>>>>>>        Get Data_Field to iField
88404>>>>>>>        If (iFile>0 and iField>0) begin
88406>>>>>>>            Get_Attribute DF_FIELD_LENGTH of iFile iField to iFldLen
88409>>>>>>>            Get CharCount to iEditLen
88410>>>>>>>            If (iEditLen>iFldLen) begin
88412>>>>>>>                Send Activate_Area True
88413>>>>>>>                Error DFERR_TEXT_TOO_LARGE_FOR_FIELD (sFormat(C_$MaxLenAndCurrentLen,iFldLen,iEditLen))
88414>>>>>>>>
88414>>>>>>>                Function_return 1
88415>>>>>>>            end
88415>>>>>>>>
88415>>>>>>>        end
88415>>>>>>>>
88415>>>>>>>    end_function
88416>>>>>>>
88416>>>>>>>    // do an additional test in EN_CHANGE to handle testing of stream length
88416>>>>>>>    Procedure Command Integer wParam Integer lParam
88418>>>>>>>        Boolean bTestCharCount bSuppress
88418>>>>>>>        Integer iMax iEditLen iLast iFile iField
88418>>>>>>>        
88418>>>>>>>        Forward Send Command wParam lParam
88420>>>>>>>        
88420>>>>>>>        If (hi(wParam)=EN_CHANGE) Begin
88422>>>>>>>            Get pbSuppressChange to bSuppress
88423>>>>>>>            If bSuppress Begin
88425>>>>>>>                // if we are suppressing change notification, reset the last count. It doesn't
88425>>>>>>>                // matter if the count is accurate.
88425>>>>>>>                Set piLastCharCount to 0
88426>>>>>>>            End
88426>>>>>>>>
88426>>>>>>>            Else Begin
88427>>>>>>>                Get pbTestCharCount to bTestCharCount
88428>>>>>>>                If bTestCharCount Begin
88430>>>>>>>                    Get Data_File to iFile
88431>>>>>>>                    If (iFile) Begin
88433>>>>>>>                       Get Data_Field to iField
88434>>>>>>>                       Get_Attribute DF_FIELD_Length of iFile iField to iMax
88437>>>>>>>                    End
88437>>>>>>>>
88437>>>>>>>                    // Get the current stream length. This is the potentially expensive operation.
88437>>>>>>>                    Get CharCount to iEditLen
88438>>>>>>>                    Get piLastCharCount to iLast
88439>>>>>>>                    // set this so we know when we are getting smaller 
88439>>>>>>>                    Set piLastCharCount to iEditLen
88440>>>>>>>                    // if the length is too long and the attempt was to make it longer we
88440>>>>>>>                    // have an error. If do the piLastCharCount test so that you don't get errors
88440>>>>>>>                    // when you are trying to make the text shorter (like backspacing after you get the error).
88440>>>>>>>                    If (iMax>0 and iEditLen>iMax and iEditLen>iLast) Begin 
88442>>>>>>>                        Error DFERR_TEXT_TOO_LARGE_FOR_FIELD (sFormat(C_$MaxLenAndCurrentLen,iMax,iEditLen))
88443>>>>>>>>
88443>>>>>>>                        Send OnMaxText
88444>>>>>>>                    End
88444>>>>>>>>
88444>>>>>>>                End
88444>>>>>>>>
88444>>>>>>>            End
88444>>>>>>>>
88444>>>>>>>        End
88444>>>>>>>>
88444>>>>>>>    End_Procedure
88445>>>>>>>
88445>>>>>>>End_Class
88446>>>>>>>
88446>>>>>>>
88446>>>>>>>
88446>>>>>>>Class cDbRichEdit is a cDbRichEditDS_
88447>>>>>>>    
88447>>>>>>>    Import_Class_Protocol Extended_DEO_Status_Help_Mixin
88448>>>>>>>    Import_Class_Protocol Extended_DEO_Status_Help_Tooltip_Mixin
88449>>>>>>>    Import_Class_Protocol Extended_DEO_Mixin
88450>>>>>>>    Import_Class_Protocol Extended_DEO_TextEditMixin
88451>>>>>>>
88451>>>>>>>    Procedure Construct_Object
88453>>>>>>>        Forward Send Construct_Object
88455>>>>>>>        Send Define_Extended_DEO_TextEditMixin
88456>>>>>>>        Set pbBypassDDFieldBuffer to True
88457>>>>>>>    End_Procedure // Construct_Object
88458>>>>>>>
88458>>>>>>>End_Class
88459>>>>>>>
88459>>>>>>>
88459>>>>>>>
88459>>>>>
88459>>>>>Class cVDFD_CE_DbRichEdit is a cDbRichEdit
88460>>>>>    
88460>>>>>    Procedure Construct_Object
88462>>>>>        Forward Send Construct_Object
88464>>>>>
88464>>>>>    End_Procedure
88465>>>>>
88465>>>>>    Procedure End_Construct_Object
88467>>>>>        Forward Send End_Construct_Object
88469>>>>>
88469>>>>>    End_Procedure
88470>>>>>
88470>>>>>End_Class
88471>>>Use Base\cVDFD_CE_DbScrollingContainer.pkg
Including file: Base\cVDFD_CE_DbScrollingContainer.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbScrollingContainer.pkg)
88471>>>>>Use cDbScrollingContainer.pkg
Including file: cDbScrollingContainer.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cDbScrollingContainer.pkg)
88471>>>>>>>// Provides support for db aware scrolling containers.
88471>>>>>>>// Scrolling containers is provided by creating two objects,
88471>>>>>>>// a host (dbScrollingContainer) and a scrolling clientarea (dbScrollingClientArea)
88471>>>>>>>// The host has no public interface, you just drop the object. It should have only one child object
88471>>>>>>>// and that should be a scrolling client-area. If it is not, it is an error. It is also considered
88471>>>>>>>// an error to place a scrolling client area in any object other than a scrolling container.
88471>>>>>>>
88471>>>>>>>Use DFClient.pkg
88471>>>>>>>Use cScrollingContainerMixin.pkg
Including file: cScrollingContainerMixin.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cScrollingContainerMixin.pkg)
88471>>>>>>>>>// Mixin classes for scrolling container support:
88471>>>>>>>>>// cScrollingContainerMixin & cScrollingClientAreaMixin
88471>>>>>>>>>// These are used by cSrollingContainer / cScrollingClientArea and
88471>>>>>>>>>// dbScrollingContainer / dbScrollingClientArea.
88471>>>>>>>>>// The scrolling container has no public interface, you just drop the object. It should have only one child object
88471>>>>>>>>>// and that should be a scrolling client-area. If it is not, it is an error. It is also considered
88471>>>>>>>>>// an error to place a scrolling client area in any object other than a scrolling container.
88471>>>>>>>>>
88471>>>>>>>>>Use Windows.pkg
88471>>>>>>>>>Use Winuser.pkg
88471>>>>>>>>>Use tWinStructs.pkg
88471>>>>>>>>>
88471>>>>>>>>>// support for the scrolling client area mixin object.
88471>>>>>>>>>
88471>>>>>>>>>Class cScrollingClientAreaMixin is a Mixin
88472>>>>>>>>>    
88472>>>>>>>>>    Procedure Define_cScrollingClientAreaMixin
88474>>>>>>>>>
88474>>>>>>>>>        Set pbSizeToClientArea to False // should already be set to this, but just in case.
88475>>>>>>>>>        Set Border_Style to Border_None
88476>>>>>>>>>        
88476>>>>>>>>>        Property Boolean pbAutoScroll True
88477>>>>>>>>>        Property Boolean pbAutoScrollFocus True
88478>>>>>>>>>        Property Integer piAutoScrollMarginX 5
88479>>>>>>>>>        Property Integer piAutoScrollMarginY 5
88480>>>>>>>>>        Property Integer piAutoScrollMinX 0
88481>>>>>>>>>        Property Integer piAutoScrollMinY 0
88482>>>>>>>>>        Property Boolean pbShowDisabledScrollBar False 
88483>>>>>>>>>        
88483>>>>>>>>>        
88483>>>>>>>>>        Property Integer piLineScrollUnit  5 // minimum scrolling unit for line up/down and mouse wheel
88484>>>>>>>>>        Property Integer piMinimumHeight 0 // the minimum height that doesn't need scrolling
88485>>>>>>>>>        Property Integer piMinimumWidth 0 //(the minimum width that doesn't need scrolling
88486>>>>>>>>>        // keeps track of scrolling
88486>>>>>>>>>        Property Integer piCurrentVertScrolled 0
88487>>>>>>>>>        Property Integer piCurrentHorzScrolled 0
88488>>>>>>>>>        Property Integer piWheelDelta 0               // internal, accumulates mouse wheel clicks
88489>>>>>>>>>        Delegate Set phoScrollingClientArea to Self
88491>>>>>>>>>
88491>>>>>>>>>    End_Procedure
88492>>>>>>>>>
88492>>>>>>>>>    // low level event sent from windows.
88492>>>>>>>>>    Procedure OnWmMouseWheel Integer wParam Integer lParam
88494>>>>>>>>>        Integer iWheelDelta iKeys iDelta iClicks
88494>>>>>>>>>        Move (low(abs(wParam))) to iKeys           // any keys down when pressed
88495>>>>>>>>>        Move (hi(abs(wParam))) to iDelta           // number of click units
88496>>>>>>>>>        If (wParam<0) Begin
88498>>>>>>>>>            Move (-iDelta) to iDelta     // can be up or down
88499>>>>>>>>>        End
88499>>>>>>>>>>
88499>>>>>>>>>        Get  piWheelDelta to iWheelDelta           // Current accumulated micro clicks
88500>>>>>>>>>        Move (iWheelDelta+iDelta) to iWheelDelta
88501>>>>>>>>>        // C_WHEELDATA is 120 as defined by MS as the delta to react to. Once click is usually 120
88501>>>>>>>>>        Move (iWheelDelta/C_WHEELDELTA) to iClicks // Number of clicks to react to
88502>>>>>>>>>        Set  piWheelDelta to (mod(iWheelDelta,C_WHEELDELTA)) // remainder unused microclicks
88503>>>>>>>>>        // If we have enough Clicks send OnMouseWheel
88503>>>>>>>>>        If (iClicks<>0) Begin
88505>>>>>>>>>            Send OnMouseWheel iClicks iKeys
88506>>>>>>>>>        End
88506>>>>>>>>>>
88506>>>>>>>>>        // tell windows that we've handled the event.    
88506>>>>>>>>>        Set Windows_Override_State to True    
88507>>>>>>>>>    End_Procedure
88508>>>>>>>>>
88508>>>>>>>>>
88508>>>>>>>>>    // should be sent by DF message OnWMMouseWheel , which is sent by WM_MOUSEWHEEL
88508>>>>>>>>>    Procedure OnMouseWheel Integer iClicks Integer iKey
88510>>>>>>>>>        Integer iLineScrollUnit
88510>>>>>>>>>        Get piLineScrollUnit to iLineScrollUnit
88511>>>>>>>>>        Send VScroll (-iClicks*iLineScrollUnit*2) // (If(iClicks>0,False,True)) (abs(iClicks))
88512>>>>>>>>>    End_Procedure
88513>>>>>>>>>
88513>>>>>>>>>    // should be sent by WM_VSCROLL
88513>>>>>>>>>    Procedure SetVScrollbox Integer iType Integer iNewPos
88515>>>>>>>>>        Boolean bOk
88515>>>>>>>>>        tWinScrollInfo ScrollInfo
88515>>>>>>>>>        tWinScrollInfo ScrollInfo
88515>>>>>>>>>        Integer iLineScrollUnit
88515>>>>>>>>>        Get piLineScrollUnit to iLineScrollUnit
88516>>>>>>>>>        Get GetScrollBarInfo True (&ScrollInfo) to bOk
88517>>>>>>>>>        If bOk Begin 
88519>>>>>>>>>            
88519>>>>>>>>>            Case Begin
88519>>>>>>>>>                Case (iType=SB_PAGEDOWN) 
88521>>>>>>>>>                    Send VScroll ScrollInfo.nPage
88522>>>>>>>>>                    Case Break
88523>>>>>>>>>                    
88523>>>>>>>>>                Case (iType=SB_PAGEUP) 
88526>>>>>>>>>                    Send VScroll (-ScrollInfo.nPage)
88527>>>>>>>>>                    Case Break
88528>>>>>>>>>                    
88528>>>>>>>>>                Case (iType=SB_LINEDOWN) 
88531>>>>>>>>>                    Send VScroll iLineScrollUnit
88532>>>>>>>>>                    Case Break
88533>>>>>>>>>                    
88533>>>>>>>>>                Case (iType=SB_LINEUP) 
88536>>>>>>>>>                    Send VScroll (-iLineScrollUnit)
88537>>>>>>>>>                    Case Break
88538>>>>>>>>>    
88538>>>>>>>>>                Case (iType=SB_BOTTOM) 
88541>>>>>>>>>                    Send VScroll (ScrollInfo.nMax-ScrollInfo.nPos)
88542>>>>>>>>>                    Case Break
88543>>>>>>>>>    
88543>>>>>>>>>                Case (iType=SB_Top) 
88546>>>>>>>>>                    Send VScroll (-ScrollInfo.nPos)
88547>>>>>>>>>                    Case Break
88548>>>>>>>>>                    
88548>>>>>>>>>                Case (iType=SB_THUMBPOSITION) 
88551>>>>>>>>>                    Case Break
88552>>>>>>>>>    
88552>>>>>>>>>                Case (iType=SB_THUMBTRACK) 
88555>>>>>>>>>                    Send VScroll (ScrollInfo.nTrackPos-ScrollInfo.nPos)
88556>>>>>>>>>                    Case Break
88557>>>>>>>>>            Case End
88557>>>>>>>>>        End
88557>>>>>>>>>>
88557>>>>>>>>>    End_Procedure
88558>>>>>>>>>    
88558>>>>>>>>>    // should be sent by WM_HSCROLL
88558>>>>>>>>>    Procedure SetHScrollbox Integer iType Integer iNewPos
88560>>>>>>>>>        Boolean bOk
88560>>>>>>>>>        tWinScrollInfo ScrollInfo
88560>>>>>>>>>        tWinScrollInfo ScrollInfo
88560>>>>>>>>>        Integer iLineScrollUnit
88560>>>>>>>>>        Get piLineScrollUnit to iLineScrollUnit
88561>>>>>>>>>        Get GetScrollBarInfo False (&ScrollInfo) to bOk
88562>>>>>>>>>        If bOk Begin 
88564>>>>>>>>>            
88564>>>>>>>>>            Case Begin
88564>>>>>>>>>                Case (iType=SB_PAGEDOWN) 
88566>>>>>>>>>                    Send hScroll ScrollInfo.nPage
88567>>>>>>>>>                    Case Break
88568>>>>>>>>>                    
88568>>>>>>>>>                Case (iType=SB_PAGEUP) 
88571>>>>>>>>>                    Send hScroll (-ScrollInfo.nPage)
88572>>>>>>>>>                    Case Break
88573>>>>>>>>>                    
88573>>>>>>>>>                Case (iType=SB_LINEDOWN) 
88576>>>>>>>>>                    Send hScroll iLineScrollUnit
88577>>>>>>>>>                    Case Break
88578>>>>>>>>>                    
88578>>>>>>>>>                Case (iType=SB_LINEUP) 
88581>>>>>>>>>                    Send hScroll (-iLineScrollUnit)
88582>>>>>>>>>                    Case Break
88583>>>>>>>>>    
88583>>>>>>>>>                Case (iType=SB_BOTTOM) 
88586>>>>>>>>>                    Send hScroll (ScrollInfo.nMax-ScrollInfo.nPos)
88587>>>>>>>>>                    Case Break
88588>>>>>>>>>    
88588>>>>>>>>>                Case (iType=SB_Top) 
88591>>>>>>>>>                    Send hScroll (-ScrollInfo.nPos)
88592>>>>>>>>>                    Case Break
88593>>>>>>>>>                    
88593>>>>>>>>>                Case (iType=SB_THUMBPOSITION) 
88596>>>>>>>>>                    Case Break
88597>>>>>>>>>    
88597>>>>>>>>>                Case (iType=SB_THUMBTRACK) 
88600>>>>>>>>>                    Send hScroll (ScrollInfo.nTrackPos-ScrollInfo.nPos)
88601>>>>>>>>>                    Case Break
88602>>>>>>>>>            Case End
88602>>>>>>>>>        End
88602>>>>>>>>>>
88602>>>>>>>>>    End_Procedure
88603>>>>>>>>>    
88603>>>>>>>>>    
88603>>>>>>>>>    // this calls SetScrollInfo with proper info
88603>>>>>>>>>    Procedure SetScrollBarInfo Boolean bVert Integer iRangeMin Integer iRangeMax Integer iPageSize
88605>>>>>>>>>        tWinScrollInfo ScrollInfo
88605>>>>>>>>>        tWinScrollInfo ScrollInfo
88605>>>>>>>>>        Integer iVoid
88605>>>>>>>>>        Handle hWnd
88605>>>>>>>>>        Boolean bShow
88605>>>>>>>>>
88605>>>>>>>>>        Delegate Get Window_Handle to hWnd
88607>>>>>>>>>        If (hWnd <> 0) Begin        
88609>>>>>>>>>            Move (SizeOfType (tWinScrollInfo)) to ScrollInfo.cbSize
88610>>>>>>>>>             
88610>>>>>>>>>            Move (SIF_RANGE ior SIF_POS ior SIF_PAGE ) to ScrollInfo.fMask
88611>>>>>>>>>            Get pbShowDisabledScrollBar to bShow
88612>>>>>>>>>            If bShow Begin
88614>>>>>>>>>                Move (ScrollInfo.fMask ior SIF_DISABLENOSCROLL) to ScrollInfo.fMask
88615>>>>>>>>>            End
88615>>>>>>>>>>
88615>>>>>>>>>            Move iRangeMin to ScrollInfo.nMin
88616>>>>>>>>>            Move iRangeMax to ScrollInfo.nMax
88617>>>>>>>>>            Move iPageSize to ScrollInfo.nPage
88618>>>>>>>>>            Move 0 to ScrollInfo.nPos
88619>>>>>>>>>            Move (SetScrollInfo (hWnd, If(bVert,SB_VERT,SB_HORZ), AddressOf (ScrollInfo), True)) to iVoid
88620>>>>>>>>>
88620>>>>>>>>>        End
88620>>>>>>>>>>
88620>>>>>>>>>    End_Procedure // 
88621>>>>>>>>>    
88621>>>>>>>>>    // this wraps GetScrollInfo
88621>>>>>>>>>    Function GetScrollBarInfo Boolean bVert tWinScrollInfo ByRef ScrollInfo Returns Boolean
88623>>>>>>>>>        Boolean bOk
88623>>>>>>>>>        Handle hWnd
88623>>>>>>>>>
88623>>>>>>>>>        Delegate Get Window_Handle to hWnd
88625>>>>>>>>>        If (hWnd <> 0) Begin        
88627>>>>>>>>>            Move (SizeOfType (tWinScrollInfo)) to ScrollInfo.cbSize
88628>>>>>>>>>            Move (SIF_ALL) to ScrollInfo.fMask
88629>>>>>>>>>            Move (GetScrollInfo (hWnd, If(bVert,SB_VERT,SB_HORZ), AddressOf (ScrollInfo))) to bOk
88630>>>>>>>>>        End
88630>>>>>>>>>>
88630>>>>>>>>>        Function_Return bOk
88631>>>>>>>>>    End_Function
88632>>>>>>>>>
88632>>>>>>>>>    // this wraps SetScrollPos
88632>>>>>>>>>    Procedure SetScrollBarPosInfo Boolean bVert Integer iPos
88634>>>>>>>>>        Integer iVoid
88634>>>>>>>>>        Handle hWnd
88634>>>>>>>>>
88634>>>>>>>>>        Delegate Get Window_Handle to hWnd
88636>>>>>>>>>        If (hWnd <> 0) Begin        
88638>>>>>>>>>            Move (SetScrollPos(hWnd, If(bVert,SB_VERT,SB_HORZ), iPos, True)) to iVoid
88639>>>>>>>>>        End
88639>>>>>>>>>>
88639>>>>>>>>>    End_Procedure
88640>>>>>>>>>
88640>>>>>>>>>    // scrolling containers don't do anhcors. However, this gets called every time the parent's
88640>>>>>>>>>    // guiSize changes. We can use that to scroll or resize the scrolling client as needed.
88640>>>>>>>>>    Procedure DoapplyAnchors Integer Arg1 Integer Arg2
88642>>>>>>>>>         Send ScrollClientArea
88643>>>>>>>>>    End_Procedure
88644>>>>>>>>>
88644>>>>>>>>>    // augment to handle the scrolling area initialization.
88644>>>>>>>>>    Procedure Add_Focus Handle hoParent
88646>>>>>>>>>        Forward Send Add_Focus hoParent
88648>>>>>>>>>        // at this the scrolling container and client area should both be paged. 
88648>>>>>>>>>        Send SetScrollBarInfo True 0 0 0
88649>>>>>>>>>        Send SetScrollBarInfo False 0 0 0
88650>>>>>>>>>        Send CalculateAutoScrollMinimums
88651>>>>>>>>>    End_Procedure
88652>>>>>>>>>
88652>>>>>>>>>    // determine scrolling minimums and set the client area as required.
88652>>>>>>>>>    
88652>>>>>>>>>    Procedure CalculateAutoScrollMinimums
88654>>>>>>>>>        Integer iMinX iMinY iSiz iLoc iMargin
88654>>>>>>>>>        Integer iAutoMinX iAutoMinY
88654>>>>>>>>>        Boolean bAutoScroll
88654>>>>>>>>>        Handle hoNext hoFirst
88654>>>>>>>>>        
88654>>>>>>>>>        Get pbAutoScroll to bAutoScroll
88655>>>>>>>>>        Get piAutoScrollMinX to iAutoMinX
88656>>>>>>>>>        Get piAutoScrollMinY to iAutoMinY
88657>>>>>>>>>        Get DialogToGui iAutoMinY iAutoMinX to iSiz
88658>>>>>>>>>        Move (Hi(iSiz)) to iAutoMinY
88659>>>>>>>>>        Move (Low(iSiz)) to iAutoMinX
88660>>>>>>>>>        Set piMinimumHeight to iAutoMinY
88661>>>>>>>>>        Set piMinimumWidth to iAutoMinX
88662>>>>>>>>>        
88662>>>>>>>>>        If (bAutoScroll and (iAutoMinX=0 or iAutoMinY=0)) Begin
88664>>>>>>>>>        
88664>>>>>>>>>            Get Next_Level to hoFirst
88665>>>>>>>>>            Move hoFirst to hoNext
88666>>>>>>>>>            If (hoFirst) Begin
88668>>>>>>>>>                Repeat
88668>>>>>>>>>>
88668>>>>>>>>>                    Get GuiWindowSize of hoNext to iSiz
88669>>>>>>>>>                    Get GuiLocation of hoNext to iLoc
88670>>>>>>>>>                    Move (Hi(iLoc)+Hi(iSiz) max iMinY) to iMinY
88671>>>>>>>>>                    Move (Low(iLoc)+Low(iSiz) max iMinX) to iMinx
88672>>>>>>>>>                    Get Next_Focus of hoNext to hoNext
88673>>>>>>>>>                Until (hoNext=0 or hoNext=hoFirst)
88675>>>>>>>>>
88675>>>>>>>>>                If (iAutoMinY=0) Begin
88677>>>>>>>>>                    Get piAutoScrollMarginY to iMargin
88678>>>>>>>>>                    Set piMinimumHeight to (iMinY+iMargin)
88679>>>>>>>>>                End
88679>>>>>>>>>>
88679>>>>>>>>>
88679>>>>>>>>>                If (iAutoMinX=0) Begin
88681>>>>>>>>>                    Get piAutoScrollMarginX to iMargin
88682>>>>>>>>>                    Set piMinimumWidth to (iMinX+iMargin)
88683>>>>>>>>>
88683>>>>>>>>>                End
88683>>>>>>>>>>
88683>>>>>>>>>            End
88683>>>>>>>>>>
88683>>>>>>>>>        End
88683>>>>>>>>>>
88683>>>>>>>>>        
88683>>>>>>>>>        // before setting the client area, unset all anchors so DoApplyAnchors will not do anything
88683>>>>>>>>>        Broadcast Set pbAnchorCreated to False
88685>>>>>>>>>        Send ScrollClientArea
88686>>>>>>>>>        // after the scroll set up, reinitialize all anchors.
88686>>>>>>>>>        Broadcast Send DoCreateAnchors
88688>>>>>>>>>    End_Procedure
88689>>>>>>>>>    
88689>>>>>>>>>    // Scroll the client area and adjust the client area size as needed. This does all the
88689>>>>>>>>>    // work of scrolling.
88689>>>>>>>>>    
88689>>>>>>>>>    Procedure ScrollClientArea
88691>>>>>>>>>        Integer iSiz
88691>>>>>>>>>        Integer iHeight iHCur iHCuriDelta iOrig iRange bOk
88691>>>>>>>>>        Integer iWidth iWCur iWDelta iWOrig
88691>>>>>>>>>        
88691>>>>>>>>>        Delegate Get GuiClientSize to iSiz
88693>>>>>>>>>        Move (Hi(iSiz)) to iHeight
88694>>>>>>>>>        Move (Low(iSiz)) to iWidth
88695>>>>>>>>>
88695>>>>>>>>>        // Vertical scrolling
88695>>>>>>>>>        
88695>>>>>>>>>        Get piMinimumHeight to iOrig
88696>>>>>>>>>        Get piMinimumWidth to iWOrig
88697>>>>>>>>>        
88697>>>>>>>>>        If (iOrig<>0 or iWOrig<>0) Begin
88699>>>>>>>>>        
88699>>>>>>>>>            If (iOrig<>0) Begin
88701>>>>>>>>>                Get piCurrentVertScrolled to iHCur
88702>>>>>>>>>                // If the size got bigger and we've scrolled, we want to scroll up        
88702>>>>>>>>>                If (iHCur<>0 and (iHCur+iHeight>iOrig)) Begin
88704>>>>>>>>>                    Move (iOrig-iHeight max 0) to iHCur
88705>>>>>>>>>                    Set piCurrentVertScrolled to iHCur
88706>>>>>>>>>                End
88706>>>>>>>>>>
88706>>>>>>>>>                If (iHCur<>0 or iOrig>iHeight) Begin
88708>>>>>>>>>                    Send SetScrollBarInfo True 0 iOrig (iHeight min iOrig)
88709>>>>>>>>>                    Send SetScrollBarPosInfo True iHCur 
88710>>>>>>>>>                End
88710>>>>>>>>>>
88710>>>>>>>>>                Else Begin
88711>>>>>>>>>                    Send SetScrollBarInfo True 0 0 0 //iOrig (iHeight min iOrig)
88712>>>>>>>>>                End
88712>>>>>>>>>>
88712>>>>>>>>>            End
88712>>>>>>>>>>
88712>>>>>>>>>                
88712>>>>>>>>>            // Horiz scrolling
88712>>>>>>>>>            
88712>>>>>>>>>            Get piCurrentHorzScrolled to iWCur
88713>>>>>>>>>    //        If (iWCur<>0) Begin
88713>>>>>>>>>                // If the size got bigger and we've scrolled, we want to scroll left        
88713>>>>>>>>>                If (iWCur<>0 and (iWCur+iWidth>iWOrig)) Begin
88715>>>>>>>>>                    Move (iWOrig-iWidth max 0) to iWCur
88716>>>>>>>>>                    Set piCurrentHorzScrolled to iWCur
88717>>>>>>>>>                End
88717>>>>>>>>>>
88717>>>>>>>>>                If (iWCur<>0 or iWOrig>iWidth) Begin
88719>>>>>>>>>                    Send SetScrollBarInfo False 0 iWOrig (iWidth min iWOrig)
88720>>>>>>>>>                    Send SetScrollBarPosInfo False iWCur 
88721>>>>>>>>>                End
88721>>>>>>>>>>
88721>>>>>>>>>                Else Begin
88722>>>>>>>>>                    Send SetScrollBarInfo False 0 0 0 
88723>>>>>>>>>                End
88723>>>>>>>>>>
88723>>>>>>>>>    //        End
88723>>>>>>>>>        End
88723>>>>>>>>>>
88723>>>>>>>>>        
88723>>>>>>>>>        // this could change depending on scrollbars appearing or not    
88723>>>>>>>>>        Delegate Get GuiClientSize to iSiz
88725>>>>>>>>>        
88725>>>>>>>>>        // size of container is the the minimum allowed size (if scrolling is needed)
88725>>>>>>>>>        // or it is the actual size of the container (if scrolling not needed and it is bigger)
88725>>>>>>>>>        // This is required to make anchors work sensibly 
88725>>>>>>>>>        Set GuiSize to (hi(iSiz) max iOrig) (low(iSiz) max iWOrig)
88726>>>>>>>>>        // if we've scrolled, we need to reposition the container
88726>>>>>>>>>        Set GuiLocation to (-iHCur) (-iWCur)  
88727>>>>>>>>>    End_Procedure
88728>>>>>>>>>    
88728>>>>>>>>>    // note that scrolling never changes the size of the scrolling client.
88728>>>>>>>>>    // this way, it does not interfere with anchors.
88728>>>>>>>>>    
88728>>>>>>>>>    Procedure VScroll Integer iDelta
88730>>>>>>>>>        Integer iHeight iCur iOrig iSiz 
88730>>>>>>>>>        Delegate Get GuiClientSize to iSiz
88732>>>>>>>>>        Move (hi(iSiz)) to iHeight
88733>>>>>>>>>        Get piCurrentVertScrolled to iCur
88734>>>>>>>>>        Get piMinimumHeight to iOrig
88735>>>>>>>>>        If (iOrig=0 or  Hi(iSiz)>=iOrig) Begin
88737>>>>>>>>>            Procedure_Return
88738>>>>>>>>>        End
88738>>>>>>>>>>
88738>>>>>>>>>        // make sure delta is within range  
88738>>>>>>>>>        If (iDelta+iCur<0) Begin
88740>>>>>>>>>            Move (-iCur) to iDelta
88741>>>>>>>>>        End
88741>>>>>>>>>>
88741>>>>>>>>>        Else If (iDelta+iCur>iOrig - iHeight) Begin
88744>>>>>>>>>            Move (iOrig - iHeight - iCur) to iDelta
88745>>>>>>>>>        End
88745>>>>>>>>>>
88745>>>>>>>>>        If (iDelta=0) Procedure_Return
88748>>>>>>>>>        
88748>>>>>>>>>        Move (iCur + iDelta) to iCur 
88749>>>>>>>>>        Set piCurrentVertScrolled to iCur 
88750>>>>>>>>>        Send SetScrollBarPosInfo True iCur 
88751>>>>>>>>>        Get GuiLocation to iSiz
88752>>>>>>>>>        Set GuiLocation to (cast(hi(iSiz),Short)-iDelta) (cast(low(iSiz),Short))
88753>>>>>>>>>        Send ScrollClientArea
88754>>>>>>>>>    End_Procedure
88755>>>>>>>>>    
88755>>>>>>>>>    
88755>>>>>>>>>    Procedure HScroll Integer iDelta
88757>>>>>>>>>        Integer iHeight iCur iOrig iSiz
88757>>>>>>>>>        Delegate Get GuiClientSize to iSiz
88759>>>>>>>>>        Move (low(iSiz)) to iHeight
88760>>>>>>>>>        Get piCurrentHorzScrolled to iCur
88761>>>>>>>>>        Get piMinimumWidth to iOrig
88762>>>>>>>>>        If (iOrig=0 or  low(iSiz)>=iOrig) Begin
88764>>>>>>>>>            Procedure_Return
88765>>>>>>>>>        End
88765>>>>>>>>>>
88765>>>>>>>>>        If (iDelta+iCur<0) Begin
88767>>>>>>>>>            Move (-iCur) to iDelta
88768>>>>>>>>>        End
88768>>>>>>>>>>
88768>>>>>>>>>        Else If (iDelta+iCur>iOrig - iHeight) Begin
88771>>>>>>>>>            Move (iOrig - iHeight - iCur) to iDelta
88772>>>>>>>>>        End
88772>>>>>>>>>>
88772>>>>>>>>>        If (iDelta=0) Procedure_Return
88775>>>>>>>>>        
88775>>>>>>>>>        Move (iCur + iDelta) to iCur 
88776>>>>>>>>>        Set piCurrentHorzScrolled to iCur 
88777>>>>>>>>>        Send SetScrollBarPosInfo False iCur 
88778>>>>>>>>>        Get GuiLocation to iSiz
88779>>>>>>>>>        Set GuiLocation to (cast(hi(iSiz),Short)) (cast(low(iSiz),Short) -iDelta)
88780>>>>>>>>>        Send ScrollClientArea
88781>>>>>>>>>    End_Procedure
88782>>>>>>>>>    
88782>>>>>>>>>    // make sure client is a 0,0
88782>>>>>>>>>    Procedure ScrollHome
88784>>>>>>>>>        Send SetVScrollbox SB_TOP 0
88785>>>>>>>>>        Send SetHScrollbox SB_TOP 0
88786>>>>>>>>>    End_Procedure
88787>>>>>>>>>
88787>>>>>>>>>    // get relative GUI location of this object to the parent one passed.
88787>>>>>>>>>    Procedure LocationRelativeTo Handle hoContainer Handle hoControl Integer ByRef iLocY Integer ByRef iLocX
88789>>>>>>>>>        Integer ivoid
88789>>>>>>>>>        tWinRect Rect0 Rect1
88789>>>>>>>>>        tWinRect Rect0 Rect1
88789>>>>>>>>>        Move (GetWindowRect(window_handle(hoContainer),addressof(Rect0))) to ivoid
88790>>>>>>>>>        Move (GetWindowRect(window_handle(hoControl),addressof(Rect1))) to ivoid
88791>>>>>>>>>        Move ((Rect1.top) - (Rect0.top)) to iLocY
88792>>>>>>>>>        Move ((rect1.left) - (rect0.left)) to iLocX
88793>>>>>>>>>    End_Procedure
88794>>>>>>>>>    
88794>>>>>>>>>    // This scrolls this object into visual range. 
88794>>>>>>>>>    Procedure ScrollObjectInRange Handle hoControl
88796>>>>>>>>>        Handle hoScrollingContainer
88796>>>>>>>>>        Integer iCurrentVertScrolled iCurrentHorzScrolled
88796>>>>>>>>>        Integer iViewHeight iViewWidth
88796>>>>>>>>>        Integer iRelLocHeight iRelLocWidth
88796>>>>>>>>>        Integer iSize iControlHeight iControlWidth
88796>>>>>>>>>        Integer iScroll
88796>>>>>>>>>        Integer iMarginX iMarginY
88796>>>>>>>>>        Integer iScrollingContainerWindowSize iScrollingContainerClientSize
88796>>>>>>>>>        
88796>>>>>>>>>        Get piAutoScrollMarginX to iMarginX
88797>>>>>>>>>        Get piAutoScrollMarginY to iMarginY
88798>>>>>>>>>        
88798>>>>>>>>>        // the scrolling container 
88798>>>>>>>>>        Move Self to hoScrollingContainer
88799>>>>>>>>>        // the amount the SC is currently scrolled
88799>>>>>>>>>        Get piCurrentVertScrolled of hoScrollingContainer to iCurrentVertScrolled
88800>>>>>>>>>        Get piCurrentHorzScrolled of hoScrollingContainer to iCurrentHorzScrolled
88801>>>>>>>>>        
88801>>>>>>>>>        // size of view's client area (this is the viewport area)
88801>>>>>>>>>        Get GuiClientSize of (Parent(hoScrollingContainer)) to iSize
88802>>>>>>>>>        Move (hi(iSize)) to iViewHeight
88803>>>>>>>>>        Move (low(iSize)) to iViewWidth
88804>>>>>>>>>        
88804>>>>>>>>>        // get this object's location relative to the scrolling container
88804>>>>>>>>>        Send LocationRelativeTo hoScrollingContainer hoControl (&iRelLocHeight) (&iRelLocWidth)
88805>>>>>>>>>
88805>>>>>>>>>        // we expect that the client size is the window size but just in case
88805>>>>>>>>>        Get GuiWindowSize of hoScrollingContainer to iScrollingContainerWindowSize
88806>>>>>>>>>        Get GuiClientSize of hoScrollingContainer to iScrollingContainerClientSize
88807>>>>>>>>>        Move (iRelLocHeight - (Hi(iScrollingContainerWindowSize)-Hi(iScrollingContainerClientSize))) to iRelLocHeight 
88808>>>>>>>>>        Move (iRelLocWidth - (Low(iScrollingContainerWindowSize)-Low(iScrollingContainerClientSize))) to iRelLocWidth
88809>>>>>>>>>        
88809>>>>>>>>>        // the outer size of the control object
88809>>>>>>>>>        Get GUIWindowSize of hoControl to iSize
88810>>>>>>>>>        Move (hi(iSize)) to iControlHeight
88811>>>>>>>>>        Move (low(iSize)) to iControlWidth
88812>>>>>>>>>        
88812>>>>>>>>>        // the general idea is to make the control fully visible but to scroll as little as possible.
88812>>>>>>>>>
88812>>>>>>>>>        // Vertical Scroll
88812>>>>>>>>>        
88812>>>>>>>>>        // Vertical Scroll down
88812>>>>>>>>>        // if the bottom of the control plus a bottom margin does not fit make it fit at the bottom
88812>>>>>>>>>        If (iRelLocHeight + iControlHeight + iMarginY - iCurrentVertScrolled >iViewHeight) Begin
88814>>>>>>>>>           
88814>>>>>>>>>           // set scroll amount so that the bottom of the control is visible  
88814>>>>>>>>>           Move (iRelLocHeight + iControlHeight + iMarginY - iCurrentVertScrolled - iViewHeight ) to iScroll
88815>>>>>>>>>           
88815>>>>>>>>>           // See if this amount, scrolls the top out of range. If so just scroll enough so that the
88815>>>>>>>>>           // top of the object appears at the bottom 
88815>>>>>>>>>           If (iRelLocHeight - iCurrentVertScrolled < iScroll) Begin
88817>>>>>>>>>               Move (iRelLocHeight + iMarginY  - iCurrentVertScrolled - iViewHeight  ) to iScroll
88818>>>>>>>>>           End
88818>>>>>>>>>>
88818>>>>>>>>>           // if the scroll amnt is negative it's best to just keep it where it is.
88818>>>>>>>>>           If (iScroll>0) Begin
88820>>>>>>>>>                Send VScroll of hoScrollingContainer iScroll
88821>>>>>>>>>           End
88821>>>>>>>>>>
88821>>>>>>>>>        End
88821>>>>>>>>>>
88821>>>>>>>>>        // else vertical scroll up 
88821>>>>>>>>>        // We scroll if the top of the object is not visible.  
88821>>>>>>>>>        Else If (iRelLocHeight + iMarginY < iCurrentVertScrolled) Begin
88824>>>>>>>>>            // if we scroll we will scroll enough to see the top of the object.
88824>>>>>>>>>            Move (iRelLocHeight -iMarginY - iCurrentVertScrolled ) to iScroll
88825>>>>>>>>>            If (iScroll<0) Begin
88827>>>>>>>>>                Send VScroll of hoScrollingContainer (iScroll max (-iCurrentVertScrolled))
88828>>>>>>>>>            End
88828>>>>>>>>>>
88828>>>>>>>>>        End
88828>>>>>>>>>>
88828>>>>>>>>>
88828>>>>>>>>>        // Horizonal Scroll
88828>>>>>>>>>        
88828>>>>>>>>>        // if the right side of the control does not fit, scroll it so it fits
88828>>>>>>>>>        If (iRelLocWidth + iControlWidth + iMarginX - iCurrentHorzScrolled >iViewWidth) Begin
88830>>>>>>>>>           Move (iRelLocWidth + iControlWidth + iMarginX - iCurrentHorzScrolled - iViewWidth ) to iScroll
88831>>>>>>>>>           If (iRelLocWidth - iCurrentHorzScrolled - iScroll<0) Begin
88833>>>>>>>>>               Move (iRelLocWidth  - iCurrentHorzScrolled - iMarginX ) to iScroll
88834>>>>>>>>>           End
88834>>>>>>>>>>
88834>>>>>>>>>           If (iScroll>0) Begin
88836>>>>>>>>>                Send HScroll of hoScrollingContainer iScroll
88837>>>>>>>>>           End
88837>>>>>>>>>>
88837>>>>>>>>>        End
88837>>>>>>>>>>
88837>>>>>>>>>        If (iRelLocWidth - iMarginX  - iCurrentHorzScrolled <0) Begin
88839>>>>>>>>>            // if this can fit by moving all the way to left, do so.
88839>>>>>>>>>            If (iRelLocWidth + iControlWidth + iMarginX <= iViewWidth) Begin
88841>>>>>>>>>                Move (-iCurrentHorzScrolled) to iScroll
88842>>>>>>>>>            End
88842>>>>>>>>>>
88842>>>>>>>>>            Else Begin
88843>>>>>>>>>                Move (iRelLocWidth - iCurrentHorzScrolled - iMarginX) to iScroll
88844>>>>>>>>>            End
88844>>>>>>>>>>
88844>>>>>>>>>            If (iScroll<0) Begin
88846>>>>>>>>>                Send HScroll of hoScrollingContainer (iScroll max (-iCurrentHorzScrolled))
88847>>>>>>>>>            End
88847>>>>>>>>>>
88847>>>>>>>>>        End
88847>>>>>>>>>>
88847>>>>>>>>>
88847>>>>>>>>>
88847>>>>>>>>>    End_Procedure
88848>>>>>>>>>
88848>>>>>>>>>    // when we receive this message, we might need to scroll to bring the new focus in to view.
88848>>>>>>>>>    Procedure NotifyFocusSetInContainer Handle hoControl
88850>>>>>>>>>        Boolean bScrollOnFocus
88850>>>>>>>>>        Get pbAutoScrollFocus to bScrollOnFocus
88851>>>>>>>>>        If bScrollOnFocus Begin
88853>>>>>>>>>            Send ScrollObjectInRange hoControl
88854>>>>>>>>>        End
88854>>>>>>>>>>
88854>>>>>>>>>        Delegate Send NotifyFocusSetInContainer hoControl
88856>>>>>>>>>    End_Procedure
88857>>>>>>>>>
88857>>>>>>>>>
88857>>>>>>>>>End_Class
88858>>>>>>>>>
88858>>>>>>>>>// Container scrolling class support. Nothing in here is public
88858>>>>>>>>>Class cScrollingContainerMixin is a Mixin
88859>>>>>>>>>
88859>>>>>>>>>    Procedure Define_cScrollingContainerMixin
88861>>>>>>>>>        Forward Set Border_Style to Border_None
88863>>>>>>>>>        Set pbSizeToClientArea to False // scrollbars and clientsize do not mix
88864>>>>>>>>>        Forward Set peAnchors to anAll
88866>>>>>>>>>
88866>>>>>>>>>        // forcing scrollbars right away seems to make painting better
88866>>>>>>>>>        Set Window_Style WS_HSCROLL to True
88867>>>>>>>>>        Set Window_Style WS_VSCROLL to True
88868>>>>>>>>>
88868>>>>>>>>>        Property Handle phoScrollingClientArea 0
88869>>>>>>>>>    End_Procedure
88870>>>>>>>>>    
88870>>>>>>>>>    // if anchors are changed, it will not work. We won't let that happen
88870>>>>>>>>>    Procedure Set peAnchors Integer eAnchors
88872>>>>>>>>>    End_Procedure
88873>>>>>>>>>
88873>>>>>>>>>    // if a border style is set, it will not work. We won't let that happen
88873>>>>>>>>>    Procedure Set Border_Style Integer eStyle
88875>>>>>>>>>    End_Procedure
88876>>>>>>>>>
88876>>>>>>>>>    // redirect scrollbar events and wheel events to the scrolling client area
88876>>>>>>>>>    Procedure OnWmMouseWheel Integer wParam Integer lParam
88878>>>>>>>>>        Handle hoClient
88878>>>>>>>>>        Get phoScrollingClientArea to hoClient
88879>>>>>>>>>        If hoClient Begin
88881>>>>>>>>>           Send OnMouseWheel of hoClient wParam lParam
88882>>>>>>>>>        End
88882>>>>>>>>>>
88882>>>>>>>>>    End_Procedure
88883>>>>>>>>>
88883>>>>>>>>>    // should be sent by WM_VSCROLL
88883>>>>>>>>>    Procedure SetVScrollbox Integer iType Integer iNewPos
88885>>>>>>>>>        Handle hoClient
88885>>>>>>>>>        Get phoScrollingClientArea to hoClient
88886>>>>>>>>>        If hoClient Begin
88888>>>>>>>>>           Send SetVScrollbox of hoClient iType iNewPos
88889>>>>>>>>>        End
88889>>>>>>>>>>
88889>>>>>>>>>    End_Procedure
88890>>>>>>>>>
88890>>>>>>>>>    // should be sent by WM_HSCROLL
88890>>>>>>>>>    Procedure SetHScrollbox Integer iType Integer iNewPos
88892>>>>>>>>>        Handle hoClient
88892>>>>>>>>>        Get phoScrollingClientArea to hoClient
88893>>>>>>>>>        If hoClient Begin
88895>>>>>>>>>           Send SetHScrollbox of hoClient iType iNewPos
88896>>>>>>>>>        End
88896>>>>>>>>>>
88896>>>>>>>>>    End_Procedure
88897>>>>>>>>>
88897>>>>>>>>>    // augmented to adjust its size to the size of the parent client area.
88897>>>>>>>>>    // After this is set, anchors will handle any further resizing.
88897>>>>>>>>>    Procedure Page Integer iState
88899>>>>>>>>>        Integer iSiz iHeight iWidth
88899>>>>>>>>>        Integer iTop iBottom iLeft iRight iFontSize
88899>>>>>>>>>        Boolean bGroup
88899>>>>>>>>>        Handle hoClient
88899>>>>>>>>>        If (iState =1) Begin
88901>>>>>>>>>            Delegate Get Window_Style BS_GROUPBOX to bGroup
88903>>>>>>>>>            // We have special code to support groups because they
88903>>>>>>>>>            // draw a border inside of the client rectangle
88903>>>>>>>>>            If bGroup Begin
88905>>>>>>>>>                Get Physical_FontSize to iFontSize
88906>>>>>>>>>                Move (Hi(iFontSize)) to iTop
88907>>>>>>>>>                Move 2 to iLeft
88908>>>>>>>>>                Move 2 to iRight
88909>>>>>>>>>                Move 2 to iBottom
88910>>>>>>>>>            End
88910>>>>>>>>>>
88910>>>>>>>>>            // We use GetContainerClientSize instead of GuiClientSize because
88910>>>>>>>>>            // GetContainerClientSize has a special augmentation in tab pages that
88910>>>>>>>>>            // makes anchors work properly with unpaged tab-pages
88910>>>>>>>>>            Delegate Get GetContainerClientSize to iSiz
88912>>>>>>>>>            Set GuiSize to (Hi(iSiz)-(iTop+iBottom)) (Low(iSiz)-(iLeft+iRight))
88913>>>>>>>>>            Set GuiLocation to iTop iLeft
88914>>>>>>>>>            Send Adjust_Logicals
88915>>>>>>>>>        End
88915>>>>>>>>>>
88915>>>>>>>>>        Forward Send Page iState
88917>>>>>>>>>    End_Procedure
88918>>>>>>>>>    
88918>>>>>>>>>
88918>>>>>>>>>End_Class
88919>>>>>>>>>
88919>>>>>>>
88919>>>>>>>Class cDbScrollingClientArea is a dbContainer3d
88920>>>>>>>    Import_Class_Protocol cScrollingClientAreaMixin
88921>>>>>>>    Procedure Construct_Object
88923>>>>>>>        Forward Send Construct_Object
88925>>>>>>>        Send Define_cScrollingClientAreaMixin
88926>>>>>>>    End_Procedure
88927>>>>>>>End_Class
88928>>>>>>>
88928>>>>>>>
88928>>>>>>>
88928>>>>>>>Class cDbScrollingContainer is a dbContainer3d
88929>>>>>>>    Import_Class_Protocol cScrollingContainerMixin
88930>>>>>>>    Procedure Construct_Object
88932>>>>>>>        Forward Send Construct_Object
88934>>>>>>>        Send Define_cScrollingContainerMixin
88935>>>>>>>    End_Procedure
88936>>>>>>>End_Class
88937>>>>>
88937>>>>>Class cVDFD_CE_DbScrollingContainer is a cDbScrollingContainer
88938>>>>>    
88938>>>>>    Procedure Construct_Object
88940>>>>>        Forward Send Construct_Object
88942>>>>>
88942>>>>>    End_Procedure
88943>>>>>
88943>>>>>    Procedure End_Construct_Object
88945>>>>>        Forward Send End_Construct_Object
88947>>>>>
88947>>>>>    End_Procedure
88948>>>>>
88948>>>>>End_Class
88949>>>Use Base\cVDFD_CE_DbSplitterContainer.pkg
Including file: Base\cVDFD_CE_DbSplitterContainer.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbSplitterContainer.pkg)
88949>>>>>Use cDbSplitterContainer.pkg
Including file: cDbSplitterContainer.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cDbSplitterContainer.pkg)
88949>>>>>>>Use Windows.Pkg
88949>>>>>>>Use Dfclient.pkg
88949>>>>>>>Use cSplitterContainerMixin.pkg
Including file: cSplitterContainerMixin.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cSplitterContainerMixin.pkg)
88949>>>>>>>>>// contains mixin support for SplitterContainer and SplitterContainerChild classes. This is required
88949>>>>>>>>>// because we support the non-db (cSplitterContainer / cSplitterContainerChild) and the
88949>>>>>>>>>// db ( cDbSplitterContainer / cDbSplitterContainerChild) classes/
88949>>>>>>>>>
88949>>>>>>>>>Use Windows.Pkg
88949>>>>>>>>>Use cSplitter.pkg
Including file: cSplitter.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cSplitter.pkg)
88949>>>>>>>>>>>Use Windows.pkg
88949>>>>>>>>>>>
88949>>>>>>>>>>>Define R2_BLACK       for |CI1   //  0  
88949>>>>>>>>>>>Define R2_NOTMERGEPEN for |CI2   // DPon
88949>>>>>>>>>>>Define R2_MASKNOTPEN  for |CI3   // DPna
88949>>>>>>>>>>>Define R2_NOTCOPYPEN  for |CI4   // PN  
88949>>>>>>>>>>>Define R2_MASKPENNOT  for |CI5   // PDna
88949>>>>>>>>>>>Define R2_NOT         for |CI6   // Dn  
88949>>>>>>>>>>>Define R2_XORPEN      for |CI7   // DPx 
88949>>>>>>>>>>>Define R2_NOTMASKPEN  for |CI8   // DPan
88949>>>>>>>>>>>Define R2_MASKPEN     for |CI9   // DPa 
88949>>>>>>>>>>>Define R2_NOTXORPEN   for |CI10  // DPxn
88949>>>>>>>>>>>Define R2_NOP         for |CI11  // D   
88949>>>>>>>>>>>Define R2_MERGENOTPEN for |CI12  // DPno
88949>>>>>>>>>>>Define R2_COPYPEN     for |CI13  // P   
88949>>>>>>>>>>>Define R2_MERGEPENNOT for |CI14  // PDno
88949>>>>>>>>>>>Define R2_MERGEPEN    for |CI15  // DPo 
88949>>>>>>>>>>>Define R2_WHITE       for |CI16  //  1
88949>>>>>>>>>>>Define R2_LAST        for |CI16
88949>>>>>>>>>>>
88949>>>>>>>>>>>Class cAbstractSplitter is a DFBaseControl
88950>>>>>>>>>>>    
88950>>>>>>>>>>>   
88950>>>>>>>>>>>    Procedure Construct_Object
88952>>>>>>>>>>>        Forward Send Construct_Object
88954>>>>>>>>>>>        
88954>>>>>>>>>>>        Property Boolean pbSplitVertical False
88955>>>>>>>>>>>        Property Integer piMinLocation 20
88956>>>>>>>>>>>        Property Integer piMaxLocation 20
88957>>>>>>>>>>>        Property Integer piLastLocation 0
88958>>>>>>>>>>>        Property Integer piMinTrack  
88959>>>>>>>>>>>        Property Integer piMaxTrack  
88960>>>>>>>>>>>
88960>>>>>>>>>>>        Set Color to clBtnFace
88961>>>>>>>>>>>        Set Skip_state To True              // this tells switch/switch back to not try to give this the focus
88962>>>>>>>>>>>        Set Focus_Mode to NonFocusable      // is paged as part of client activation but never gets the focus
88963>>>>>>>>>>>        
88963>>>>>>>>>>>        // class name and external messages must be defined in the sub-class
88963>>>>>>>>>>>    End_Procedure    // Construct_Object 
88964>>>>>>>>>>>    
88964>>>>>>>>>>>    Procedure DrawDrag Integer iPos
88966>>>>>>>>>>>        Integer iLastY iLastX
88966>>>>>>>>>>>        Integer yScreen xScreen x y
88966>>>>>>>>>>>        Integer iVoid xy cx cy
88966>>>>>>>>>>>        Handle hDC hBrush hBrushOld hPen hPenOld hWnd
88966>>>>>>>>>>>        Pointer lpPoint 
88966>>>>>>>>>>>        tWinPoint APoint
88966>>>>>>>>>>>        tWinPoint APoint
88966>>>>>>>>>>>        Boolean bVertical
88966>>>>>>>>>>>
88966>>>>>>>>>>>        Get pbSplitVertical to bVertical
88967>>>>>>>>>>>        
88967>>>>>>>>>>>        Get GuiLocation to xy
88968>>>>>>>>>>>        Move (Hi(xy))  to APoint.y
88969>>>>>>>>>>>        Move (Low(xy)) to APoint.x
88970>>>>>>>>>>>        Move (AddressOf(APoint)) to lpPoint
88971>>>>>>>>>>>        Delegate Get Window_Handle to hWnd              // Get the parent container's window handle
88973>>>>>>>>>>>        Move (ClientToScreen(hWnd, lpPoint)) to iVoid
88974>>>>>>>>>>>
88974>>>>>>>>>>>        If bVertical Begin
88976>>>>>>>>>>>            Move (Hi(GuiSize(Self))) to cy
88977>>>>>>>>>>>            Get piLastLocation to iLastX
88978>>>>>>>>>>>            Move iPos to x
88979>>>>>>>>>>>            Move APoint.y to y
88980>>>>>>>>>>>            Move APoint.x to xScreen
88981>>>>>>>>>>>    
88981>>>>>>>>>>>            Move (x + xScreen) to x
88982>>>>>>>>>>>        End
88982>>>>>>>>>>>>
88982>>>>>>>>>>>        Else Begin
88983>>>>>>>>>>>            Move (low(GuiSize(Self))) to cx
88984>>>>>>>>>>>            Get piLastLocation to iLastY
88985>>>>>>>>>>>            Move iPos to y
88986>>>>>>>>>>>            Move APoint.x to x
88987>>>>>>>>>>>            Move APoint.y to yScreen
88988>>>>>>>>>>>    
88988>>>>>>>>>>>            Move (y + yScreen) to y
88989>>>>>>>>>>>        End
88989>>>>>>>>>>>>
88989>>>>>>>>>>>
88989>>>>>>>>>>>        Move (GetDC(0)) to hDC
88990>>>>>>>>>>>
88990>>>>>>>>>>>        Move (CreatePen(PS_SOLID, 1, clGray)) to hPen
88991>>>>>>>>>>>        Move (GetStockObject(GRAY_BRUSH)) to hBrush
88992>>>>>>>>>>>        Move (SelectObject(hDC, hPen))  to hPenOld
88993>>>>>>>>>>>        Move (SelectObject(hDC, hBrush)) to hBrushOld
88994>>>>>>>>>>>        Move (SetROP2(hDC, R2_NOTXORPEN)) to iVoid
88995>>>>>>>>>>>
88995>>>>>>>>>>>        If bVertical Begin
88997>>>>>>>>>>>            If (iLastX <> 65536) Begin
88999>>>>>>>>>>>                Move (Rectangle(hDC, iLastX, y+1, iLastX+4, y+cy)) to iVoid // erase last line
89000>>>>>>>>>>>            End
89000>>>>>>>>>>>>
89000>>>>>>>>>>>            Move (Rectangle(hDC, x, y+1, x+4, y+cy)) to iVoid
89001>>>>>>>>>>>        End
89001>>>>>>>>>>>>
89001>>>>>>>>>>>        Else Begin
89002>>>>>>>>>>>            If (iLastY <> 65536) Begin
89004>>>>>>>>>>>                Move (Rectangle(hDC, x+1, iLastY, x+cx, iLastY+4)) to iVoid // erase last line
89005>>>>>>>>>>>            End
89005>>>>>>>>>>>>
89005>>>>>>>>>>>            Move (Rectangle(hDC, x+1, y, x+cx, y+4)) to iVoid
89006>>>>>>>>>>>        End
89006>>>>>>>>>>>>
89006>>>>>>>>>>>
89006>>>>>>>>>>>        Move (SelectObject(hDC, hPenOld)) to iVoid
89007>>>>>>>>>>>        Move (SelectObject(hDC, hBrushOld)) to iVoid
89008>>>>>>>>>>>        Move (DeleteObject(hPen)) to iVoid
89009>>>>>>>>>>>        Move (ReleaseDC(0, hDC)) to iVoid
89010>>>>>>>>>>>
89010>>>>>>>>>>>        Set piLastLocation to (If(bVertical,x, y))
89011>>>>>>>>>>>    End_Procedure  // DrawDrag
89012>>>>>>>>>>>
89012>>>>>>>>>>>    
89012>>>>>>>>>>>    Procedure WMSG_OnMouseDown Integer wParam Integer lParam
89014>>>>>>>>>>>        Integer y cxy cy cyParent
89014>>>>>>>>>>>        Integer x cx cxParent
89014>>>>>>>>>>>        Boolean bVertical
89014>>>>>>>>>>>        Integer iMin iMax
89014>>>>>>>>>>>
89014>>>>>>>>>>>        Get pbSplitVertical to bVertical
89015>>>>>>>>>>>        Send Set_Mouse_Capture
89016>>>>>>>>>>>
89016>>>>>>>>>>>        Get piMinLocation to iMin
89017>>>>>>>>>>>        Get piMaxLocation to iMax
89018>>>>>>>>>>>
89018>>>>>>>>>>>        Get GuiLocation to cx
89019>>>>>>>>>>>        Delegate Get GuiSize to cxy
89021>>>>>>>>>>>        If bVertical Begin
89023>>>>>>>>>>>            Move (Low(lParam)) to x
89024>>>>>>>>>>>            Move (Low(cx)) to cx
89025>>>>>>>>>>>            Move (Low(cxy)) to cxParent
89026>>>>>>>>>>>        End
89026>>>>>>>>>>>>
89026>>>>>>>>>>>        Else Begin
89027>>>>>>>>>>>            Move (Hi(lParam)) to x
89028>>>>>>>>>>>            Move (Hi(cx)) to cx
89029>>>>>>>>>>>            Move (Hi(cxy)) to cxParent
89030>>>>>>>>>>>        End
89030>>>>>>>>>>>>
89030>>>>>>>>>>>        Move (Cast(x,Short)) to x
89031>>>>>>>>>>>
89031>>>>>>>>>>>        // these are delta tracking positions from the current splitter location
89031>>>>>>>>>>>        Set piMinTrack to ( iMin -cx )
89032>>>>>>>>>>>        Set piMaxTrack to ( cxParent - iMax - cx )
89033>>>>>>>>>>>    
89033>>>>>>>>>>>        Set piLastLocation to 65536
89034>>>>>>>>>>>        Send DrawDrag x
89035>>>>>>>>>>>    End_Procedure
89036>>>>>>>>>>>    
89036>>>>>>>>>>>    Function AdjustTrackPos Integer iTrack returns Integer
89038>>>>>>>>>>>        Boolean bVertical
89038>>>>>>>>>>>        Integer iSz iMax iMin
89038>>>>>>>>>>>
89038>>>>>>>>>>>        Get pbSplitVertical to bVertical
89039>>>>>>>>>>>        Delegate Get GuiClientSize to iSz
89041>>>>>>>>>>>        If bVertical Begin
89043>>>>>>>>>>>            Move (Low(iSz)) to iSz
89044>>>>>>>>>>>        End
89044>>>>>>>>>>>>
89044>>>>>>>>>>>        Else Begin
89045>>>>>>>>>>>            Move (hi(iSz)) to iSz
89046>>>>>>>>>>>        End
89046>>>>>>>>>>>>
89046>>>>>>>>>>>        Move (Cast(iTrack,Short)) to iTrack
89047>>>>>>>>>>>
89047>>>>>>>>>>>        Get piMinTrack to iMin
89048>>>>>>>>>>>        Get piMaxTrack to iMax
89049>>>>>>>>>>>        Move (iMin max iTrack) to iTrack
89050>>>>>>>>>>>        Move (iMax min iTrack) to iTrack
89051>>>>>>>>>>>        Function_Return iTrack
89052>>>>>>>>>>>    End_Function
89053>>>>>>>>>>>
89053>>>>>>>>>>>    
89053>>>>>>>>>>>    // reposition and resize all the objects..
89053>>>>>>>>>>>    Procedure WMSG_OnMouseUp Integer wParam Integer lParam
89055>>>>>>>>>>>        Integer iTrack
89055>>>>>>>>>>>        Boolean bVertical
89055>>>>>>>>>>>
89055>>>>>>>>>>>        Get pbSplitVertical to bVertical
89056>>>>>>>>>>>
89056>>>>>>>>>>>        Send Release_Mouse_Capture
89057>>>>>>>>>>>
89057>>>>>>>>>>>        If bVertical Begin
89059>>>>>>>>>>>            Move (Low(lParam)) to iTrack
89060>>>>>>>>>>>        end
89060>>>>>>>>>>>>
89060>>>>>>>>>>>        Else Begin
89061>>>>>>>>>>>            Move (Hi(lParam)) to iTrack
89062>>>>>>>>>>>        End
89062>>>>>>>>>>>>
89062>>>>>>>>>>>        Get AdjustTrackPos iTrack to iTrack
89063>>>>>>>>>>>        Set piLastLocation to 65536
89064>>>>>>>>>>>        Send DrawDrag iTrack
89065>>>>>>>>>>>        
89065>>>>>>>>>>>        Send MoveSplitter iTrack
89066>>>>>>>>>>>
89066>>>>>>>>>>>    End_Procedure
89067>>>>>>>>>>>    
89067>>>>>>>>>>>    Procedure MoveSplitter Integer iTrack
89069>>>>>>>>>>>        // normally we just ask the parent to handle this for us.
89069>>>>>>>>>>>        Delegate Send MoveSplitter iTrack
89071>>>>>>>>>>>    End_Procedure
89072>>>>>>>>>>>
89072>>>>>>>>>>>    Procedure WMSG_OnMouseMove Integer wParam Integer lParam
89074>>>>>>>>>>>        Integer iTrack
89074>>>>>>>>>>>        Boolean bVertical
89074>>>>>>>>>>>        
89074>>>>>>>>>>>        
89074>>>>>>>>>>>         If (wParam IAND MK_LBUTTON) Begin
89076>>>>>>>>>>>            
89076>>>>>>>>>>>            Get pbSplitVertical to bVertical
89077>>>>>>>>>>>            
89077>>>>>>>>>>>            If bVertical Begin
89079>>>>>>>>>>>                Move (Low(lParam)) to iTrack
89080>>>>>>>>>>>            end
89080>>>>>>>>>>>>
89080>>>>>>>>>>>            Else Begin
89081>>>>>>>>>>>                Move (Hi(lParam)) to iTrack
89082>>>>>>>>>>>            end
89082>>>>>>>>>>>>
89082>>>>>>>>>>>            Get AdjustTrackPos iTrack to iTrack
89083>>>>>>>>>>>            Send DrawDrag iTrack
89084>>>>>>>>>>>        End
89084>>>>>>>>>>>>
89084>>>>>>>>>>>    End_Procedure
89085>>>>>>>>>>>
89085>>>>>>>>>>>
89085>>>>>>>>>>>    // Determines which cursor shape should be displayed.
89085>>>>>>>>>>>    Procedure SetCursor
89087>>>>>>>>>>>        Integer hCursor retval hWnd iVoid hLib
89087>>>>>>>>>>>        String sCursor
89087>>>>>>>>>>>        Boolean bVertical
89087>>>>>>>>>>>        Get pbSplitVertical to bVertical
89088>>>>>>>>>>>        Get Window_Handle To hWnd
89089>>>>>>>>>>>        Move (LoadLibrary("ComCtl32.dll")) To hLib
89090>>>>>>>>>>>        Move (If(bVertical,"#107","#135")) to sCursor
89091>>>>>>>>>>>        Move (LoadCursor(hLib, addressof(sCursor))) to hCursor    // splitter cursor
89092>>>>>>>>>>>        Move (SetClassLong(hWnd, GCL_HCURSOR, hCursor )) to retval
89093>>>>>>>>>>>        Move (FreeLibrary(hLib)) to iVoid
89094>>>>>>>>>>>    End_Procedure
89095>>>>>>>>>>>
89095>>>>>>>>>>>    Procedure Page Integer iState
89097>>>>>>>>>>>        Forward Send Page iState
89099>>>>>>>>>>>        If (iState =1) Send SetCursor
89102>>>>>>>>>>>    End_Procedure
89103>>>>>>>>>>>
89103>>>>>>>>>>>End_Class
89104>>>>>>>>>>>
89104>>>>>>>>>>>// we need different external classes or horizontal and vertical because
89104>>>>>>>>>>>// we are changing a class property in SetCursor
89104>>>>>>>>>>>
89104>>>>>>>>>>>Class cVerticalSplitter is a cAbstractSplitter
89105>>>>>>>>>>>    Procedure Construct_Object
89107>>>>>>>>>>>        Forward Send Construct_Object
89109>>>>>>>>>>>        Set pbSplitVertical to True
89110>>>>>>>>>>>        
89110>>>>>>>>>>>        Set External_Class_Name "DFVerticalSplitter" to "Static"
89111>>>>>>>>>>>
89111>>>>>>>>>>>        Set External_Message WM_LBUTTONDOWN to msg_WMSG_OnMouseDown
89112>>>>>>>>>>>        Set External_Message WM_LBUTTONUP   to msg_WMSG_OnMouseUp
89113>>>>>>>>>>>        Set External_Message WM_MOUSEMOVE   to msg_WMSG_OnMouseMove 
89114>>>>>>>>>>>        Set Window_Style to SS_NOTIFY True
89115>>>>>>>>>>>    End_Procedure
89116>>>>>>>>>>>    
89116>>>>>>>>>>>End_Class
89117>>>>>>>>>>>
89117>>>>>>>>>>>Class cHorizontalSplitter is a cAbstractSplitter
89118>>>>>>>>>>>    Procedure Construct_Object
89120>>>>>>>>>>>        Forward Send Construct_Object
89122>>>>>>>>>>>        Set pbSplitVertical to False
89123>>>>>>>>>>>        
89123>>>>>>>>>>>        Set External_Class_Name "DFHorizontalSplitter" to "Static"
89124>>>>>>>>>>>
89124>>>>>>>>>>>        Set External_Message WM_LBUTTONDOWN to msg_WMSG_OnMouseDown
89125>>>>>>>>>>>        Set External_Message WM_LBUTTONUP   to msg_WMSG_OnMouseUp
89126>>>>>>>>>>>        Set External_Message WM_MOUSEMOVE   to msg_WMSG_OnMouseMove 
89127>>>>>>>>>>>        Set Window_Style to SS_NOTIFY True
89128>>>>>>>>>>>    End_Procedure
89129>>>>>>>>>>>    
89129>>>>>>>>>>>End_Class
89130>>>>>>>>>
89130>>>>>>>>>Enum_List
89130>>>>>>>>>    Define fpFixFirstPanel      // Top panel height remains fixed on resize
89130>>>>>>>>>    Define fpFixLastPanel   // Bottom panel height remains fixed on resize
89130>>>>>>>>>End_Enum_List
89130>>>>>>>>>
89130>>>>>>>>>Define C_SplitterWidth for 3
89130>>>>>>>>>
89130>>>>>>>>>
89130>>>>>>>>>Class cSplitterContainerMixin is a Mixin
89131>>>>>>>>>
89131>>>>>>>>>    Procedure Define_cSplitterContainerMixin
89133>>>>>>>>>
89133>>>>>>>>>        // Split vertical or horizontal
89133>>>>>>>>>        Property Boolean pbSplitVertical True
89134>>>>>>>>>
89134>>>>>>>>>        // determines which panel's height remains fixed during parent resize events
89134>>>>>>>>>        Property Integer peFixedPanel fpFixFirstPanel
89135>>>>>>>>>
89135>>>>>>>>>        Property Integer piSplitterColor clBtnFace
89136>>>>>>>>>        
89136>>>>>>>>>        // these are normally maintained by the class
89136>>>>>>>>>        Property Handle phoFirstPanel 0
89137>>>>>>>>>        Property Handle phoLastPanel 0
89138>>>>>>>>>        Property Handle phoSplitter 0
89139>>>>>>>>>
89139>>>>>>>>>        Property Integer piPrivateSplitterLocation 0
89140>>>>>>>>>        Property Integer piPrivateMinSplitterLocation 20
89141>>>>>>>>>        Property Integer piPrivateMaxSplitterLocation 20
89142>>>>>>>>>        
89142>>>>>>>>>        Set Border_Style to Border_None
89143>>>>>>>>>
89143>>>>>>>>>    End_Procedure // Construct_Object
89144>>>>>>>>>    
89144>>>>>>>>>    Procedure Set piMinSplitterLocation Integer iLocation
89146>>>>>>>>>        Handle hoSplitter
89146>>>>>>>>>        Boolean bVert
89146>>>>>>>>>        Set piPrivateMinSplitterLocation to iLocation
89147>>>>>>>>>        // if splitter exists update the splitter with Gui Units
89147>>>>>>>>>        Get phoSplitter to hoSplitter
89148>>>>>>>>>        If hoSplitter Begin
89150>>>>>>>>>            Get pbSplitVertical to bVert
89151>>>>>>>>>            Get DialogToGui iLocation iLocation to iLocation
89152>>>>>>>>>            Set piMinLocation of hoSplitter to (If(bVert,Low(iLocation),Hi(iLocation)))
89153>>>>>>>>>        End
89153>>>>>>>>>>
89153>>>>>>>>>    End_Procedure
89154>>>>>>>>>
89154>>>>>>>>>    Function piMinSplitterLocation Returns Integer
89156>>>>>>>>>        Integer iLocation
89156>>>>>>>>>        Get piPrivateMinSplitterLocation to iLocation
89157>>>>>>>>>        Function_Return iLocation
89158>>>>>>>>>    End_Function
89159>>>>>>>>>
89159>>>>>>>>>    Procedure Set piMaxSplitterLocation Integer iLocation
89161>>>>>>>>>        Handle hoSplitter
89161>>>>>>>>>        Boolean bVert
89161>>>>>>>>>        Set piPrivateMaxSplitterLocation to iLocation
89162>>>>>>>>>        // if splitter exists update the splitter with Gui Units
89162>>>>>>>>>        Get phoSplitter to hoSplitter
89163>>>>>>>>>        If hoSplitter Begin
89165>>>>>>>>>            Get pbSplitVertical to bVert
89166>>>>>>>>>            Get DialogToGui iLocation iLocation to iLocation
89167>>>>>>>>>            Set piMaxLocation of hoSplitter to (If(bVert,Low(iLocation),Hi(iLocation)))
89168>>>>>>>>>        End
89168>>>>>>>>>>
89168>>>>>>>>>    End_Procedure
89169>>>>>>>>>
89169>>>>>>>>>    Function piMaxSplitterLocation Returns Integer
89171>>>>>>>>>        Integer iLocation
89171>>>>>>>>>        Get piPrivateMaxSplitterLocation to iLocation
89172>>>>>>>>>        Function_Return iLocation
89173>>>>>>>>>    End_Function
89174>>>>>>>>>    
89174>>>>>>>>>    Procedure Set piGuiSplitterLocation Integer iPos
89176>>>>>>>>>        Handle hWnd
89176>>>>>>>>>        Get Window_Handle to hWnd
89177>>>>>>>>>        If hWnd Begin
89179>>>>>>>>>            Get SizeSplitterComponents iPos to iPos
89180>>>>>>>>>        End
89180>>>>>>>>>>
89180>>>>>>>>>        Set piPrivateSplitterLocation to iPos
89181>>>>>>>>>    End_Procedure
89182>>>>>>>>>    
89182>>>>>>>>>    Function piGuiSplitterLocation Returns Integer
89184>>>>>>>>>        Integer iPos
89184>>>>>>>>>        Get piPrivateSplitterLocation to iPos
89185>>>>>>>>>        Function_Return iPos
89186>>>>>>>>>    End_Function
89187>>>>>>>>>    
89187>>>>>>>>>    Procedure Set piSplitterLocation Integer iPos
89189>>>>>>>>>        Boolean bVert
89189>>>>>>>>>        Get pbSplitVertical to bVert
89190>>>>>>>>>        Get DialogToGui iPos iPos to iPos
89191>>>>>>>>>        Set piGuiSplitterLocation to (If(bVert, low(iPos), Hi(iPos)))
89192>>>>>>>>>    End_Procedure
89193>>>>>>>>>    
89193>>>>>>>>>    Function piSplitterLocation Returns Integer
89195>>>>>>>>>        Integer iPos
89195>>>>>>>>>        Boolean bVert
89195>>>>>>>>>        // we will get the gui units and convert to dialog
89195>>>>>>>>>        Get piPrivateSplitterLocation to iPos
89196>>>>>>>>>        Get pbSplitVertical to bVert
89197>>>>>>>>>        Get GuiToDialog iPos iPos to iPos
89198>>>>>>>>>        Function_Return (If(bVert, low(iPos), Hi(iPos)))
89199>>>>>>>>>    End_Function
89200>>>>>>>>>
89200>>>>>>>>>    // create the appropriate splitter for the object. This could be augmented
89200>>>>>>>>>    // to return a different object class 
89200>>>>>>>>>    Function CreateSplitter Returns Handle
89202>>>>>>>>>        Boolean bVertical
89202>>>>>>>>>        Handle hoSplitter
89202>>>>>>>>>        
89202>>>>>>>>>        Get pbSplitVertical to bVertical
89203>>>>>>>>>        
89203>>>>>>>>>        If bVertical Begin
89205>>>>>>>>>            Get Create U_cVerticalSplitter to hoSplitter
89206>>>>>>>>>        End
89206>>>>>>>>>>
89206>>>>>>>>>        Else Begin
89207>>>>>>>>>            Get Create U_cHorizontalSplitter to hoSplitter
89208>>>>>>>>>        End
89208>>>>>>>>>>
89208>>>>>>>>>        
89208>>>>>>>>>        Function_Return hoSplitter
89209>>>>>>>>>    End_Function
89210>>>>>>>>>    
89210>>>>>>>>>    // augmented to test that all components are bound properly and
89210>>>>>>>>>    // to set the initial sizes
89210>>>>>>>>>    Procedure Page Integer iPageObject 
89212>>>>>>>>>        Handle hoSplitter hoFirst hoLast
89212>>>>>>>>>        Integer iColor iClientSize
89212>>>>>>>>>        Boolean bVertical
89212>>>>>>>>>        Integer iLoc
89212>>>>>>>>>        Integer iVal
89212>>>>>>>>>        
89212>>>>>>>>>        Forward Send Page iPageObject
89214>>>>>>>>>        
89214>>>>>>>>>        If iPageObject Begin
89216>>>>>>>>>
89216>>>>>>>>>            // make the container the size of the parent clientarea
89216>>>>>>>>>            // We use GetContainerClientSize instead of GuiClientSize because
89216>>>>>>>>>            // GetContainerClientSize has a special augmentation in tab pages that
89216>>>>>>>>>            // makes anchors work properly with unpaged tab-pages
89216>>>>>>>>>            Delegate Get GetContainerClientSize to iClientSize
89218>>>>>>>>>            Set GuiSize to (Hi(iClientSize)) (Low(iClientSize))
89219>>>>>>>>>            Set GuiLocation to 0 0
89220>>>>>>>>>            Send Adjust_Logicals
89221>>>>>>>>>            
89221>>>>>>>>>            // destroy existing splitter and create a new one
89221>>>>>>>>>            Get phoSplitter to hoSplitter
89222>>>>>>>>>            If (hoSplitter) Begin
89224>>>>>>>>>                Send Destroy of hoSplitter
89225>>>>>>>>>            End
89225>>>>>>>>>>
89225>>>>>>>>>            Get CreateSplitter to hoSplitter
89226>>>>>>>>>            Set phoSplitter to hoSplitter
89227>>>>>>>>>            Get phoFirstPanel to hoFirst
89228>>>>>>>>>            Get phoLastPanel to hoLast
89229>>>>>>>>>            If (hoSplitter=0 or hoFirst=0 or hoLast=0) Begin
89231>>>>>>>>>                Error DFERR_OPERATOR "Splitter container is missing a child splitter or container component"
89232>>>>>>>>>>
89232>>>>>>>>>                Procedure_Return
89233>>>>>>>>>            End
89233>>>>>>>>>>
89233>>>>>>>>>            
89233>>>>>>>>>            // set various splitter propertues directly in splitter
89233>>>>>>>>>            Get piSplitterColor to iColor
89234>>>>>>>>>            Set Color of hoSplitter to iColor
89235>>>>>>>>>            Get pbSplitVertical to bVertical
89236>>>>>>>>>            Set pbSplitVertical of hoSplitter to bVertical
89237>>>>>>>>>            // Once phoSplitter is set, reseting these will update the splitter as needed
89237>>>>>>>>>            Get piMinSplitterLocation to iVal
89238>>>>>>>>>            Set piMinSplitterLocation to iVal
89239>>>>>>>>>            Get piMaxSplitterLocation to iVal
89240>>>>>>>>>            Set piMaxSplitterLocation to iVal
89241>>>>>>>>>
89241>>>>>>>>>            // this will force a resize
89241>>>>>>>>>            Get piGuiSplitterLocation to iLoc
89242>>>>>>>>>            Set piGuiSplitterLocation to iLoc
89243>>>>>>>>>        End
89243>>>>>>>>>>
89243>>>>>>>>>        
89243>>>>>>>>>    End_Procedure
89244>>>>>>>>>    
89244>>>>>>>>>    // called everytime the parent is resized
89244>>>>>>>>>    Procedure DoApplyAnchors Integer Arg1 Integer Arg2
89246>>>>>>>>>        If (Window_Handle(Self)) Begin
89248>>>>>>>>>            Send ResizeSplitterContainer
89249>>>>>>>>>        End
89249>>>>>>>>>>
89249>>>>>>>>>    End_Procedure
89250>>>>>>>>>
89250>>>>>>>>>    // parent has been resized. Adjust everything. 
89250>>>>>>>>>    Procedure ResizeSplitterContainer
89252>>>>>>>>>        Integer iClientSize
89252>>>>>>>>>        Handle  hoFirstPanel hoLastPanel
89252>>>>>>>>>        Integer cxy cxClient cyClient
89252>>>>>>>>>        Boolean bVertical
89252>>>>>>>>>        Integer iFirstSize
89252>>>>>>>>>        Integer eFixedPanel
89252>>>>>>>>>        
89252>>>>>>>>>        // make the container the size of the parent clientarea
89252>>>>>>>>>        Delegate Get GuiClientSize to iClientSize
89254>>>>>>>>>        Move (Hi(iClientSize))  to cyClient
89255>>>>>>>>>        Move (Low(iClientSize)) to cxClient
89256>>>>>>>>>        Set GuiSize to cyClient cxClient
89257>>>>>>>>>        Set GuiLocation to 0 0
89258>>>>>>>>>        
89258>>>>>>>>>        // resize child objects by determining the size of the first child container
89258>>>>>>>>>        Get pbSplitVertical to bVertical
89259>>>>>>>>>        Get peFixedPanel to eFixedPanel
89260>>>>>>>>>        If (eFixedPanel = fpFixFirstPanel) Begin
89262>>>>>>>>>            // Resize the panels keeping the size of the first panel fixed
89262>>>>>>>>>            Get phoFirstPanel to hoFirstPanel
89263>>>>>>>>>            Get GuiSize of hoFirstPanel to cxy
89264>>>>>>>>>            If bVertical Begin
89266>>>>>>>>>                Move (Low(cxy)) to iFirstSize
89267>>>>>>>>>            End
89267>>>>>>>>>>
89267>>>>>>>>>            Else Begin
89268>>>>>>>>>                Move (Hi(cxy)) to iFirstSize
89269>>>>>>>>>            End
89269>>>>>>>>>>
89269>>>>>>>>>        End
89269>>>>>>>>>>
89269>>>>>>>>>        Else Begin
89270>>>>>>>>>            // Resize the panels keeping the size of the last panel fixed
89270>>>>>>>>>            Get pholastPanel to hoLastPanel
89271>>>>>>>>>            Get GuiSize of hoLastPanel to cxy
89272>>>>>>>>>            If bVertical Begin
89274>>>>>>>>>                Move (cxClient - low(cxy) - C_SplitterWidth) to iFirstSize               
89275>>>>>>>>>            End
89275>>>>>>>>>>
89275>>>>>>>>>            Else Begin
89276>>>>>>>>>                Move (cyClient - Hi(cxy) - C_SplitterWidth) to iFirstSize                
89277>>>>>>>>>            End
89277>>>>>>>>>>
89277>>>>>>>>>        End
89277>>>>>>>>>>
89277>>>>>>>>>        Set piGuiSplitterLocation to iFirstSize
89278>>>>>>>>>    End_Procedure
89279>>>>>>>>>    
89279>>>>>>>>>    // set size of all child objects passing the GUI size of the first child panel
89279>>>>>>>>>    Function SizeSplitterComponents Integer iFirstSize Returns Integer
89281>>>>>>>>>        Handle  hoFirstPanel hoLastPanel hoSplitter
89281>>>>>>>>>        Integer cyFirstPanel cyLastPanel
89281>>>>>>>>>        Integer cxFirstPanel cxLastPanel
89281>>>>>>>>>        Integer cxy cxClient cyClient
89281>>>>>>>>>        Integer iMin iMax
89281>>>>>>>>>        Boolean bVertical
89281>>>>>>>>>        
89281>>>>>>>>>        Get phoFirstPanel    to hoFirstPanel
89282>>>>>>>>>        Get phoLastPanel to hoLastPanel
89283>>>>>>>>>        Get phoSplitter    to hoSplitter
89284>>>>>>>>>        Get pbSplitVertical to bVertical
89285>>>>>>>>>        Get GuiClientSize to cxy
89286>>>>>>>>>        Move (Hi(cxy))  To cyClient
89287>>>>>>>>>        Move (Low(cxy)) to cxClient
89288>>>>>>>>>        
89288>>>>>>>>>        Get piMinSplitterLocation to iMin
89289>>>>>>>>>        Get piMaxSplitterLocation to iMax
89290>>>>>>>>>        Get DialogToGui iMin iMin to iMin
89291>>>>>>>>>        Move (If(bVertical,Low(iMin),Hi(iMin))) to iMin
89292>>>>>>>>>        Get DialogToGui iMax iMax to iMax
89293>>>>>>>>>        Move (If(bVertical,Low(iMax),Hi(iMax))) to iMax
89294>>>>>>>>>        
89294>>>>>>>>>        If (iFirstSize=0) Begin
89296>>>>>>>>>            Move (If(bVertical, cxClient, cyClient)/2) to iFirstSize
89297>>>>>>>>>        End
89297>>>>>>>>>>
89297>>>>>>>>>    
89297>>>>>>>>>        Move (iFirstSize max iMin) to iFirstSize
89298>>>>>>>>>        Move (iFirstSize min (If(bVertical, cxClient, cyClient) - iMax)) to iFirstSize
89299>>>>>>>>>
89299>>>>>>>>>        If bVertical Begin
89301>>>>>>>>>            Move iFirstSize to cxFirstPanel
89302>>>>>>>>>        
89302>>>>>>>>>            // position the splitter
89302>>>>>>>>>            Set GuiLocation of hoSplitter to 0 cxFirstPanel
89303>>>>>>>>>            Set GuiSize     of hoSplitter to cyClient C_SplitterWidth
89304>>>>>>>>>        
89304>>>>>>>>>            // position the left panel
89304>>>>>>>>>            Set GuiLocation of hoFirstPanel to 0 0
89305>>>>>>>>>            Set GuiSize     of hoFirstPanel to  cyClient cxFirstPanel
89306>>>>>>>>>        
89306>>>>>>>>>            // position the right panel
89306>>>>>>>>>            Set GuiLocation of hoLastPanel to 0 (cxFirstPanel + C_SplitterWidth)
89307>>>>>>>>>            Set GuiSize     of hoLastPanel to cyClient (cxClient - cxFirstPanel - C_SplitterWidth) 
89308>>>>>>>>>            Move cxFirstPanel to iFirstSize
89309>>>>>>>>>        End
89309>>>>>>>>>>
89309>>>>>>>>>        Else Begin
89310>>>>>>>>>            Move iFirstSize to cyFirstPanel
89311>>>>>>>>>        
89311>>>>>>>>>            // position the splitter
89311>>>>>>>>>            Set GuiLocation of hoSplitter to cyFirstPanel 0 
89312>>>>>>>>>            Set GuiSize     of hoSplitter to C_SplitterWidth cxClient
89313>>>>>>>>>        
89313>>>>>>>>>            // position the top panel
89313>>>>>>>>>            Set GuiLocation of hoFirstPanel to 0 0
89314>>>>>>>>>            Set GuiSize     of hoFirstPanel to cyFirstPanel cxClient
89315>>>>>>>>>        
89315>>>>>>>>>            // position the bottom panel
89315>>>>>>>>>            Set GuiLocation of hoLastPanel to (cyFirstPanel + C_SplitterWidth) 0
89316>>>>>>>>>            Set GuiSize     of hoLastPanel to (cyClient - cyFirstPanel - C_SplitterWidth) cxClient
89317>>>>>>>>>            Move cyFirstPanel to iFirstSize
89318>>>>>>>>>        End
89318>>>>>>>>>>
89318>>>>>>>>>        
89318>>>>>>>>>        Function_Return iFirstSize
89319>>>>>>>>>    End_Function
89320>>>>>>>>>    
89320>>>>>>>>>    // move splitter by passed GUI units. Usually called by splitter control 
89320>>>>>>>>>    Procedure MoveSplitter Integer iGuiTrack
89322>>>>>>>>>        Integer cxy
89322>>>>>>>>>        Integer iFirstSize
89322>>>>>>>>>        Handle hoFirstPanel
89322>>>>>>>>>        Boolean bVertical
89322>>>>>>>>>        
89322>>>>>>>>>        Get pbSplitVertical to bVertical
89323>>>>>>>>>        
89323>>>>>>>>>        Get phoFirstPanel to hoFirstPanel
89324>>>>>>>>>        Get GuiSize of hoFirstPanel to cxy
89325>>>>>>>>>        If bVertical Begin
89327>>>>>>>>>            Move (Low(cxy) + iGuiTrack) to iFirstSize
89328>>>>>>>>>        End
89328>>>>>>>>>>
89328>>>>>>>>>        Else Begin
89329>>>>>>>>>            Move (Hi(cxy) + iGuiTrack) to iFirstSize
89330>>>>>>>>>        End
89330>>>>>>>>>>
89330>>>>>>>>>        
89330>>>>>>>>>        Set piGuiSplitterLocation to iFirstSize
89331>>>>>>>>>    End_Procedure
89332>>>>>>>>>    
89332>>>>>>>>>End_Class
89333>>>>>>>>>
89333>>>>>>>>>
89333>>>>>>>>>Class cSplitterContainerChildMixin is a Mixin
89334>>>>>>>>>
89334>>>>>>>>>    Procedure Define_cSplitterContainerChildMixin
89336>>>>>>>>>        Handle hoObj
89336>>>>>>>>>        
89336>>>>>>>>>        Forward Send Construct_Object
89338>>>>>>>>>        
89338>>>>>>>>>        // by default we use object order to determine which is the first panel and
89338>>>>>>>>>        // which is the second panel. This class is only valid within a SplitterContainer and
89338>>>>>>>>>        // an error will be raised here if this is not the case
89338>>>>>>>>>        Delegate Get phoFirstPanel to hoObj
89340>>>>>>>>>        If (hoObj=0) Begin
89342>>>>>>>>>            Delegate Set phoFirstPanel to Self
89344>>>>>>>>>        End
89344>>>>>>>>>>
89344>>>>>>>>>        Else Begin
89345>>>>>>>>>            Delegate Set phoLastPanel to Self
89347>>>>>>>>>        End
89347>>>>>>>>>>
89347>>>>>>>>>    End_Procedure
89348>>>>>>>>>    
89348>>>>>>>>>End_Class
89349>>>>>>>>>
89349>>>>>>>
89349>>>>>>>
89349>>>>>>>
89349>>>>>>>Class cDbSplitterContainer is a dbContainer3d
89350>>>>>>>    Import_Class_Protocol cSplitterContainerMixin
89351>>>>>>>    Procedure Construct_Object
89353>>>>>>>        Forward Send Construct_Object
89355>>>>>>>        Send Define_cSplitterContainerMixin
89356>>>>>>>    End_Procedure
89357>>>>>>>End_Class
89358>>>>>>>
89358>>>>>>>
89358>>>>>>>Class cDbSplitterContainerChild is a dbContainer3d
89359>>>>>>>    Import_Class_Protocol cSplitterContainerChildMixin
89360>>>>>>>    Procedure Construct_Object
89362>>>>>>>        Forward Send Construct_Object
89364>>>>>>>        Send Define_cSplitterContainerChildMixin
89365>>>>>>>        Set Border_Style to Border_Normal
89366>>>>>>>    End_Procedure
89367>>>>>>>End_Class
89368>>>>>>>
89368>>>>>
89368>>>>>Class cVDFD_CE_DbSplitterContainer is a cDbSplitterContainer
89369>>>>>    
89369>>>>>    Procedure Construct_Object
89371>>>>>        Forward Send Construct_Object
89373>>>>>
89373>>>>>    End_Procedure
89374>>>>>
89374>>>>>    Procedure End_Construct_Object
89376>>>>>        Forward Send End_Construct_Object
89378>>>>>
89378>>>>>    End_Procedure
89379>>>>>
89379>>>>>End_Class
89380>>>Use Base\cVDFD_CE_DbTextEdit.pkg
Including file: Base\cVDFD_CE_DbTextEdit.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbTextEdit.pkg)
89380>>>>>Use cDbTextEdit.pkg
89380>>>>>
89380>>>>>Class cVDFD_CE_DbTextEdit is a cDbTextEdit
89381>>>>>    
89381>>>>>    Procedure Construct_Object
89383>>>>>        Forward Send Construct_Object
89385>>>>>
89385>>>>>    End_Procedure
89386>>>>>
89386>>>>>    Procedure End_Construct_Object
89388>>>>>        Forward Send End_Construct_Object
89390>>>>>
89390>>>>>    End_Procedure
89391>>>>>
89391>>>>>End_Class
89392>>>Use Base\cVDFD_CE_FtpTransfer.pkg
Including file: Base\cVDFD_CE_FtpTransfer.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_FtpTransfer.pkg)
89392>>>>>Use VdfBase.pkg
89392>>>>>
89392>>>>>Class cVDFD_CE_FtpTransfer is a cFtpTransfer
89393>>>>>    
89393>>>>>    Procedure Construct_Object
89395>>>>>        Forward Send Construct_Object
89397>>>>>
89397>>>>>    End_Procedure
89398>>>>>
89398>>>>>    Procedure End_Construct_Object
89400>>>>>        Forward Send End_Construct_Object
89402>>>>>
89402>>>>>    End_Procedure
89403>>>>>
89403>>>>>End_Class
89404>>>Use Base\cVDFD_CE_Checkbox.pkg
Including file: Base\cVDFD_CE_Checkbox.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_Checkbox.pkg)
89404>>>>>Use Windows.pkg
89404>>>>>
89404>>>>>Class cVDFD_CE_Checkbox is a Checkbox
89405>>>>>    
89405>>>>>    Procedure Construct_Object
89407>>>>>        Forward Send Construct_Object
89409>>>>>
89409>>>>>    End_Procedure
89410>>>>>
89410>>>>>    Procedure End_Construct_Object
89412>>>>>        Forward Send End_Construct_Object
89414>>>>>
89414>>>>>    End_Procedure
89415>>>>>
89415>>>>>End_Class
89416>>>Use Base\cVDFD_CE_HtmlHelp.pkg
Including file: Base\cVDFD_CE_HtmlHelp.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_HtmlHelp.pkg)
89416>>>>>Use cHtmlHelp.pkg
89416>>>>>
89416>>>>>Class cVDFD_CE_HtmlHelp is a cHtmlHelp
89417>>>>>    
89417>>>>>    Procedure Construct_Object
89419>>>>>        Forward Send Construct_Object
89421>>>>>
89421>>>>>    End_Procedure
89422>>>>>
89422>>>>>    Procedure End_Construct_Object
89424>>>>>        Forward Send End_Construct_Object
89426>>>>>
89426>>>>>    End_Procedure
89427>>>>>
89427>>>>>End_Class
89428>>>Use Base\cVDFD_CE_HttpTransfer.pkg
Including file: Base\cVDFD_CE_HttpTransfer.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_HttpTransfer.pkg)
89428>>>>>Use cHttpTransfer.pkg
89428>>>>>
89428>>>>>Class cVDFD_CE_HttpTransfer is a cHttpTransfer
89429>>>>>    
89429>>>>>    Procedure Construct_Object
89431>>>>>        Forward Send Construct_Object
89433>>>>>
89433>>>>>    End_Procedure
89434>>>>>
89434>>>>>    Procedure End_Construct_Object
89436>>>>>        Forward Send End_Construct_Object
89438>>>>>
89438>>>>>    End_Procedure
89439>>>>>
89439>>>>>End_Class
89440>>>Use Base\cVDFD_CE_IdleHandler.pkg
Including file: Base\cVDFD_CE_IdleHandler.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_IdleHandler.pkg)
89440>>>>>Use Windows.pkg
89440>>>>>
89440>>>>>Class cVDFD_CE_IdleHandler is a cIdleHandler
89441>>>>>    
89441>>>>>    Procedure Construct_Object
89443>>>>>        Forward Send Construct_Object
89445>>>>>
89445>>>>>    End_Procedure
89446>>>>>
89446>>>>>    Procedure End_Construct_Object
89448>>>>>        Forward Send End_Construct_Object
89450>>>>>
89450>>>>>    End_Procedure
89451>>>>>
89451>>>>>End_Class
89452>>>Use Base\cVDFD_CE_ImageList32.pkg
Including file: Base\cVDFD_CE_ImageList32.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_ImageList32.pkg)
89452>>>>>Use cImageList32.pkg
89452>>>>>
89452>>>>>Class cVDFD_CE_ImageList32 is a cImageList32
89453>>>>>    
89453>>>>>    Procedure Construct_Object
89455>>>>>        Forward Send Construct_Object
89457>>>>>
89457>>>>>    End_Procedure
89458>>>>>
89458>>>>>    Procedure End_Construct_Object
89460>>>>>        Forward Send End_Construct_Object
89462>>>>>
89462>>>>>    End_Procedure
89463>>>>>
89463>>>>>End_Class
89464>>>Use Base\cVDFD_CE_IniFile.pkg
Including file: Base\cVDFD_CE_IniFile.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_IniFile.pkg)
89464>>>>>Use cIniFile.pkg
89464>>>>>
89464>>>>>Class cVDFD_CE_IniFile is a cIniFile
89465>>>>>    
89465>>>>>    Procedure Construct_Object
89467>>>>>        Forward Send Construct_Object
89469>>>>>
89469>>>>>    End_Procedure
89470>>>>>
89470>>>>>    Procedure End_Construct_Object
89472>>>>>        Forward Send End_Construct_Object
89474>>>>>
89474>>>>>    End_Procedure
89475>>>>>
89475>>>>>End_Class
89476>>>Use Base\cVDFD_CE_LinkLabel.pkg
Including file: Base\cVDFD_CE_LinkLabel.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_LinkLabel.pkg)
89476>>>>>Use cLinkLabel.pkg
Including file: cLinkLabel.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cLinkLabel.pkg)
89476>>>>>>>Use UI
89476>>>>>>>
89476>>>>>>>Use GlobalFunctionsProcedures.pkg
89476>>>>>>>Use Commctrl.pkg
89476>>>>>>>Use tWinStructs.pkg
89476>>>>>>>Use CharTranslate.pkg
89476>>>>>>>
89476>>>>>>>
89476>>>>>>>
89476>>>>>>>// Needed?
89476>>>>>>>Struct tWinInitCommonControlsEX
89476>>>>>>>    DWord dwSize
89476>>>>>>>    DWord dwICC
89476>>>>>>>End_Struct
89476>>>>>>>
89476>>>>>>>External_Function InitCommonControlsEx "InitCommonControlsEx" COMCTL32.DLL ;    Pointer lpInitCtrls ;    Returns Integer
89477>>>>>>>
89477>>>>>>>
89477>>>>>>>// we use container3d because it has better next/previous navigation logic
89477>>>>>>>// we use a container because it works better (fonts and things are correct)
89477>>>>>>>Class cLinkLabel is a container3d
89478>>>>>>>    
89478>>>>>>>    Import_Class_Protocol Label_Mixin
89479>>>>>>>    Import_Class_Protocol ToolTip_Support_Mixin
89480>>>>>>>    
89480>>>>>>>    Procedure Construct_Object
89482>>>>>>>        Boolean bSupported
89482>>>>>>>        Forward Send Construct_Object
89484>>>>>>>        
89484>>>>>>>        
89484>>>>>>>        Send Define_ToolTip_Support_Mixin
89485>>>>>>>
89485>>>>>>>        // determines if enter key opens link or is passed to parent
89485>>>>>>>        Property Boolean pbEnterPassThrough False
89486>>>>>>>
89486>>>>>>>        // if true, height is adjusted to fit width and text
89486>>>>>>>        Property Boolean pbAutoSizeHeight True
89487>>>>>>>        
89487>>>>>>>
89487>>>>>>>        // Setting this allows it to take the DataFlex focus. Don't change!        
89487>>>>>>>        Set Client_Area_State to False
89488>>>>>>>        
89488>>>>>>>        // only supported in XP and above. If not supported, you get no useful control
89488>>>>>>>        Get IsControlSupported to bSupported
89489>>>>>>>        If not bSupported Begin
89491>>>>>>>            Send OnControlNotSupported
89492>>>>>>>            Procedure_Return
89493>>>>>>>        End
89493>>>>>>>>
89493>>>>>>>
89493>>>>>>>        Set Color to clBtnFace
89494>>>>>>>        Set Size to 14 100
89495>>>>>>>        Set Border_Style to Border_None
89496>>>>>>>        // if True, the links are not navigated to via keyboard.
89496>>>>>>>        Set Skip_State to True
89497>>>>>>>        // needed by tooltip
89497>>>>>>>        Set pbUseFormWindowHandle to False
89498>>>>>>>
89498>>>>>>>        Set External_Class_Name "DFSysLink" to "SysLink"
89499>>>>>>>        //Set Window_Style LWS_TRANSPARENT to True
89499>>>>>>>        Set Window_Style WS_CLIPCHILDREN to False
89500>>>>>>>        // to be consistent with other VDF controls like TextBox
89500>>>>>>>        Set Window_Style WS_CLIPSIBLINGS to True
89501>>>>>>>        Set External_Message WM_NOTIFY to msg_Notify
89502>>>>>>>
89502>>>>>>>    End_Procedure
89503>>>>>>>    
89503>>>>>>>    // control is only supported in XP (5.1) and above.
89503>>>>>>>    Function IsControlSupported Returns Boolean
89505>>>>>>>        Integer iMajor iMinor
89505>>>>>>>        Boolean bSupported
89505>>>>>>>        // this is supported in 5.1 and above
89505>>>>>>>        Move (SysConf(SYSCONF_OS_MAJOR_REV)) to iMajor
89506>>>>>>>        Move (SysConf(SYSCONF_OS_MINOR_REV)) to iMinor
89507>>>>>>>        // Check for XP or above (5.1 or above)
89507>>>>>>>        Move (iMajor>5 or (iMajor=5 and iMinor>0)) to bSupported
89508>>>>>>>        Function_Return bSupported
89509>>>>>>>    End_Function
89510>>>>>>>    
89510>>>>>>>    // augmented to handle NC_CLICK and NM_RETURN
89510>>>>>>>    Procedure Notify Integer wParam Integer lParam
89512>>>>>>>        tWinNmHdr Hdr
89512>>>>>>>        tWinNmHdr Hdr
89512>>>>>>>        tWinNmLink nmLink
89512>>>>>>>        tWinNmLink nmLink
89512>>>>>>>        tWinLItem LItem
89512>>>>>>>        tWinLItem LItem
89512>>>>>>>        Boolean bOk bPass
89512>>>>>>>        Integer i
89512>>>>>>>        String sID sUrl
89512>>>>>>>        
89512>>>>>>>        Move (MemCopy(AddressOf(Hdr),lParam,SizeOfType(tWinNmHdr))) to i
89513>>>>>>>        If (Hdr.code=NM_CLICK or Hdr.code=NM_RETURN) Begin
89515>>>>>>>            If (Hdr.code=NM_CLICK) Begin
89517>>>>>>>                // if click, the LItem data is passed to us
89517>>>>>>>                Move (MemCopy(AddressOf(nmLink),lParam,SizeOfType(tWinNmLink))) to i
89518>>>>>>>                Move nmLink.item to LItem
89519>>>>>>>            End
89519>>>>>>>>
89519>>>>>>>            Else Begin
89520>>>>>>>                // do nothing is we pass Enters through
89520>>>>>>>                Get pbEnterPassThrough to bPass
89521>>>>>>>                If bPass Begin
89523>>>>>>>                    Procedure_Return
89524>>>>>>>                End
89524>>>>>>>>
89524>>>>>>>                // If Enter, we need to see which item has the focus.
89524>>>>>>>                Get GetCurrentItem (&LItem) to bOK
89525>>>>>>>                If not bOk Begin
89527>>>>>>>                    Procedure_Return
89528>>>>>>>                End
89528>>>>>>>>
89528>>>>>>>            End
89528>>>>>>>>
89528>>>>>>>            
89528>>>>>>>            Get GetLItemIDtoString LItem to sID
89529>>>>>>>            Get GetLItemURLtoString LItem to sUrl
89530>>>>>>>            Send OnClick LItem.iLink sID sUrl
89531>>>>>>>            
89531>>>>>>>        End
89531>>>>>>>>
89531>>>>>>>        
89531>>>>>>>    End_Procedure
89532>>>>>>>    
89532>>>>>>>    // get the ideal GUI height based on current GUI width and size of text
89532>>>>>>>    Function IdealGUIHeight Returns Integer
89534>>>>>>>        Integer iSize iGuiHeight 
89534>>>>>>>        Handle hWnd
89534>>>>>>>        tWinSize Size1
89534>>>>>>>        tWinSize Size1
89534>>>>>>>        
89534>>>>>>>        Get Window_Handle to hWnd
89535>>>>>>>        If (hWnd=0) Begin
89537>>>>>>>            Error DFERR_PROGRAM "LM_GETIDEALSIZE has been called before the windows control is paged"
89538>>>>>>>>
89538>>>>>>>            Procedure_Return
89539>>>>>>>        End
89539>>>>>>>>
89539>>>>>>>        
89539>>>>>>>        Get GuiSize to iSize
89540>>>>>>>        Get Windows_Message LM_GETIDEALSIZE (low(iSize)) (AddressOf(Size1)) to iGuiHeight
89541>>>>>>>        Function_Return iGuiHeight
89542>>>>>>>    End_Function
89543>>>>>>>    
89543>>>>>>>    // set the controls height to make it fit
89543>>>>>>>    Procedure AutoSizeHeight
89545>>>>>>>        Integer iSize iHeight
89545>>>>>>>        Get Size to iSize
89546>>>>>>>        Get IdealGUIHeight to iHeight
89547>>>>>>>        Get GuiToDialog iHeight 0 to iHeight
89548>>>>>>>        Set Size to (hi(iHeight)) (Low(iSize))
89549>>>>>>>    End_Procedure
89550>>>>>>>    
89550>>>>>>>    // get item by item number. Returns the item data byref in a tWinLItem struct and
89550>>>>>>>    // returns true if the item existed. Note that the string data returns in Unicode.
89550>>>>>>>    Function GetItem Integer iItem tWinLItem ByRef LItem Returns Boolean
89552>>>>>>>        Integer iRet 
89552>>>>>>>        Move iItem to Litem.iLink 
89553>>>>>>>        Move (LIS_ENABLED ior LIS_FOCUSED ior LIS_VISITED ior LIS_HOTTRACK ior LIS_DEFAULTCOLORS) to Litem.stateMask
89554>>>>>>>        Move (LIF_ITEMID ior LIF_ITEMINDEX ior LIF_STATE ior LIF_URL) to Litem.Mask
89555>>>>>>>        Get Windows_Message LM_GETITEM 0 (AddressOf(Litem)) to iRet
89556>>>>>>>        Function_Return (iRet<>0)
89557>>>>>>>    End_Function
89558>>>>>>>    
89558>>>>>>>    // get the item current, the item that has the windows focus.
89558>>>>>>>    // Returns the item data ByRef in a tWinLItem Struct and
89558>>>>>>>    // returns true if a current focus item exists. If the object does not have the
89558>>>>>>>    // focus there is no current item.
89558>>>>>>>    Function GetCurrentItem tWinLItem ByRef LItem Returns Boolean
89560>>>>>>>        Integer iRet i
89560>>>>>>>        Boolean bOk
89560>>>>>>>        Repeat
89560>>>>>>>>
89560>>>>>>>            Get GetItem i (&LItem) to bOk
89561>>>>>>>            If (bOk and (LItem.state iand LIS_FOCUSED)) Begin
89563>>>>>>>                Function_Return True
89564>>>>>>>            End
89564>>>>>>>>
89564>>>>>>>            Increment i
89565>>>>>>>        Until (not(bOk))
89567>>>>>>>        Function_Return False
89568>>>>>>>    
89568>>>>>>>    End_Function
89569>>>>>>>    
89569>>>>>>>    // pass utf16 in pointer and return an OEM string
89569>>>>>>>    Function UniCodeToString Address pWideBuf Integer iWideLen Returns String
89571>>>>>>>        String sID
89571>>>>>>>        Address pOEMBuf
89571>>>>>>>        Integer iOk
89571>>>>>>>            
89571>>>>>>>        Move (Utf16ToOemBuffer(pWideBuf,iWideLen)) to pOEMBuf
89572>>>>>>>        Move (Repeat(Character(0),iWideLen)) to sID
89573>>>>>>>        Move (MemCopy(AddressOf(sID),pOEMBuf,iWideLen)) to iOk
89574>>>>>>>        Move (Free(pOEMBuf)) to iOk
89575>>>>>>>
89575>>>>>>>        Function_Return (CString(sID))
89576>>>>>>>    End_Function
89577>>>>>>>    
89577>>>>>>>    // convert unicode ID string in tWinLItem to an OEM string
89577>>>>>>>    Function GetLItemIDtoString tWinLItem LItem Returns String
89579>>>>>>>        Address pWideBuf
89579>>>>>>>        String sID
89579>>>>>>>            
89579>>>>>>>        Move (AddressOf(LItem.szID)) to pWideBuf
89580>>>>>>>        Get UniCodeToString pWideBuf MAX_LINKID_TEXT to sID
89581>>>>>>>        Function_Return sID
89582>>>>>>>    End_Function    
89583>>>>>>>    
89583>>>>>>>    // convert unicode URL string in tWinLItem to an OEM string
89583>>>>>>>    Function GetLItemURLtoString tWinLItem LItem Returns String
89585>>>>>>>        Address pWideBuf
89585>>>>>>>        String sID
89585>>>>>>>            
89585>>>>>>>        Move (AddressOf(LItem.szUrl)) to pWideBuf
89586>>>>>>>        Get UniCodeToString pWideBuf L_MAX_URL_LENGTH to sID
89587>>>>>>>        Function_Return sID
89588>>>>>>>    End_Function    
89589>>>>>>>    
89589>>>>>>>    
89589>>>>>>>    // augmented to switch to next item and then switch to next object
89589>>>>>>>    Procedure Next
89591>>>>>>>        tWinLItem LItem
89591>>>>>>>        tWinLItem LItem
89591>>>>>>>        Boolean bOK
89591>>>>>>>        Get GetCurrentItem (&LItem) to Bok 
89592>>>>>>>        If bOK Begin
89594>>>>>>>            // if next item exists, let windows handle this.
89594>>>>>>>            Get GetItem (LItem.iLink+1) (&LItem) to bOK
89595>>>>>>>            If bOK Begin
89597>>>>>>>                Set Windows_Override_State to False   
89598>>>>>>>                Procedure_Return
89599>>>>>>>            End
89599>>>>>>>>
89599>>>>>>>        End
89599>>>>>>>>
89599>>>>>>>        Forward Send Next
89601>>>>>>>    End_Procedure
89602>>>>>>>
89602>>>>>>>    // augmented to switch to the previuous item and then switch to previous object
89602>>>>>>>    Procedure Previous
89604>>>>>>>        tWinLItem LItem
89604>>>>>>>        tWinLItem LItem
89604>>>>>>>        Boolean bOK
89604>>>>>>>        Get GetCurrentItem (&LItem) to Bok 
89605>>>>>>>        // if prior item exists, let windows handle this.
89605>>>>>>>        If (bOK and LItem.iLink>0) Begin
89607>>>>>>>            Set Windows_Override_State to False   
89608>>>>>>>            Procedure_Return
89609>>>>>>>        End
89609>>>>>>>>
89609>>>>>>>        Forward Send Previous
89611>>>>>>>    End_Procedure
89612>>>>>>>
89612>>>>>>>    // augmented to determine if an Enter should be handled here or passed to
89612>>>>>>>    // the container.
89612>>>>>>>    Procedure Default_action
89614>>>>>>>        Boolean bPass
89614>>>>>>>        Get pbEnterPassThrough to bPass
89615>>>>>>>        If bPass Begin
89617>>>>>>>            Forward Send Default_action
89619>>>>>>>        End
89619>>>>>>>>
89619>>>>>>>        Else Begin
89620>>>>>>>            Set Windows_Override_State to False
89621>>>>>>>        End
89621>>>>>>>>
89621>>>>>>>    End_Procedure
89622>>>>>>>
89622>>>>>>>    // augmented to only page if the control is supported and to
89622>>>>>>>    // autosize as needed
89622>>>>>>>    Procedure Page Integer iPageObject
89624>>>>>>>        Boolean bAutoSize bSupported
89624>>>>>>>        Integer iSize iHeight
89624>>>>>>>
89624>>>>>>>        Get IsControlSupported to bSupported
89625>>>>>>>        If not bSupported Begin
89627>>>>>>>            Procedure_Return
89628>>>>>>>        End
89628>>>>>>>>
89628>>>>>>>        
89628>>>>>>>        Forward Send Page iPageObject
89630>>>>>>>        
89630>>>>>>>        If (iPageObject=1) Begin
89632>>>>>>>            Send Shadow_Display // synch enabled_state
89633>>>>>>>            Get pbAutoSizeHeight to bAutoSize
89634>>>>>>>            If bAutoSize Begin
89636>>>>>>>                Send AutoSizeHeight
89637>>>>>>>            End
89637>>>>>>>>
89637>>>>>>>        End
89637>>>>>>>>
89637>>>>>>>    End_Procedure
89638>>>>>>>
89638>>>>>>>    // augmented to handle tooltips
89638>>>>>>>    Procedure Page_Object Integer iState
89640>>>>>>>        Handle hWnd
89640>>>>>>>        Get Window_Handle to hWnd
89641>>>>>>>        Forward Send Page_Object iState
89643>>>>>>>     
89643>>>>>>>        // Handle tooltip support....
89643>>>>>>>        If (iState = 0) Begin
89645>>>>>>>            Send RequestDeleteToolTip
89646>>>>>>>        End 
89646>>>>>>>>
89646>>>>>>>        Else Begin
89647>>>>>>>            Send RequestAddToolTip
89648>>>>>>>        End
89648>>>>>>>>
89648>>>>>>>
89648>>>>>>>    End_Procedure
89649>>>>>>>
89649>>>>>>>    // Called by Page_Object. Handles tooltip creation. We use a dedicated
89649>>>>>>>    // method to perform AddToolTip because it is often the case that Page_Object
89649>>>>>>>    // is implemented in a mixin class.
89649>>>>>>>    Procedure RequestAddToolTip
89651>>>>>>>        Send AddToolTip
89652>>>>>>>    End_Procedure  // RequestAddToolTip
89653>>>>>>>
89653>>>>>>>
89653>>>>>>>    // Called by Page_Object. Handles tooltip removal. 
89653>>>>>>>    Procedure RequestDeleteToolTip
89655>>>>>>>        Send DeleteToolTip
89656>>>>>>>    End_Procedure // RequestDeleteToolTip
89657>>>>>>>
89657>>>>>>>    // augmented to autosize as needed. 
89657>>>>>>>    Procedure Set Value Integer iItem String sValue
89659>>>>>>>        Boolean bAutoSize
89659>>>>>>>        Forward Set Value to sValue
89661>>>>>>>        // only autosize if paged and we allow autosizing
89661>>>>>>>        If (Window_Handle(Self)) Begin
89663>>>>>>>            Get pbAutoSizeHeight to bAutoSize
89664>>>>>>>            If bAutoSize Begin
89666>>>>>>>                Send AutoSizeHeight
89667>>>>>>>            End
89667>>>>>>>>
89667>>>>>>>        End
89667>>>>>>>>
89667>>>>>>>    End_Procedure
89668>>>>>>>        
89668>>>>>>>    // default OnClick behavior shells and executes the URL if one exists. If Id is used
89668>>>>>>>    // or you wish other things with your url you must augment this.    
89668>>>>>>>    Procedure OnClick Integer iItem String sID String sUrl
89670>>>>>>>
89670>>>>>>>        If (sUrl<>"") Begin
89672>>>>>>>            Runprogram Shell Background sUrl
89673>>>>>>>        End
89673>>>>>>>>
89673>>>>>>>         
89673>>>>>>>    End_Procedure
89674>>>>>>>    
89674>>>>>>>    // sent if this is run on a pre-XP system. This could be augmented to raise
89674>>>>>>>    // an error, warning or whatever.
89674>>>>>>>    Procedure OnControlNotSupported
89676>>>>>>>    End_Procedure
89677>>>>>>>
89677>>>>>>>
89677>>>>>>>    Procedure Enable_Window Integer iState
89679>>>>>>>      Integer hWnd
89679>>>>>>>      Get Window_Handle to hWnd
89680>>>>>>>      If hWnd Begin
89682>>>>>>>         // note that disabling the control makes no visual change but it does make it
89682>>>>>>>         // impossible to select the item
89682>>>>>>>         Move (EnableWindow(hWnd,iState)) to hWnd
89683>>>>>>>      End
89683>>>>>>>>
89683>>>>>>>    End_Procedure
89684>>>>>>>
89684>>>>>>>    // must override because container class does nothing here. 
89684>>>>>>>    Procedure Shadow_Display
89686>>>>>>>      Send Enable_Window (not(Object_Shadow_State(Self)))
89687>>>>>>>    End_Procedure
89688>>>>>>>    
89688>>>>>>>End_Class
89689>>>>>
89689>>>>>Class cVDFD_CE_LinkLabel is a cLinkLabel
89690>>>>>    
89690>>>>>    Procedure Construct_Object
89692>>>>>        Forward Send Construct_Object
89694>>>>>
89694>>>>>    End_Procedure
89695>>>>>
89695>>>>>    Procedure End_Construct_Object
89697>>>>>        Forward Send End_Construct_Object
89699>>>>>
89699>>>>>    End_Procedure
89700>>>>>
89700>>>>>End_Class
89701>>>Use Base\cVDFD_CE_MapiHandler.pkg
Including file: Base\cVDFD_CE_MapiHandler.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_MapiHandler.pkg)
89701>>>>>Use cMapiHandler.pkg
Including file: cMapiHandler.Pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cMapiHandler.Pkg)
89701>>>>>>>Use LanguageText.pkg
89701>>>>>>>Use cReceiversArray.Pkg
Including file: cReceiversArray.Pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cReceiversArray.Pkg)
89701>>>>>>>>>//****************************************************************************
89701>>>>>>>>>// $Module type: CLASS
89701>>>>>>>>>// $Module name: cReceiversArray
89701>>>>>>>>>// $Author     : Vincent Oorsprong
89701>>>>>>>>>// Created     : 05/31/99 @ 10:44
89701>>>>>>>>>//
89701>>>>>>>>>// Description
89701>>>>>>>>>//    This class does make space for the storage of receivers
89701>>>>>>>>>//
89701>>>>>>>>>// $Rev History
89701>>>>>>>>>//    05/31/99 VO Module header created
89701>>>>>>>>>//****************************************************************************
89701>>>>>>>>>Use VDFBase.pkg
89701>>>>>>>>>
89701>>>>>>>>>Class cReceiversArray Is An Array
89702>>>>>>>>>    //****************************************************************************
89702>>>>>>>>>    // $Module type: PROCEDURE
89702>>>>>>>>>    // $Module name: DoAddReceiver
89702>>>>>>>>>    // $Author     : Vincent Oorsprong
89702>>>>>>>>>    // Created     : 05/31/99 @ 10:45
89702>>>>>>>>>    //
89702>>>>>>>>>    // Description
89702>>>>>>>>>    //    This method will add a receiver id + VO and receiver type to the list
89702>>>>>>>>>    //
89702>>>>>>>>>    // $Rev History
89702>>>>>>>>>    //    05/31/99 VO Module header created
89702>>>>>>>>>    //****************************************************************************
89702>>>>>>>>>    Procedure DoAddReceiver Integer iRecipClass String sName String sAddress String sEntryID Integer iLength
89704>>>>>>>>>        Integer iItems bOk
89704>>>>>>>>>        Pointer pEntryId
89704>>>>>>>>>
89704>>>>>>>>>        If (iLength > 0) Begin
89706>>>>>>>>>            Move (Alloc (iLength)) To pEntryId
89707>>>>>>>>>            If (pEntryId <> 0) Begin
89709>>>>>>>>>                Move (MemCopy (pEntryId, AddressOf (sEntryId), iLength)) To bOk
89710>>>>>>>>>            End
89710>>>>>>>>>>
89710>>>>>>>>>        End
89710>>>>>>>>>>
89710>>>>>>>>>
89710>>>>>>>>>        Get Item_Count To iItems
89711>>>>>>>>>        Set Array_Value Item iItems To iRecipClass
89712>>>>>>>>>        Set Array_Value Item (iItems + 1) To sName
89713>>>>>>>>>        Set Array_Value Item (iItems + 2) To sAddress
89714>>>>>>>>>        Set Array_Value Item (iItems + 3) To pEntryID
89715>>>>>>>>>        Set Array_Value Item (iItems + 4) To iLength
89716>>>>>>>>>    End_Procedure // DoAddReceiver
89717>>>>>>>>>
89717>>>>>>>>>    //****************************************************************************
89717>>>>>>>>>    // $Module type: PROCEDURE
89717>>>>>>>>>    // $Module name: DoDeleteHeapEntryIds
89717>>>>>>>>>    // $Author     : VO
89717>>>>>>>>>    // Created     : 04/24/00 @ 8:41
89717>>>>>>>>>    //
89717>>>>>>>>>    // Description
89717>>>>>>>>>    //    This method will delete the heapmemory entries
89717>>>>>>>>>    //
89717>>>>>>>>>    // $Rev History
89717>>>>>>>>>    //    04/24/00 VO Module header created
89717>>>>>>>>>    //****************************************************************************
89717>>>>>>>>>    Procedure DoDeleteHeapEntryIds
89719>>>>>>>>>        Integer iItem iItems bOk
89719>>>>>>>>>        Pointer pEntryId
89719>>>>>>>>>
89719>>>>>>>>>        Get Item_Count To iItems
89720>>>>>>>>>        Decrement iItems
89721>>>>>>>>>        For iItem From 0 To iItems
89727>>>>>>>>>>
89727>>>>>>>>>            Get Value Item (iItem + 3) To pEntryId
89728>>>>>>>>>            If (pEntryId <> 0) Begin
89730>>>>>>>>>                Move (Free (pEntryId)) To bOk
89731>>>>>>>>>                Set Array_Value Item (iItem + 3) To 0
89732>>>>>>>>>            End
89732>>>>>>>>>>
89732>>>>>>>>>            Move (iItem + 4) To iItem
89733>>>>>>>>>        Loop
89734>>>>>>>>>>
89734>>>>>>>>>    End_Procedure // DoDeleteHeapEntryIds
89735>>>>>>>>>
89735>>>>>>>>>    //****************************************************************************
89735>>>>>>>>>    // $Module type: PROCEDURE
89735>>>>>>>>>    // $Module name: Delete_Data
89735>>>>>>>>>    // $Author     : VO
89735>>>>>>>>>    // Created     : 04/24/00 @ 8:40
89735>>>>>>>>>    //
89735>>>>>>>>>    // Description
89735>>>>>>>>>    //    Before forwarding loop thru the heapmem pointers and free them
89735>>>>>>>>>    //
89735>>>>>>>>>    // $Rev History
89735>>>>>>>>>    //    04/24/00 VO Module header created
89735>>>>>>>>>    //****************************************************************************
89735>>>>>>>>>    Procedure Delete_Data
89737>>>>>>>>>        Send DoDeleteHeapEntryIds
89738>>>>>>>>>
89738>>>>>>>>>        Forward Send Delete_Data
89740>>>>>>>>>    End_Procedure // Delete_Data
89741>>>>>>>>>
89741>>>>>>>>>    //****************************************************************************
89741>>>>>>>>>    // $Module type: PROCEDURE
89741>>>>>>>>>    // $Module name: Destroy_Object
89741>>>>>>>>>    // $Author     : VO
89741>>>>>>>>>    // Created     : 04/25/00 @ 10:47
89741>>>>>>>>>    //
89741>>>>>>>>>    // Description
89741>>>>>>>>>    //    When the object gets destroyed free the heap memory allocated
89741>>>>>>>>>    //
89741>>>>>>>>>    // $Rev History
89741>>>>>>>>>    //    04/25/00 VO Module header created
89741>>>>>>>>>    //****************************************************************************
89741>>>>>>>>>    Procedure Destroy_Object
89743>>>>>>>>>        Send DoDeleteHeapEntryIds
89744>>>>>>>>>
89744>>>>>>>>>        Forward Send Destroy_Object
89746>>>>>>>>>    End_Procedure // Destroy_Object
89747>>>>>>>>>
89747>>>>>>>>>    //****************************************************************************
89747>>>>>>>>>    // $Module type: FUNCTION
89747>>>>>>>>>    // $Module name: ReceiverCount
89747>>>>>>>>>    // $Author     : Vincent Oorsprong
89747>>>>>>>>>    // Created     : 05/31/99 @ 11:02
89747>>>>>>>>>    //
89747>>>>>>>>>    // Description
89747>>>>>>>>>    //    This function returns the number of receivers in this array
89747>>>>>>>>>    //
89747>>>>>>>>>    // $Rev History
89747>>>>>>>>>    //    05/31/99 VO Module header created
89747>>>>>>>>>    //****************************************************************************
89747>>>>>>>>>    Function ReceiverCount Returns Integer
89749>>>>>>>>>        Integer iItems
89749>>>>>>>>>
89749>>>>>>>>>        Get Item_Count To iItems
89750>>>>>>>>>        Move (iItems / 5) To iItems
89751>>>>>>>>>
89751>>>>>>>>>        Function_Return iItems
89752>>>>>>>>>    End_Function // ReceiverCount
89753>>>>>>>>>
89753>>>>>>>>>    //****************************************************************************
89753>>>>>>>>>    // $Module type: FUNCTION
89753>>>>>>>>>    // $Module name: ReceiverType
89753>>>>>>>>>    // $Author     : Vincent Oorsprong
89753>>>>>>>>>    // Created     : 05/31/99 @ 11:12
89753>>>>>>>>>    //
89753>>>>>>>>>    // Description
89753>>>>>>>>>    //    This function returns the N-th stored receiver type
89753>>>>>>>>>    //
89753>>>>>>>>>    // $Rev History
89753>>>>>>>>>    //    05/31/99 VO Module header created
89753>>>>>>>>>    //****************************************************************************
89753>>>>>>>>>    Function ReceiverType Integer iReceiver Returns Integer
89755>>>>>>>>>        Integer iReceiverType
89755>>>>>>>>>
89755>>>>>>>>>        Get Value Item (iReceiver - 1 * 5) To iReceiverType
89756>>>>>>>>>
89756>>>>>>>>>        Function_Return iReceiverType
89757>>>>>>>>>    End_Function // ReceiverType
89758>>>>>>>>>
89758>>>>>>>>>    //****************************************************************************
89758>>>>>>>>>    // $Module type: FUNCTION
89758>>>>>>>>>    // $Module name: ReceiverName
89758>>>>>>>>>    // $Author     : Vincent Oorsprong
89758>>>>>>>>>    // Created     : 05/31/99 @ 11:13
89758>>>>>>>>>    //
89758>>>>>>>>>    // Description
89758>>>>>>>>>    //    This function returns the N-th stored receiver name
89758>>>>>>>>>    //
89758>>>>>>>>>    // $Rev History
89758>>>>>>>>>    //    05/31/99 VO Module header created
89758>>>>>>>>>    //****************************************************************************
89758>>>>>>>>>    Function ReceiverName Integer iReceiver Returns String
89760>>>>>>>>>        String sReceiverName
89760>>>>>>>>>
89760>>>>>>>>>        Get Value Item (iReceiver - 1 * 5 + 1) To sReceiverName
89761>>>>>>>>>
89761>>>>>>>>>        Function_Return sReceiverName
89762>>>>>>>>>    End_Function // ReceiverName
89763>>>>>>>>>
89763>>>>>>>>>    //****************************************************************************
89763>>>>>>>>>    // $Module type: FUNCTION
89763>>>>>>>>>    // $Module name: ReceiverAddress
89763>>>>>>>>>    // $Author     : Vincent Oorsprong
89763>>>>>>>>>    // Created     : 05/31/99 @ 11:13
89763>>>>>>>>>    //
89763>>>>>>>>>    // Description
89763>>>>>>>>>    //    This function returns the N-th stored receiver name
89763>>>>>>>>>    //
89763>>>>>>>>>    // $Rev History
89763>>>>>>>>>    //    05/31/99 VO Module header created
89763>>>>>>>>>    //****************************************************************************
89763>>>>>>>>>    Function ReceiverAddress Integer iReceiver Returns String
89765>>>>>>>>>        String sReceiverAddress
89765>>>>>>>>>
89765>>>>>>>>>        Get Value Item (iReceiver - 1 * 5 + 2) To sReceiverAddress
89766>>>>>>>>>
89766>>>>>>>>>        Function_Return sReceiverAddress
89767>>>>>>>>>    End_Function // ReceiverAddress
89768>>>>>>>>>
89768>>>>>>>>>    //****************************************************************************
89768>>>>>>>>>    // $Module type: FUNCTION
89768>>>>>>>>>    // $Module name: ReceiverEntryId
89768>>>>>>>>>    // $Author     : VO
89768>>>>>>>>>    // Created     : 04/24/00 @ 1:55
89768>>>>>>>>>    //
89768>>>>>>>>>    // Description
89768>>>>>>>>>    //    This function returns the N-th stored receiver entry-id
89768>>>>>>>>>    //
89768>>>>>>>>>    // $Rev History
89768>>>>>>>>>    //    04/24/00 VO Module header created
89768>>>>>>>>>    //****************************************************************************
89768>>>>>>>>>    Function ReceiverEntryId Integer iReceiver Returns String
89770>>>>>>>>>        String sEntryId
89770>>>>>>>>>        Pointer pEntryId
89770>>>>>>>>>        Integer bOk iSize
89770>>>>>>>>>
89770>>>>>>>>>        Get Value Item (iReceiver - 1 * 5 + 3) To pEntryId
89771>>>>>>>>>        If (pEntryId <> 0) Begin
89773>>>>>>>>>            Get ReceiverLength iReceiver To iSize
89774>>>>>>>>>            If (iSize > 0) Begin
89776>>>>>>>>>                ZeroString iSize To sEntryId
89777>>>>>>>>>                Move (MemCopy (AddressOf (sEntryId), pEntryId, iSize)) To bOk
89778>>>>>>>>>            End
89778>>>>>>>>>>
89778>>>>>>>>>        End
89778>>>>>>>>>>
89778>>>>>>>>>
89778>>>>>>>>>        Function_Return sEntryId
89779>>>>>>>>>    End_Function // ReceiverEntryId
89780>>>>>>>>>
89780>>>>>>>>>    //****************************************************************************
89780>>>>>>>>>    // $Module type: FUNCTION
89780>>>>>>>>>    // $Module name: ReceiverLength
89780>>>>>>>>>    // $Author     : VO
89780>>>>>>>>>    // Created     : 04/24/00 @ 1:56
89780>>>>>>>>>    //
89780>>>>>>>>>    // Description
89780>>>>>>>>>    //    This function returns the length of the N-th stored receiver entry-id
89780>>>>>>>>>    //
89780>>>>>>>>>    // $Rev History
89780>>>>>>>>>    //    04/24/00 VO Module header created
89780>>>>>>>>>    //****************************************************************************
89780>>>>>>>>>    Function ReceiverLength Integer iReceiver Returns Integer
89782>>>>>>>>>        Integer iLength
89782>>>>>>>>>
89782>>>>>>>>>        Get Value Item (iReceiver - 1 * 5 + 4) To iLength
89783>>>>>>>>>
89783>>>>>>>>>        Function_Return iLength
89784>>>>>>>>>    End_Function // ReceiverLength
89785>>>>>>>>>End_Class // cReceiversArray
89786>>>>>>>Use cAttachmentsArray.Pkg
Including file: cAttachmentsArray.Pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cAttachmentsArray.Pkg)
89786>>>>>>>>>//****************************************************************************
89786>>>>>>>>>// $Module type: CLASS
89786>>>>>>>>>// $Module name: cAttachmentsArray
89786>>>>>>>>>// $Author     : Vincent Oorsprong
89786>>>>>>>>>// Created     : 05/30/99 @ 3:22
89786>>>>>>>>>//
89786>>>>>>>>>// Description
89786>>>>>>>>>//    lpszPathName
89786>>>>>>>>>//       Pointer to the fully qualified path of the attached file. This path
89786>>>>>>>>>//       should include the disk drive letter and directory name.
89786>>>>>>>>>//    lpszFileName
89786>>>>>>>>>//       Pointer to the attachment filename seen by the recipient, which may
89786>>>>>>>>>//       differ from the filename in the lpszPathName member if temporary
89786>>>>>>>>>//       files are being used. If the lpszFileName member is empty or NULL,
89786>>>>>>>>>//       the filename from lpszPathName is used.
89786>>>>>>>>>//
89786>>>>>>>>>// $Rev History
89786>>>>>>>>>//    05/30/99hoMapiSessionModule header created
89786>>>>>>>>>//****************************************************************************
89786>>>>>>>>>use VDFBase.pkg
89786>>>>>>>>>
89786>>>>>>>>>Class cAttachmentsArray Is An Array
89787>>>>>>>>>   //****************************************************************************
89787>>>>>>>>>   // $Module type: PROCEDURE
89787>>>>>>>>>   // $Module name: DoAddAttachment
89787>>>>>>>>>   // $Author     : Vincent Oorsprong
89787>>>>>>>>>   // Created     : 05/30/99 @ 2:58
89787>>>>>>>>>   //
89787>>>>>>>>>   // Description
89787>>>>>>>>>   //    This method can be used to add an attachment to the list. Each time two
89787>>>>>>>>>   //    items will be created
89787>>>>>>>>>   //
89787>>>>>>>>>   // $Rev History
89787>>>>>>>>>   //    05/30/99hoMapiSessionModule header created
89787>>>>>>>>>   //****************************************************************************
89787>>>>>>>>>
89787>>>>>>>>>   Procedure DoAddAttachment String sPathName String sFileName
89789>>>>>>>>>      Integer iItems
89789>>>>>>>>>
89789>>>>>>>>>      Get Item_Count To iItems
89790>>>>>>>>>      Set Array_Value Item iItems To sPathName
89791>>>>>>>>>      Set Array_Value Item (iItems + 1) To sFileName
89792>>>>>>>>>   End_Procedure // DoAddAttachment
89793>>>>>>>>>
89793>>>>>>>>>   //****************************************************************************
89793>>>>>>>>>   // $Module type: PROCEDURE
89793>>>>>>>>>   // $Module name: DoDeleteAttachment
89793>>>>>>>>>   // $Author     : VO
89793>>>>>>>>>   // Created     : 04/24/00 @ 2:01
89793>>>>>>>>>   //
89793>>>>>>>>>   // Description
89793>>>>>>>>>   //    This method will delete the N-th attachment from the array
89793>>>>>>>>>   //
89793>>>>>>>>>   // $Rev History
89793>>>>>>>>>   //    04/24/00 VO Module header created
89793>>>>>>>>>   //****************************************************************************
89793>>>>>>>>>
89793>>>>>>>>>   Procedure DoDeleteAttachment Integer iAttachment
89795>>>>>>>>>      Integer iItem iCount
89795>>>>>>>>>
89795>>>>>>>>>      Move ((iAttachment - 1) * 2) To iItem
89796>>>>>>>>>      For iCount From 1 To 2
89802>>>>>>>>>>
89802>>>>>>>>>         Send Delete_Item iItem
89803>>>>>>>>>      Loop
89804>>>>>>>>>>
89804>>>>>>>>>   End_Procedure // DoDeleteAttachment
89805>>>>>>>>>
89805>>>>>>>>>   //****************************************************************************
89805>>>>>>>>>   // $Module type: PROCEDURE
89805>>>>>>>>>   // $Module name: DoDuplicateAttachment
89805>>>>>>>>>   // $Author     : VO
89805>>>>>>>>>   // Created     : 04/24/00 @ 2:07
89805>>>>>>>>>   //
89805>>>>>>>>>   // Description
89805>>>>>>>>>   //    This method will duplicate the N-th attachment
89805>>>>>>>>>   //
89805>>>>>>>>>   // $Rev History
89805>>>>>>>>>   //    04/24/00 VO Module header created
89805>>>>>>>>>   //****************************************************************************
89805>>>>>>>>>
89805>>>>>>>>>   Procedure DoDuplicateAttachment Integer iAttachment
89807>>>>>>>>>      String sFile sPath
89807>>>>>>>>>
89807>>>>>>>>>      Get AttachmentPathName iAttachment To sPath
89808>>>>>>>>>      Get AttachmentFileName iAttachment To sFile
89809>>>>>>>>>
89809>>>>>>>>>      Send DoAddAttachment sPath sFile
89810>>>>>>>>>   End_Procedure // DoDuplicateAttachment
89811>>>>>>>>>
89811>>>>>>>>>   //****************************************************************************
89811>>>>>>>>>   // $Module type: FUNCTION
89811>>>>>>>>>   // $Module name: AttachmentFileName
89811>>>>>>>>>   // $Author     : Vincent Oorsprong
89811>>>>>>>>>   // Created     : 05/30/99 @ 3:36
89811>>>>>>>>>   //
89811>>>>>>>>>   // Description
89811>>>>>>>>>   //    This function returns the N-th attachment filename. The value of N must
89811>>>>>>>>>   ///   be passed via iAttachment
89811>>>>>>>>>   //
89811>>>>>>>>>   // $Rev History
89811>>>>>>>>>   //    05/30/99hoMapiSessionModule header created
89811>>>>>>>>>   //****************************************************************************
89811>>>>>>>>>
89811>>>>>>>>>   Function AttachmentFileName Integer iAttachment Returns String
89813>>>>>>>>>      String sFileName
89813>>>>>>>>>
89813>>>>>>>>>      Get String_Value Item (iAttachment - 1 * 2 + 1) To sFileName
89814>>>>>>>>>
89814>>>>>>>>>      Function_Return sFileName
89815>>>>>>>>>   End_Function // AttachmentFileName
89816>>>>>>>>>
89816>>>>>>>>>   //****************************************************************************
89816>>>>>>>>>   // $Module type: FUNCTION
89816>>>>>>>>>   // $Module name: AttachmentPathName
89816>>>>>>>>>   // $Author     : Vincent Oorsprong
89816>>>>>>>>>   // Created     : 05/30/99 @ 3:36
89816>>>>>>>>>   //
89816>>>>>>>>>   // Description
89816>>>>>>>>>   //    This function returns the N-th attachment filename. The value of N must
89816>>>>>>>>>   ///   be passed via iAttachment
89816>>>>>>>>>   //
89816>>>>>>>>>   // $Rev History
89816>>>>>>>>>   //    05/30/99hoMapiSessionModule header created
89816>>>>>>>>>   //****************************************************************************
89816>>>>>>>>>
89816>>>>>>>>>   Function AttachmentPathName Integer iAttachment Returns String
89818>>>>>>>>>      String sPathName
89818>>>>>>>>>
89818>>>>>>>>>      Get String_Value Item (iAttachment - 1 * 2) To sPathName
89819>>>>>>>>>
89819>>>>>>>>>      Function_Return sPathName
89820>>>>>>>>>   End_Function // AttachmentPathName
89821>>>>>>>>>
89821>>>>>>>>>   //****************************************************************************
89821>>>>>>>>>   // $Module type: FUNCTION
89821>>>>>>>>>   // $Module name: AttachmentCount
89821>>>>>>>>>   // $Author     : Vincent Oorsprong
89821>>>>>>>>>   // Created     : 05/31/99 @ 5:59
89821>>>>>>>>>   //
89821>>>>>>>>>   // Description
89821>>>>>>>>>   //    This function returns the number of attachments in the array by dividing
89821>>>>>>>>>   //    the number of items by 2
89821>>>>>>>>>   //
89821>>>>>>>>>   // $Rev History
89821>>>>>>>>>   //    05/31/99hoMapiSessionModule header created
89821>>>>>>>>>   //****************************************************************************
89821>>>>>>>>>
89821>>>>>>>>>   Function AttachmentCount Returns Integer
89823>>>>>>>>>      Integer iItems
89823>>>>>>>>>
89823>>>>>>>>>      Move (Item_Count (Self) / 2) To iItems
89824>>>>>>>>>
89824>>>>>>>>>      Function_Return iItems
89825>>>>>>>>>   End_Function // AttachmentCount
89826>>>>>>>>>End_Class // cAttachmentsArray
89827>>>>>>>Use cRecipientsArray.Pkg
Including file: cRecipientsArray.Pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cRecipientsArray.Pkg)
89827>>>>>>>>>//****************************************************************************
89827>>>>>>>>>// $Module type: CLASS
89827>>>>>>>>>// $Module name: cRecipientsArray
89827>>>>>>>>>// $Author     : Vincent Oorsprong
89827>>>>>>>>>// Created     : 05/30/99 @ 2:58
89827>>>>>>>>>//
89827>>>>>>>>>// Description
89827>>>>>>>>>//    lpszName
89827>>>>>>>>>//       Pointer to the display VO of the message recipient or sender.
89827>>>>>>>>>//    lpszAddress
89827>>>>>>>>>//       Optional pointer to the recipient or sender's address; this address
89827>>>>>>>>>//       is provider-specific message delivery data. Generally, the messaging
89827>>>>>>>>>//       system provides such addresses for inbound messages. For outbound
89827>>>>>>>>>//       messages, the lpszAddress member can point to an address entered by
89827>>>>>>>>>//       the user for a recipient not in an address book (that is, a custom
89827>>>>>>>>>//       recipient).
89827>>>>>>>>>//       The format of an address pointed to by the lpszAddress member is
89827>>>>>>>>>//       [address type][e-mail address]. Examples of valid addresses are
89827>>>>>>>>>//       FAX:206-555-1212 and SMTP:M@X.COM.
89827>>>>>>>>>//
89827>>>>>>>>>// $Rev History
89827>>>>>>>>>//    05/30/99 VO Module header created
89827>>>>>>>>>//****************************************************************************
89827>>>>>>>>>Use VDFBase.pkg
89827>>>>>>>>>
89827>>>>>>>>>Class cRecipientsArray Is An Array
89828>>>>>>>>>    //****************************************************************************
89828>>>>>>>>>    // $Module type: PROCEDURE
89828>>>>>>>>>    // $Module name: DoAddRecipient
89828>>>>>>>>>    // $Author     : Vincent Oorsprong
89828>>>>>>>>>    // Created     : 05/30/99 @ 2:58
89828>>>>>>>>>    //
89828>>>>>>>>>    // Description
89828>>>>>>>>>    //    This method can be used to add an recipient to the list. Each time three
89828>>>>>>>>>    //    items will be created.
89828>>>>>>>>>    //
89828>>>>>>>>>    // $Rev History
89828>>>>>>>>>    //    05/30/99 VO Module header created
89828>>>>>>>>>    //****************************************************************************
89828>>>>>>>>>    Procedure DoAddRecipient String sName String sAddress String sEntryId Integer ulEIDSize
89830>>>>>>>>>        Integer iItems bOk
89830>>>>>>>>>        Pointer pEntryId
89830>>>>>>>>>
89830>>>>>>>>>        If (ulEIDSize > 0) Begin
89832>>>>>>>>>            Move (Alloc (ulEIDSize)) To pEntryId
89833>>>>>>>>>            If (pEntryId <> 0) Begin
89835>>>>>>>>>                Move (MemCopy (pEntryId, AddressOf (sEntryId), ulEIDSize)) To bOk
89836>>>>>>>>>            End
89836>>>>>>>>>>
89836>>>>>>>>>        End
89836>>>>>>>>>>
89836>>>>>>>>>
89836>>>>>>>>>        Get Item_Count To iItems
89837>>>>>>>>>        Set Array_Value Item iItems To sName
89838>>>>>>>>>        Set Array_Value Item (iItems + 1) To sAddress
89839>>>>>>>>>        Set Array_Value Item (iItems + 2) To pEntryId
89840>>>>>>>>>        Set Array_Value Item (iItems + 3) To ulEIDSize
89841>>>>>>>>>    End_Procedure // DoAddRecipient
89842>>>>>>>>>
89842>>>>>>>>>    //****************************************************************************
89842>>>>>>>>>    // $Module type: PROCEDURE
89842>>>>>>>>>    // $Module name: DoDeleteHeapEntryIds
89842>>>>>>>>>    // $Author     : VO
89842>>>>>>>>>    // Created     : 04/24/00 @ 8:41
89842>>>>>>>>>    //
89842>>>>>>>>>    // Description
89842>>>>>>>>>    //    This method will delete the heapmemory entries
89842>>>>>>>>>    //
89842>>>>>>>>>    // $Rev History
89842>>>>>>>>>    //    04/24/00 VO Module header created
89842>>>>>>>>>    //****************************************************************************
89842>>>>>>>>>    Procedure DoDeleteHeapEntryIds
89844>>>>>>>>>        Integer iItem iItems bOk
89844>>>>>>>>>        Pointer pEntryId
89844>>>>>>>>>
89844>>>>>>>>>        Get Item_Count To iItems
89845>>>>>>>>>        Decrement iItems
89846>>>>>>>>>        For iItem From 0 To iItems
89852>>>>>>>>>>
89852>>>>>>>>>            Get Value Item (iItem + 2) To pEntryId
89853>>>>>>>>>            If (pEntryId <> 0) Begin
89855>>>>>>>>>                Move (Free (pEntryId)) To bOk
89856>>>>>>>>>                Set Array_Value Item (iItem + 2) To 0
89857>>>>>>>>>            End
89857>>>>>>>>>>
89857>>>>>>>>>            Move (iItem + 3) To iItem
89858>>>>>>>>>        Loop
89859>>>>>>>>>>
89859>>>>>>>>>    End_Procedure // DoDeleteHeapEntryIds
89860>>>>>>>>>
89860>>>>>>>>>    //****************************************************************************
89860>>>>>>>>>    // $Module type: PROCEDURE
89860>>>>>>>>>    // $Module name: Delete_Data
89860>>>>>>>>>    // $Author     : VO
89860>>>>>>>>>    // Created     : 04/24/00 @ 8:40
89860>>>>>>>>>    //
89860>>>>>>>>>    // Description
89860>>>>>>>>>    //    Before forwarding loop thru the heapmem pointers and free them
89860>>>>>>>>>    //
89860>>>>>>>>>    // $Rev History
89860>>>>>>>>>    //    04/24/00 VO Module header created
89860>>>>>>>>>    //****************************************************************************
89860>>>>>>>>>    Procedure Delete_Data
89862>>>>>>>>>        Send DoDeleteHeapEntryIds
89863>>>>>>>>>
89863>>>>>>>>>        Forward Send Delete_Data
89865>>>>>>>>>    End_Procedure // Delete_Data
89866>>>>>>>>>
89866>>>>>>>>>    //****************************************************************************
89866>>>>>>>>>    // $Module type: PROCEDURE
89866>>>>>>>>>    // $Module name: Destroy_Object
89866>>>>>>>>>    // $Author     : VO
89866>>>>>>>>>    // Created     : 04/25/00 @ 10:47
89866>>>>>>>>>    //
89866>>>>>>>>>    // Description
89866>>>>>>>>>    //    When the object gets destroyed free the heap memory allocated
89866>>>>>>>>>    //
89866>>>>>>>>>    // $Rev History
89866>>>>>>>>>    //    04/25/00 VO Module header created
89866>>>>>>>>>    //****************************************************************************
89866>>>>>>>>>    Procedure Destroy_Object
89868>>>>>>>>>        Send DoDeleteHeapEntryIds
89869>>>>>>>>>
89869>>>>>>>>>        Forward Send Destroy_Object
89871>>>>>>>>>    End_Procedure // Destroy_Object
89872>>>>>>>>>
89872>>>>>>>>>    //****************************************************************************
89872>>>>>>>>>    // $Module type: FUNCTION
89872>>>>>>>>>    // $Module name: RecipientName
89872>>>>>>>>>    // $Author     : Vincent Oorsprong
89872>>>>>>>>>    // Created     : 05/30/99 @ 3:00
89872>>>>>>>>>    //
89872>>>>>>>>>    // Description
89872>>>>>>>>>    //    This function returns the N-th recipient name. The value of N must be
89872>>>>>>>>>    //    passed via iRecipient
89872>>>>>>>>>    //
89872>>>>>>>>>    // $Rev History
89872>>>>>>>>>    //    05/30/99 VO Module header created
89872>>>>>>>>>    //****************************************************************************
89872>>>>>>>>>    Function RecipientName Integer iRecipient Returns String
89874>>>>>>>>>        String sName
89874>>>>>>>>>
89874>>>>>>>>>        Get Value Item (iRecipient - 1 * 4) To sName
89875>>>>>>>>>
89875>>>>>>>>>        Function_Return sName
89876>>>>>>>>>    End_Function // RecipientName
89877>>>>>>>>>
89877>>>>>>>>>    //****************************************************************************
89877>>>>>>>>>    // $Module type: FUNCTION
89877>>>>>>>>>    // $Module name: RecipientAddress
89877>>>>>>>>>    // $Author     : Vincent Oorsprong
89877>>>>>>>>>    // Created     : 05/30/99 @ 3:00
89877>>>>>>>>>    //
89877>>>>>>>>>    // Description
89877>>>>>>>>>    //    This function returns the N-th recipient address. The value of N must be
89877>>>>>>>>>    //    passed via iRecipient
89877>>>>>>>>>    //
89877>>>>>>>>>    // $Rev History
89877>>>>>>>>>    //    05/30/99 VO Module header created
89877>>>>>>>>>    //****************************************************************************
89877>>>>>>>>>    Function RecipientAddress Integer iRecipient Returns String
89879>>>>>>>>>        String sAddress
89879>>>>>>>>>
89879>>>>>>>>>        Get Value Item (iRecipient - 1 * 4 + 1) To sAddress
89880>>>>>>>>>
89880>>>>>>>>>        Function_Return sAddress
89881>>>>>>>>>    End_Function // RecipientAddress
89882>>>>>>>>>
89882>>>>>>>>>    //****************************************************************************
89882>>>>>>>>>    // $Module type: FUNCTION
89882>>>>>>>>>    // $Module name: RecipientEntryId
89882>>>>>>>>>    // $Author     : Vincent Oorsprong
89882>>>>>>>>>    // Created     : 06/01/99 @ 6:07
89882>>>>>>>>>    //
89882>>>>>>>>>    // Description
89882>>>>>>>>>    //    This function returns the N-th stored entry-identifier.
89882>>>>>>>>>    //
89882>>>>>>>>>    // $Rev History
89882>>>>>>>>>    //    06/01/99 VO Module header created
89882>>>>>>>>>    //****************************************************************************
89882>>>>>>>>>    Function RecipientEntryId Integer iRecipient Returns String
89884>>>>>>>>>        String sEntryId
89884>>>>>>>>>        Pointer pEntryId
89884>>>>>>>>>        Integer bOk iSize
89884>>>>>>>>>
89884>>>>>>>>>        Get Value Item (iRecipient - 1 * 4 + 2) To pEntryId
89885>>>>>>>>>        If (pEntryId <> 0) Begin
89887>>>>>>>>>            Get RecipientEntryIdLength iRecipient To iSize
89888>>>>>>>>>
89888>>>>>>>>>            If (iSize > 0) Begin
89890>>>>>>>>>                ZeroString iSize To sEntryId
89891>>>>>>>>>                Move (MemCopy (AddressOf (sEntryId), pEntryId, iSize)) To bOk
89892>>>>>>>>>            End
89892>>>>>>>>>>
89892>>>>>>>>>        End
89892>>>>>>>>>>
89892>>>>>>>>>
89892>>>>>>>>>        Function_Return sEntryId
89893>>>>>>>>>    End_Function // RecipientEntryId
89894>>>>>>>>>
89894>>>>>>>>>    //****************************************************************************
89894>>>>>>>>>    // $Module type: FUNCTION
89894>>>>>>>>>    // $Module name: RecipientEntryIdLength
89894>>>>>>>>>    // $Author     : Vincent Oorsprong
89894>>>>>>>>>    // Created     : 24/04/00 @ 17:00
89894>>>>>>>>>    //
89894>>>>>>>>>    // Description
89894>>>>>>>>>    //    This function returns the length of the N-th stored entry-identifier
89894>>>>>>>>>    //
89894>>>>>>>>>    // $Rev History
89894>>>>>>>>>    //    24/04/00 VO Module header created
89894>>>>>>>>>    //****************************************************************************
89894>>>>>>>>>    Function RecipientEntryIdLength Integer iRecipient Returns String
89896>>>>>>>>>        Integer iLength
89896>>>>>>>>>
89896>>>>>>>>>        Get Value Item (iRecipient - 1 * 4 + 3) To iLength
89897>>>>>>>>>
89897>>>>>>>>>        Function_Return iLength
89898>>>>>>>>>    End_Function // RecipientEntryIdLength
89899>>>>>>>>>End_Class // cRecipientsArray
89900>>>>>>>Use MapiConstants.Pkg
Including file: MapiConstants.Pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\MapiConstants.Pkg)
89900>>>>>>>>>Type MapiSession
89900>>>>>>>>>   Field MapiSession.SessionID As Integer
89900>>>>>>>>>End_type // MapiSession
89900>>>>>>>>>
89900>>>>>>>>>Type MapiMessagePointer
89900>>>>>>>>>   Field MapiMessagePointer.lppMessage As Pointer
89900>>>>>>>>>End_Type // MapiMessagePointer
89900>>>>>>>>>
89900>>>>>>>>>Type MapiRecipPointer
89900>>>>>>>>>   Field MapiRecipPointer.lppRecip As Pointer
89900>>>>>>>>>End_Type // MapiRecipPointer
89900>>>>>>>>>
89900>>>>>>>>>Type MapiNewRecipsPointer
89900>>>>>>>>>   Field MapiNewRecipsPointer.lppNewRecips As Pointer
89900>>>>>>>>>End_Type // MapiNewRecipsPointer
89900>>>>>>>>>
89900>>>>>>>>>Type MapiNewRecipsCounter
89900>>>>>>>>>   Field MapiNewRecipsCounter.lpnNewRecips As Integer
89900>>>>>>>>>End_Type // MapiNewRecipsCounter
89900>>>>>>>>>
89900>>>>>>>>>Type MapiFileDesc
89900>>>>>>>>>   Field MapiFileDesc.ulReserved As Integer      // Reserved for future use (must be 0)
89900>>>>>>>>>   Field MapiFileDesc.flFlags As Integer         // Flags
89900>>>>>>>>>   Field MapiFileDesc.nPosition As Integer       // character in text to be replaced by attachment
89900>>>>>>>>>   Field MapiFileDesc.lpszPathName As Pointer    // Full path name of attachment file
89900>>>>>>>>>   Field MapiFileDesc.lpszFileName As Pointer    // Original file name (optional)
89900>>>>>>>>>   Field MapiFileDesc.lpFileType As Pointer     // Attachment file type (can be lpMapiFileTagExt)
89900>>>>>>>>>End_Type // MapiFileDesc
89900>>>>>>>>>
89900>>>>>>>>>Define MAPI_OLE        For |CI$00000001
89900>>>>>>>>>Define MAPI_OLE_STATIC For |CI$00000002
89900>>>>>>>>>
89900>>>>>>>>>Define MAPI_NOATTACHMENT_POSITION For |CI$FFFFFFFF
89900>>>>>>>>>
89900>>>>>>>>>Type MapiFileTagExt
89900>>>>>>>>>   Field MapiFileTagExt.ulReserved As Integer  // Reserved, must be zero.
89900>>>>>>>>>   Field MapiFileTagExt.cbTag As Integer       // Size (in bytes) of
89900>>>>>>>>>   Field MapiFileTagExt.lpTag As Pointer       // X.400 OID for this attachment type
89900>>>>>>>>>   Field MapiFileTagExt.cbEncoding As Integer  // Size (in bytes) of
89900>>>>>>>>>   Field MapiFileTagExt.lpEncoding As Pointer  // X.400 OID for this attachment's encoding
89900>>>>>>>>>End_Type // MapiFileTagExt
89900>>>>>>>>>
89900>>>>>>>>>Type MapiRecipDesc
89900>>>>>>>>>   Field MapiRecipDesc.ulReserved As Integer   // Reserved for future use
89900>>>>>>>>>   Field MapiRecipDesc.ulRecipClass As Integer // Recipient class
89900>>>>>>>>>                                               // MAPI_TO, MAPI_CC, MAPI_BCC, MAPI_ORIG
89900>>>>>>>>>   Field MapiRecipDesc.lpszName As Pointer     // Recipient name
89900>>>>>>>>>   Field MapiRecipDesc.lpszAddress As Pointer  // Recipient address (optional)
89900>>>>>>>>>   Field MapiRecipDesc.ulEIDSize As Pointer    // Count in bytes of size of pEntryID
89900>>>>>>>>>   Field MapiRecipDesc.lpEntryID As Pointer    // System-specific recipient reference
89900>>>>>>>>>End_Type // MapiRecipDesc
89900>>>>>>>>>
89900>>>>>>>>>Define MAPI_ORIG   For 0 // Recipient is message originator
89900>>>>>>>>>Define MAPI_TO     For 1 // Recipient is a primary recipient
89900>>>>>>>>>Define MAPI_CC     For 2 // Recipient is a copy recipient
89900>>>>>>>>>Define MAPI_BCC    For 3 // Recipient is blind copy recipient
89900>>>>>>>>>
89900>>>>>>>>>Type MapiMessage
89900>>>>>>>>>   Field MapiMessage.ulReserved As Integer                   // Reserved for future use (M.B. 0)
89900>>>>>>>>>   Field MapiMessage.lpszSubject As Pointer                  // Message Subject
89900>>>>>>>>>   Field MapiMessage.lpszNoteText As Pointer                 // Message Text
89900>>>>>>>>>   Field MapiMessage.lpszMessageType As Pointer              // Message Class
89900>>>>>>>>>   Field MapiMessage.lpszDateReceived As Pointer             // in YYYY/MM/DD HH:MM format
89900>>>>>>>>>   Field MapiMessage.lpszConversationID As Pointer           // conversation thread ID
89900>>>>>>>>>   Field MapiMessage.flFlags As Integer                      // unread,return receipt
89900>>>>>>>>>   Field MapiMessage.lpOriginator As Pointer                 // Originator descriptor
89900>>>>>>>>>   Field MapiMessage.nRecipCount As Integer                  // Number of recipients
89900>>>>>>>>>   Field MapiMessage.lpRecips As Pointer                     // Recipient descriptors
89900>>>>>>>>>   Field MapiMessage.nFileCount As Integer                   // # of file attachments
89900>>>>>>>>>   Field MapiMessage.lpFiles As Pointer                      // Attachment descriptors
89900>>>>>>>>>End_Type // MapiMessage
89900>>>>>>>>>
89900>>>>>>>>>Define MAPI_UNREAD            For |CI$00000001
89900>>>>>>>>>Define MAPI_RECEIPT_REQUESTED For |CI$00000002
89900>>>>>>>>>Define MAPI_SENT              For |CI$00000004
89900>>>>>>>>>
89900>>>>>>>>>// MAPILogon() flags.
89900>>>>>>>>>Define MAPI_LOGON_UI         For |CI$00000001 // Display logon UI
89900>>>>>>>>>Define MAPI_PASSWORD_UI      For |CI$00020000 // prompt for password only
89900>>>>>>>>>Define MAPI_NEW_SESSION      For |CI$00000002 // Don't use shared session
89900>>>>>>>>>Define MAPI_FORCE_DOWNLOAD   For |CI$00001000 // Get new mail before return
89900>>>>>>>>>Define MAPI_ALLOW_OTHERS     For |CI$00000008 // Make this a shared session
89900>>>>>>>>>Define MAPI_EXPLICIT_PROFILE For |CI$00000010 // Don't use default profile
89900>>>>>>>>>Define MAPI_EXTENDED         For |CI$00000020 // Extended MAPI Logon
89900>>>>>>>>>Define MAPI_USE_DEFAULT      For |CI$00000040 // Use default profile in logon
89900>>>>>>>>>
89900>>>>>>>>>Define MAPI_SIMPLE_DEFAULT  For (MAPI_LOGON_UI + MAPI_FORCE_DOWNLOAD + MAPI_ALLOW_OTHERS)
89900>>>>>>>>>Define MAPI_SIMPLE_EXPLICIT For (MAPI_NEW_SESSION + MAPI_FORCE_DOWNLOAD + MAPI_EXPLICIT_PROFILE)
89900>>>>>>>>>
89900>>>>>>>>>// MAPILogoff() flags.
89900>>>>>>>>>Define MAPI_LOGOFF_SHARED For |CI$00000001 // Close all shared sessions
89900>>>>>>>>>Define MAPI_LOGOFF_UI     For |CI$00000002 // It's OK to present UI
89900>>>>>>>>>
89900>>>>>>>>>// MAPISendMail() flags.
89900>>>>>>>>>Define MAPI_LOGON_UI    For |CI$00000001 // Display logon UI
89900>>>>>>>>>Define MAPI_NEW_SESSION For |CI$00000002 // Don't use shared session
89900>>>>>>>>>
89900>>>>>>>>>Define MAPI_DIALOG      For |CI$00000008 // Display a send note UI
89900>>>>>>>>>Define MAPI_USE_DEFAULT For |CI$00000040 // Use default profile in logon
89900>>>>>>>>>
89900>>>>>>>>>// MAPIFindNext() flags.
89900>>>>>>>>>Define MAPI_UNREAD_ONLY    For |CI$00000020 // Only unread messages
89900>>>>>>>>>Define MAPI_GUARANTEE_FIFO For |CI$00000100 // use date order
89900>>>>>>>>>Define MAPI_LONG_MSGID     For |CI$00004000 // allow 512 char returned ID
89900>>>>>>>>>
89900>>>>>>>>>// MAPIReadMail() flags.
89900>>>>>>>>>Define MAPI_PEEK            For |CI$00000080 // Do not mark as read.
89900>>>>>>>>>Define MAPI_SUPPRESS_ATTACH For |CI$00000800 // header + body, no files
89900>>>>>>>>>Define MAPI_ENVELOPE_ONLY   For |CI$00000040 // Only header information
89900>>>>>>>>>Define MAPI_BODY_AS_FILE    For |CI$00000200
89900>>>>>>>>>
89900>>>>>>>>>// MAPISaveMail() flags.
89900>>>>>>>>>Define MAPI_LOGON_UI    For |CI$00000001 // Display logon UI
89900>>>>>>>>>Define MAPI_NEW_SESSION For |CI$00000002 // Don't use shared session
89900>>>>>>>>>Define MAPI_LONG_MSGID  For |CI$00004000 // allow 512 char returned ID
89900>>>>>>>>>
89900>>>>>>>>>// MAPIAddress() flags.
89900>>>>>>>>>Define MAPI_LOGON_UI    For |CI$00000001 // Display logon UI
89900>>>>>>>>>Define MAPI_NEW_SESSION For |CI$00000002 // Don't use shared session
89900>>>>>>>>>
89900>>>>>>>>>// MAPIDetails() flags.
89900>>>>>>>>>Define MAPI_LOGON_UI    For |CI$00000001 // Display logon UI
89900>>>>>>>>>Define MAPI_NEW_SESSION For |CI$00000002 // Don't use shared session
89900>>>>>>>>>Define MAPI_AB_NOMODIFY For |CI$00000400 // Don't allow mods of AB entries
89900>>>>>>>>>
89900>>>>>>>>>// MAPIResolveName() flags.
89900>>>>>>>>>Define MAPI_LOGON_UI    For |CI$00000001 // Display logon UI
89900>>>>>>>>>Define MAPI_NEW_SESSION For |CI$00000002 // Don't use shared session
89900>>>>>>>>>Define MAPI_DIALOG      For |CI$00000008 // Prompt for choices if ambiguous
89900>>>>>>>>>Define MAPI_AB_NOMODIFY For |CI$00000400 // Don't allow mods of AB entries
89900>>>>>>>>>
89900>>>>>>>>>Define SUCCESS_SUCCESS                 For 0
89900>>>>>>>>>Define MAPI_USER_ABORT                 For 1
89900>>>>>>>>>Define MAPI_E_USER_ABORT               For MAPI_USER_ABORT
89900>>>>>>>>>Define MAPI_E_FAILURE                  For 2
89900>>>>>>>>>Define MAPI_E_LOGON_FAILURE            For 3
89900>>>>>>>>>Define MAPI_E_LOGIN_FAILURE            For MAPI_E_LOGON_FAILURE
89900>>>>>>>>>Define MAPI_E_DISK_FULL                For 4
89900>>>>>>>>>Define MAPI_E_INSUFFICIENT_MEMORY      For 5
89900>>>>>>>>>Define MAPI_E_ACCESS_DENIED            For 6
89900>>>>>>>>>Define MAPI_E_TOO_MANY_SESSIONS        For 8
89900>>>>>>>>>Define MAPI_E_TOO_MANY_FILES           For 9
89900>>>>>>>>>Define MAPI_E_TOO_MANY_RECIPIENTS      For 10
89900>>>>>>>>>Define MAPI_E_ATTACHMENT_NOT_FOUND     For 11
89900>>>>>>>>>Define MAPI_E_ATTACHMENT_OPEN_FAILURE  For 12
89900>>>>>>>>>Define MAPI_E_ATTACHMENT_WRITE_FAILURE For 13
89900>>>>>>>>>Define MAPI_E_UNKNOWN_RECIPIENT        For 14
89900>>>>>>>>>Define MAPI_E_BAD_RECIPTYPE            For 15
89900>>>>>>>>>Define MAPI_E_NO_MESSAGES              For 16
89900>>>>>>>>>Define MAPI_E_INVALID_MESSAGE          For 17
89900>>>>>>>>>Define MAPI_E_TEXT_TOO_LARGE           For 18
89900>>>>>>>>>Define MAPI_E_INVALID_SESSION          For 19
89900>>>>>>>>>Define MAPI_E_TYPE_NOT_SUPPORTED       For 20
89900>>>>>>>>>Define MAPI_E_AMBIGUOUS_RECIPIENT      For 21
89900>>>>>>>>>Define MAPI_E_AMBIG_RECIP              For MAPI_E_AMBIGUOUS_RECIPIENT
89900>>>>>>>>>Define MAPI_E_MESSAGE_IN_USE           For 22
89900>>>>>>>>>Define MAPI_E_NETWORK_FAILURE          For 23
89900>>>>>>>>>Define MAPI_E_INVALID_EDITFIELDS       For 24
89900>>>>>>>>>Define MAPI_E_INVALID_RECIPS           For 25
89900>>>>>>>>>Define MAPI_E_NOT_SUPPORTED            For 26
89900>>>>>>>Use MapiDllCalls.Pkg
Including file: MapiDllCalls.Pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\MapiDllCalls.Pkg)
89900>>>>>>>>>Use MapiConstants.Pkg
89900>>>>>>>>>Use WinKern.pkg
89900>>>>>>>>>
89900>>>>>>>>>External_Function MAPILogon "MAPILogon" Mapi32.Dll ;   Integer ulUIParam ;   Pointer lpszProfileName ;   Pointer lpszPassword ;   Integer flFlags ;   Integer ulReserved ;   Pointer lplhSession ;   Returns Integer
89901>>>>>>>>>External_Function MAPILogoff "MAPILogoff" Mapi32.Dll ;   Integer lhSession ;   Integer ulUIParam ;   Integer flFlags ;   Integer ulReserved ;   Returns Integer
89902>>>>>>>>>External_Function MAPIFindNext "MAPIFindNext" Mapi32.Dll ;   Integer lhSession ;   Integer ulUIParam ;   Pointer lpszMessageType ;   Pointer lpszSeedMessageID ;   Integer flFlags ;   Integer ulReserved ;   Pointer lpszMessageID ;   Returns Integer
89903>>>>>>>>>External_Function MAPIFreeBuffer "MAPIFreeBuffer" Mapi32.Dll ;   Pointer pv ;   Returns Integer
89904>>>>>>>>>External_Function MAPIReadMail "MAPIReadMail" Mapi32.Dll ;   Integer lhSession ;   Integer ulUIParam ;   Pointer lpszMessageID ;   Integer flFlags ;   Integer ulReserved ;   Pointer lppMessage ;   Returns Integer
89905>>>>>>>>>External_Function MAPIAddress "MAPIAddress" Mapi32.Dll ;   Integer lhSession ;   Integer ulUIParam ;   Pointer lpszCaption ;   Integer nEditFields ;   Pointer lpszLabels ;   Integer nRecips ;   Pointer lpRecips ;   Integer flFlags ;   Integer ulReserved ;   Pointer lpnNewRecips ;   Pointer lppNewRecips ;   Returns Integer
89906>>>>>>>>>External_Function MAPIResolveName "MAPIResolveName" Mapi32.Dll ;   Integer lhSession ;   Integer ulUIParam ;   Pointer lpszName ;   Integer flFlags ;   Integer ulReserved ;   Pointer lppRecip ;   Returns Integer
89907>>>>>>>>>External_Function MAPISendMail "MAPISendMail" Mapi32.Dll ;   Integer lhSession ;   Integer ulUIParam ;   Pointer lpMessage ;   Integer flFlags ;   Integer ulReserved ;   Returns Integer
89908>>>>>>>>>External_Function MAPISaveMail "MAPISaveMail" Mapi32.Dll ;   Integer lhSession ;   Integer ulUIParam ;   Pointer lpMessage ;   Integer flFlags ;   Integer ulReserved ;   Pointer lpszMessageID ;   Returns Integer
89909>>>>>>>>>External_Function MAPIDeleteMail "MAPIDeleteMail" Mapi32.Dll ;   Integer lhSession ;   Integer ulUIParam ;   Pointer lpszMessageID ;   Integer flFlags ;   Integer ulReserved ;   Returns Integer
89910>>>>>>>>>External_Function MAPISendDocuments "MAPISendDocuments" Mapi32.Dll ;   Integer ulUIParam ;   Pointer lpszDelimChar ;   Pointer lpszFullPaths ;   Pointer lpszFileNames ;   Integer ulReserved ;   Returns Integer
89911>>>>>>>>>External_Function MAPIDetails "MAPIDetails" Mapi32.Dll ;   Integer lhSession ;   Integer ulUIParam ;   Pointer lpRecip ;   Integer flFlags ;   Integer ulReserved ;   Returns Integer
89912>>>>>>>>>
89912>>>>>>>>>External_Function ShellExecute "ShellExecuteA" Shell32.Dll ;   Handle hwnd ;   String sOperation ;   String sFile ;   String sParameters ;   String sDirectory ;   Integer nShowCmd ;   Returns VOID_TYPE
89913>>>>>>>Use ArrayPut.Pkg
Including file: ArrayPut.Pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\ArrayPut.Pkg)
89913>>>>>>>>>//****************************************************************************
89913>>>>>>>>>// $Module type: COMMAND
89913>>>>>>>>>// $Module name: ARRAYPUT
89913>>>>>>>>>// $Author     : VO
89913>>>>>>>>>// Created     : 13-11-99 @ 10:11
89913>>>>>>>>>//
89913>>>>>>>>>// Description
89913>>>>>>>>>//    This command makes it possible to put an element in a structure that has
89913>>>>>>>>>//    an array format. This is a number of structures concatenated to each
89913>>>>>>>>>//    other.
89913>>>>>>>>>//    The normal PUT command does have the following parameters:
89913>>>>>>>>>//       Param1: Value to be put
89913>>>>>>>>>//       Param3: String that represents the structure
89913>>>>>>>>>//       Param5: Position inside the structure.
89913>>>>>>>>>//       Param6: Length of the value to be put
89913>>>>>>>>>//       Param5 and Param6 are combined to one parameter in your source code
89913>>>>>>>>>//          because the FIELD command makes a #REPLACE for this.
89913>>>>>>>>>//    This modification of the PUT command uses an extra parameter (param7)
89913>>>>>>>>>//    which is the arrayoffset. The arrayoffset is the N-th element in the
89913>>>>>>>>>//    array of structures and can be calculated by taking N-1 and multiply
89913>>>>>>>>>//    this with the size of the structure.
89913>>>>>>>>>//
89913>>>>>>>>>// $Rev History
89913>>>>>>>>>//    13-11-99 VO Module header created
89913>>>>>>>>>//****************************************************************************
89913>>>>>>>Use WinKern.Pkg
89913>>>>>>>Use GlobalFunctionsProcedures.pkg
89913>>>>>>>
89913>>>>>>>//****************************************************************************
89913>>>>>>>// $Module type: CLASS
89913>>>>>>>// $Module name: cMapiHandler
89913>>>>>>>// $Author     : VO
89913>>>>>>>// Created     : 18-11-98 @ 14:25
89913>>>>>>>//
89913>>>>>>>// Description
89913>>>>>>>//    This class makes the connection, communication to the MAPI layer
89913>>>>>>>//    possible.
89913>>>>>>>//
89913>>>>>>>// $Rev History
89913>>>>>>>//    28-07-04 Changed indent from 3 to 4 spaces
89913>>>>>>>//    18-11-98 VO Module header created
89913>>>>>>>//****************************************************************************
89913>>>>>>>Class cMapiHandler Is A cObject
89914>>>>>>>    //****************************************************************************
89914>>>>>>>    // $Module type: PROCEDURE
89914>>>>>>>    // $Module name: Construct_Object
89914>>>>>>>    // $Author     : VO
89914>>>>>>>    // Created     : 18-11-98 @ 14:25
89914>>>>>>>    //
89914>>>>>>>    // Description
89914>>>>>>>    //    Creation of several properties for init or communication purposes. For
89914>>>>>>>    //    multi-value issues there are three array objects defined
89914>>>>>>>    //
89914>>>>>>>    //    Properties
89914>>>>>>>    //       phSessionID
89914>>>>>>>    //          This property contains the handle returned on logon to the MAPI
89914>>>>>>>    //          system. When it is 0 there is no connection
89914>>>>>>>    //       psUserName
89914>>>>>>>    //          Username to use for connecting to MAPI on logon
89914>>>>>>>    //       psPassword
89914>>>>>>>    //          Password to use for connecting to MAPI on logon
89914>>>>>>>    //
89914>>>>>>>    //       psFindNextMessageType
89914>>>>>>>    //          Message class to search with. To find an interpersonal message
89914>>>>>>>    //          (IPM), this should be blank. Messaging systems whose only
89914>>>>>>>    //          supported message class is IPM can ignore this parameter.
89914>>>>>>>    //
89914>>>>>>>    //       psMessageId
89914>>>>>>>    //          Contains the message ID of the current message
89914>>>>>>>    //       psMessageSubject
89914>>>>>>>    //          MapiReadMail returns the subject of the read message in this
89914>>>>>>>    //          property. When it is empty there is no subject. It is also
89914>>>>>>>    //          used for a new message compose
89914>>>>>>>    //       psMessageText
89914>>>>>>>    //          MapiReadMail returns the full message text in this property.
89914>>>>>>>    //          It is also used to store the messagetext for outgoiing messages
89914>>>>>>>    //       psMessageType
89914>>>>>>>    //          The messagetype returned by MapiReadMail
89914>>>>>>>    //       psMessageDateReceived
89914>>>>>>>    //          The date and time when the message was received according to
89914>>>>>>>    //          MAPI and returned by MapiReadMail. The format is YYYY/MM/DD
89914>>>>>>>    //          HH:MM, using a 24-hour clock.
89914>>>>>>>    //       psMessageConversationId
89914>>>>>>>    //          The conversation thread to which the message belongs
89914>>>>>>>    //       psMessageSenderName
89914>>>>>>>    //          The MapiReadMail returns the sendername (e.g. VO)
89914>>>>>>>    //          in this property
89914>>>>>>>    //       psMessageSenderAddress
89914>>>>>>>    //          The MapiReadMail returns the senderaddress (e.g.
89914>>>>>>>    //          someone@somecompany.com) in this property
89914>>>>>>>    //       psResolvedName
89914>>>>>>>    //          Used by ResolveName for storage. Contains the returned
89914>>>>>>>    //          name value.
89914>>>>>>>    //       psResolvedAddress
89914>>>>>>>    //          Used by ResolveName for storage. Contains the returned
89914>>>>>>>    //          address value.
89914>>>>>>>    //       psResolvedEntryID
89914>>>>>>>    //          Used by ResolveName for storage. Contains the entry-id
89914>>>>>>>    //          for the resolved name
89914>>>>>>>    //       piMessageRecipCount
89914>>>>>>>    //          Contains the number of recipients which were found by the
89914>>>>>>>    //          MapiReadMail method.
89914>>>>>>>    //       piMessageFileCount
89914>>>>>>>    //          Contains the number of enclosures which were found by the
89914>>>>>>>    //          MapiReadMail method.
89914>>>>>>>    //       pbMapiMessageReturnRequest
89914>>>>>>>    //          Contains a true/false value whether a return receipt is
89914>>>>>>>    //          requested or not.
89914>>>>>>>    //
89914>>>>>>>    //       pbGuaranteeFiFo
89914>>>>>>>    //          Flag to tell if messages from mapi must be sorted in date
89914>>>>>>>    //          time order. FiFo = FirstInFirstOut
89914>>>>>>>    //       pbPeek
89914>>>>>>>    //          Flag to tell whether MapiReadMail should flag a new message
89914>>>>>>>    //          message as read. False makes it an old message.
89914>>>>>>>    //       pbLongMsgId
89914>>>>>>>    //          Flag to tell using a long message-id or a short one.
89914>>>>>>>    //          Preferable is True
89914>>>>>>>    //       pbUnreadOnly
89914>>>>>>>    //          Flag to tell if only unread messages must be returned or
89914>>>>>>>    //          not.
89914>>>>>>>    //       pbEnvelopeOnly
89914>>>>>>>    //          Flag to tell if only the header should be returned or not
89914>>>>>>>    //          Only header is faster. Default is only the header. Normally
89914>>>>>>>    //          true for scanning mail and false for reading-displaying mail
89914>>>>>>>    //       pbBodyAsFile
89914>>>>>>>    //          Flag to store the message as file attachment
89914>>>>>>>    //       pbSuppressAttach
89914>>>>>>>    //          Flag to tell whether the attachments should be written out
89914>>>>>>>    //          to disk or not. Normally false for scanning mail and true
89914>>>>>>>    //          for real reading (for display).
89914>>>>>>>    //
89914>>>>>>>    // $Rev History
89914>>>>>>>    //    28-07-04 Boolean properties instead of integer properties when they are
89914>>>>>>>    //             boolean. Use of TRUE instead of DFTRUE Removed commented out
89914>>>>>>>    //             code
89914>>>>>>>    //    18-11-98 VO Module header created
89914>>>>>>>    //****************************************************************************
89914>>>>>>>    Procedure Construct_Object
89916>>>>>>>        Forward Send Construct_Object
89918>>>>>>>
89918>>>>>>>        Property Handle phSessionID  0
89919>>>>>>>        Property String psUserName   ""
89920>>>>>>>        Property String psPassword   ""
89921>>>>>>>
89921>>>>>>>        Property Boolean pbReportErrors False
89922>>>>>>>
89922>>>>>>>        Property String psFindNextMessageType  ""
89923>>>>>>>
89923>>>>>>>        Property String psMessageId ""
89924>>>>>>>        Property String psMessageSubject ""
89925>>>>>>>        Property String psMessageText ""
89926>>>>>>>        Property String psMessageType ""
89927>>>>>>>        Property String psMessageDateReceived ""
89928>>>>>>>        Property String psMessageConversationId ""
89929>>>>>>>        Property String psMessageSenderName ""
89930>>>>>>>        Property String psMessageSenderAddress ""
89931>>>>>>>        Property String psResolvedName ""
89932>>>>>>>        Property String psResolvedAddress ""
89933>>>>>>>        Property String psResolvedEntryID ""
89934>>>>>>>        Property Integer piMessageRecipCount 0
89935>>>>>>>        Property Integer piMessageFileCount 0
89936>>>>>>>        Property Integer piMessageFlags 0
89937>>>>>>>        Property Integer piResolvedEntryIDLength 0
89938>>>>>>>        Property Boolean pbMapiMessageReturnRequest False
89939>>>>>>>
89939>>>>>>>        Property Boolean pbGuaranteeFiFo True
89940>>>>>>>        Property Boolean pbPeek True
89941>>>>>>>        Property Boolean pbLongMsgId True
89942>>>>>>>        Property Boolean pbUnreadOnly False
89943>>>>>>>        Property Boolean pbEnvelopeOnly True
89944>>>>>>>        Property Boolean pbBodyAsFile False
89945>>>>>>>        Property Boolean pbSuppressAttach True
89946>>>>>>>
89946>>>>>>>        //****************************************************************************
89946>>>>>>>        // $Module type: OBJECT
89946>>>>>>>        // $Module name: oRecipientsArray
89946>>>>>>>        // $Author     : VO
89946>>>>>>>        // Created     : 05/30/99 @ 2:49
89946>>>>>>>        //
89946>>>>>>>        // Description
89946>>>>>>>        //    This object stores the information about each recipient
89946>>>>>>>        //
89946>>>>>>>        // $Rev History
89946>>>>>>>        //    05/30/99 VO Module header created
89946>>>>>>>        //****************************************************************************
89946>>>>>>>        Object oRecipientsArray Is A cRecipientsArray
89948>>>>>>>        End_Object // oRecipientsArray
89949>>>>>>>
89949>>>>>>>        //****************************************************************************
89949>>>>>>>        // $Module type: OBJECT
89949>>>>>>>        // $Module name: oAttachmentsArray
89949>>>>>>>        // $Author     : VO
89949>>>>>>>        // Created     : 05/30/99 @ 3:20
89949>>>>>>>        //
89949>>>>>>>        // Description
89949>>>>>>>        //    This object stores information about each attachment
89949>>>>>>>        //
89949>>>>>>>        // $Rev History
89949>>>>>>>        //    05/30/99 VO Module header created
89949>>>>>>>        //****************************************************************************
89949>>>>>>>        Object oAttachmentsArray Is A cAttachmentsArray
89951>>>>>>>        End_Object // oAttachmentsArray
89952>>>>>>>
89952>>>>>>>        //****************************************************************************
89952>>>>>>>        // $Module type: OBJECT
89952>>>>>>>        // $Module name: oReceiversArray
89952>>>>>>>        // $Author     : VO
89952>>>>>>>        // Created     : 05/31/99 @ 10:36
89952>>>>>>>        //
89952>>>>>>>        // Description
89952>>>>>>>        //    This object stores the receivers for a new mail message
89952>>>>>>>        //
89952>>>>>>>        // $Rev History
89952>>>>>>>        //    05/31/99 VO Module header created
89952>>>>>>>        //****************************************************************************
89952>>>>>>>        Object oReceiversArray Is A cReceiversArray
89954>>>>>>>        End_Object // oReceiversArray
89955>>>>>>>
89955>>>>>>>        Send DoSetupArgumentSize
89956>>>>>>>    End_Procedure // Construct_Object
89957>>>>>>>
89957>>>>>>>    //****************************************************************************
89957>>>>>>>    // $Module type: PROCEDURE
89957>>>>>>>    // $Module name: DoSetupArgumentSize
89957>>>>>>>    // $Author     : VO
89957>>>>>>>    // Created     : 12/04/01 @ 2:33
89957>>>>>>>    //
89957>>>>>>>    // Description
89957>>>>>>>    //   This message will set the global argument size to a size minimal 32KB.
89957>>>>>>>    //   Previously this package did this unconditionally.
89957>>>>>>>    //
89957>>>>>>>    // $Rev History
89957>>>>>>>    //   12/04/01 VO Module header created
89957>>>>>>>    //****************************************************************************
89957>>>>>>>    Procedure DoSetupArgumentSize
89959>>>>>>>        Integer iOldArgSize
89959>>>>>>>
89959>>>>>>>        Get_Argument_Size To iOldArgSize
89960>>>>>>>        Set_Argument_Size (iOldArgSize Max 32000)
89961>>>>>>>>
89961>>>>>>>    End_Procedure // DoSetupArgumentSize
89962>>>>>>>
89962>>>>>>>    //****************************************************************************
89962>>>>>>>    // $Module type: FUNCTION
89962>>>>>>>    // $Module name: OwnerHandle
89962>>>>>>>    // $Author     : JJT
89962>>>>>>>    // Created     : 9/7/05
89962>>>>>>>    //
89962>>>>>>>    // Description
89962>>>>>>>    //   Return owner handle to be used for various mapi popup dialogs.
89962>>>>>>>    //   First try to use main_window. If no main window, use focus
89962>>>>>>>    //
89962>>>>>>>    //****************************************************************************
89962>>>>>>>    Function OwnerHandle returns handle
89964>>>>>>>        Handle hWnd
89964>>>>>>>        Handle hoObj
89964>>>>>>>        Get Focus of desktop to hoObj // start with the focus
89965>>>>>>>        Move (gOwnerWindowHandle(hoObj)) to hWnd // global function finds the right handle for us
89966>>>>>>>        function_return hWnd
89967>>>>>>>    End_Function
89968>>>>>>>
89968>>>>>>>
89968>>>>>>>    //****************************************************************************
89968>>>>>>>    // $Module type: FUNCTION
89968>>>>>>>    // $Module name: AddresseeDetails
89968>>>>>>>    // $Author     : VO
89968>>>>>>>    // Created     : 06/01/99 @ 5:58
89968>>>>>>>    //
89968>>>>>>>    // Description
89968>>>>>>>    //    The AddresseeDetails function displays a dialog box containing the details of
89968>>>>>>>    //    a selected address list entry
89968>>>>>>>    //
89968>>>>>>>    // Parameters
89968>>>>>>>    //    lhSession
89968>>>>>>>    //       [in] Session handle that represents a Simple MAPI session or zero. If
89968>>>>>>>    //       the value of the lhSessionId parameter is zero, MAPI logs on the user
89968>>>>>>>    //       and creates a session that exists only for the duration of the call.
89968>>>>>>>    //       This temporary session can be an existing shared session or a new
89968>>>>>>>    //       one. If additional information is required from the user to
89968>>>>>>>    //       successfully complete the logon, a dialog box is displayed.
89968>>>>>>>    //    ulUIParam
89968>>>>>>>    //       [in] Parent window handle or zero, indicating that if a dialog box
89968>>>>>>>    //       is displayed, it is application modal. If the ulUIParam parameter
89968>>>>>>>    //       contains a parent window handle, it is of type HWND (cast to a
89968>>>>>>>    //       ULONG). If no dialog box is displayed during the call, ulUIParam
89968>>>>>>>    //       is ignored.
89968>>>>>>>    //    lpRecip
89968>>>>>>>    //       [in] Pointer to the recipient for which details are to be
89968>>>>>>>    //       displayed. MAPIDetails ignores all members of this MapiRecipDesc
89968>>>>>>>    //       structure except the ulEIDSize and lpEntryID members. If the value
89968>>>>>>>    //       of ulEIDSize is non-zero, MAPIDetails resolves the recipient
89968>>>>>>>    //       entry. If the value of ulEIDSize is zero, MAPIDetails returns the
89968>>>>>>>    //       MAPI_E_AMBIGUOUS_RECIP value.
89968>>>>>>>    //    flFlags
89968>>>>>>>    //       [in] Bitmask of option flags. The following flags can be set:
89968>>>>>>>    //          MAPI_AB_NOMODIFY
89968>>>>>>>    //             The caller is requesting that the dialog box be read-only,
89968>>>>>>>    //             prohibiting changes. MAPIDetails might or might not honor
89968>>>>>>>    //             the request.
89968>>>>>>>    //          MAPI_LOGON_UI
89968>>>>>>>    //             A dialog box should be displayed to prompt the user to
89968>>>>>>>    //             log on if required. When the MAPI_LOGON_UI flag is not
89968>>>>>>>    //             set, the client application does not display a logon
89968>>>>>>>    //             dialog box and returns an error value if the user is not
89968>>>>>>>    //             logged on.
89968>>>>>>>    //          MAPI_NEW_SESSION
89968>>>>>>>    //             An attempt should be made to create a new session rather
89968>>>>>>>    //             than acquire the environment's shared session. If the
89968>>>>>>>    //             MAPI_NEW_SESSION flag is not set, MAPIDetails uses an
89968>>>>>>>    //             existing shared session.
89968>>>>>>>    //    ulReserved
89968>>>>>>>    //       Reserved; must be zero.
89968>>>>>>>    //
89968>>>>>>>    // ReturnValues
89968>>>>>>>    //    MAPI_E_AMBIGUOUS_RECIPIENT
89968>>>>>>>    //       The dialog box could not be displayed because the ulEIDSize
89968>>>>>>>    //       member of the structure pointed to by the lpRecips parameter
89968>>>>>>>    //       was zero.
89968>>>>>>>    //    MAPI_E_FAILURE
89968>>>>>>>    //       One or more unspecified errors occurred. No dialog box was
89968>>>>>>>    //       displayed.
89968>>>>>>>    //    MAPI_E_INSUFFICIENT_MEMORY
89968>>>>>>>    //       There was insufficient memory to proceed. No dialog box was
89968>>>>>>>    //       displayed.
89968>>>>>>>    //    MAPI_E_INVALID_RECIPS
89968>>>>>>>    //       The recipient specified in the lpRecip parameter was unknown
89968>>>>>>>    //       or the recipient had an invalid ulEIDSize value. No dialog
89968>>>>>>>    //       box was displayed.
89968>>>>>>>    //    MAPI_E_LOGIN_FAILURE
89968>>>>>>>    //       There was no default logon, and the user failed to log on
89968>>>>>>>    //       successfully when the logon dialog box was displayed. No
89968>>>>>>>    //       dialog box was displayed.
89968>>>>>>>    //    MAPI_E_NOT_SUPPORTED
89968>>>>>>>    //       The operation was not supported by the underlying messaging
89968>>>>>>>    //       system.
89968>>>>>>>    //    MAPI_E_USER_ABORT
89968>>>>>>>    //       The user canceled either the logon dialog box or the details
89968>>>>>>>    //       dialog box.
89968>>>>>>>    //    SUCCESS_SUCCESS
89968>>>>>>>    //       The call succeeded and the details dialog box was displayed.
89968>>>>>>>    //
89968>>>>>>>    // Remarks
89968>>>>>>>    //    The MAPIDetails function presents a dialog box that shows the
89968>>>>>>>    //    details of a particular address list entry. The display name
89968>>>>>>>    //    and address are the minimum attributes that are displayed in
89968>>>>>>>    //    the dialog box; more information can be shown, depending on
89968>>>>>>>    //    the address book provider. The details dialog box cannot be
89968>>>>>>>    //    suppressed, but the caller can request that it be read-only or
89968>>>>>>>    //    modifiable.
89968>>>>>>>    //
89968>>>>>>>    //    Details can only be shown for resolved address list entries.
89968>>>>>>>    //    An entry is resolved if the value of the ulEIDSize member of
89968>>>>>>>    //    the MapiRecipDesc structure is nonzero. Entries are resolved
89968>>>>>>>    //    when they are returned by the MAPIAddress or MAPIResolveName
89968>>>>>>>    //    functions and as the result being recipients of read mail.
89968>>>>>>>    //
89968>>>>>>>    // $Rev History
89968>>>>>>>    //    28-07-04 Removed the use of DFTRUE in compare of boolean property setting
89968>>>>>>>    //    24/04/00 Do not longer trust on the length() of sEntryId. Defined second
89968>>>>>>>    //             parameter for this.
89968>>>>>>>    //    27/10/99 Changed so that errors only display when pbReportErrors is true
89968>>>>>>>    //    23/07/99 To make the AddresseeDetails call modal we need to pass the
89968>>>>>>>    //             window_handle of the current focus object (assuming this is a
89968>>>>>>>    //             good window_handle).
89968>>>>>>>    //    06/01/99 VO Module header created
89968>>>>>>>    //****************************************************************************
89968>>>>>>>    Function AddresseeDetails String sEntryId Integer iLength Returns Integer
89970>>>>>>>        Integer iRetval hoFocus
89970>>>>>>>        Handle hWnd hSessionId
89970>>>>>>>        Pointer lpsMapiRecipDesc lpsEntryId
89970>>>>>>>        String sMapiRecipDesc
89970>>>>>>>
89970>>>>>>>        Get phSessionID To hSessionId
89971>>>>>>>        If (hSessionId <> 0) Begin
89973>>>>>>>            //Get Focus Of Desktop To hoFocus
89973>>>>>>>            //Get Window_Handle Of hoFocus To hWnd
89973>>>>>>>            Get OwnerHandle To hWnd
89974>>>>>>>            ZeroType MapiRecipDesc To sMapiRecipDesc
89975>>>>>>>            Put iLength To sMapiRecipDesc At MapiRecipDesc.ulEIDSize
89976>>>>>>>            GetAddress Of sEntryId To lpsEntryId
89977>>>>>>>            Put lpsEntryId To sMapiRecipDesc At MapiRecipDesc.lpEntryID
89978>>>>>>>            GetAddress Of sMapiRecipDesc To lpsMapiRecipDesc
89979>>>>>>>            Move (MapiDetails (hSessionId, hWnd, lpsMapiRecipDesc, MAPI_AB_NOMODIFY, 0)) To iRetval
89980>>>>>>>            If (iRetval <> SUCCESS_SUCCESS) Begin
89982>>>>>>>                If (pbReportErrors (Self)) Begin
89984>>>>>>>                    Error DFERR_MAPI (C_$DetailsErrorCode * String (iRetval))
89985>>>>>>>>
89985>>>>>>>                End
89985>>>>>>>>
89985>>>>>>>            End
89985>>>>>>>>
89985>>>>>>>        End
89985>>>>>>>>
89985>>>>>>>        Else Begin
89986>>>>>>>            If (pbReportErrors (Self)) Begin
89988>>>>>>>                Error DFERR_MAPI  C_$DetailsErrorNotLoggedIn
89989>>>>>>>>
89989>>>>>>>            End
89989>>>>>>>>
89989>>>>>>>        End
89989>>>>>>>>
89989>>>>>>>
89989>>>>>>>        Function_Return iRetval
89990>>>>>>>    End_Function // AddresseeDetails
89991>>>>>>>
89991>>>>>>>    //****************************************************************************
89991>>>>>>>    // $Module type: FUNCTION
89991>>>>>>>    // $Module name: SendDocuments
89991>>>>>>>    // $Author     : VO
89991>>>>>>>    // Created     : 06/01/99 @ 1:07
89991>>>>>>>    //
89991>>>>>>>    // Description
89991>>>>>>>    //    The SendDocuments function sends a standard message with one or more
89991>>>>>>>    //    attached files and a cover note. The cover note is a dialog box that
89991>>>>>>>    //    allows the user to enter a list of recipients and an optional message.
89991>>>>>>>    //    SendDocuments differs from the MAPISendMail function in that it
89991>>>>>>>    //    allows less flexibility in message generation
89991>>>>>>>    //
89991>>>>>>>    //    Parameters
89991>>>>>>>    //       ulUIParam
89991>>>>>>>    //          [in] Parent window handle or zero, indicating that if a dialog
89991>>>>>>>    //          box is displayed, it is application modal. If the ulUIParam
89991>>>>>>>    //          parameter contains a parent window handle, it is of type HWND
89991>>>>>>>    //          (cast to a ULONG). If no dialog box is displayed during the
89991>>>>>>>    //          call, ulUIParam is ignored.
89991>>>>>>>    //       lpsDelimChar
89991>>>>>>>    //          [in] Pointer to a character that the caller uses to delimit the
89991>>>>>>>    //          names pointed to by the lpsFullPaths and lpsFileNames
89991>>>>>>>    //          parameters. The caller should select a character for the
89991>>>>>>>    //          delimiter that is not used in operating system filenames.
89991>>>>>>>    //       lpsFullPaths
89991>>>>>>>    //          [in] Pointer to a string containing a list of full paths
89991>>>>>>>    //          (including drive letters) to attachment files. This list is
89991>>>>>>>    //          formed by concatenating correctly formed file paths separated
89991>>>>>>>    //          by the character specified in the lpsDelimChar parameter and
89991>>>>>>>    //          followed by a null terminator. An example of a valid list is:
89991>>>>>>>    //             C:\TMP\TEMP1.DOC;C:\TMP\TEMP2.DOC
89991>>>>>>>    //          The files specified in this parameter are added to the message
89991>>>>>>>    //          as file attachments. If this parameter is NULL or contains an
89991>>>>>>>    //          empty string, the Send Note dialog box is displayed with no
89991>>>>>>>    //          attached files.
89991>>>>>>>    //       lpsFileNames
89991>>>>>>>    //          [in] Pointer to a null-terminated list of the original
89991>>>>>>>    //          filenames as they should appear in the message. When multiple
89991>>>>>>>    //          names are specified, the list is formed by concatenating the
89991>>>>>>>    //          filenames separated by the character specified in the
89991>>>>>>>    //          lpsDelimChar parameter and followed by a null terminator.
89991>>>>>>>    //          An example is:
89991>>>>>>>    //             TEMP3.DOC;TEMP4.DOC
89991>>>>>>>    //          If there is no value for the lpsFileNames parameter or if it
89991>>>>>>>    //          is empty, MAPISendDocuments sets the filenames set to the
89991>>>>>>>    //          filename values indicated by the lpsFullPaths parameter.
89991>>>>>>>    //       ulReserved
89991>>>>>>>    //          Reserved; must be zero.
89991>>>>>>>    //
89991>>>>>>>    //    Return Values
89991>>>>>>>    //       MAPI_E_ATTACHMENT_OPEN_FAILURE
89991>>>>>>>    //          One or more files in the lpsFilePaths parameter could not
89991>>>>>>>    //          be located. No message was sent.
89991>>>>>>>    //       MAPI_E_ATTACHMENT_WRITE_FAILURE
89991>>>>>>>    //          An attachment could not be written to a temporary file.
89991>>>>>>>    //          Check directory permissions.
89991>>>>>>>    //       MAPI_E_FAILURE
89991>>>>>>>    //          One or more unspecified errors occurred while sending the
89991>>>>>>>    //          message. It is not known if the message was sent.
89991>>>>>>>    //       MAPI_E_INSUFFICIENT_MEMORY
89991>>>>>>>    //          There was insufficient memory to proceed.
89991>>>>>>>    //       MAPI_E_LOGIN_FAILURE
89991>>>>>>>    //          There was no default logon, and the user failed to log
89991>>>>>>>    //          on successfully when the logon dialog box was displayed.
89991>>>>>>>    //          No message was sent.
89991>>>>>>>    //       MAPI_E_USER_ABORT
89991>>>>>>>    //          The user canceled one of the dialog boxes. No message
89991>>>>>>>    //          was sent.
89991>>>>>>>    //       SUCCESS_SUCCESS
89991>>>>>>>    //          The call succeeded and the message was sent.
89991>>>>>>>    //
89991>>>>>>>    //    Remarks
89991>>>>>>>    //       The MAPISendDocuments function sends a standard message,
89991>>>>>>>    //       always displaying a cover note dialog box so the user can
89991>>>>>>>    //       provide recipients and other sending options. This function
89991>>>>>>>    //       tries to establish a session using the messaging system's
89991>>>>>>>    //       shared session. If no shared session exists, it prompts
89991>>>>>>>    //       the user for logon information to establish a session.
89991>>>>>>>    //       Before MAPISendDocuments returns, it ends the session.
89991>>>>>>>    //
89991>>>>>>>    //       Message attachments can include the active document or all
89991>>>>>>>    //       the currently open documents in the client application that
89991>>>>>>>    //       called MAPISendDocuments. This function is used primarily
89991>>>>>>>    //       for calls from a macro or scripting language, often found
89991>>>>>>>    //       in applications such as spreadsheet or word-processing
89991>>>>>>>    //       programs.
89991>>>>>>>    //
89991>>>>>>>    //       MAPISendDocuments creates as many file attachments as there
89991>>>>>>>    //       are paths specified by the lpsFullPaths parameter in spite
89991>>>>>>>    //       of the fact that there can be different numbers of paths
89991>>>>>>>    //       and filenames. The caller is responsible for deleting
89991>>>>>>>    //       temporary files created when using MAPISendDocuments.
89991>>>>>>>    //
89991>>>>>>>    // $Rev History
89991>>>>>>>    //    28-07-04 Removed the use of DFTRUE in compare of boolean property setting
89991>>>>>>>    //    27/10/99 Changed so that errors only display when pbReportErrors is true
89991>>>>>>>    //    23/07/99 To make the SendDocuments call modal we need to pass the
89991>>>>>>>    //             window_handle of the current focus object (assuming this is a
89991>>>>>>>    //             good window_handle).
89991>>>>>>>    //    06/01/99 VO Module header created
89991>>>>>>>    //****************************************************************************
89991>>>>>>>    Function SendDocuments String sDelimChar String sFullPaths String sPathNames Returns Integer
89993>>>>>>>        Integer iRetval hoFocus
89993>>>>>>>        Handle hWnd
89993>>>>>>>        Pointer lpsDelimChar lpsFullPaths lpsPathNames
89993>>>>>>>
89993>>>>>>>        GetAddress Of sDelimChar To lpsDelimChar
89994>>>>>>>        GetAddress Of sFullPaths To lpsFullPaths
89995>>>>>>>        GetAddress Of sPathNames To lpsPathNames
89996>>>>>>>
89996>>>>>>>        //Get Focus of desktop To hoFocus
89996>>>>>>>        //Get Window_Handle Of hoFocus To hWnd
89996>>>>>>>        Get OwnerHandle To hWnd
89997>>>>>>>
89997>>>>>>>        Move (MapiSendDocuments (hWnd, lpsDelimChar, lpsFullPaths, lpsPathNames, 0)) To iRetval
89998>>>>>>>        If (iRetval <> SUCCESS_SUCCESS) Begin
90000>>>>>>>            If (pbReportErrors (Self)) Begin
90002>>>>>>>                Error DFERR_MAPI (C_$SendDocumentsError * String (iRetval))
90003>>>>>>>>
90003>>>>>>>            End
90003>>>>>>>>
90003>>>>>>>        End
90003>>>>>>>>
90003>>>>>>>
90003>>>>>>>        Function_Return iRetval
90004>>>>>>>    End_Function // SendDocuments
90005>>>>>>>
90005>>>>>>>    //****************************************************************************
90005>>>>>>>    // $Module type: FUNCTION
90005>>>>>>>    // $Module name: DeleteMail
90005>>>>>>>    // $Author     : VO
90005>>>>>>>    // Created     : 05/31/99 @ 6:27
90005>>>>>>>    //
90005>>>>>>>    // Description
90005>>>>>>>    //    This function is to delete a message from the message base. Use with
90005>>>>>>>    //    care. The message information should be present (found) before. This
90005>>>>>>>    //    means that te properties of this class are filled with all message
90005>>>>>>>    //    information.
90005>>>>>>>    //
90005>>>>>>>    //    The DeleteMail function deletes a message
90005>>>>>>>    //
90005>>>>>>>    //    Parameters
90005>>>>>>>    //       lhSession
90005>>>>>>>    //          [in] Session handle that represents a valid Simple MAPI session.
90005>>>>>>>    //          The value of the lhSessionId parameter must represent a valid
90005>>>>>>>    //          session; it cannot be zero.
90005>>>>>>>    //       ulUIParam
90005>>>>>>>    //          [in] Parent window handle or zero, indicating that if a dialog
90005>>>>>>>    //          box is displayed, it is application modal. If the ulUIParam
90005>>>>>>>    //          parameter contains a parent window handle, it is of type
90005>>>>>>>    //          HWND (cast to a ULONG). If no dialog box is displayed during
90005>>>>>>>    //          the call, ulUIParam is ignored.
90005>>>>>>>    //       lpsMessageID
90005>>>>>>>    //          [in] The identifier for the message to be deleted. This
90005>>>>>>>    //          identifier is messaging system-specific and will be invalid
90005>>>>>>>    //          when MAPIDeleteMail successfully returns.
90005>>>>>>>    //       flFlags
90005>>>>>>>    //          Reserved; must be zero.
90005>>>>>>>    //       ulReserved
90005>>>>>>>    //          Reserved; must be zero.
90005>>>>>>>    //
90005>>>>>>>    //    Return Values
90005>>>>>>>    //       MAPI_E_FAILURE
90005>>>>>>>    //          One or more unspecified errors occurred while deleting the
90005>>>>>>>    //          message. No message was deleted.
90005>>>>>>>    //       MAPI_E_INSUFFICIENT_MEMORY
90005>>>>>>>    //          There was insufficient memory to proceed. No message was deleted.
90005>>>>>>>    //       MAPI_E_INVALID_MESSAGE
90005>>>>>>>    //          An invalid message identifier was passed in the lpsMessageID
90005>>>>>>>    //          parameter. No message was deleted.
90005>>>>>>>    //       MAPI_E_INVALID_SESSION
90005>>>>>>>    //          An invalid session handle was passed in the lhSessionId parameter.
90005>>>>>>>    //          No message was deleted.
90005>>>>>>>    //       SUCCESS_SUCCESS
90005>>>>>>>    //          The call succeeded and the message was deleted.
90005>>>>>>>    //
90005>>>>>>>    //    Remarks
90005>>>>>>>    //       To find the message to be deleted, call the MAPIFindNext function
90005>>>>>>>    //       before calling the MAPIDeleteMail function. Because message
90005>>>>>>>    //       identifiers are opaque, messaging system-specific, and can be
90005>>>>>>>    //       invalidated at any time, MAPIDeleteMail considers a message
90005>>>>>>>    //       identifier to be valid only for the current session. MAPIDeleteMail
90005>>>>>>>    //       handles invalid message identifiers by returning the
90005>>>>>>>    //       MAPI_E_INVALID_MESSAGE value.
90005>>>>>>>    //
90005>>>>>>>    // $Rev History
90005>>>>>>>    //    28-07-04 Removed the use of DFTRUE in compare of boolean property setting
90005>>>>>>>    //    27/10/99 Changed so that errors only display when pbReportErrors is true
90005>>>>>>>    //    23/07/99 To make the DeleteMail call modal we need to pass the
90005>>>>>>>    //             window_handle of the current focus object (assuming this is a
90005>>>>>>>    //             good window_handle).
90005>>>>>>>    //    05/31/99 VO Module header created
90005>>>>>>>    //****************************************************************************
90005>>>>>>>    Function DeleteMail Returns Integer
90007>>>>>>>        Integer iRetval hoFocus
90007>>>>>>>        Handle hSessionId hWnd
90007>>>>>>>        String sMessageId
90007>>>>>>>        Pointer lpsMessageId
90007>>>>>>>
90007>>>>>>>        Get phSessionID To hSessionId
90008>>>>>>>        If (hSessionId <> 0) Begin
90010>>>>>>>            //Get Focus Of Desktop To hoFocus
90010>>>>>>>            //Get Window_Handle Of hoFocus To hWnd
90010>>>>>>>            Get OwnerHandle To hWnd
90011>>>>>>>            Get psMessageId To sMessageId
90012>>>>>>>            GetAddress Of sMessageId To lpsMessageId
90013>>>>>>>            Move (MapiDeleteMail (hSessionId, hWnd, lpsMessageId, 0, 0)) To iRetval
90014>>>>>>>            If (iRetval <> SUCCESS_SUCCESS) Begin
90016>>>>>>>                If (pbReportErrors (Self)) Begin
90018>>>>>>>                    Error DFERR_MAPI (C_$DeleteMailErrorcode * String (iRetval))
90019>>>>>>>>
90019>>>>>>>                End
90019>>>>>>>>
90019>>>>>>>            End
90019>>>>>>>>
90019>>>>>>>            Else Begin
90020>>>>>>>                Send DoInit
90021>>>>>>>            End
90021>>>>>>>>
90021>>>>>>>        End
90021>>>>>>>>
90021>>>>>>>        Else Begin
90022>>>>>>>            If (pbReportErrors (Self)) Begin
90024>>>>>>>                Error DFERR_MAPI C_$DeleteMailNotLoggedIn
90025>>>>>>>>
90025>>>>>>>            End
90025>>>>>>>>
90025>>>>>>>        End
90025>>>>>>>>
90025>>>>>>>
90025>>>>>>>        Function_Return iRetval
90026>>>>>>>    End_Function // DeleteMail
90027>>>>>>>
90027>>>>>>>    //****************************************************************************
90027>>>>>>>    // $Module type: PROCEDURE
90027>>>>>>>    // $Module name: DoAddAttachment
90027>>>>>>>    // $Author     : VO
90027>>>>>>>    // Created     : 05/30/99 @ 2:58
90027>>>>>>>    //
90027>>>>>>>    // Description
90027>>>>>>>    //    This method can be used to add an attachment to the list. Each time two
90027>>>>>>>    //    items in the child object "oAttachmentsArray" will be created. One with
90027>>>>>>>    //    the pathname and one with the filename.
90027>>>>>>>    //
90027>>>>>>>    // $Rev History
90027>>>>>>>    //    28-07-04 Changed TO into OF
90027>>>>>>>    //    05/30/99 VO Module header created
90027>>>>>>>    //****************************************************************************
90027>>>>>>>    Procedure DoAddAttachment String sPathName String sFileName
90029>>>>>>>        Send DoAddAttachment Of oAttachmentsArray sPathName sFileName
90030>>>>>>>    End_Procedure // DoAddAttachment
90031>>>>>>>
90031>>>>>>>    //****************************************************************************
90031>>>>>>>    // $Module type: PROCEDURE
90031>>>>>>>    // $Module name: DoAddReceiver
90031>>>>>>>    // $Author     : VO
90031>>>>>>>    // Created     : 05/31/99 @ 10:45
90031>>>>>>>    //
90031>>>>>>>    // Description
90031>>>>>>>    //    To add a recipient to the list of recipients. The name, the address and
90031>>>>>>>    //    what sort of recipient it addressed is specified. The information is
90031>>>>>>>    //    stored in an child object called "oReceiversArray"
90031>>>>>>>    //
90031>>>>>>>    // $Rev History
90031>>>>>>>    //    28-07-04 Changed TO into OF
90031>>>>>>>    //    05/31/99 VO Module header created
90031>>>>>>>    //****************************************************************************
90031>>>>>>>    Procedure DoAddReceiver Integer iRecipClass String sName String sAddress String sEntryID Integer iLength
90033>>>>>>>        Send DoAddReceiver Of oReceiversArray iRecipClass sName sAddress sEntryID iLength
90034>>>>>>>    End_Procedure // DoAddReceiver
90035>>>>>>>
90035>>>>>>>    //****************************************************************************
90035>>>>>>>    // $Module type: PROCEDURE
90035>>>>>>>    // $Module name: DoInit
90035>>>>>>>    // $Author     : VO
90035>>>>>>>    // Created     : 05/31/99 @ 10:37
90035>>>>>>>    //
90035>>>>>>>    // Description
90035>>>>>>>    //    This method will erase the array objects and prepare for a new message
90035>>>>>>>    //
90035>>>>>>>    // $Rev History
90035>>>>>>>    //    28-07-04 Use of TRUE instead of DFTRUE
90035>>>>>>>    //    10/26/99 Changed direct access to array objects via message now
90035>>>>>>>    //    05/31/99 VO Module header created
90035>>>>>>>    //****************************************************************************
90035>>>>>>>    Procedure DoInit
90037>>>>>>>        Send DoClearRecipientsList
90038>>>>>>>        Send DoClearAttachmentsList
90039>>>>>>>        Send DoClearReceiversList
90040>>>>>>>
90040>>>>>>>        Set psMessageId To ""
90041>>>>>>>        Set psMessageSubject To ""
90042>>>>>>>        Set psMessageText To ""
90043>>>>>>>        Set psMessageType To ""
90044>>>>>>>        Set psMessageDateReceived To ""
90045>>>>>>>        Set psMessageConversationId To ""
90046>>>>>>>        Set psMessageSenderName To ""
90047>>>>>>>        Set psMessageSenderAddress To ""
90048>>>>>>>        Set psResolvedName To ""
90049>>>>>>>        Set psResolvedAddress To ""
90050>>>>>>>        Set psResolvedEntryID To ""
90051>>>>>>>        Set piMessageRecipCount To 0
90052>>>>>>>        Set piMessageFileCount To 0
90053>>>>>>>        Set pbMapiMessageReturnRequest To False
90054>>>>>>>    End_Procedure // DoInit
90055>>>>>>>
90055>>>>>>>    //****************************************************************************
90055>>>>>>>    // $Module type: FUNCTION
90055>>>>>>>    // $Module name: AttachmentFileName
90055>>>>>>>    // $Author     : VO
90055>>>>>>>    // Created     : 05/30/99 @ 3:36
90055>>>>>>>    //
90055>>>>>>>    // Description
90055>>>>>>>    //    This function returns the N-th attachment filename. The value of N must
90055>>>>>>>    ///   be passed via iAttachment
90055>>>>>>>    //
90055>>>>>>>    // $Rev History
90055>>>>>>>    //    05/30/99 VO Module header created
90055>>>>>>>    //****************************************************************************
90055>>>>>>>    Function AttachmentFileName Integer iAttachment Returns String
90057>>>>>>>        String sFileName
90057>>>>>>>
90057>>>>>>>        Get AttachmentFileName Of oAttachmentsArray iAttachment To sFileName
90058>>>>>>>
90058>>>>>>>        Function_Return sFileName
90059>>>>>>>    End_Function // AttachmentFileName
90060>>>>>>>
90060>>>>>>>    //****************************************************************************
90060>>>>>>>    // $Module type: FUNCTION
90060>>>>>>>    // $Module name: AttachmentPathName
90060>>>>>>>    // $Author     : VO
90060>>>>>>>    // Created     : 05/30/99 @ 3:36
90060>>>>>>>    //
90060>>>>>>>    // Description
90060>>>>>>>    //    This function returns the N-th attachment pathname. The value of N must
90060>>>>>>>    ///   be passed via iAttachment
90060>>>>>>>    //
90060>>>>>>>    // $Rev History
90060>>>>>>>    //    05/30/99 VO Module header created
90060>>>>>>>    //****************************************************************************
90060>>>>>>>    Function AttachmentPathName Integer iAttachment Returns String
90062>>>>>>>        String sPathName
90062>>>>>>>
90062>>>>>>>        Get AttachmentPathName Of oAttachmentsArray iAttachment To sPathName
90063>>>>>>>
90063>>>>>>>        Function_Return sPathName
90064>>>>>>>    End_Function // AttachmentPathName
90065>>>>>>>
90065>>>>>>>    //****************************************************************************
90065>>>>>>>    // $Module type: FUNCTION
90065>>>>>>>    // $Module name: RecipientName
90065>>>>>>>    // $Author     : VO
90065>>>>>>>    // Created     : 05/30/99 @ 3:00
90065>>>>>>>    //
90065>>>>>>>    // Description
90065>>>>>>>    //    This function returns the N-th recipient name. The value of N must be
90065>>>>>>>    //    passed via iRecipient
90065>>>>>>>    //
90065>>>>>>>    // $Rev History
90065>>>>>>>    //    05/30/99 VO Module header created
90065>>>>>>>    //****************************************************************************
90065>>>>>>>    Function RecipientName Integer iRecipient Returns String
90067>>>>>>>        String sName
90067>>>>>>>
90067>>>>>>>        Get RecipientName Of oRecipientsArray iRecipient To sName
90068>>>>>>>
90068>>>>>>>        Function_Return sName
90069>>>>>>>    End_Function // RecipientName
90070>>>>>>>
90070>>>>>>>    //****************************************************************************
90070>>>>>>>    // $Module type: FUNCTION
90070>>>>>>>    // $Module name: RecipientAddress
90070>>>>>>>    // $Author     : VO
90070>>>>>>>    // Created     : 05/30/99 @ 3:00
90070>>>>>>>    //
90070>>>>>>>    // Description
90070>>>>>>>    //    This function returns the N-th recipient address. The value of N must be
90070>>>>>>>    //    passed via iRecipient
90070>>>>>>>    //
90070>>>>>>>    // $Rev History
90070>>>>>>>    //    05/30/99 VO Module header created
90070>>>>>>>    //****************************************************************************
90070>>>>>>>    Function RecipientAddress Integer iRecipient Returns String
90072>>>>>>>        String sAddress
90072>>>>>>>
90072>>>>>>>        Get RecipientAddress Of oRecipientsArray iRecipient To sAddress
90073>>>>>>>
90073>>>>>>>        Function_Return sAddress
90074>>>>>>>    End_Function // RecipientAddress
90075>>>>>>>
90075>>>>>>>    //****************************************************************************
90075>>>>>>>    // $Module type: FUNCTION
90075>>>>>>>    // $Module name: RecipientEntryId
90075>>>>>>>    // $Author     : VO
90075>>>>>>>    // Created     : 06/01/99 @ 6:56
90075>>>>>>>    //
90075>>>>>>>    // Description
90075>>>>>>>    //    This function returns the N-th recipient ID. The value of N must be
90075>>>>>>>    //    passed via iRecipient. The value is needed for AddresseeDetails.
90075>>>>>>>    //
90075>>>>>>>    // $Rev History
90075>>>>>>>    //    06/01/99 VO Module header created
90075>>>>>>>    //****************************************************************************
90075>>>>>>>    Function RecipientEntryId Integer iRecipient Returns String
90077>>>>>>>        String sEntryId
90077>>>>>>>
90077>>>>>>>        Get RecipientEntryId Of oRecipientsArray iRecipient To sEntryId
90078>>>>>>>
90078>>>>>>>        Function_Return sEntryId
90079>>>>>>>    End_Function // RecipientEntryId
90080>>>>>>>
90080>>>>>>>    //****************************************************************************
90080>>>>>>>    // $Module type: FUNCTION
90080>>>>>>>    // $Module name: RecipientEntryIdLength
90080>>>>>>>    // $Author     : VO
90080>>>>>>>    // Created     : 24/04/00 @ 17:02
90080>>>>>>>    //
90080>>>>>>>    // Description
90080>>>>>>>    //    This function returns the length of the N-th recipient ID. The value of
90080>>>>>>>    //    N must be passed via iRecipient.
90080>>>>>>>    //
90080>>>>>>>    // $Rev History
90080>>>>>>>    //    24/04/00 VO Module header created
90080>>>>>>>    //****************************************************************************
90080>>>>>>>    Function RecipientEntryIdLength Integer iRecipient Returns String
90082>>>>>>>        Integer iLength
90082>>>>>>>
90082>>>>>>>        Get RecipientEntryIdLength Of oRecipientsArray iRecipient To iLength
90083>>>>>>>
90083>>>>>>>        Function_Return iLength
90084>>>>>>>    End_Function // RecipientEntryIdLength
90085>>>>>>>
90085>>>>>>>    //****************************************************************************
90085>>>>>>>    // $Module type: PROCEDURE
90085>>>>>>>    // $Module name: Destroy_Object
90085>>>>>>>    // $Author     : VO
90085>>>>>>>    // Created     : 05/24/99 @ 8:52
90085>>>>>>>    //
90085>>>>>>>    // Description
90085>>>>>>>    //    When this object gets destroyed we will close an channel to MAPI which
90085>>>>>>>    //    might be opened. Augmented systemfunction. Not to be used for normal
90085>>>>>>>    //    instantiation.
90085>>>>>>>    //
90085>>>>>>>    // $Rev History
90085>>>>>>>    //    27/10/99 Changed from SEND LOGOFF to GET LOGOFF
90085>>>>>>>    //    05/24/99 VO Module header created
90085>>>>>>>    //****************************************************************************
90085>>>>>>>    Procedure Destroy_Object
90087>>>>>>>        Handle hSessionId
90087>>>>>>>        Integer iVoid
90087>>>>>>>
90087>>>>>>>        Get phSessionID To hSessionId
90088>>>>>>>        If (hSessionId <> 0) Begin
90090>>>>>>>            Get Logoff To iVoid
90091>>>>>>>        End
90091>>>>>>>>
90091>>>>>>>
90091>>>>>>>        Forward Send Destroy_Object
90093>>>>>>>    End_Procedure // Destroy_Object
90094>>>>>>>
90094>>>>>>>    //****************************************************************************
90094>>>>>>>    // $Module type: FUNCTION
90094>>>>>>>    // $Module name: Logon
90094>>>>>>>    // $Author     : VO
90094>>>>>>>    // Created     : 18-11-98 @ 15:32
90094>>>>>>>    //
90094>>>>>>>    // Description
90094>>>>>>>    //    This method calls the MAPILogon DLL function
90094>>>>>>>    //
90094>>>>>>>    // ulUIParam
90094>>>>>>>    //    [in] Parent window handle or zero, indicating that if a dialog box is
90094>>>>>>>    //    displayed, it is application modal. If the ulUIParam parameter contains
90094>>>>>>>    //    a parent window handle, it is of type HWND (cast to a ULONG). If no
90094>>>>>>>    //    dialog box is displayed during the call, ulUIParam is ignored.
90094>>>>>>>    // lpsProfileName
90094>>>>>>>    //    [in] Pointer to a null-terminated profile name string, limited to 256
90094>>>>>>>    //    characters or less. This is the profile to use when logging on. If the
90094>>>>>>>    //    lpsProfileName parameter is NULL or points to an empty string, and the
90094>>>>>>>    //    flFlags parameter is set to MAPI_LOGON_UI, MAPILogon displays a logon
90094>>>>>>>    //    dialog box with an empty name field.
90094>>>>>>>    // lpsPassword
90094>>>>>>>    //    [in] Pointer to a null-terminated credential string, limited to 256
90094>>>>>>>    //    characters or less. If the messaging system does not require password
90094>>>>>>>    //    credentials, or if it requires that the user enter them, the
90094>>>>>>>    //    lpsPassword parameter should be NULL or point to an empty string. When
90094>>>>>>>    //    the user must enter credentials, the flFlags parameter must be set to
90094>>>>>>>    //    MAPI_LOGON_UI to allow a logon dialog box to be displayed.
90094>>>>>>>    // flFlags
90094>>>>>>>    //    [in] Bitmask of option flags. The following flags can be set:
90094>>>>>>>    //    MAPI_FORCE_DOWNLOAD
90094>>>>>>>    //       An attempt should be made to download all of the user's messages
90094>>>>>>>    //       before returning. If the MAPI_FORCE_DOWNLOAD flag is not set,
90094>>>>>>>    //       messages can be downloaded in the background after the function
90094>>>>>>>    //       call returns.
90094>>>>>>>    //    MAPI_NEW_SESSION
90094>>>>>>>    //       An attempt should be made to create a new session rather than
90094>>>>>>>    //       acquire the environment's shared session. If the MAPI_NEW_SESSION
90094>>>>>>>    //       flag is not set, MAPILogon uses an existing shared session.
90094>>>>>>>    //    MAPI_LOGON_UI
90094>>>>>>>    //       A logon dialog box should be displayed to prompt the user for
90094>>>>>>>    //       logon information. If the user needs to provide a password and
90094>>>>>>>    //       profile name to enable a successful logon, MAPI_LOGON_UI must be set.
90094>>>>>>>    //    MAPI_PASSWORD_UI
90094>>>>>>>    //       MAPILogon should only prompt for a password and not allow the
90094>>>>>>>    //       user to change the profile name. Either MAPI_PASSWORD_UI or
90094>>>>>>>    //       MAPI_LOGON_UI should not be set, since the intent is to select
90094>>>>>>>    //       between two different dialog boxes for logon.
90094>>>>>>>    // ulReserved
90094>>>>>>>    //    Reserved; must be zero.
90094>>>>>>>    // lplhSession
90094>>>>>>>    //    [out] Simple MAPI session handle.
90094>>>>>>>    //
90094>>>>>>>    // Return Values
90094>>>>>>>    //    MAPI_E_FAILURE
90094>>>>>>>    //       One or more unspecified errors occurred during logon. No session
90094>>>>>>>    //       handle was returned.
90094>>>>>>>    //    MAPI_E_INSUFFICIENT_MEMORY
90094>>>>>>>    //       There was insufficient memory to proceed. No session handle
90094>>>>>>>    //       was returned.
90094>>>>>>>    //    MAPI_E_LOGIN_FAILURE
90094>>>>>>>    //       There was no default logon, and the user failed to log on successfully
90094>>>>>>>    //       when the logon dialog box was displayed. No session handle was returned.
90094>>>>>>>    //    MAPI_E_TOO_MANY_SESSIONS
90094>>>>>>>    //       The user had too many sessions open simultaneously. No session handle
90094>>>>>>>    //       was returned.
90094>>>>>>>    //    MAPI_E_USER_ABORT
90094>>>>>>>    //       The user canceled the logon dialog box. No session handle was returned.
90094>>>>>>>    //    SUCCESS_SUCCESS
90094>>>>>>>    //       The call succeeded and a Simple MAPI session was established.
90094>>>>>>>    //
90094>>>>>>>    // Remarks
90094>>>>>>>    //    The MAPILogon function begins a session with the messaging system, returning
90094>>>>>>>    //    a handle that can be used in subsequent MAPI calls to explicitly provide
90094>>>>>>>    //    user credentials to the messaging system. To request the display of a logon
90094>>>>>>>    //    dialog box if the credentials presented fail to validate the session, set
90094>>>>>>>    //    the flFlags parameter to MAPI_LOGON_UI.
90094>>>>>>>    //
90094>>>>>>>    //    The client application tests for an existing session by calling MAPILogon
90094>>>>>>>    //    with a NULL value for the lpsProfileName parameter, a NULL value for the
90094>>>>>>>    //    lpsPassword parameter and by not setting the MAPI_LOGON_UI flag in flFlags.
90094>>>>>>>    //    If there is an existing session, the call succeeds and returns a valid
90094>>>>>>>    //    LHANDLE for the session. Otherwise, the call fails.
90094>>>>>>>    //
90094>>>>>>>    // $Rev History
90094>>>>>>>    //    28-07-04 Removed the use of DFTRUE in compare of boolean property setting
90094>>>>>>>    //    27/10/99 Changed so that errors only display when pbReportErrors is true
90094>>>>>>>    //             Changed from procedure to function
90094>>>>>>>    //    25/10/99 Changed the use of profilename to use the propetry value when
90094>>>>>>>    //             no profilename was specified.
90094>>>>>>>    //    23/07/99 To make the Logon call modal we need to pass the
90094>>>>>>>    //             window_handle of the current focus object (assuming this is a
90094>>>>>>>    //             good window_handle).
90094>>>>>>>    //    18-11-98 VO Module header created
90094>>>>>>>    //****************************************************************************
90094>>>>>>>    Function Logon String sProfileName String sPassWord Integer iFlags Returns Integer
90096>>>>>>>        Handle hWnd hSessionId
90096>>>>>>>        Pointer lpsProfileName lpsPassWord lpMapiSession
90096>>>>>>>        Integer iRetval hoFocus
90096>>>>>>>        String sMapiSession
90096>>>>>>>
90096>>>>>>>        Get phSessionID To hSessionId
90097>>>>>>>        If (hSessionId = 0) Begin
90099>>>>>>>            //Get Focus Of Desktop To hoFocus
90099>>>>>>>            //Get Window_Handle Of hoFocus To hWnd
90099>>>>>>>            Get OwnerHandle To hWnd
90100>>>>>>>            If (sProfileName = "") Begin
90102>>>>>>>                Get psUserName To sProfileName
90103>>>>>>>                Get psPassWord To sPassWord
90104>>>>>>>            End
90104>>>>>>>>
90104>>>>>>>            GetAddress Of sProfileName To lpsProfileName
90105>>>>>>>            GetAddress Of sPassWord To lpsPassWord
90106>>>>>>>            ZeroType MapiSession To sMapiSession
90107>>>>>>>            GetAddress Of sMapiSession To lpMapiSession
90108>>>>>>>
90108>>>>>>>            Move (MapiLogon (hWnd, lpsProfileName, lpsPassWord, iFlags, 0, lpMapiSession)) To iRetval
90109>>>>>>>            If (iRetval = SUCCESS_SUCCESS) Begin
90111>>>>>>>                Getbuff From sMapiSession At MapiSession.SessionID To hSessionId
90112>>>>>>>                Set phSessionID To hSessionId
90113>>>>>>>            End
90113>>>>>>>>
90113>>>>>>>            Else Begin
90114>>>>>>>                If (pbReportErrors (Self)) Begin
90116>>>>>>>                    Error DFERR_MAPI (C_$LogonError * String (iRetval))
90117>>>>>>>>
90117>>>>>>>                End
90117>>>>>>>>
90117>>>>>>>            End
90117>>>>>>>>
90117>>>>>>>        End
90117>>>>>>>>
90117>>>>>>>        Else Begin
90118>>>>>>>            If (pbReportErrors (Self)) Begin
90120>>>>>>>                Error DFERR_MAPI C_$LogonAlreadyLoggedIn
90121>>>>>>>>
90121>>>>>>>            End
90121>>>>>>>>
90121>>>>>>>        End
90121>>>>>>>>
90121>>>>>>>
90121>>>>>>>        Function_Return iRetval
90122>>>>>>>    End_Function // Logon
90123>>>>>>>
90123>>>>>>>    //****************************************************************************
90123>>>>>>>    // $Module type: FUNCTION
90123>>>>>>>    // $Module name: Logoff
90123>>>>>>>    // $Author     : VO
90123>>>>>>>    // Created     : 18-11-98 @ 16:01
90123>>>>>>>    //
90123>>>>>>>    // Description
90123>>>>>>>    //    This method will logoff us from MAPI
90123>>>>>>>    //
90123>>>>>>>    // lhSession
90123>>>>>>>    //    [in] Handle for the Simple MAPI session to be terminated. Session
90123>>>>>>>    //    handles are returned by the MAPILogon function and invalidated by
90123>>>>>>>    //    MAPILogoff. The value of the lhSessionId parameter must represent a
90123>>>>>>>    //    valid session; it cannot be zero.
90123>>>>>>>    // ulUIParam
90123>>>>>>>    //    [in] Parent window handle or zero, indicating that if a dialog box
90123>>>>>>>    //    is displayed, it is application modal. If the ulUIParam parameter
90123>>>>>>>    //    contains a parent window handle, it is of type HWND (cast to a
90123>>>>>>>    //    ULONG). If no dialog box is displayed during the call, ulUIParam
90123>>>>>>>    //    is ignored.
90123>>>>>>>    // flFlags
90123>>>>>>>    //    Reserved; must be zero.
90123>>>>>>>    // ulReserved
90123>>>>>>>    //    Reserved; must be zero.
90123>>>>>>>    //
90123>>>>>>>    // Return Values
90123>>>>>>>    //    MAPI_E_FAILURE
90123>>>>>>>    //       The flFlags parameter is invalid or one or more unspecified
90123>>>>>>>    //       errors occurred.
90123>>>>>>>    //    MAPI_E_INSUFFICIENT_MEMORY
90123>>>>>>>    //       There was insufficient memory to proceed. The session was
90123>>>>>>>    //       not terminated.
90123>>>>>>>    //    MAPI_E_INVALID_SESSION
90123>>>>>>>    //       An invalid session handle was used for the lhSession
90123>>>>>>>    //       parameter. The session was not terminated.
90123>>>>>>>    //    SUCCESS_SUCCESS
90123>>>>>>>    //       The call succeeded and the session was terminated.
90123>>>>>>>    //
90123>>>>>>>    // $Rev History
90123>>>>>>>    //    28-07-04 Removed the use of DFTRUE in compare of boolean property setting
90123>>>>>>>    //    24/04/00 Added "Returns Integer".
90123>>>>>>>    //    27/10/99 Changed so that errors only display when pbReportErrors is true
90123>>>>>>>    //             Changed from procedure to function
90123>>>>>>>    //    23/07/99 To make the Logoff call modal we need to pass the
90123>>>>>>>    //             window_handle of the current focus object (assuming this is a
90123>>>>>>>    //             good window_handle).
90123>>>>>>>    //    18-11-98 VO Module header created
90123>>>>>>>    //****************************************************************************
90123>>>>>>>    Function Logoff Returns Integer
90125>>>>>>>        Handle hWnd hSessionId
90125>>>>>>>        Integer iRetval hoFocus
90125>>>>>>>        Pointer lplhSession
90125>>>>>>>
90125>>>>>>>        Get phSessionID To hSessionId
90126>>>>>>>        If (hSessionId <> 0) Begin
90128>>>>>>>            //Get Focus Of Desktop To hoFocus
90128>>>>>>>            //Get Window_Handle Of hoFocus To hWnd
90128>>>>>>>            Get OwnerHandle To hWnd
90129>>>>>>>            Move (MapiLogoff (hSessionId, hWnd, 0, 0)) To iRetval
90130>>>>>>>            If (iRetval <> SUCCESS_SUCCESS) Begin
90132>>>>>>>                If (pbReportErrors (Self)) Begin
90134>>>>>>>                    Error DFERR_MAPI (C_$LogoffFailureError * String (iRetval))
90135>>>>>>>>
90135>>>>>>>                End
90135>>>>>>>>
90135>>>>>>>            End
90135>>>>>>>>
90135>>>>>>>            Else Begin
90136>>>>>>>                Set phSessionID To 0
90137>>>>>>>            End
90137>>>>>>>>
90137>>>>>>>        End
90137>>>>>>>>
90137>>>>>>>        Else Begin
90138>>>>>>>            If (pbReportErrors (Self)) Begin
90140>>>>>>>                Error DFERR_MAPI C_$LogoffNotLoggedIn
90141>>>>>>>>
90141>>>>>>>            End
90141>>>>>>>>
90141>>>>>>>        End
90141>>>>>>>>
90141>>>>>>>
90141>>>>>>>        Function_Return iRetval
90142>>>>>>>    End_Function // Logoff
90143>>>>>>>
90143>>>>>>>    //****************************************************************************
90143>>>>>>>    // $Module type: FUNCTION
90143>>>>>>>    // $Module name: FindNext
90143>>>>>>>    // $Author     : VO
90143>>>>>>>    // Created     : 27-11-98 @ 14:38
90143>>>>>>>    //
90143>>>>>>>    // Description
90143>>>>>>>    //    This method will find either the first or the next message in the
90143>>>>>>>    //    queue. When sMessageId is empty it will find the first message else
90143>>>>>>>    //    the next message to sMessageId is found. The found sMessageId is
90143>>>>>>>    //    returned or empty when an error was found or the end of the queue
90143>>>>>>>    //    was reached.
90143>>>>>>>    //
90143>>>>>>>    // lhSession
90143>>>>>>>    //    [in] Session handle that represents a Simple MAPI session. The value
90143>>>>>>>    //    of the lhSessionId parameter must represent a valid session; it cannot
90143>>>>>>>    //    be zero.
90143>>>>>>>    // ulUIParam
90143>>>>>>>    //    [in] Parent window handle or zero, indicating that if a dialog box is
90143>>>>>>>    //    displayed, it is application modal. If the ulUIParam parameter
90143>>>>>>>    //    contains a parent window handle, it is of type HWND (cast to a
90143>>>>>>>    //    ULONG). If no dialog box is displayed during the call, ulUIParam is
90143>>>>>>>    //    ignored.
90143>>>>>>>    // lpsMessageType
90143>>>>>>>    //    [in] Pointer to a string identifying the message class to search. To
90143>>>>>>>    //    find an interpersonal message (IPM), specify NULL in the
90143>>>>>>>    //    lpsMessageType parameter or have it point to an empty string.
90143>>>>>>>    //    Messaging systems whose only supported message class is IPM can
90143>>>>>>>    //    ignore this parameter.
90143>>>>>>>    // lpsSeedMessageID
90143>>>>>>>    //    [in] Pointer to a string containing the message identifier seed for
90143>>>>>>>    //    the request. If the lpsSeedMessageID parameter is NULL or points
90143>>>>>>>    //    to an empty string, MAPIFindNext retrieves the first message that
90143>>>>>>>    //    matches the type specified in the lpsMessageType parameter.
90143>>>>>>>    // flFlags
90143>>>>>>>    //    [in] Bitmask of option flags. The following flags can be set:
90143>>>>>>>    //       MAPI_GUARANTEE_FIFO
90143>>>>>>>    //          The message identifiers returned should be in the order of
90143>>>>>>>    //          time received. MAPIFindNext calls can take longer if this
90143>>>>>>>    //          flag is set. Some implementations cannot honor this request
90143>>>>>>>    //          and return the MAPI_E_NOT_SUPPORTED value.
90143>>>>>>>    //       MAPI_LONG_MSGID
90143>>>>>>>    //          The returned message identifier can be as long as 512
90143>>>>>>>    //          characters. If this flag is set, the lpsMessageID parameter
90143>>>>>>>    //          must be large enough to accommodate 512 characters.
90143>>>>>>>    //          Older versions of MAPI supported smaller message identifiers
90143>>>>>>>    //          (64 bytes) and did not include this flag. MAPIFindNext will
90143>>>>>>>    //          succeed without this flag set as long as lpsMessageID is
90143>>>>>>>    //          large enough to hold the message identifier. If lpsMessageID
90143>>>>>>>    //          cannot hold the message identifier, MAPIFindNext will fail.
90143>>>>>>>    //       MAPI_UNREAD_ONLY
90143>>>>>>>    //          Only unread messages of the specified type should be enumerated.
90143>>>>>>>    //          If this flag is not set, MAPIFindNext can return any message
90143>>>>>>>    //          of the specified type.
90143>>>>>>>    // ulReserved
90143>>>>>>>    //    Reserved; must be zero.
90143>>>>>>>    // lpsMessageID
90143>>>>>>>    //    [out] Pointer to the returned message identifier. The caller is
90143>>>>>>>    //    responsible for allocating the memory. To ensure compatibility, allocate
90143>>>>>>>    //    512 characters and set MAPI_LONG_MSGID in the flFlags parameter. A
90143>>>>>>>    //    smaller buffer is sufficient only if the returned message identifier is
90143>>>>>>>    //    always 64 characters or less.
90143>>>>>>>    //
90143>>>>>>>    // Return Values
90143>>>>>>>    //    MAPI_E_FAILURE
90143>>>>>>>    //       One or more unspecified errors occurred while matching the message
90143>>>>>>>    //       type. The call failed before message type matching could take place.
90143>>>>>>>    //    MAPI_E_INSUFFICIENT_MEMORY
90143>>>>>>>    //       There was insufficient memory to proceed. No message was found.
90143>>>>>>>    //    MAPI_E_INVALID_MESSAGE
90143>>>>>>>    //       An invalid message identifier was passed in the lpsSeedMessageID
90143>>>>>>>    //       parameter. No message was found.
90143>>>>>>>    //    MAPI_E_INVALID_SESSION
90143>>>>>>>    //       An invalid session handle was passed in the lhSessionId parameter.
90143>>>>>>>    //       No message was found.
90143>>>>>>>    //    MAPI_E_NO_MESSAGES
90143>>>>>>>    //       A matching message could not be found.
90143>>>>>>>    //    SUCCESS_SUCCESS
90143>>>>>>>    //       The call succeeded and the message identifier was returned.
90143>>>>>>>    //
90143>>>>>>>    // Remarks
90143>>>>>>>    //    The MAPIFindNext function allows a client application to enumerate
90143>>>>>>>    //    messages of a given type. This function can be called repeatedly to
90143>>>>>>>    //    list all messages in the folder. Message identifiers returned from
90143>>>>>>>    //    MAPIFindNext can be used in other Simple MAPI calls to retrieve
90143>>>>>>>    //    message contents and delete messages. This function is for processing
90143>>>>>>>    //    incoming messages, not for managing received messages.
90143>>>>>>>    //
90143>>>>>>>    //    MAPIFindNext looks for messages in the folder in which new messages
90143>>>>>>>    //    of the specified type are delivered. MAPIFindNext calls can be made
90143>>>>>>>    //    only in the context of a valid Simple MAPI session established with
90143>>>>>>>    //    the MAPILogon function.
90143>>>>>>>    //
90143>>>>>>>    //    When the lpsSeedMessageID parameter is NULL or points to an empty
90143>>>>>>>    //    string, MAPIFindNext returns the message identifier for the first
90143>>>>>>>    //    message of the type specified by the lpsMessageType parameter. When
90143>>>>>>>    //    lpsSeedMessageID contains a valid identifier, the function returns
90143>>>>>>>    //    the next matching message of the type specified by lpsMessageType.
90143>>>>>>>    //    Repeated calls to MAPIFindNext ultimately result in a return of the
90143>>>>>>>    //    MAPI_E_NO_MESSAGES value, which means the enumeration is complete.
90143>>>>>>>    //
90143>>>>>>>    //    Message type matching is done against message class strings. All
90143>>>>>>>    //    message types whose names match (up to the length specified in
90143>>>>>>>    //    lpsMessageType) are returned.
90143>>>>>>>    //
90143>>>>>>>    //    Because message identifiers are messaging system-specific and can
90143>>>>>>>    //    be invalidated at any time, message identifiers are valid only
90143>>>>>>>    //    for the current session. If the message identifier passed in
90143>>>>>>>    //    lpsSeedMessageID is invalid, MAPIFindNext returns the
90143>>>>>>>    //    MAPI_E_INVALID_MESSAGE value.
90143>>>>>>>    //
90143>>>>>>>    // $Rev History
90143>>>>>>>    //    28-07-04 Removed the use of DFTRUE in compare of boolean property setting
90143>>>>>>>    //    27/10/99 Changed so that errors only display when pbReportErrors is true
90143>>>>>>>    //    23/07/99 To make the FindNext call modal we need to pass the
90143>>>>>>>    //             window_handle of the current focus object (assuming this is a
90143>>>>>>>    //             good window_handle).
90143>>>>>>>    //    27-11-98 VO Module header created
90143>>>>>>>    //****************************************************************************
90143>>>>>>>    Function FindNext String sSeedMessageId Integer iFlags Returns String
90145>>>>>>>        Handle hWnd hSessionId
90145>>>>>>>        String sFindNextMessageType sMessageId
90145>>>>>>>        Pointer lpsSeedMessageId lpsFindNextMessageType lpsMessageId
90145>>>>>>>        Integer iRetval hoFocus
90145>>>>>>>
90145>>>>>>>        Get phSessionID To hSessionId
90146>>>>>>>        If (hSessionId <> 0) Begin
90148>>>>>>>            //Get Focus Of Desktop To hoFocus
90148>>>>>>>            //Get Window_Handle Of hoFocus To hWnd
90148>>>>>>>            Get OwnerHandle To hWnd
90149>>>>>>>            Get psFindNextMessageType To sFindNextMessageType
90150>>>>>>>            GetAddress Of sSeedMessageId To lpsSeedMessageId
90151>>>>>>>            GetAddress Of sFindNextMessageType To lpsFindNextMessageType
90152>>>>>>>            If (iFlags iAnd MAPI_LONG_MSGID = MAPI_LONG_MSGID) Begin
90154>>>>>>>                ZeroString 512 To sMessageId
90155>>>>>>>            End
90155>>>>>>>>
90155>>>>>>>            Else Begin
90156>>>>>>>                ZeroString 64 To sMessageId
90157>>>>>>>            End
90157>>>>>>>>
90157>>>>>>>            GetAddress Of sMessageId To lpsMessageId
90158>>>>>>>            Move (MAPIFindNext (hSessionId, hWnd, lpsFindNextMessageType, lpsSeedMessageId, iFlags, 0, lpsMessageId)) To iRetval
90159>>>>>>>            If (iRetval <> SUCCESS_SUCCESS) Begin
90161>>>>>>>                Move "" To sMessageId
90162>>>>>>>            End
90162>>>>>>>>
90162>>>>>>>            Else Begin
90163>>>>>>>                Move (Cstring (sMessageId)) To sMessageId
90164>>>>>>>                Set psMessageId To sMessageId
90165>>>>>>>            End
90165>>>>>>>>
90165>>>>>>>        End
90165>>>>>>>>
90165>>>>>>>        Else Begin
90166>>>>>>>            If (pbReportErrors (Self)) Begin
90168>>>>>>>                Error DFERR_MAPI C_$FindNextNotLoggedIn
90169>>>>>>>>
90169>>>>>>>            End
90169>>>>>>>>
90169>>>>>>>        End
90169>>>>>>>>
90169>>>>>>>
90169>>>>>>>        Function_Return sMessageId
90170>>>>>>>    End_Function // FindNext
90171>>>>>>>
90171>>>>>>>    //****************************************************************************
90171>>>>>>>    // $Module type: FUNCTION
90171>>>>>>>    // $Module name: CopyPointerToDfString
90171>>>>>>>    // $Author     : VO
90171>>>>>>>    // Created     : 27-11-98 @ 16:25
90171>>>>>>>    //
90171>>>>>>>    // Description
90171>>>>>>>    //    This function returns the message part from the passed memory pointer.
90171>>>>>>>    //    Internal function not to be used by developers using this class for
90171>>>>>>>    //    instantiation.
90171>>>>>>>    //
90171>>>>>>>    // $Rev History
90171>>>>>>>    //    27-11-98 VO Module header created
90171>>>>>>>    //****************************************************************************
90171>>>>>>>    Function CopyPointerToDfString Pointer lpsDataPointer Returns String
90173>>>>>>>        String sResult sCharacter
90173>>>>>>>        Integer iVoid
90173>>>>>>>        Pointer pCharacter
90173>>>>>>>
90173>>>>>>>        If (lpsDataPointer <> 0) Begin
90175>>>>>>>            ZeroString 1 To sCharacter
90176>>>>>>>            GetAddress Of sCharacter To pCharacter
90177>>>>>>>            Move (CopyMemory (pCharacter, lpsDataPointer, 1)) To iVoid
90178>>>>>>>            While (Ascii (sCharacter) <> 0)
90182>>>>>>>                Move (sResult + sCharacter) To sResult
90183>>>>>>>                Increment lpsDataPointer
90184>>>>>>>                Move (CopyMemory (pCharacter, lpsDataPointer, 1)) To iVoid
90185>>>>>>>            End
90186>>>>>>>>
90186>>>>>>>        End
90186>>>>>>>>
90186>>>>>>>
90186>>>>>>>        Function_Return sResult
90187>>>>>>>    End_Function // CopyPointerToDfString
90188>>>>>>>
90188>>>>>>>    //****************************************************************************
90188>>>>>>>    // $Module type: FUNCTION
90188>>>>>>>    // $Module name: PointerToStr
90188>>>>>>>    // $Author     : VO
90188>>>>>>>    // Created     : 04/24/00 @ 2:24
90188>>>>>>>    //
90188>>>>>>>    // Description
90188>>>>>>>    //    Copies the information from the pointer to a string. Differs from
90188>>>>>>>    //    CopyPointerToDfString in that it knows how many bytes to copy.
90188>>>>>>>    //
90188>>>>>>>    // $Rev History
90188>>>>>>>    //    04/24/00 VO Module header created
90188>>>>>>>    //****************************************************************************
90188>>>>>>>    Function PointerToStr Pointer lpsDataPointer Integer iLength Returns String
90190>>>>>>>        String sValue
90190>>>>>>>        Pointer pValue
90190>>>>>>>        Integer iVoid
90190>>>>>>>
90190>>>>>>>        If (iLength > 0) Begin
90192>>>>>>>            ZeroString iLength To sValue
90193>>>>>>>            GetAddress Of sValue To pValue
90194>>>>>>>            Move (CopyMemory (pValue, lpsDataPointer, iLength)) To iVoid
90195>>>>>>>        End
90195>>>>>>>>
90195>>>>>>>
90195>>>>>>>        Function_Return sValue
90196>>>>>>>    End_Function // PointerToStr
90197>>>>>>>
90197>>>>>>>    //****************************************************************************
90197>>>>>>>    // $Module type: FUNCTION
90197>>>>>>>    // $Module name: ReadMail
90197>>>>>>>    // $Author     : VO
90197>>>>>>>    // Created     : 27-11-98 @ 16:02
90197>>>>>>>    //
90197>>>>>>>    // Description
90197>>>>>>>    //    This function reads the mail message addressed by the passed message id
90197>>>>>>>    //    and flags and returns the status of the action.
90197>>>>>>>    //
90197>>>>>>>    // lhSession
90197>>>>>>>    //    [in] Handle to a Simple MAPI session. The value of the lhSession
90197>>>>>>>    //    parameter must represent a valid session; it cannot be zero.
90197>>>>>>>    // ulUIParam
90197>>>>>>>    //    [in] Parent window handle or zero, indicating that if a dialog box is
90197>>>>>>>    //    displayed, it is application modal. If the ulUIParam parameter
90197>>>>>>>    //    contains a parent window handle, it is of type HWND (cast to a ULONG).
90197>>>>>>>    //    If no dialog box is displayed during the call, ulUIParam is ignored.
90197>>>>>>>    // lpsMessageID
90197>>>>>>>    //    [in] Pointer to a message identifier string for the message to be
90197>>>>>>>    //    read. The string is allocated by the caller.
90197>>>>>>>    // flFlags
90197>>>>>>>    //    [in] Bitmask of option flags. The following flags can be set:
90197>>>>>>>    //    MAPI_BODY_AS_FILE
90197>>>>>>>    //       MAPIReadMail should write the message text to a temporary file and
90197>>>>>>>    //       add it as the first attachment in the attachment list.
90197>>>>>>>    //    MAPI_ENVELOPE_ONLY
90197>>>>>>>    //       MAPIReadMail should read the message header only. File attachments
90197>>>>>>>    //       are not copied to temporary files, and neither temporary file
90197>>>>>>>    //       names nor message text is written. Setting this flag enhances
90197>>>>>>>    //       performance.
90197>>>>>>>    //    MAPI_PEEK
90197>>>>>>>    //       MAPIReadMail does not mark the message as read. Marking a message
90197>>>>>>>    //       as read affects its appearance in the user interface and
90197>>>>>>>    //       generates a read receipt. If the messaging system does not
90197>>>>>>>    //       support this flag, MAPIReadMail always marks the message as read.
90197>>>>>>>    //       If MAPIReadMail encounters an error, it leaves the message unread.
90197>>>>>>>    //    MAPI_SUPPRESS_ATTACH
90197>>>>>>>    //       MAPIReadMail should not copy file attachments but should write
90197>>>>>>>    //       message text into the MapiMessage structure. MAPIReadMail ignores
90197>>>>>>>    //       this flag if the calling application has set the
90197>>>>>>>    //       MAPI_ENVELOPE_ONLY flag. Setting the MAPI_SUPPRESS_ATTACH flag
90197>>>>>>>    //       enhances performance.
90197>>>>>>>    // ulReserved
90197>>>>>>>    //    Reserved; must be zero.
90197>>>>>>>    // lppMessage
90197>>>>>>>    //    [out] Pointer to the location where the message is written. Messages
90197>>>>>>>    //    are written to a MapiMessage structure which can be freed with a
90197>>>>>>>    //    single call to the MAPIFreeBuffer function.
90197>>>>>>>    //    When MAPI_ENVELOPE_ONLY and MAPI_SUPPRESS_ATTACH are not set,
90197>>>>>>>    //    attachments are written to temporary files pointed to by the
90197>>>>>>>    //    lpFiles member of the MapiMessage structure. It is the caller's
90197>>>>>>>    //    responsibility to delete these files when they are no longer needed.
90197>>>>>>>    //
90197>>>>>>>    // Return Values
90197>>>>>>>    //    MAPI_E_ATTACHMENT_WRITE_FAILURE
90197>>>>>>>    //       An attachment could not be written to a temporary file. Check
90197>>>>>>>    //       directory permissions.
90197>>>>>>>    //    MAPI_E_DISK_FULL
90197>>>>>>>    //       An attachment could not be written to a temporary file because
90197>>>>>>>    //       there was not enough space on the disk.
90197>>>>>>>    //    MAPI_E_FAILURE
90197>>>>>>>    //       One or more unspecified errors occurred while reading the message.
90197>>>>>>>    //    MAPI_E_INSUFFICIENT_MEMORY
90197>>>>>>>    //       There was insufficient memory to read the message.
90197>>>>>>>    //    MAPI_E_INVALID_MESSAGE
90197>>>>>>>    //       An invalid message identifier was passed in the lpsMessageID
90197>>>>>>>    //       parameter.
90197>>>>>>>    //    MAPI_E_INVALID_SESSION
90197>>>>>>>    //       An invalid session handle was passed in the lhSessionId parameter.
90197>>>>>>>    //       No message was retrieved.
90197>>>>>>>    //    MAPI_E_TOO_MANY_FILES
90197>>>>>>>    //       There were too many file attachments in the message. The message
90197>>>>>>>    //       could not be read.
90197>>>>>>>    //    MAPI_E_TOO_MANY_RECIPIENTS
90197>>>>>>>    //       There were too many recipients of the message. The message could
90197>>>>>>>    //       not be read.
90197>>>>>>>    //    SUCCESS_SUCCESS
90197>>>>>>>    //       The call succeeded and the message was read.
90197>>>>>>>    //
90197>>>>>>>    // Remarks
90197>>>>>>>    //    The MAPIReadMail function returns one message, breaking the message
90197>>>>>>>    //    content into the same parameters and structures used in the
90197>>>>>>>    //    MAPISendMail function. MAPIReadMail fills a block of memory with the
90197>>>>>>>    //    MapiMessage structure containing message elements, such as the
90197>>>>>>>    //    subject, message class, delivery time, and the sender. File
90197>>>>>>>    //    attachments are saved to temporary files, and the names are returned
90197>>>>>>>    //    to the caller in the message structure. Recipients, attachments, and
90197>>>>>>>    //    contents are copied from the message before MAPIReadMail returns to
90197>>>>>>>    //    the caller, so later changes to the files do not affect the contents
90197>>>>>>>    //    of the message.
90197>>>>>>>    //
90197>>>>>>>    //    A flag is provided to specify that only envelope information is to
90197>>>>>>>    //    be returned from the call. Another flag (in the MapiMessage structure)
90197>>>>>>>    //    specifies whether the message is marked as sent or unsent.
90197>>>>>>>    //
90197>>>>>>>    //    The caller is responsible for freeing the MapiMessage structure by
90197>>>>>>>    //    calling the MAPIFreeBuffer function and deleting any files associated
90197>>>>>>>    //    with attachments included with the message.
90197>>>>>>>    //
90197>>>>>>>    //    Before calling MAPIReadMail, use the MAPIFindNext function to verify
90197>>>>>>>    //    that the message to be read is the one you want to be read. Because
90197>>>>>>>    //    message identifiers are system-specific and opaque and can be
90197>>>>>>>    //    invalidated at any time, MAPIReadMail considers a message identifier
90197>>>>>>>    //    to be valid only for the current Simple MAPI session.
90197>>>>>>>    //
90197>>>>>>>    // $Rev History
90197>>>>>>>    //    28-07-04 Removed the use of DFTRUE in compare of boolean property setting
90197>>>>>>>    //             Use of OF instead of TO with SEND
90197>>>>>>>    //    24/04/00 Store the message flags returned too.
90197>>>>>>>    //    27/10/99 Changed so that errors only display when pbReportErrors is true
90197>>>>>>>    //    26/10/99 Changed direct access to array objects into message action.
90197>>>>>>>    //    23/07/99 To make the ReadMail call modal we need to pass the
90197>>>>>>>    //             window_handle of the current focus object (assuming this is a
90197>>>>>>>    //             good window_handle).
90197>>>>>>>    //    27-11-98 VO Module header created
90197>>>>>>>    //****************************************************************************
90197>>>>>>>    Function ReadMail String sMessageId Integer iFlags Returns Integer
90199>>>>>>>        Handle hWnd hSessionId
90199>>>>>>>        Integer iRetval iVoid iRecipCount iCounter hoFocus
90199>>>>>>>        Integer iFileCount ulEIDSize iMessageFlags hoRecipientsArray hoAttachmentsArray
90199>>>>>>>        Pointer lpsMessageId lpMapiMessagePointer lppMessage lpsMapiMessage lpsSubject
90199>>>>>>>        Pointer lpsNoteText lpsMessageType lpsDateReceived lpsConversationID
90199>>>>>>>        Pointer lpsMapiRecipDesc lppOriginator lpsName lpsAddress lppRecips
90199>>>>>>>        Pointer lppFiles lpsMapiFileDesc lpsPathName lpsFileName lpEntryID lpsEntryId
90199>>>>>>>        String sMapiMessagePointer sMapiMessage sMessageSubject sNoteText sMessageType
90199>>>>>>>        String sDateReceived sConversationID sMapiRecipDesc szName szAddress
90199>>>>>>>        String sMapiFileDesc szPathName szFileName sEntryID
90199>>>>>>>
90199>>>>>>>        Send DoClearRecipientsList
90200>>>>>>>        Send DoClearAttachmentsList
90201>>>>>>>
90201>>>>>>>        Move oAttachmentsArray To hoAttachmentsArray
90202>>>>>>>        Move oRecipientsArray To hoRecipientsArray
90203>>>>>>>
90203>>>>>>>        Get phSessionID To hSessionId
90204>>>>>>>        If (hSessionId <> 0) Begin
90206>>>>>>>            Set psMessageId To sMessageId
90207>>>>>>>
90207>>>>>>>            //Get Focus Of Desktop To hoFocus
90207>>>>>>>            //Get Window_Handle Of hoFocus To hWnd
90207>>>>>>>            Get OwnerHandle To hWnd
90208>>>>>>>            ZeroType MapiMessagePointer To sMapiMessagePointer
90209>>>>>>>            GetAddress Of sMapiMessagePointer To lpMapiMessagePointer
90210>>>>>>>            GetAddress Of sMessageId To lpsMessageId
90211>>>>>>>            Move (MapiReadMail (hSessionId, hWnd, lpsMessageId, iFlags, 0, lpMapiMessagePointer)) To iRetval
90212>>>>>>>            If (iRetval = SUCCESS_SUCCESS) Begin
90214>>>>>>>                Getbuff From sMapiMessagePointer At MapiMessagePointer.lppMessage To lppMessage
90215>>>>>>>                Zerotype MapiMessage To sMapiMessage
90216>>>>>>>                GetAddress Of sMapiMessage To lpsMapiMessage
90217>>>>>>>                Move (CopyMemory (lpsMapiMessage, lppMessage, MapiMessage_Size)) To iVoid
90218>>>>>>>
90218>>>>>>>                Getbuff From sMapiMessage At MapiMessage.lpszSubject To lpsSubject
90219>>>>>>>                Get CopyPointerToDfString lpsSubject To sMessageSubject
90220>>>>>>>                Set psMessageSubject To sMessageSubject
90221>>>>>>>
90221>>>>>>>                Getbuff From sMapiMessage At MapiMessage.lpszNoteText To lpsNoteText
90222>>>>>>>                Get CopyPointerToDfString lpsNoteText To sNoteText
90223>>>>>>>                Set psMessageText To sNoteText
90224>>>>>>>
90224>>>>>>>                Getbuff From sMapiMessage At MapiMessage.lpszMessageType To lpsMessageType
90225>>>>>>>                Get CopyPointerToDfString lpsMessageType To sMessageType
90226>>>>>>>                Set psMessageType To sMessageType
90227>>>>>>>
90227>>>>>>>                Getbuff From sMapiMessage At MapiMessage.lpszDateReceived To lpsDateReceived
90228>>>>>>>                Get CopyPointerToDfString lpsDateReceived To sDateReceived
90229>>>>>>>                Set psMessageDateReceived To sDateReceived
90230>>>>>>>
90230>>>>>>>                Getbuff From sMapiMessage At MapiMessage.lpszConversationID To lpsConversationID
90231>>>>>>>                Get CopyPointerToDfString lpsConversationID To sConversationID
90232>>>>>>>                Set psMessageConversationId To sConversationID
90233>>>>>>>
90233>>>>>>>                Getbuff From sMapiMessage At MapiMessage.flFlags To iMessageFlags
90234>>>>>>>                Set piMessageFlags To iMessageFlags
90235>>>>>>>
90235>>>>>>>                Getbuff From sMapiMessage At MapiMessage.lpOriginator To lppOriginator
90236>>>>>>>                ZeroType MapiRecipDesc To sMapiRecipDesc
90237>>>>>>>                GetAddress Of sMapiRecipDesc To lpsMapiRecipDesc
90238>>>>>>>                Move (CopyMemory (lpsMapiRecipDesc, lppOriginator, MapiRecipDesc_Size)) To iVoid
90239>>>>>>>
90239>>>>>>>                Getbuff From sMapiRecipDesc At MapiRecipDesc.lpszName To lpsName
90240>>>>>>>                Get CopyPointerToDfString lpsName To szName
90241>>>>>>>                Set psMessageSenderName To szName
90242>>>>>>>
90242>>>>>>>                Getbuff From sMapiRecipDesc At MapiRecipDesc.lpszAddress To lpsAddress
90243>>>>>>>                Get CopyPointerToDfString lpsAddress To szAddress
90244>>>>>>>                Set psMessageSenderAddress To szAddress
90245>>>>>>>
90245>>>>>>>                Getbuff From sMapiMessage At MapiMessage.nRecipCount To iRecipCount
90246>>>>>>>                Set piMessageRecipCount To iRecipCount
90247>>>>>>>
90247>>>>>>>                Getbuff From sMapiMessage At MapiMessage.lpRecips To lppRecips
90248>>>>>>>                For iCounter From 1 To iRecipCount
90254>>>>>>>>
90254>>>>>>>                    ZeroType MapiRecipDesc To sMapiRecipDesc
90255>>>>>>>                    GetAddress Of sMapiRecipDesc To lpsMapiRecipDesc
90256>>>>>>>                    Move (CopyMemory (lpsMapiRecipDesc, lppRecips, MapiRecipDesc_Size)) To iVoid
90257>>>>>>>
90257>>>>>>>                    Getbuff From sMapiRecipDesc At MapiRecipDesc.lpszName To lpsName
90258>>>>>>>                    Get CopyPointerToDfString lpsName To szName
90259>>>>>>>
90259>>>>>>>                    Getbuff From sMapiRecipDesc At MapiRecipDesc.lpszAddress To lpsAddress
90260>>>>>>>                    Get CopyPointerToDfString lpsAddress To szAddress
90261>>>>>>>
90261>>>>>>>                    Getbuff From sMapiRecipDesc At MapiRecipDesc.ulEIDSize To ulEIDSize
90262>>>>>>>                    Getbuff From sMapiRecipDesc At MapiRecipDesc.lpEntryID To lpEntryID
90263>>>>>>>                    Get PointerToStr lpEntryID ulEIDSize To sEntryId
90264>>>>>>>
90264>>>>>>>                    Send DoAddRecipient Of hoRecipientsArray szName szAddress sEntryID ulEIDSize
90265>>>>>>>
90265>>>>>>>                    Move (lppRecips + MapiRecipDesc_Size) To lppRecips
90266>>>>>>>                Loop
90267>>>>>>>>
90267>>>>>>>
90267>>>>>>>                Getbuff From sMapiMessage At MapiMessage.nFileCount To iFileCount
90268>>>>>>>                Set piMessageFileCount To iFileCount
90269>>>>>>>
90269>>>>>>>                Getbuff From sMapiMessage At MapiMessage.lpFiles To lppFiles
90270>>>>>>>                If (lppFiles <> 0) Begin
90272>>>>>>>                    For iCounter From 1 To iFileCount
90278>>>>>>>>
90278>>>>>>>                        ZeroType MapiFileDesc To sMapiFileDesc
90279>>>>>>>                        GetAddress Of sMapiFileDesc To lpsMapiFileDesc
90280>>>>>>>                        Move (CopyMemory (lpsMapiFileDesc, lppFiles, MapiFileDesc_Size)) To iVoid
90281>>>>>>>
90281>>>>>>>                        Getbuff From sMapiFileDesc At MapiFileDesc.lpszPathName To lpsPathName
90282>>>>>>>                        Get CopyPointerToDfString lpsPathName To szPathName
90283>>>>>>>
90283>>>>>>>                        Getbuff From sMapiFileDesc At MapiFileDesc.lpszFileName To lpsFileName
90284>>>>>>>                        Get CopyPointerToDfString lpsFileName To szFileName
90285>>>>>>>
90285>>>>>>>                        Send DoAddAttachment Of hoAttachmentsArray szPathName szFileName
90286>>>>>>>
90286>>>>>>>                        Move (lppFiles + MapiFileDesc_Size) To lppFiles
90287>>>>>>>                    Loop
90288>>>>>>>>
90288>>>>>>>                End
90288>>>>>>>>
90288>>>>>>>
90288>>>>>>>                Move (MapiFreeBuffer (lppMessage)) To iRetval
90289>>>>>>>                If (iRetval <> SUCCESS_SUCCESS) Begin
90291>>>>>>>                    If (pbReportErrors (Self)) Begin
90293>>>>>>>                        Error DFERR_MAPI (C_$FreeBufferError * String (iRetval))
90294>>>>>>>>
90294>>>>>>>                    End
90294>>>>>>>>
90294>>>>>>>                End
90294>>>>>>>>
90294>>>>>>>            End
90294>>>>>>>>
90294>>>>>>>            Else Begin
90295>>>>>>>                If (pbReportErrors (Self)) Begin
90297>>>>>>>                    Error DFERR_MAPI (C_$ReadMailError * String (iRetval))
90298>>>>>>>>
90298>>>>>>>                End
90298>>>>>>>>
90298>>>>>>>            End
90298>>>>>>>>
90298>>>>>>>        End
90298>>>>>>>>
90298>>>>>>>        Else Begin
90299>>>>>>>            If (pbReportErrors (Self)) Begin
90301>>>>>>>                Error DFERR_MAPI C_$ReadMailNotLoggedOn
90302>>>>>>>>
90302>>>>>>>            End
90302>>>>>>>>
90302>>>>>>>        End
90302>>>>>>>>
90302>>>>>>>
90302>>>>>>>        Function_Return iRetval
90303>>>>>>>    End_Function // ReadMail
90304>>>>>>>
90304>>>>>>>    //****************************************************************************
90304>>>>>>>    // $Module type: FUNCTION
90304>>>>>>>    // $Module name: SendMail
90304>>>>>>>    // $Author     : VO
90304>>>>>>>    // Created     : 05/31/99 @ 4:48
90304>>>>>>>    //
90304>>>>>>>    // Description
90304>>>>>>>    //    The SendMail function sends a message. This function differs from
90304>>>>>>>    //    the SendDocuments function in that it allows greater flexibility
90304>>>>>>>    //    in message generation.
90304>>>>>>>    //
90304>>>>>>>    //    Parameters
90304>>>>>>>    //       lhSession
90304>>>>>>>    //          [in] Handle to a Simple MAPI session or zero. If the value of
90304>>>>>>>    //          the lhSessionId parameter is zero, MAPI logs on the user and
90304>>>>>>>    //          creates a session that exists only for the duration of the
90304>>>>>>>    //          call. This temporary session can be an existing shared session
90304>>>>>>>    //          or a new one. If necessary, the logon dialog box is displayed.
90304>>>>>>>    //       ulUIParam
90304>>>>>>>    //          [in] Parent window handle or zero, indicating that if a dialog
90304>>>>>>>    //          box is displayed, it is application modal. If the ulUIParam
90304>>>>>>>    //          parameter contains a parent window handle, it is of type HWND
90304>>>>>>>    //         (cast to a ULONG). If no dialog box is displayed during the
90304>>>>>>>    //          call, ulUIParam is ignored.
90304>>>>>>>    //       lpMessage
90304>>>>>>>    //          [in] Pointer to a MapiMessage structure containing the message
90304>>>>>>>    //          to be sent. If the MAPI_DIALOG flag is not set, the nRecipCount
90304>>>>>>>    //          and lpRecips members must be valid for successful message
90304>>>>>>>    //          delivery. Client applications can set the flFlags member to
90304>>>>>>>    //          MAPI_RECEIPT_REQUESTED to request a read report. All other
90304>>>>>>>    //          members are ignored and unused pointers should be NULL.
90304>>>>>>>    //       flFlags
90304>>>>>>>    //          [in] Bitmask of option flags. The following flags can be set:
90304>>>>>>>    //          MAPI_DIALOG
90304>>>>>>>    //             A dialog box should be displayed to prompt the user for
90304>>>>>>>    //             recipients and other sending options. When MAPI_DIALOG is
90304>>>>>>>    //             not set, at least one recipient must be specified.
90304>>>>>>>    //          MAPI_LOGON_UI
90304>>>>>>>    //             A dialog box should be displayed to prompt the user to log
90304>>>>>>>    //             on if required. When the MAPI_LOGON_UI flag is not set, the
90304>>>>>>>    //             client application does not display a logon dialog box and
90304>>>>>>>    //             returns an error value if the user is not logged on.
90304>>>>>>>    //             MAPISendMail ignores this flag if the lpsMessageID parameter
90304>>>>>>>    //             is empty.
90304>>>>>>>    //          MAPI_NEW_SESSION
90304>>>>>>>    //             An attempt should be made to create a new session rather than
90304>>>>>>>    //             acquire the environment's shared session. If the
90304>>>>>>>    //             MAPI_NEW_SESSION flag is not set, MAPISendMail uses an
90304>>>>>>>    //             existing shared session.
90304>>>>>>>    //       ulReserved
90304>>>>>>>    //          Reserved; must be zero.
90304>>>>>>>    //
90304>>>>>>>    //    Return Values
90304>>>>>>>    //       MAPI_E_AMBIGUOUS_RECIPIENT
90304>>>>>>>    //          A recipient matched more than one of the recipient descriptor
90304>>>>>>>    //          structures and MAPI_DIALOG was not set. No message was sent.
90304>>>>>>>    //       MAPI_E_ATTACHMENT_NOT_FOUND
90304>>>>>>>    //          The specified attachment was not found. No message was sent.
90304>>>>>>>    //       MAPI_E_ATTACHMENT_OPEN_FAILURE
90304>>>>>>>    //          The specified attachment could not be opened. No message was sent.
90304>>>>>>>    //       MAPI_E_BAD_RECIPTYPE
90304>>>>>>>    //          The type of a recipient was not MAPI_TO, MAPI_CC, or MAPI_BCC.
90304>>>>>>>    //          No message was sent.
90304>>>>>>>    //       MAPI_E_FAILURE
90304>>>>>>>    //          One or more unspecified errors occurred. No message was sent.
90304>>>>>>>    //       MAPI_E_INSUFFICIENT_MEMORY
90304>>>>>>>    //          There was insufficient memory to proceed. No message was sent.
90304>>>>>>>    //       MAPI_E_INVALID_RECIPS
90304>>>>>>>    //          One or more recipients were invalid or did not resolve to any
90304>>>>>>>    //          address.
90304>>>>>>>    //       MAPI_E_LOGIN_FAILURE
90304>>>>>>>    //          There was no default logon, and the user failed to log on
90304>>>>>>>    //          successfully when the logon dialog box was displayed. No message
90304>>>>>>>    //          was sent.
90304>>>>>>>    //       MAPI_E_TEXT_TOO_LARGE
90304>>>>>>>    //          The text in the message was too large. No message was sent.
90304>>>>>>>    //       MAPI_E_TOO_MANY_FILES
90304>>>>>>>    //          There were too many file attachments. No message was sent.
90304>>>>>>>    //       MAPI_E_TOO_MANY_RECIPIENTS
90304>>>>>>>    //          There were too many recipients. No message was sent.
90304>>>>>>>    //       MAPI_E_UNKNOWN_RECIPIENT
90304>>>>>>>    //          A recipient did not appear in the address list. No message was sent.
90304>>>>>>>    //       MAPI_E_USER_ABORT
90304>>>>>>>    //          The user canceled one of the dialog boxes. No message was sent.
90304>>>>>>>    //       SUCCESS_SUCCESS
90304>>>>>>>    //          The call succeeded and the message was sent.
90304>>>>>>>    //
90304>>>>>>>    //    Remarks
90304>>>>>>>    //       The MAPISendMail function sends a standard message, with or without
90304>>>>>>>    //       any user interaction. The profile must be configured so that
90304>>>>>>>    //       MAPISendMail can open the default service providers without
90304>>>>>>>    //       requiring user interaction. However, if the flFlags parameter is set
90304>>>>>>>    //       to MAPI_NEW_SESSION, disallowing the use of a shared session, and the
90304>>>>>>>    //       profile requires a password, MAPI_LOGON_UI must be set or the function
90304>>>>>>>    //       will fail. Client applications can avoid this situation by using an
90304>>>>>>>    //       explicit profile without a password or by using the default profile
90304>>>>>>>    //       without a password.
90304>>>>>>>    //
90304>>>>>>>    //       Client applications can provide a full or partial list of recipient
90304>>>>>>>    //       names, subject text, file attachments, or message text. If any
90304>>>>>>>    //       information is missing, MAPISendMail can prompt the user for it.
90304>>>>>>>    //       If no information is missing, either the message can be sent as is
90304>>>>>>>    //       or the user can be prompted to verify the information, changing
90304>>>>>>>    //       values if necessary.
90304>>>>>>>    //
90304>>>>>>>    //       A successful return from MAPISendMail does not necessarily imply
90304>>>>>>>    //       recipient validation. The message might not have been sent to all
90304>>>>>>>    //       recipients. Depending on the transport provider, recipient
90304>>>>>>>    //       validation can be a lengthy process.
90304>>>>>>>    //
90304>>>>>>>    //       A NULL value for the lpsSubject member of the MapiMessage
90304>>>>>>>    //       structure pointed to by the lpMessage parameter indicates that
90304>>>>>>>    //       there is no text for the subject of the message. A NULL value
90304>>>>>>>    //       for the lpsNoteText member indicates that there is no message
90304>>>>>>>    //       text. Some client applications can truncate subject lines that
90304>>>>>>>    //       are too long or contain carriage returns, line feeds, or form
90304>>>>>>>    //       feeds.
90304>>>>>>>    //
90304>>>>>>>    //       Each paragraph should be terminated with a CR (0x0d), an LF
90304>>>>>>>    //       (0x0a), or a CRLF pair (0x0d0a). MAPISendMail wraps lines as
90304>>>>>>>    //       appropriate. If the text exceeds system limits, the function
90304>>>>>>>    //       returns the MAPI_E_TEXT_TOO_LARGE value.
90304>>>>>>>    //
90304>>>>>>>    //       The lpsMessageType member of the MapiMessage structure pointed
90304>>>>>>>    //       to by lpMessage is used only by non-IPM applications.
90304>>>>>>>    //       Applications that handle IPM messages can set it to NULL or
90304>>>>>>>    //       have it point to an empty string.
90304>>>>>>>    //
90304>>>>>>>    //       The number of attachments per message can be limited in some
90304>>>>>>>    //       messaging systems. If the limit is exceeded, the
90304>>>>>>>    //       MAPI_E_TOO_MANY_FILES value is returned. If no files are
90304>>>>>>>    //       specified, a pointer value of NULL should be assigned to the
90304>>>>>>>    //       lpFiles member of the structure pointed to by lpMessage. File
90304>>>>>>>    //       attachments are copied to the message before MAPISendMail returns;
90304>>>>>>>    //       therefore, later changes to the files do not affect the contents
90304>>>>>>>    //       of the message. The files must be closed when they are copied.
90304>>>>>>>    //       Do not attempt to display attachments outside the range of the
90304>>>>>>>    //       message text.
90304>>>>>>>    //
90304>>>>>>>    //       Some messaging systems can limit the number of recipients per
90304>>>>>>>    //       message. A pointer value of NULL for the lpRecips member in
90304>>>>>>>    //       the MapiMessage structure pointed to by lpMessage indicates no
90304>>>>>>>    //       recipients. If the client application passes a non-NULL value
90304>>>>>>>    //       indicating a number of recipients exceeding the system limit,
90304>>>>>>>    //       MAPISendMail returns the MAPI_E_TOO_MANY_RECIPIENTS value. If
90304>>>>>>>    //       the value of the nRecipCount member in the MapiMessage structure
90304>>>>>>>    //       pointed to by lpMessage is 0, the MAPI_DIALOG flag must be present
90304>>>>>>>    //       in the call to MAPISendMail.
90304>>>>>>>    //
90304>>>>>>>    //       Note that the lpRecips member in the MapiMessage structure can
90304>>>>>>>    //       include either an entry identifier, the recipient's name, an
90304>>>>>>>    //       address, or a name and address pair. The following table shows
90304>>>>>>>    //       how MAPISendMail handles the variety of information that can be
90304>>>>>>>    //       specified:
90304>>>>>>>    //
90304>>>>>>>    //       Information       Action
90304>>>>>>>    //       entry identifier  No name resolution; the VO and address are ignored.
90304>>>>>>>    //       name              name resolved using the Simple MAPI resolution rules.
90304>>>>>>>    //       address           No name resolution; address is used for both message
90304>>>>>>>    //                         delivery and for displaying the recipient name.
90304>>>>>>>    //       name and address  No name resolution; name used only for displaying
90304>>>>>>>    //                         the recipient name.
90304>>>>>>>    //
90304>>>>>>>    //       Client applications that send messages to custom recipients can avoid
90304>>>>>>>    //       name resolution. Such clients should set the lpsAddress member of
90304>>>>>>>    //       the MapiRecipDesc structure pointed to by the lpRecips member of the
90304>>>>>>>    //       MapiMessage structure pointed to by the lpMessage parameter to the
90304>>>>>>>    //       custom address.
90304>>>>>>>    //
90304>>>>>>>    //       MAPISendMail does not require an originator-type recipient to send
90304>>>>>>>    //       a message.
90304>>>>>>>    //
90304>>>>>>>    // $Rev History
90304>>>>>>>    //    28-07-04 Removed the use of DFTRUE in compare of boolean property setting
90304>>>>>>>    //             Boolean variables instead of integers that act as boolean
90304>>>>>>>    //    10/08/00 Fix in passing a pointer to the entry-id's.
90304>>>>>>>    //    27/10/99 Changed so that errors only display when pbReportErrors is true
90304>>>>>>>    //    23/07/99 To make the SendMail call modal we need to pass the
90304>>>>>>>    //             window_handle of the current focus object (assuming this is a
90304>>>>>>>    //             good window_handle).
90304>>>>>>>    //    05/31/99 VO Module header created
90304>>>>>>>    //****************************************************************************
90304>>>>>>>    Function SendMail Integer iFlags Boolean bSendDirect Returns Integer
90306>>>>>>>        Integer iRetval iRecips
90306>>>>>>>        Integer iCounter iflFlags iReceiverType iArrayOffset iSize
90306>>>>>>>        Integer iAttachments hoFocus hoAttachmentsArray hoReceiversArray
90306>>>>>>>        Boolean bMapiMessageReturnRequest bMapiLongMsgId
90306>>>>>>>        Handle hSessionId hWnd
90306>>>>>>>        String sMapiMessageSubject sMapiMessageText sMapiMessage sRecips sReceiverName
90306>>>>>>>        String sReceiverAddress sReceiverAddresses sReceiverNames sMapiFileDesc sMessageId
90306>>>>>>>        String sAttachmentFileName sAttachmentPathName sAttachmentFileNames sAttachmentPathNames
90306>>>>>>>        String sReceiverEntryId sReceiverEntryIds
90306>>>>>>>        Pointer lpsMessageSubject lpsMessageText lpsMapiMessage lpsReceiverName
90306>>>>>>>        Pointer lpsReceiverAddress lpRecips lpsAttachmentFileNames lpsAttachmentPathNames
90306>>>>>>>        Pointer lpsMapiFileDesc lpsMessageId lpsReceiverEntryIds
90306>>>>>>>
90306>>>>>>>        Get phSessionID To hSessionId
90307>>>>>>>        If (hSessionId <> 0) Begin
90309>>>>>>>            //Get Focus Of Desktop To hoFocus
90309>>>>>>>            //Get Window_Handle Of hoFocus To hWnd
90309>>>>>>>            Get OwnerHandle To hWnd
90310>>>>>>>
90310>>>>>>>            Get psMessageSubject To sMapiMessageSubject
90311>>>>>>>            Get psMessageText To sMapiMessageText
90312>>>>>>>            Get pbMapiMessageReturnRequest To bMapiMessageReturnRequest
90313>>>>>>>            If (bMapiMessageReturnRequest) Begin
90315>>>>>>>                Move MAPI_RECEIPT_REQUESTED To iflFlags
90316>>>>>>>            End
90316>>>>>>>>
90316>>>>>>>
90316>>>>>>>            GetAddress Of sMapiMessageSubject To lpsMessageSubject
90317>>>>>>>            GetAddress Of sMapiMessageText To lpsMessageText
90318>>>>>>>
90318>>>>>>>            Zerotype MapiMessage To sMapiMessage
90319>>>>>>>            Put lpsMessageSubject To sMapiMessage At MapiMessage.lpszSubject
90320>>>>>>>            Put lpsMessageText To sMapiMessage At MapiMessage.lpszNoteText
90321>>>>>>>            Put iflFlags To sMapiMessage At MapiMessage.flFlags
90322>>>>>>>
90322>>>>>>>            Move oReceiversArray To hoReceiversArray
90323>>>>>>>            Get ReceiverCount Of hoReceiversArray To iRecips
90324>>>>>>>            ZeroString (iRecips * MapiRecipDesc_Size) To sRecips
90325>>>>>>>            For iCounter From 1 To iRecips
90331>>>>>>>>
90331>>>>>>>                Get ReceiverName Of hoReceiversArray iCounter To sReceiverName
90332>>>>>>>                Get ReceiverAddress Of hoReceiversArray iCounter To sReceiverAddress
90333>>>>>>>                Get ReceiverEntryId Of hoReceiversArray iCounter To sReceiverEntryId
90334>>>>>>>                Get ReceiverLength  Of hoReceiversArray iCounter To iSize
90335>>>>>>>
90335>>>>>>>                Move (sReceiverEntryId + Repeat (Character (0), (iSize - Length (sReceiverEntryId)))) To sReceiverEntryId
90336>>>>>>>
90336>>>>>>>                Move (sReceiverAddresses + sReceiverAddress + Character (0)) To sReceiverAddresses
90337>>>>>>>                Move (sReceiverNames + sReceiverName + Character (0)) To sReceiverNames
90338>>>>>>>                Move (sReceiverEntryIds + sReceiverEntryId + Character (0)) To sReceiverEntryIds
90339>>>>>>>            Loop
90340>>>>>>>>
90340>>>>>>>
90340>>>>>>>            GetAddress Of sReceiverNames To lpsReceiverName
90341>>>>>>>            GetAddress Of sReceiverAddresses To lpsReceiverAddress
90342>>>>>>>            GetAddress Of sReceiverEntryIds To lpsReceiverEntryIds
90343>>>>>>>
90343>>>>>>>            For iCounter From 1 To iRecips
90349>>>>>>>>
90349>>>>>>>                Get ReceiverType Of hoReceiversArray iCounter To iReceiverType
90350>>>>>>>                Get ReceiverName Of hoReceiversArray iCounter To sReceiverName
90351>>>>>>>                Get ReceiverAddress Of hoReceiversArray iCounter To sReceiverAddress
90352>>>>>>>                Get ReceiverEntryID Of hoReceiversArray iCounter To sReceiverEntryId
90353>>>>>>>                Get ReceiverLength  Of hoReceiversArray iCounter To iSize
90354>>>>>>>
90354>>>>>>>                Move (iCounter - 1 * MapiRecipDesc_Size) To iArrayOffset
90355>>>>>>>
90355>>>>>>>                ArrayPut iReceiverType To sRecips At MapiRecipDesc.ulRecipClass iArrayOffset
90356>>>>>>>                ArrayPut lpsReceiverName To sRecips At MapiRecipDesc.lpszName iArrayOffset
90357>>>>>>>                ArrayPut lpsReceiverAddress To sRecips At MapiRecipDesc.lpszAddress iArrayOffset
90358>>>>>>>                ArrayPut lpsReceiverEntryIds To sRecips At MapiRecipDesc.lpEntryID iArrayOffset
90359>>>>>>>                ArrayPut iSize To sRecips At MapiRecipDesc.ulEIDSize iArrayOffset
90360>>>>>>>
90360>>>>>>>                Move (lpsReceiverName + Length (sReceiverName) + 1) To lpsReceiverName
90361>>>>>>>                Move (lpsReceiverAddress + Length (sReceiverAddress) + 1) To lpsReceiverAddress
90362>>>>>>>                Move (lpsReceiverEntryIds + Length (sReceiverEntryId) + 1) To lpsReceiverEntryIds
90363>>>>>>>            Loop
90364>>>>>>>>
90364>>>>>>>            GetAddress Of sRecips To lpRecips
90365>>>>>>>
90365>>>>>>>            Put iRecips To sMapiMessage At MapiMessage.nRecipCount
90366>>>>>>>            Put lpRecips To sMapiMessage At MapiMessage.lpRecips
90367>>>>>>>
90367>>>>>>>            Move oAttachmentsArray To hoAttachmentsArray
90368>>>>>>>
90368>>>>>>>            Get AttachmentCount Of hoAttachmentsArray To iAttachments
90369>>>>>>>            ZeroString (iAttachments * MapiFileDesc_Size) To sMapiFileDesc
90370>>>>>>>            For iCounter From 1 To iAttachments
90376>>>>>>>>
90376>>>>>>>                Get AttachmentFileName Of hoAttachmentsArray iCounter To sAttachmentFileName
90377>>>>>>>                Get AttachmentPathName Of hoAttachmentsArray iCounter To sAttachmentPathName
90378>>>>>>>
90378>>>>>>>                Move (sAttachmentFileNames + sAttachmentFileName + Character (0)) To sAttachmentFileNames
90379>>>>>>>                Move (sAttachmentPathNames + sAttachmentPathName + Character (0)) To sAttachmentPathNames
90380>>>>>>>            Loop
90381>>>>>>>>
90381>>>>>>>
90381>>>>>>>            GetAddress Of sAttachmentFileNames To lpsAttachmentFileNames
90382>>>>>>>            GetAddress Of sAttachmentPathNames To lpsAttachmentPathNames
90383>>>>>>>
90383>>>>>>>            For iCounter From 1 To iAttachments
90389>>>>>>>>
90389>>>>>>>                Get AttachmentFileName Of hoAttachmentsArray iCounter To sAttachmentFileName
90390>>>>>>>                Get AttachmentPathName Of hoAttachmentsArray iCounter To sAttachmentPathName
90391>>>>>>>
90391>>>>>>>                Move (iCounter - 1 * MapiFileDesc_Size) To iArrayOffset
90392>>>>>>>
90392>>>>>>>                ArrayPut lpsAttachmentPathNames To sMapiFileDesc At MapiFileDesc.lpszPathName iArrayOffset
90393>>>>>>>                ArrayPut lpsAttachmentFileNames To sMapiFileDesc At MapiFileDesc.lpszFileName iArrayOffset
90394>>>>>>>                ArrayPut MAPI_NOATTACHMENT_POSITION To sMapiFileDesc At MapiFileDesc.nPosition iArrayOffset
90395>>>>>>>
90395>>>>>>>                Move (lpsAttachmentPathNames + Length (sAttachmentPathName) + 1) To lpsAttachmentPathNames
90396>>>>>>>                Move (lpsAttachmentFileNames + Length (sAttachmentFileName) + 1) To lpsAttachmentFileNames
90397>>>>>>>            Loop
90398>>>>>>>>
90398>>>>>>>            GetAddress Of sMapiFileDesc To lpsMapiFileDesc
90399>>>>>>>
90399>>>>>>>            Put iAttachments To sMapiMessage At MapiMessage.nFileCount
90400>>>>>>>            Put lpsMapiFileDesc To sMapiMessage At MapiMessage.lpFiles
90401>>>>>>>
90401>>>>>>>            If (bSendDirect) Begin
90403>>>>>>>                GetAddress Of sMapiMessage To lpsMapiMessage
90404>>>>>>>                Move (MapiSendMail (hSessionId, hWnd, lpsMapiMessage, iFlags, 0)) To iRetval
90405>>>>>>>                If (iRetval <> SUCCESS_SUCCESS) Begin
90407>>>>>>>                    If (pbReportErrors (Self)) Begin
90409>>>>>>>                        Error DFERR_MAPI (C_$SendMailError * String (iRetval))
90410>>>>>>>>
90410>>>>>>>                    End
90410>>>>>>>>
90410>>>>>>>                End
90410>>>>>>>>
90410>>>>>>>            End
90410>>>>>>>>
90410>>>>>>>            Else Begin
90411>>>>>>>                Put MAPI_SENT To sMapiMessage At MapiMessage.flFlags
90412>>>>>>>                GetAddress Of sMapiMessage To lpsMapiMessage
90413>>>>>>>                Get pbLongMsgId To bMapiLongMsgId
90414>>>>>>>                Get psMessageId To sMessageId
90415>>>>>>>                If (sMessageId = "") Begin
90417>>>>>>>                    If (bMapiLongMsgId) Begin
90419>>>>>>>                        ZeroString 512 To sMessageId
90420>>>>>>>                    End
90420>>>>>>>>
90420>>>>>>>                    Else Begin
90421>>>>>>>                        ZeroString 64 To sMessageId
90422>>>>>>>                    End
90422>>>>>>>>
90422>>>>>>>                End
90422>>>>>>>>
90422>>>>>>>                GetAddress Of sMessageId To lpsMessageId
90423>>>>>>>                Move (MapiSaveMail (hSessionId, hWnd, lpsMapiMessage, bMapiLongMsgId, 0, lpsMessageId)) To iRetval
90424>>>>>>>                If (iRetval <> SUCCESS_SUCCESS) Begin
90426>>>>>>>                    If (pbReportErrors (Self)) Begin
90428>>>>>>>                        Error DFERR_MAPI (C_$SaveMailError * String (iRetval))
90429>>>>>>>>
90429>>>>>>>                    End
90429>>>>>>>>
90429>>>>>>>                End
90429>>>>>>>>
90429>>>>>>>                Else Begin
90430>>>>>>>                    Set psMessageId To sMessageId
90431>>>>>>>                End
90431>>>>>>>>
90431>>>>>>>            End
90431>>>>>>>>
90431>>>>>>>        End
90431>>>>>>>>
90431>>>>>>>        Else Begin
90432>>>>>>>            If (pbReportErrors (Self)) Begin
90434>>>>>>>                Error DFERR_MAPI C_$SendMailNotLoggedOn
90435>>>>>>>>
90435>>>>>>>            End
90435>>>>>>>>
90435>>>>>>>        End
90435>>>>>>>>
90435>>>>>>>
90435>>>>>>>        Function_Return iRetval
90436>>>>>>>    End_Function // SendMail
90437>>>>>>>
90437>>>>>>>    //****************************************************************************
90437>>>>>>>    // $Module type: FUNCTION
90437>>>>>>>    // $Module name: ReadMailFlags
90437>>>>>>>    // $Author     : VO
90437>>>>>>>    // Created     : 05/29/99 @ 5:02
90437>>>>>>>    //
90437>>>>>>>    // Description
90437>>>>>>>    //    This function returns the result of the properties valid for
90437>>>>>>>    //    MapiReadMail being pbPeek, pbEnvelopeOnly, pbBodyAsFile and
90437>>>>>>>    //    pbSuppressAttach
90437>>>>>>>    //
90437>>>>>>>    // $Rev History
90437>>>>>>>    //    28-07-04 Removed the use of DFTRUE in compare of boolean property setting
90437>>>>>>>    //             Boolean variables instead of integers that act as boolean
90437>>>>>>>    //    05/29/99 VO Module header created
90437>>>>>>>    //****************************************************************************
90437>>>>>>>    Function ReadMailFlags Returns Integer
90439>>>>>>>        Integer iReadMailFlags
90439>>>>>>>        Boolean bMapiPeek bMapiEnvelopeOnly bMapiBodyAsFile bMapiSuppressAttach
90439>>>>>>>
90439>>>>>>>        Get pbPeek To bMapiPeek
90440>>>>>>>        Get pbEnvelopeOnly To bMapiEnvelopeOnly
90441>>>>>>>        Get pbBodyAsFile To bMapiBodyAsFile
90442>>>>>>>        Get pbSuppressAttach To bMapiSuppressAttach
90443>>>>>>>
90443>>>>>>>        If (bMapiPeek) Begin
90445>>>>>>>            Move MAPI_PEEK To iReadMailFlags
90446>>>>>>>        End
90446>>>>>>>>
90446>>>>>>>
90446>>>>>>>        If (bMapiEnvelopeOnly) Begin
90448>>>>>>>            Move (iReadMailFlags + MAPI_ENVELOPE_ONLY) To iReadMailFlags
90449>>>>>>>        End
90449>>>>>>>>
90449>>>>>>>
90449>>>>>>>        If (bMapiBodyAsFile) Begin
90451>>>>>>>            Move (iReadMailFlags + MAPI_BODY_AS_FILE) To iReadMailFlags
90452>>>>>>>        End
90452>>>>>>>>
90452>>>>>>>
90452>>>>>>>        If (bMapiSuppressAttach) Begin
90454>>>>>>>            Move (iReadMailFlags + MAPI_SUPPRESS_ATTACH) To iReadMailFlags
90455>>>>>>>        End
90455>>>>>>>>
90455>>>>>>>
90455>>>>>>>        Function_Return iReadMailFlags
90456>>>>>>>    End_Function // ReadMailFlags
90457>>>>>>>
90457>>>>>>>    //****************************************************************************
90457>>>>>>>    // $Module type: FUNCTION
90457>>>>>>>    // $Module name: FindNextFlags
90457>>>>>>>    // $Author     : VO
90457>>>>>>>    // Created     : 05/29/99 @ 5:01
90457>>>>>>>    //
90457>>>>>>>    // Description
90457>>>>>>>    //    This function returns the result of the properties valid for
90457>>>>>>>    //    MapiFindNext being pbGuaranteeFiFo, pbLongMsgId and
90457>>>>>>>    //    pbUnreadOnly
90457>>>>>>>    //
90457>>>>>>>    // $Rev History
90457>>>>>>>    //    28-07-04 Removed the use of DFTRUE in compare of boolean property setting
90457>>>>>>>    //             Boolean variables instead of integers that act as boolean
90457>>>>>>>    //    05/29/99 VO Module header created
90457>>>>>>>    //****************************************************************************
90457>>>>>>>    Function FindNextFlags Returns Integer
90459>>>>>>>        Integer iFindNextFlags
90459>>>>>>>        Boolean bMapiGuaranteeFiFo bMapiLongMsgId bMapiUnreadOnly
90459>>>>>>>
90459>>>>>>>        Get pbGuaranteeFiFo To bMapiGuaranteeFiFo
90460>>>>>>>        Get pbLongMsgId To bMapiLongMsgId
90461>>>>>>>        Get pbUnreadOnly To bMapiUnreadOnly
90462>>>>>>>
90462>>>>>>>        If (bMapiGuaranteeFiFo) Begin
90464>>>>>>>            Move MAPI_GUARANTEE_FIFO To iFindNextFlags
90465>>>>>>>        End
90465>>>>>>>>
90465>>>>>>>
90465>>>>>>>        If (bMapiLongMsgId) Begin
90467>>>>>>>            Move (iFindNextFlags + MAPI_LONG_MSGID) To iFindNextFlags
90468>>>>>>>        End
90468>>>>>>>>
90468>>>>>>>
90468>>>>>>>        If (bMapiUnreadOnly) Begin
90470>>>>>>>            Move (iFindNextFlags + MAPI_UNREAD_ONLY) To iFindNextFlags
90471>>>>>>>        End
90471>>>>>>>>
90471>>>>>>>
90471>>>>>>>        Function_Return iFindNextFlags
90472>>>>>>>    End_Function // FindNextFlags
90473>>>>>>>
90473>>>>>>>    //****************************************************************************
90473>>>>>>>    // $Module type: FUNCTION
90473>>>>>>>    // $Module name: ResolveName
90473>>>>>>>    // $Author     : VO
90473>>>>>>>    // Created     : 05/31/99 @ 8:22
90473>>>>>>>    //
90473>>>>>>>    // Description
90473>>>>>>>    //    The MAPIResolveName function transforms a message recipient's name as
90473>>>>>>>    //    entered by a user to an unambiguous address list entry.
90473>>>>>>>    //
90473>>>>>>>    //    Parameters
90473>>>>>>>    //       lhSession
90473>>>>>>>    //          [in] Handle that represents a Simple MAPI session or zero. If
90473>>>>>>>    //          the value of the lhSessionId parameter is zero, MAPI logs on the
90473>>>>>>>    //          user and creates a session that exists only for the duration of
90473>>>>>>>    //          the call. This temporary session can be an existing shared
90473>>>>>>>    //          session or a new one. If necessary, the logon dialog box is
90473>>>>>>>    //          displayed.
90473>>>>>>>    //       ulUIParam
90473>>>>>>>    //          [in] Parent window handle or zero, indicating that if a dialog
90473>>>>>>>    //          box is displayed, it is application modal. If the ulUIParam
90473>>>>>>>    //          parameter contains a parent window handle, it is of type HWND
90473>>>>>>>    //          (cast to a ULONG). If no dialog box is displayed during the
90473>>>>>>>    //          call, ulUIParam is ignored.
90473>>>>>>>    //       lpsName
90473>>>>>>>    //          [in] Pointer to the name to be resolved.
90473>>>>>>>    //       flFlags
90473>>>>>>>    //          [in] Bitmask of option flags. The following flags can be set:
90473>>>>>>>    //          MAPI_AB_NOMODIFY
90473>>>>>>>    //             The caller is requesting that the dialog box be read-only,
90473>>>>>>>    //             prohibiting changes. MAPIResolveName ignores this flag if
90473>>>>>>>    //             MAPI_DIALOG is not set.
90473>>>>>>>    //          MAPI_DIALOG
90473>>>>>>>    //             A dialog box should be displayed for name resolution. If
90473>>>>>>>    //             this flag is not set and the name cannot be resolved,
90473>>>>>>>    //             MAPIResolveName returns the MAPI_E_AMBIGUOUS_RECIPIENT
90473>>>>>>>    //             value.
90473>>>>>>>    //          MAPI_LOGON_UI
90473>>>>>>>    //             A dialog box should be displayed to prompt the user to
90473>>>>>>>    //             log on if required. When the MAPI_LOGON_UI flag is not
90473>>>>>>>    //             set, the client application does not display a logon
90473>>>>>>>    //             dialog box and returns an error value if the user is not
90473>>>>>>>    //             logged on.
90473>>>>>>>    //          MAPI_NEW_SESSION
90473>>>>>>>    //             An attempt should be made to create a new session rather
90473>>>>>>>    //             than acquire the environment's shared session. If the
90473>>>>>>>    //             MAPI_NEW_SESSION flag is not set, MAPIResolveName uses
90473>>>>>>>    //             an existing shared session.
90473>>>>>>>    //       ulReserved
90473>>>>>>>    //          Reserved; must be zero.
90473>>>>>>>    //       lppRecip
90473>>>>>>>    //          [out] Pointer to a recipient structure if the resolution
90473>>>>>>>    //          results in a single match. The recipient structure contains
90473>>>>>>>    //          the resolved name and related information. Memory for this
90473>>>>>>>    //          structure must be freed using the MAPIFreeBuffer function.
90473>>>>>>>    //
90473>>>>>>>    //    Return Values
90473>>>>>>>    //       MAPI_E_AMBIGUOUS_RECIPIENT
90473>>>>>>>    //          The recipient requested has not been or could not be
90473>>>>>>>    //          resolved to a unique address list entry.
90473>>>>>>>    //       MAPI_E_UNKNOWN_RECIPIENT
90473>>>>>>>    //          The recipient could not be resolved to any address. The
90473>>>>>>>    //          recipient might not exist or might be unknown.
90473>>>>>>>    //       MAPI_E_FAILURE
90473>>>>>>>    //          One or more unspecified errors occurred. The name was not
90473>>>>>>>    //          resolved.
90473>>>>>>>    //       MAPI_E_INSUFFICIENT_MEMORY
90473>>>>>>>    //          There was insufficient memory to proceed. The name was
90473>>>>>>>    //          not resolved.
90473>>>>>>>    //       MAPI_E_LOGIN_FAILURE
90473>>>>>>>    //          There was no default logon, and the user failed to log
90473>>>>>>>    //          on successfully when the logon dialog box was displayed.
90473>>>>>>>    //          The name was not resolved.
90473>>>>>>>    //       MAPI_E_NOT_SUPPORTED
90473>>>>>>>    //          The operation was not supported by the underlying
90473>>>>>>>    //          messaging system.
90473>>>>>>>    //       MAPI_E_USER_ABORT
90473>>>>>>>    //          The user canceled one of the dialog boxes. The name was
90473>>>>>>>    //          not resolved.
90473>>>>>>>    //       SUCCESS_SUCCESS
90473>>>>>>>    //          The call succeeded and the name was resolved.
90473>>>>>>>    //
90473>>>>>>>    //    Remarks
90473>>>>>>>    //       The MAPIResolveName function resolves a message recipient's
90473>>>>>>>    //       name (as entered by a user) to an unambiguous address list
90473>>>>>>>    //       entry, optionally prompting the user to choose between
90473>>>>>>>    //       possible entries, if necessary. A recipient descriptor
90473>>>>>>>    //       structure containing fully resolved information about the
90473>>>>>>>    //       entry is allocated and returned. The caller should free
90473>>>>>>>    //       this MAPIRecipDesc structure at some point by calling the
90473>>>>>>>    //       MAPIFreeBuffer function. If MAPIResolveName returns an error
90473>>>>>>>    //       value, it is not necessary to deallocate memory with
90473>>>>>>>    //       MAPIFreeBuffer.
90473>>>>>>>    //
90473>>>>>>>    // $Rev History
90473>>>>>>>    //    28-07-04 Removed the use of DFTRUE in compare of boolean property setting
90473>>>>>>>    //             Use of iRetval for MapiFreeBuffer instead of iVoid (DT 2009)
90473>>>>>>>    //    27/10/99 Changed so that errors only display when pbReportErrors is true
90473>>>>>>>    //    23/07/99 To make the ResolveName call modal we need to pass the
90473>>>>>>>    //             window_handle of the current focus object (assuming this is a
90473>>>>>>>    //             good window_handle).
90473>>>>>>>    //    05/31/99 VO Module header created
90473>>>>>>>    //****************************************************************************
90473>>>>>>>    Function ResolveName String sToBeResolvedName Integer iFlags Returns Integer
90475>>>>>>>        Integer iRetval iVoid iSize
90475>>>>>>>        Handle hSessionId hWnd hoFocus
90475>>>>>>>        Pointer lpsToBeResolvedName lppRecip lpsMapiRecipDesc lpsName lpsAddress
90475>>>>>>>        Pointer lpsMapiRecipPointer lpEntryID
90475>>>>>>>        String sName sMapiRecipDesc szName szAddress sMapiRecipPointer sEntryID
90475>>>>>>>
90475>>>>>>>        Get phSessionID To hSessionId
90476>>>>>>>        If (hSessionId <> 0) Begin
90478>>>>>>>            //Get Focus of desktop To hoFocus
90478>>>>>>>            //Get Window_Handle Of hoFocus To hWnd
90478>>>>>>>            Get OwnerHandle To hWnd
90479>>>>>>>            ZeroType MapiRecipPointer To sMapiRecipPointer
90480>>>>>>>            GetAddress Of sMapiRecipPointer To lpsMapiRecipPointer
90481>>>>>>>            GetAddress Of sToBeResolvedName To lpsToBeResolvedName
90482>>>>>>>            Move (MapiResolveName (hSessionId, hWnd, lpsToBeResolvedName, iFlags, 0, lpsMapiRecipPointer)) To iRetval
90483>>>>>>>            If (iRetval = SUCCESS_SUCCESS) Begin
90485>>>>>>>                Getbuff From sMapiRecipPointer At MapiRecipPointer.lppRecip To lppRecip
90486>>>>>>>
90486>>>>>>>                ZeroType MapiRecipDesc To sMapiRecipDesc
90487>>>>>>>                GetAddress Of sMapiRecipDesc To lpsMapiRecipDesc
90488>>>>>>>                Move (CopyMemory (lpsMapiRecipDesc, lppRecip, MapiRecipDesc_Size)) To iVoid
90489>>>>>>>
90489>>>>>>>                Getbuff From sMapiRecipDesc At MapiRecipDesc.lpszName To lpsName
90490>>>>>>>                Get CopyPointerToDfString lpsName To szName
90491>>>>>>>                Set psResolvedName To szName
90492>>>>>>>
90492>>>>>>>                Getbuff From sMapiRecipDesc At MapiRecipDesc.lpszAddress To lpsAddress
90493>>>>>>>                Get CopyPointerToDfString lpsAddress To szAddress
90494>>>>>>>                Set psResolvedAddress To szAddress
90495>>>>>>>
90495>>>>>>>                GetBuff From sMapiRecipDesc At MapiRecipDesc.ulEIDSize To iSize
90496>>>>>>>                GetBuff From sMapiRecipDesc At MapiRecipDesc.lpEntryID To lpEntryID
90497>>>>>>>                Get PointerToStr lpEntryId iSize To sEntryId
90498>>>>>>>                Set psResolvedEntryID To sEntryId
90499>>>>>>>                Set piResolvedEntryIDLength To iSize
90500>>>>>>>
90500>>>>>>>                Move (MapiFreeBuffer (lppRecip)) To iRetval
90501>>>>>>>                If (iRetval <> SUCCESS_SUCCESS) Begin
90503>>>>>>>                    If (pbReportErrors (Self)) Begin
90505>>>>>>>                        Error DFERR_MAPI (C_$FreeBufferError * String (iRetval))
90506>>>>>>>>
90506>>>>>>>                    End
90506>>>>>>>>
90506>>>>>>>                End
90506>>>>>>>>
90506>>>>>>>            End
90506>>>>>>>>
90506>>>>>>>        End
90506>>>>>>>>
90506>>>>>>>        Else Begin
90507>>>>>>>            If (pbReportErrors (Self)) Begin
90509>>>>>>>                Error DFERR_MAPI C_$ResolveNameNotLoggedOn
90510>>>>>>>>
90510>>>>>>>            End
90510>>>>>>>>
90510>>>>>>>        End
90510>>>>>>>>
90510>>>>>>>
90510>>>>>>>        Function_Return iRetval
90511>>>>>>>    End_Function // ResolveName
90512>>>>>>>
90512>>>>>>>    //****************************************************************************
90512>>>>>>>    // $Module type: FUNCTION
90512>>>>>>>    // $Module name: AddressBook
90512>>>>>>>    // $Author     : VO
90512>>>>>>>    // Created     : 05/30/99 @ 4:51
90512>>>>>>>    //
90512>>>>>>>    // Description
90512>>>>>>>    //    This function calls the MapiAddress function
90512>>>>>>>    //
90512>>>>>>>    //    Parameters
90512>>>>>>>    //       lhSession
90512>>>>>>>    //          [in] Session handle that represents a Simple MAPI session or zero.
90512>>>>>>>    //          If the value of the lhSessionId parameter is zero, MAPI logs on the
90512>>>>>>>    //          user and creates a session that exists only for the duration of
90512>>>>>>>    //          the call. This temporary session can be an existing shared session
90512>>>>>>>    //          or a new one. If necessary, a logon dialog box is displayed.
90512>>>>>>>    //       ulUIParam
90512>>>>>>>    //          [in] Parent window handle or zero, indicating that if a dialog box
90512>>>>>>>    //          is displayed, it is application modal. If the ulUIParam parameter
90512>>>>>>>    //          contains a parent window handle, it is of type HWND (cast to a
90512>>>>>>>    //          ULONG). If no dialog box is displayed during the call, ulUIParam
90512>>>>>>>    //          is ignored.
90512>>>>>>>    //       lpsCaption
90512>>>>>>>    //          [in] Pointer to the caption for the address list dialog box,
90512>>>>>>>    //          NULL, or an empty string. When the lpsCaption parameter is NULL
90512>>>>>>>    //          or points to an empty string, MAPIAddress uses the default
90512>>>>>>>    //          caption "Address Book."
90512>>>>>>>    //       nEditFields
90512>>>>>>>    //          [in] The number of edit controls that should be present in the
90512>>>>>>>    //          address list. The values 0 through 4 are valid. If the value
90512>>>>>>>    //          of the nEditFields parameter is 4, each recipient class supported
90512>>>>>>>    //          by the underlying messaging system has an edit control. If the
90512>>>>>>>    //          value of nEditFields is zero, only address list browsing is
90512>>>>>>>    //          possible. Values of 1, 2, or 3 control the number of edit
90512>>>>>>>    //          controls present.
90512>>>>>>>    //          However, if the number of recipient classes in the array pointed
90512>>>>>>>    //          to by the lpRecips parameter is greater than the value of
90512>>>>>>>    //          nEditFields, the number of classes in lpRecips is used to
90512>>>>>>>    //          indicate the number of edit controls instead of the value of
90512>>>>>>>    //          nEditFields. If the value of nEditFields is 1 and more than one
90512>>>>>>>    //          kind of entry exists in lpRecips, then the lpsLabels parameter is
90512>>>>>>>    //          ignored.
90512>>>>>>>    //          Entries selected for the different controls are differentiated by
90512>>>>>>>    //          the ulRecipClass member in the returned recipient structure.
90512>>>>>>>    //       lpsLabels
90512>>>>>>>    //          [in] Pointer to a string to be used as an edit control label in
90512>>>>>>>    //          the address-list dialog box. When the nEditFields parameter is
90512>>>>>>>    //          set to any value other than 1, the lpsLabels parameter is ignored
90512>>>>>>>    //          and should be NULL or point to an empty string. Also, if the
90512>>>>>>>    //          caller requires the default control label "To," lpsLabels should
90512>>>>>>>    //          be NULL or point to an empty string.
90512>>>>>>>    //       nRecips
90512>>>>>>>    //          [in] The number of entries in the array indicated by the lpRecips
90512>>>>>>>    //          parameter. If the value of the nRecips parameter is zero, lpRecips
90512>>>>>>>    //          is ignored.
90512>>>>>>>    //       lpRecips
90512>>>>>>>    //          [in] Pointer to an array of MapiRecipDesc structures defining the
90512>>>>>>>    //          initial recipient entries to be used to populate the address-list
90512>>>>>>>    //          dialog box. The entries do not need to be grouped by recipient
90512>>>>>>>    //          class; they are differentiated by the values of the ulRecipClass
90512>>>>>>>    //          members of the MapiRecipDesc structures in the array. If the
90512>>>>>>>    //          number of different recipient classes is greater than the value
90512>>>>>>>    //          indicated by the nEditFields parameter, the nEditFields and
90512>>>>>>>    //          lpsLabels parameters are ignored.
90512>>>>>>>    //       flFlags
90512>>>>>>>    //          [in] Bitmask of option flags. The following flags can be set:
90512>>>>>>>    //             MAPI_LOGON_UI
90512>>>>>>>    //                A dialog box should be displayed to prompt the user to
90512>>>>>>>    //                log on if required. When the MAPI_LOGON_UI flag is not
90512>>>>>>>    //                set, the client application does not display a logon
90512>>>>>>>    //                dialog box and returns an error value if the user is
90512>>>>>>>    //                not logged on.
90512>>>>>>>    //             MAPI_NEW_SESSION
90512>>>>>>>    //                An attempt should be made to create a new session
90512>>>>>>>    //                rather than acquire the environment's shared session.
90512>>>>>>>    //                If the MAPI_NEW_SESSION flag is not set, MAPIAddress
90512>>>>>>>    //                uses an existing shared session.
90512>>>>>>>    //       ulReserved
90512>>>>>>>    //          Reserved; must be zero.
90512>>>>>>>    //       lpnNewRecips
90512>>>>>>>    //          [out] Pointer to the number of entries in the lppNewRecips
90512>>>>>>>    //          recipient output array. If the value of the lpnNewRecips
90512>>>>>>>    //          parameter is zero, the lppNewRecips parameter is ignored.
90512>>>>>>>    //       lppNewRecips
90512>>>>>>>    //          [out] Pointer to an array of MapiRecipDesc structures
90512>>>>>>>    //          containing the final list of recipients. This array is
90512>>>>>>>    //          allocated by MAPIAddress, cannot be NULL, and must be
90512>>>>>>>    //          freed using MAPIFreeBuffer, even if there are no new
90512>>>>>>>    //          recipients. Recipients are grouped by recipient class
90512>>>>>>>    //          in the following order: MAPI_TO, MAPI_CC, MAPI_BCC.
90512>>>>>>>    //
90512>>>>>>>    //    Return Values
90512>>>>>>>    //       MAPI_E_FAILURE
90512>>>>>>>    //          One or more unspecified errors occurred while addressing
90512>>>>>>>    //          the message. No list of recipient entries was returned.
90512>>>>>>>    //       MAPI_E_INSUFFICIENT_MEMORY
90512>>>>>>>    //          There was insufficient memory to proceed. No list of
90512>>>>>>>    //          recipient entries was returned.
90512>>>>>>>    //       MAPI_E_INVALID_EDITFIELDS
90512>>>>>>>    //          The value of the nEditFields parameter was outside the
90512>>>>>>>    //          range of 0 through 4. No list of recipient entries was
90512>>>>>>>    //          returned.
90512>>>>>>>    //       MAPI_E_INVALID_RECIPS
90512>>>>>>>    //          One or more of the recipients in the address list was
90512>>>>>>>    //          not valid. No list of recipient entries was returned.
90512>>>>>>>    //       MAPI_E_INVALID_SESSION
90512>>>>>>>    //          An invalid session handle was used for the lhSession
90512>>>>>>>    //          parameter. No list of recipient entries was returned.
90512>>>>>>>    //       MAPI_E_LOGIN_FAILURE
90512>>>>>>>    //          There was no default logon, and the user failed to
90512>>>>>>>    //          log on successfully when the logon dialog box was
90512>>>>>>>    //          displayed. No list of recipient entries was returned.
90512>>>>>>>    //       MAPI_E_NOT_SUPPORTED
90512>>>>>>>    //          The operation was not supported by the underlying
90512>>>>>>>    //          messaging system.
90512>>>>>>>    //       MAPI_E_USER_ABORT
90512>>>>>>>    //          The user canceled one of the dialog boxes. No list
90512>>>>>>>    //          of recipient entries was returned.
90512>>>>>>>    //       SUCCESS_SUCCESS
90512>>>>>>>    //          The call succeeded and a list of recipient entries
90512>>>>>>>    //          was returned.
90512>>>>>>>    //
90512>>>>>>>    //    Remarks
90512>>>>>>>    //       The MAPIAddress function displays a standard address-list
90512>>>>>>>    //       dialog box to show an initial set of zero or more
90512>>>>>>>    //       recipients. The user can choose new entries to add to the
90512>>>>>>>    //       set or make changes to existing entries. This dialog box
90512>>>>>>>    //       cannot be suppressed, but the caller can set dialog box
90512>>>>>>>    //       characteristics. The changed set of recipients is returned
90512>>>>>>>    //       to the caller.
90512>>>>>>>    //
90512>>>>>>>    //       Before MAPIAddress writes new or changed recipient
90512>>>>>>>    //       information, it must allocate memory for the structure
90512>>>>>>>    //       array that will contain the information. Memory is also
90512>>>>>>>    //       allocated as part of preloading the address book,
90512>>>>>>>    //       regardless of whether new or changed recipient data is
90512>>>>>>>    //       written. Client applications must call the MAPIFreeBuffer
90512>>>>>>>    //       function to free this memory after MAPIAddress returns.
90512>>>>>>>    //       If any error occurs, no memory was allocated and clients
90512>>>>>>>    //       do not need to call MAPIFreeBuffer.
90512>>>>>>>    //
90512>>>>>>>    // $Rev History
90512>>>>>>>    //    17/08/04 Use of iRetval for MapiFreeBuffer instead of iVoid (DT 2009)
90512>>>>>>>    //    28-07-04 Removed the use of DFTRUE in compare of boolean property setting
90512>>>>>>>    //    23/07/99 To make the AddressBook call modal we need to pass the
90512>>>>>>>    //             window_handle of the current focus object (assuming this is a
90512>>>>>>>    //             good window_handle).
90512>>>>>>>    //    05/30/99 VO Module header created
90512>>>>>>>    //****************************************************************************
90512>>>>>>>    Function AddressBook String sDialogCaption Returns Integer
90514>>>>>>>        Handle hSessionId hWnd
90514>>>>>>>        Pointer lpsDialogCaption lpsLabels lpRecips lppNewRecips lpsReceiverEntryId
90514>>>>>>>        Pointer lpsReceiverName lpsReceiverAddress lpsMapiNewRecipsCounter
90514>>>>>>>        Pointer lpsMapiNewRecipsPointer lpsMapiRecipDesc lpsReceiverEntryIds
90514>>>>>>>        Integer iRecips iRetval iVoid iReceiverType iCounter iSize
90514>>>>>>>        Integer iArrayOffset iNewRecips hoFocus hoReceiversArray
90514>>>>>>>        String sRecips sReceiverAddress sReceiverName sMapiNewRecipsPointer
90514>>>>>>>        String sMapiNewRecipsCounter sReceiverNames sReceiverAddresses
90514>>>>>>>        String sMapiRecipDesc sReceiverEntryId sReceiverEntryIds
90514>>>>>>>
90514>>>>>>>        Get phSessionID To hSessionId
90515>>>>>>>        If (hSessionId <> 0) Begin
90517>>>>>>>            //Get Focus Of Desktop To hoFocus
90517>>>>>>>            //Get Window_Handle Of hoFocus To hWnd
90517>>>>>>>            Get OwnerHandle To hWnd
90518>>>>>>>            GetAddress Of sDialogCaption To lpsDialogCaption
90519>>>>>>>
90519>>>>>>>            Move oReceiversArray To hoReceiversArray
90520>>>>>>>
90520>>>>>>>            Get ReceiverCount Of hoReceiversArray To iRecips
90521>>>>>>>            ZeroString (iRecips * MapiRecipDesc_Size) To sRecips
90522>>>>>>>            For iCounter From 1 To iRecips
90528>>>>>>>>
90528>>>>>>>                Get ReceiverName Of hoReceiversArray iCounter To sReceiverName
90529>>>>>>>                Get ReceiverAddress Of hoReceiversArray iCounter To sReceiverAddress
90530>>>>>>>                Get ReceiverEntryId Of hoReceiversArray iCounter To sReceiverEntryId
90531>>>>>>>                Get ReceiverLength  Of hoReceiversArray iCounter To iSize
90532>>>>>>>
90532>>>>>>>                Move (sReceiverEntryId + Repeat (Character (0), (iSize - Length (sReceiverEntryId)))) To sReceiverEntryId
90533>>>>>>>
90533>>>>>>>                Move (sReceiverAddresses + sReceiverAddress + Character (0)) To sReceiverAddresses
90534>>>>>>>                Move (sReceiverNames + sReceiverName + Character (0)) To sReceiverNames
90535>>>>>>>                Move (sReceiverEntryIds + sReceiverEntryId + Character (0)) To sReceiverEntryIds
90536>>>>>>>            Loop
90537>>>>>>>>
90537>>>>>>>
90537>>>>>>>            GetAddress Of sReceiverNames To lpsReceiverName
90538>>>>>>>            GetAddress Of sReceiverAddresses To lpsReceiverAddress
90539>>>>>>>            GetAddress Of sReceiverEntryIds To lpsReceiverEntryIds
90540>>>>>>>
90540>>>>>>>            For iCounter From 1 To iRecips
90546>>>>>>>>
90546>>>>>>>                Get ReceiverType Of hoReceiversArray iCounter To iReceiverType
90547>>>>>>>                Get ReceiverName Of hoReceiversArray iCounter To sReceiverName
90548>>>>>>>                Get ReceiverAddress Of hoReceiversArray iCounter To sReceiverAddress
90549>>>>>>>                Get ReceiverEntryID Of hoReceiversArray iCounter To sReceiverEntryId
90550>>>>>>>                Get ReceiverLength  Of hoReceiversArray iCounter To iSize
90551>>>>>>>
90551>>>>>>>                Move (iCounter - 1 * MapiRecipDesc_Size) To iArrayOffset
90552>>>>>>>
90552>>>>>>>                ArrayPut iReceiverType To sRecips At MapiRecipDesc.ulRecipClass iArrayOffset
90553>>>>>>>                ArrayPut lpsReceiverName To sRecips At MapiRecipDesc.lpszName iArrayOffset
90554>>>>>>>                ArrayPut lpsReceiverAddress To sRecips At MapiRecipDesc.lpszAddress iArrayOffset
90555>>>>>>>                ArrayPut lpsReceiverEntryIds To sRecips At MapiRecipDesc.lpEntryID iArrayOffset
90556>>>>>>>                ArrayPut iSize To sRecips At MapiRecipDesc.ulEIDSize iArrayOffset
90557>>>>>>>
90557>>>>>>>                Move (lpsReceiverName + Length (sReceiverName) + 1) To lpsReceiverName
90558>>>>>>>                Move (lpsReceiverAddress + Length (sReceiverAddress) + 1) To lpsReceiverAddress
90559>>>>>>>                Move (lpsReceiverEntryIds + Length (sReceiverEntryId) + 1) To lpsReceiverEntryIds
90560>>>>>>>            Loop
90561>>>>>>>>
90561>>>>>>>
90561>>>>>>>            GetAddress Of sRecips To lpRecips
90562>>>>>>>
90562>>>>>>>            ZeroType MapiNewRecipsCounter To sMapiNewRecipsCounter
90563>>>>>>>            GetAddress Of sMapiNewRecipsCounter To lpsMapiNewRecipsCounter
90564>>>>>>>
90564>>>>>>>            ZeroType MapiNewRecipsPointer To sMapiNewRecipsPointer
90565>>>>>>>            GetAddress Of sMapiNewRecipsPointer To lpsMapiNewRecipsPointer
90566>>>>>>>
90566>>>>>>>            Move (MAPIAddress (hSessionId, hWnd, lpsDialogCaption, 3, 0, iRecips, lpRecips, MAPI_LOGON_UI, 0, lpsMapiNewRecipsCounter, lpsMapiNewRecipsPointer)) To iRetval
90567>>>>>>>            If (iRetval = SUCCESS_SUCCESS) Begin
90569>>>>>>>                Send DoClearReceiversList
90570>>>>>>>                Getbuff From sMapiNewRecipsCounter At MapiNewRecipsCounter.lpnNewRecips To iNewRecips
90571>>>>>>>                Getbuff From sMapiNewRecipsPointer At MapiNewRecipsPointer.lppNewRecips To lppNewRecips
90572>>>>>>>                If (iNewRecips > 0) Begin
90574>>>>>>>                    For iCounter From 1 To iNewRecips
90580>>>>>>>>
90580>>>>>>>                        ZeroType MapiRecipDesc To sMapiRecipDesc
90581>>>>>>>                        GetAddress Of sMapiRecipDesc To lpsMapiRecipDesc
90582>>>>>>>                        Move (CopyMemory (lpsMapiRecipDesc, lppNewRecips, MapiRecipDesc_Size)) To iVoid
90583>>>>>>>
90583>>>>>>>                        GetBuff From sMapiRecipDesc At MapiRecipDesc.ulRecipClass To iReceiverType
90584>>>>>>>
90584>>>>>>>                        GetBuff From sMapiRecipDesc At MapiRecipDesc.lpszName To lpsReceiverName
90585>>>>>>>                        Get CopyPointerToDfString lpsReceiverName To sReceiverName
90586>>>>>>>
90586>>>>>>>                        GetBuff From sMapiRecipDesc At MapiRecipDesc.lpszAddress To lpsReceiverAddress
90587>>>>>>>                        Get CopyPointerToDfString lpsReceiverAddress To sReceiverAddress
90588>>>>>>>
90588>>>>>>>                        GetBuff From sMapiRecipDesc At MapiRecipDesc.ulEIDSize To iSize
90589>>>>>>>
90589>>>>>>>                        GetBuff From sMapiRecipDesc At MapiRecipDesc.lpEntryID To lpsReceiverEntryId
90590>>>>>>>                        Get PointerToStr lpsReceiverEntryId iSize To sReceiverEntryId
90591>>>>>>>
90591>>>>>>>                        Send DoAddReceiver iReceiverType sReceiverName sReceiverAddress sReceiverEntryId iSize
90592>>>>>>>
90592>>>>>>>                        Move (lppNewRecips + MapiRecipDesc_Size) To lppNewRecips
90593>>>>>>>                    Loop
90594>>>>>>>>
90594>>>>>>>                End
90594>>>>>>>>
90594>>>>>>>
90594>>>>>>>                Getbuff From sMapiNewRecipsPointer At MapiNewRecipsPointer.lppNewRecips To lppNewRecips
90595>>>>>>>                Move (MapiFreeBuffer (lppNewRecips)) To iRetval
90596>>>>>>>                If (iRetval <> SUCCESS_SUCCESS) Begin
90598>>>>>>>                    If (pbReportErrors (Self)) Begin
90600>>>>>>>                        Error DFERR_MAPI (C_$FreeBufferError * String (iRetval))
90601>>>>>>>>
90601>>>>>>>                    End
90601>>>>>>>>
90601>>>>>>>                End
90601>>>>>>>>
90601>>>>>>>            End
90601>>>>>>>>
90601>>>>>>>        End
90601>>>>>>>>
90601>>>>>>>        Else Begin
90602>>>>>>>            If (pbReportErrors (Self)) Begin
90604>>>>>>>                Error DFERR_MAPI C_$AddressbookNotLoggedOn
90605>>>>>>>>
90605>>>>>>>            End
90605>>>>>>>>
90605>>>>>>>        End
90605>>>>>>>>
90605>>>>>>>
90605>>>>>>>        Function_Return iRetval
90606>>>>>>>    End_Function // AddressBook
90607>>>>>>>
90607>>>>>>>    //****************************************************************************
90607>>>>>>>    // $Module type: PROCEDURE
90607>>>>>>>    // $Module name: DoClearReceiversList
90607>>>>>>>    // $Author     : VO
90607>>>>>>>    // Created     : 05/31/99 @ 10:35
90607>>>>>>>    //
90607>>>>>>>    // Description
90607>>>>>>>    //    This method will erase the list of receivers currently present
90607>>>>>>>    //
90607>>>>>>>    // $Rev History
90607>>>>>>>    //    28-07-04 Changed TO into OF
90607>>>>>>>    //    05/31/99 VO Module header created
90607>>>>>>>    //****************************************************************************
90607>>>>>>>    Procedure DoClearReceiversList
90609>>>>>>>        Send Delete_Data Of oReceiversArray
90610>>>>>>>    End_Procedure // DoClearReceiversList
90611>>>>>>>
90611>>>>>>>    //****************************************************************************
90611>>>>>>>    // $Module type: PROCEDURE
90611>>>>>>>    // $Module name: DoClearAttachmentsList
90611>>>>>>>    // $Author     : VO
90611>>>>>>>    // Created     : 05/31/99 @ 4:37
90611>>>>>>>    //
90611>>>>>>>    // Description
90611>>>>>>>    //    This method will remove all entries from the attachments list
90611>>>>>>>    //
90611>>>>>>>    // $Rev History
90611>>>>>>>    //    28-07-04 Changed TO into OF
90611>>>>>>>    //    05/31/99 VO Module header created
90611>>>>>>>    //****************************************************************************
90611>>>>>>>    Procedure DoClearAttachmentsList
90613>>>>>>>        Send Delete_Data Of oAttachmentsArray
90614>>>>>>>    End_Procedure // DoClearAttachmentsList
90615>>>>>>>
90615>>>>>>>    //****************************************************************************
90615>>>>>>>    // $Module type: PROCEDURE
90615>>>>>>>    // $Module name: DoClearRecipientsList
90615>>>>>>>    // $Author     : VO
90615>>>>>>>    // Created     : 10/26/99 @ 23:37
90615>>>>>>>    //
90615>>>>>>>    // Description
90615>>>>>>>    //    This method will remove all entries from the recipients list
90615>>>>>>>    //
90615>>>>>>>    // $Rev History
90615>>>>>>>    //    28-07-04 Changed TO into OF
90615>>>>>>>    //    10/26/99 VO Module header created
90615>>>>>>>    //****************************************************************************
90615>>>>>>>    Procedure DoClearRecipientsList
90617>>>>>>>        Send Delete_Data Of oRecipientsArray
90618>>>>>>>    End_Procedure // DoClearRecipientsList
90619>>>>>>>End_Class // cMapiHandler
90620>>>>>
90620>>>>>Class cVDFD_CE_MapiHandler is a cMapiHandler
90621>>>>>    
90621>>>>>    Procedure Construct_Object
90623>>>>>        Forward Send Construct_Object
90625>>>>>
90625>>>>>    End_Procedure
90626>>>>>
90626>>>>>    Procedure End_Construct_Object
90628>>>>>        Forward Send End_Construct_Object
90630>>>>>
90630>>>>>    End_Procedure
90631>>>>>
90631>>>>>End_Class
90632>>>Use Base\cVDFD_CE_Object.pkg
Including file: Base\cVDFD_CE_Object.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_Object.pkg)
90632>>>>>Use VdfBase.pkg
90632>>>>>// A generic base class for building other classes upon //
90632>>>>>
90632>>>>>Use Mixin\cVDFD_CE_ClassNameArray_Mixin.pkg
Including file: Mixin\cVDFD_CE_ClassNameArray_Mixin.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Mixin\cVDFD_CE_ClassNameArray_Mixin.pkg)
90632>>>>>>>//**********************************************************************************[v4]***
90632>>>>>>>// Copyright (c) 2004 Todd Forsberg d/b/a Threshold Software (VDFD)
90632>>>>>>>// Copyright (c) 2006 Threshold Software
90632>>>>>>>// Copyright (c) 2012 VDFD Framework Community Edition
90632>>>>>>>// All rights reserved.
90632>>>>>>>//
90632>>>>>>>// $Authors     : Todd Forsberg (todd@vdfd.com)
90632>>>>>>>//
90632>>>>>>>// $FileName    : cVDFD_CE_ClassNameArray_Mixin
90632>>>>>>>// $ProjectName : VDFD Framework Community Edition
90632>>>>>>>// $Created     : July 12, 2004
90632>>>>>>>// $Type        : Mixin Class
90632>>>>>>>//
90632>>>>>>>// Contents:    This package provides support for class identification during runtime.
90632>>>>>>>//
90632>>>>>>>// Properties:
90632>>>>>>>//     
90632>>>>>>>// Methods:     
90632>>>>>>>//      
90632>>>>>>>//     
90632>>>>>>>// Required Files:
90632>>>>>>>//  
90632>>>>>>>//
90632>>>>>>>//*****************************************************************************************
90632>>>>>>>
90632>>>>>>>Use VdfBase.pkg
90632>>>>>>>  
90632>>>>>>>Class cVDFD_CE_ClassNameArray_Mixin is a Mixin
90633>>>>>>>
90633>>>>>>>    Procedure Define_VDFD_CE_ClassNameArray_Mixin
90635>>>>>>>        Property Handle phoClassArray (Create(Self, RefClass(Array)))
90636>>>>>>>    End_Procedure
90637>>>>>>>  
90637>>>>>>>    // ??? //
90637>>>>>>>    Procedure ClassShowln String sVal
90639>>>>>>>        Integer iCount
90639>>>>>>>        String sClass
90639>>>>>>>        Handle hArray
90639>>>>>>>        Get phoClassArray to hArray
90640>>>>>>>        Get Item_Count of hArray to iCount
90641>>>>>>>        Showln (Value(hArray,iCount-1)) " --> " sVal
90645>>>>>>>    End_Procedure
90646>>>>>>>    
90646>>>>>>>    Procedure AddClassName String sClassName
90648>>>>>>>        Integer iCount
90648>>>>>>>        Handle hArray
90648>>>>>>>        Get phoClassArray to hArray
90649>>>>>>>        Get Item_Count of hArray to iCount
90650>>>>>>>        Set Value of hArray item iCount to sClassName
90651>>>>>>>    End_Procedure
90652>>>>>>>    
90652>>>>>>>    Function psCurrentClassName Returns String
90654>>>>>>>        Integer iCount
90654>>>>>>>        Handle hArray
90654>>>>>>>        String sClassName
90654>>>>>>>        Get phoClassArray to hArray
90655>>>>>>>        Get Item_Count of hArray to iCount
90656>>>>>>>        Get Value of hArray item (iCount-1) to sClassName
90657>>>>>>>        Function_Return sClassName
90658>>>>>>>    End_Function
90659>>>>>>>  
90659>>>>>>>    Procedure DisplayClasses
90661>>>>>>>        Integer iCount iLoop
90661>>>>>>>        String sVal
90661>>>>>>>        Handle hArray
90661>>>>>>>        Get phoClassArray to hArray
90662>>>>>>>        Get Item_Count of hArray to iCount
90663>>>>>>>        Showln "-------------------------------------------"
90665>>>>>>>        Showln "Class Heirarchy of : " (Name(Self))
90668>>>>>>>        For iLoop from 0 to (iCount-1)
90674>>>>>>>>
90674>>>>>>>            Get Value of hArray item iLoop to sVal
90675>>>>>>>            Showln (Repeat(" ",(iLoop*4))) "+--" sVal
90679>>>>>>>        Loop
90680>>>>>>>>
90680>>>>>>>        Showln "-------------------------------------------"
90682>>>>>>>    End_Procedure
90683>>>>>>>
90683>>>>>>>End_Class
90684>>>>>>>
90684>>>>>>>// End of File: cVDFD_ClassNameArray_Mixin.pkg
90684>>>>>>>
90684>>>>>Use Mixin\cVDFD_CE_RegisterPropertyHandle_Mixin.pkg
Including file: Mixin\cVDFD_CE_RegisterPropertyHandle_Mixin.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Mixin\cVDFD_CE_RegisterPropertyHandle_Mixin.pkg)
90684>>>>>>>//**********************************************************************************[v4]***
90684>>>>>>>// Copyright (c) 2006 Threshold Software
90684>>>>>>>// All rights reserved.
90684>>>>>>>//
90684>>>>>>>// DO NOT DISTRIBUTE THIS FILE OR ANY PART OF IT !
90684>>>>>>>//
90684>>>>>>>// $FileName    : cVDFD_RegisterPropertyHandle_Mixin.pkg
90684>>>>>>>// $ProjectName : VDFD Framework
90684>>>>>>>// $Authors     : Todd Forsberg
90684>>>>>>>// $Created     : 06.24.2006  16:41          
90684>>>>>>>//
90684>>>>>>>// Contents:
90684>>>>>>>//
90684>>>>>>>//
90684>>>>>>>// Properties:
90684>>>>>>>//
90684>>>>>>>//     
90684>>>>>>>// Methods:     
90684>>>>>>>//      
90684>>>>>>>//     
90684>>>>>>>// Required Files:
90684>>>>>>>//  
90684>>>>>>>//
90684>>>>>>>//*****************************************************************************************
90684>>>>>>>Use VdfBase.pkg
90684>>>>>>>
90684>>>>>>>Class cVDFD_CE_RegisterPropertyHandle_Mixin is a Mixin
90685>>>>>>>
90685>>>>>>>    // Construct_Mixin: Mixin constructor.
90685>>>>>>>    Procedure Define_VDFD_CE_RegisterPropertyHandle_Mixin
90687>>>>>>>        //Insert your Properties here.
90687>>>>>>>        
90687>>>>>>>        Property Handle Private_phmRegisterPropertyHandle
90688>>>>>>>        
90688>>>>>>>        // Create child objects
90688>>>>>>>        
90688>>>>>>>        // Set property values:
90688>>>>>>>        //VDFD_Showln "Define_VDFD_RegisterPropertyHandle_Mixin for: " (Name(Self))
90688>>>>>>>    End_Procedure
90689>>>>>>>
90689>>>>>>>    // Finish mixin construction
90689>>>>>>>    //Procedure End_Define_VDFD_RegisterPropertyHandle_Mixin
90689>>>>>>>    //  Forward Send End_Construct_Object
90689>>>>>>>    //End_Procedure
90689>>>>>>>  
90689>>>>>>>    Procedure Destroy_Object
90691>>>>>>>        //VDFD_Showln "Destroy_Object: " Self "  " (Name(Self))
90691>>>>>>>        Handle hProp
90691>>>>>>>        Get Private_phmRegisterPropertyHandle to hProp
90692>>>>>>>        If hProp Delegate Set hProp to 0
90696>>>>>>>        Forward Send Destroy_Object
90698>>>>>>>    End_Procedure
90699>>>>>>>  
90699>>>>>>>    Procedure Destroy
90701>>>>>>>        //VDFD_Showln "Destroy: " Self "  " (Name(Self))
90701>>>>>>>        Handle hProp
90701>>>>>>>        Get Private_phmRegisterPropertyHandle to hProp
90702>>>>>>>        If hProp Delegate Set hProp to 0
90706>>>>>>>        Forward Send Destroy
90708>>>>>>>    End_Procedure
90709>>>>>>>  
90709>>>>>>>    Procedure Set phmRegisterPropertyHandle Handle hProp
90711>>>>>>>        Handle hSelf
90711>>>>>>>        Set Private_phmRegisterPropertyHandle to hProp
90712>>>>>>>        If hProp Begin
90714>>>>>>>            Move Self to hSelf
90715>>>>>>>            Delegate Set hProp to hSelf
90717>>>>>>>        End
90717>>>>>>>>
90717>>>>>>>    End_Procedure
90718>>>>>>>
90718>>>>>>>End_Class
90719>>>>>>>
90719>>>>>>>// End of File: cVDFD_RegisterPropertyHandle_Mixin.pkg
90719>>>>>>>
90719>>>>>
90719>>>>>Class cVDFD_CE_Object is a cObject
90720>>>>>
90720>>>>>    Import_Class_Protocol cVDFD_CE_ClassNameArray_Mixin
90721>>>>>    Import_Class_Protocol cVDFD_CE_RegisterPropertyHandle_Mixin
90722>>>>>    
90722>>>>>    Procedure Construct_Object
90724>>>>>        Forward Send Construct_Object
90726>>>>>        
90726>>>>>        Send Define_VDFD_CE_ClassNameArray_Mixin
90727>>>>>        Send Define_VDFD_CE_RegisterPropertyHandle_Mixin
90728>>>>>        
90728>>>>>        Send AddClassName "cObject"  //add base classname
90729>>>>>        Send AddClassName "!$"  //add classname
90730>>>>>    
90730>>>>>        // Define new Properties:
90730>>>>>    
90730>>>>>        // Create child objects:
90730>>>>>    
90730>>>>>        // Set property values:
90730>>>>>    
90730>>>>>    End_Procedure
90731>>>>>
90731>>>>>    Procedure End_Construct_Object
90733>>>>>        Forward Send End_Construct_Object
90735>>>>>        String sName
90735>>>>>        Get Object_Label to sName
90736>>>>>        If (sName = "OOBJECT") Set Name to "oVDFD_CE_Object"
90739>>>>>
90739>>>>>        // Add your code that needs to be executed at the end of the object construction here:
90739>>>>>
90739>>>>>    End_Procedure
90740>>>>>
90740>>>>>    // Create and augment procedures and functions
90740>>>>>
90740>>>>>End_Class
90741>>>>>
90741>>>>>// End of File: cVDFD_Object.pkg
90741>>>Use Base\cVDFD_CE_ColorDialog.pkg
Including file: Base\cVDFD_CE_ColorDialog.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_ColorDialog.pkg)
90741>>>>>Use Colr_dlg.pkg
Including file: Colr_dlg.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\Colr_dlg.pkg)
90741>>>>>>>//************************************************************************
90741>>>>>>>//--- Colr_Dlg.pkg
90741>>>>>>>//
90741>>>>>>>// Copyright (c) 1983-1997 Data Access Corporation, Miami Florida,
90741>>>>>>>// All rights reserved.
90741>>>>>>>// DataFlex is a registered trademark of Data Access Corporation.
90741>>>>>>>//
90741>>>>>>>//************************************************************************
90741>>>>>>>//  Description:
90741>>>>>>>//      Provides a DataFlex class that acts as a wrapper to the Windows'
90741>>>>>>>//      Color-Dialog
90741>>>>>>>//
90741>>>>>>>//  Author: Stuart W. Booth
90741>>>>>>>// 07/23/96 JJT - New Class names
90741>>>>>>>// 09/05/02 SWB - Reworked the class to derive from cObject (with embedded
90741>>>>>>>//                Array for Custom Colors). General code cleanup.
90741>>>>>>>//************************************************************************
90741>>>>>>>
90741>>>>>>>Use VDFBase.pkg
90741>>>>>>>Use DLL.pkg
90741>>>>>>>Use RGB.pkg
90741>>>>>>>Use GlobalFunctionsProcedures.pkg
90741>>>>>>>
90741>>>>>>>
90741>>>>>>>External_Function ChooseColor 'ChooseColorA' COMDLG32.dll Pointer lpCC Returns DWord
90742>>>>>>>
90742>>>>>>>TYPE CHOOSECOLOR
90742>>>>>>>    Field CHOOSECOLOR.lStructSize    as DWORD
90742>>>>>>>    Field CHOOSECOLOR.hWndOwner      as HANDLE
90742>>>>>>>    Field CHOOSECOLOR.hInstance      as HANDLE
90742>>>>>>>    Field CHOOSECOLOR.rgbResult      as DWORD
90742>>>>>>>    Field CHOOSECOLOR.lpCustColors   as POINTER
90742>>>>>>>    Field CHOOSECOLOR.flags          as DWORD
90742>>>>>>>    Field CHOOSECOLOR.lCustData      as DWORD
90742>>>>>>>    Field CHOOSECOLOR.lpfnHook       as DWORD
90742>>>>>>>    Field CHOOSECOLOR.lpTemplateName as POINTER
90742>>>>>>>END_TYPE
90742>>>>>>>
90742>>>>>>>Class ColorDialog Is a cObject
90743>>>>>>>    Procedure Construct_Object
90745>>>>>>>        Integer iLoop
90745>>>>>>>        Handle hoCustomColors
90745>>>>>>>
90745>>>>>>>        Forward Send Construct_Object
90747>>>>>>>
90747>>>>>>>        Property Boolean FullOpen_State        True
90748>>>>>>>        Property Boolean PreventFullOpen_State False
90749>>>>>>>        Property Boolean SelectedColor_State   True
90750>>>>>>>        Property Integer SelectedColor         0
90751>>>>>>>
90751>>>>>>>        Property Handle phoCustomColors (Create(self, U_Array)) // create an array to hold the custom colors
90752>>>>>>>
90752>>>>>>>        // Set all custom colors to white...
90752>>>>>>>        Get phoCustomColors To hoCustomColors
90753>>>>>>>        For iLoop From 0 To 15
90759>>>>>>>>
90759>>>>>>>            Set Value of hoCustomColors iLoop To clWhite
90760>>>>>>>        Loop
90761>>>>>>>>
90761>>>>>>>
90761>>>>>>>    End_Procedure
90762>>>>>>>
90762>>>>>>>    Procedure Set Custom_Color Integer iItem Integer rgbColor
90764>>>>>>>        Set Value of (phoCustomColors(self)) iItem To rgbColor
90765>>>>>>>    End_Procedure
90766>>>>>>>
90766>>>>>>>    Function Custom_Color Integer iItem Returns Integer
90768>>>>>>>        Function_Return (Integer_Value(phoCustomColors(self), iItem))
90769>>>>>>>    End_Function
90770>>>>>>>
90770>>>>>>>    Procedure AssignCustomColors Handle hoSourceColorDialog
90772>>>>>>>        // Copies the custom colors from another ColorDialog instance
90772>>>>>>>        Integer iColor
90772>>>>>>>
90772>>>>>>>        For iColor From 0 To 15
90778>>>>>>>>
90778>>>>>>>            Set Custom_Color iColor To (Value(hoSourceColorDialog, iColor))
90779>>>>>>>        Loop
90780>>>>>>>>
90780>>>>>>>    End_Procedure
90781>>>>>>>
90781>>>>>>>    Function Value Integer iItem Returns String
90783>>>>>>>        // Provides support for the AssignCustomColors procedure, which requires
90783>>>>>>>        // that a "Get Value" interface is supported
90783>>>>>>>        Function_Return (Custom_Color(self, iItem))
90784>>>>>>>    End_Function
90785>>>>>>>
90785>>>>>>>    Function OwnerHandle returns handle
90787>>>>>>>        Handle hWnd
90787>>>>>>>        Handle hoObj
90787>>>>>>>        Get Focus of desktop to hoObj // start with the focus
90788>>>>>>>        Move (gOwnerWindowHandle(hoObj)) to hWnd // global function finds the right handle for us
90789>>>>>>>        function_return hWnd
90790>>>>>>>    End_Function
90791>>>>>>>
90791>>>>>>>    Function Show_Dialog Returns Boolean
90793>>>>>>>        //Shows the dialog. Returns True if the OK button was clicked.
90793>>>>>>>        Handle hContainer hoCustomColors
90793>>>>>>>        Boolean bSelected bFullOpen bNoOpen bSelColor
90793>>>>>>>        Integer rgbColor iFlags iLoop
90793>>>>>>>        String sCC sColors
90793>>>>>>>
90793>>>>>>>        //Delegate Get Container_Handle To hContainer
90793>>>>>>>        Get OwnerHandle To hContainer
90794>>>>>>>
90794>>>>>>>        Get phoCustomColors To hoCustomColors
90795>>>>>>>        ZeroType CHOOSECOLOR To sCC
90796>>>>>>>
90796>>>>>>>        Move '' To sColors
90797>>>>>>>        For iLoop from 0 To 15
90803>>>>>>>>
90803>>>>>>>            Get Value of hoCustomColors iLoop To rgbColor
90804>>>>>>>            Move (sColors + DWORDToBytes(rgbColor)) To sColors
90805>>>>>>>        Loop
90806>>>>>>>>
90806>>>>>>>
90806>>>>>>>        Get FullOpen_State        To bFullOpen
90807>>>>>>>        Get PreventFullOpen_State To bNoOpen
90808>>>>>>>        Get SelectedColor_State   To bSelColor
90809>>>>>>>        Get SelectedColor         To rgbColor
90810>>>>>>>
90810>>>>>>>        Move 0 To iFlags
90811>>>>>>>        If bFullOpen Move (iFlags +CC_FULLOPEN)        To iFlags
90814>>>>>>>        If bNoOpen   Move (iFlags +CC_PREVENTFULLOPEN) To iFlags
90817>>>>>>>        If bSelColor Move (iFlags +CC_RGBINIT)         To iFlags
90820>>>>>>>
90820>>>>>>>        Put CHOOSECOLOR_size     To sCC At CHOOSECOLOR.lStructSize
90821>>>>>>>        Put hContainer           To sCC At CHOOSECOLOR.hWndOWner
90822>>>>>>>        Put rgbColor             To sCC At CHOOSECOLOR.rgbResult
90823>>>>>>>        Put (AddressOf(sColors)) To sCC At CHOOSECOLOR.lpCustColors
90824>>>>>>>        Put iFlags               To sCC At CHOOSECOLOR.flags
90825>>>>>>>
90825>>>>>>>        Move (ChooseColor(AddressOf(sCC))) To bSelected
90826>>>>>>>
90826>>>>>>>        If bSelected Begin
90828>>>>>>>            For iLoop from 0 To 15
90834>>>>>>>>
90834>>>>>>>                Move (BytesToDword(sColors, iLoop *4 +1)) To rgbColor
90835>>>>>>>                Set Value of hoCustomColors iLoop To rgbColor
90836>>>>>>>            Loop
90837>>>>>>>>
90837>>>>>>>            GetBuff From sCC At CHOOSECOLOR.rgbResult To rgbColor
90838>>>>>>>            Set SelectedColor To rgbColor
90839>>>>>>>        End
90839>>>>>>>>
90839>>>>>>>        Function_Return bSelected
90840>>>>>>>    End_Function
90841>>>>>>>
90841>>>>>>>End_Class
90842>>>>>
90842>>>>>Class cVDFD_CE_ColorDialog is a ColorDialog
90843>>>>>    
90843>>>>>    Procedure Construct_Object
90845>>>>>        Forward Send Construct_Object
90847>>>>>
90847>>>>>    End_Procedure
90848>>>>>
90848>>>>>    Procedure End_Construct_Object
90850>>>>>        Forward Send End_Construct_Object
90852>>>>>
90852>>>>>    End_Procedure
90853>>>>>
90853>>>>>End_Class
90854>>>Use Base\cVDFD_CE_ComboForm.pkg
Including file: Base\cVDFD_CE_ComboForm.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_ComboForm.pkg)
90854>>>>>Use Windows.pkg
90854>>>>>
90854>>>>>Class cVDFD_CE_ComboForm is a ComboForm
90855>>>>>    
90855>>>>>    Procedure Construct_Object
90857>>>>>        Forward Send Construct_Object
90859>>>>>
90859>>>>>    End_Procedure
90860>>>>>
90860>>>>>    Procedure End_Construct_Object
90862>>>>>        Forward Send End_Construct_Object
90864>>>>>
90864>>>>>    End_Procedure
90865>>>>>
90865>>>>>End_Class
90866>>>Use Base\cVDFD_CE_Container3D.pkg
Including file: Base\cVDFD_CE_Container3D.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_Container3D.pkg)
90866>>>>>Use Windows.pkg
90866>>>>>
90866>>>>>Class cVDFD_CE_Container3D is a Container3D
90867>>>>>    
90867>>>>>    Procedure Construct_Object
90869>>>>>        Forward Send Construct_Object
90871>>>>>
90871>>>>>    End_Procedure
90872>>>>>
90872>>>>>    Procedure End_Construct_Object
90874>>>>>        Forward Send End_Construct_Object
90876>>>>>
90876>>>>>    End_Procedure
90877>>>>>
90877>>>>>End_Class
90878>>>Use Base\cVDFD_CE_ProgressBar.pkg
Including file: Base\cVDFD_CE_ProgressBar.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_ProgressBar.pkg)
90878>>>>>Use cProgressBar.pkg
Including file: cProgressBar.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cProgressBar.pkg)
90878>>>>>>>Use Windows.pkg
90878>>>>>>>Use cWinControl.pkg
90878>>>>>>>Use CommCtrl.pkg
90878>>>>>>>
90878>>>>>>>Type tPbRange
90878>>>>>>>    Field tPbRange.iLow  as DWord
90878>>>>>>>    Field tPbRange.iHigh as DWord
90878>>>>>>>End_Type
90878>>>>>>>
90878>>>>>>>//{ OverrideProperty=pbEnabled DesignTime=False }
90878>>>>>>>Class cProgressBar is a cWinControl
90879>>>>>>>
90879>>>>>>>    Procedure Construct_Object
90881>>>>>>>        Forward Send Construct_Object
90883>>>>>>>        Property Integer private_piMinimum
90884>>>>>>>        Property Integer private_piMaximum   100
90885>>>>>>>        Property Integer private_piAdvanceBy 10
90886>>>>>>>        Property Integer private_piPosition
90887>>>>>>>        Property Integer private_pbVertical  False
90888>>>>>>>        Property Integer private_pbSmooth    False
90889>>>>>>>        Property Integer private_piBackColor clDefault
90890>>>>>>>        Property Integer private_piBarColor  clDefault
90891>>>>>>>
90891>>>>>>>        Send Define_ToolTip_Support_Mixin
90892>>>>>>>
90892>>>>>>>        Set External_Class_Name 'cVdfProgressBar' To 'msctls_progress32'
90893>>>>>>>        Set Focus_Mode to NonFocusable
90894>>>>>>>        Set Skip_State to True
90895>>>>>>>        Set pbUseFormWindowHandle to False     // Must come after Define_ToolTip_Support_Mixin
90896>>>>>>>    End_Procedure
90897>>>>>>>
90897>>>>>>>    Import_Class_Protocol ToolTip_Support_Mixin
90898>>>>>>>
90898>>>>>>>    Procedure Set piMinimum Integer iMin
90900>>>>>>>        Integer iMax
90900>>>>>>>
90900>>>>>>>        Set private_piMinimum to iMin
90901>>>>>>>        Get private_piMaximum To iMax
90902>>>>>>>        Send Windows_Message PBM_SETRANGE32 iMin iMax
90903>>>>>>>    End_Procedure
90904>>>>>>>    Function piMinimum Returns Integer
90906>>>>>>>        If (Window_Handle(self)) Function_Return (WindowsMessage(PBM_GETRANGE, 1, 0))
90909>>>>>>>        Else Function_Return (private_piMinimum(self))
90911>>>>>>>    End_Function
90912>>>>>>>
90912>>>>>>>    Procedure Set piMaximum Integer iMax
90914>>>>>>>        Integer iMin
90914>>>>>>>
90914>>>>>>>        Set private_piMaximum to iMax
90915>>>>>>>        Get private_piMinimum To iMin
90916>>>>>>>        Send Windows_Message PBM_SETRANGE32 iMin iMax
90917>>>>>>>    End_Procedure
90918>>>>>>>    Function piMaximum Returns Integer
90920>>>>>>>        If (Window_Handle(self)) Function_Return (WindowsMessage(PBM_GETRANGE, 0, 0))
90923>>>>>>>        Else Function_Return (private_piMaximum(self))
90925>>>>>>>    End_Function
90926>>>>>>>
90926>>>>>>>    Procedure Set piAdvanceBy Integer iAdvanceBy
90928>>>>>>>        Set private_piAdvanceBy To iAdvanceBy
90929>>>>>>>        Send Windows_Message PBM_SETSTEP iAdvanceBy 0
90930>>>>>>>    End_Procedure
90931>>>>>>>    Function piAdvanceBy Returns Integer
90933>>>>>>>        Function_Return (private_piAdvanceBy(self))
90934>>>>>>>    End_Function
90935>>>>>>>
90935>>>>>>>    Procedure Set piPosition Integer iPos
90937>>>>>>>        Set private_piPosition To iPos
90938>>>>>>>        Send Windows_Message PBM_SETPOS iPos 0
90939>>>>>>>    End_Procedure
90940>>>>>>>
90940>>>>>>>    Function piPosition Returns Integer
90942>>>>>>>        If (Window_Handle(self)) Function_Return (WindowsMessage(PBM_GETPOS, 0, 0))
90945>>>>>>>        Else Function_Return (private_piPosition(self))
90947>>>>>>>    End_Function
90948>>>>>>>
90948>>>>>>>    Procedure Set pbVertical Boolean bVertical
90950>>>>>>>        If (private_pbVertical(self) <> bVertical) Begin
90952>>>>>>>            Set private_pbVertical To bVertical
90953>>>>>>>           Send DoRecreateWindow
90954>>>>>>>        End
90954>>>>>>>>
90954>>>>>>>    End_Procedure
90955>>>>>>>
90955>>>>>>>    Function pbVertical Returns Boolean
90957>>>>>>>        Function_Return (private_pbVertical(self))
90958>>>>>>>    End_Function
90959>>>>>>>
90959>>>>>>>    Procedure Set pbSmooth Boolean bSmooth
90961>>>>>>>        If (private_pbSmooth(self) <> bSmooth) Begin
90963>>>>>>>           Set private_pbSmooth To bSmooth
90964>>>>>>>           Send DoRecreateWindow
90965>>>>>>>        End
90965>>>>>>>>
90965>>>>>>>    End_Procedure
90966>>>>>>>    Function pbSmooth Returns Boolean
90968>>>>>>>        Function_Return (private_pbSmooth(self))
90969>>>>>>>    End_Function
90970>>>>>>>
90970>>>>>>>    Procedure Set piBackColor Integer rgbColor
90972>>>>>>>        Set private_piBackColor To rgbColor
90973>>>>>>>        Send Windows_Message PBM_SETBKCOLOR 0 rgbColor
90974>>>>>>>    End_Procedure
90975>>>>>>>    Function piBackColor Returns Integer
90977>>>>>>>        Function_Return (private_piBackColor(self))
90978>>>>>>>    End_Function
90979>>>>>>>
90979>>>>>>>    Procedure Set piBarColor Integer rgbColor
90981>>>>>>>        Set private_piBarColor To rgbColor
90982>>>>>>>        Send Windows_Message PBM_SETBARCOLOR 0 rgbColor
90983>>>>>>>    End_Procedure
90984>>>>>>>    Function piBarColor Returns Integer
90986>>>>>>>        Function_Return (private_piBarColor(self))
90987>>>>>>>    End_Function
90988>>>>>>>
90988>>>>>>>    Procedure DoAdvance
90990>>>>>>>        Send Windows_Message PBM_STEPIT 0 0
90991>>>>>>>    End_procedure
90992>>>>>>>
90992>>>>>>>    Procedure DoAdvanceBy  Integer iAdvanceBy
90994>>>>>>>        Send Windows_Message PBM_DELTAPOS iAdvanceBy 0
90995>>>>>>>    End_procedure
90996>>>>>>>
90996>>>>>>>    Procedure private_DoInitWindow
90998>>>>>>>        Set piBarColor  To (private_piBarColor(self))
90999>>>>>>>        Set piBackColor To (private_piBackColor(self))
91000>>>>>>>        Set piAdvanceBy To (private_piAdvanceBy(self))
91001>>>>>>>        Set piMinimum   To (private_piMinimum(self))
91002>>>>>>>        Set piMaximum   To (private_piMaximum(self))
91003>>>>>>>        Set piPosition  To (private_piPosition(self))
91004>>>>>>>    End_Procedure
91005>>>>>>>
91005>>>>>>>    Procedure Page_Object Integer iState
91007>>>>>>>        Handle hWnd
91007>>>>>>>
91007>>>>>>>        Get Window_Handle To hWnd
91008>>>>>>>        If (hWnd=0 and iState) Begin
91010>>>>>>>            Set Window_Style To PBS_VERTICAL (private_pbVertical(self))
91011>>>>>>>            Set Window_Style To PBS_SMOOTH   (private_pbSmooth(self))
91012>>>>>>>            Forward Send Page_Object True
91014>>>>>>>        End
91014>>>>>>>>
91014>>>>>>>        Else Forward Send Page_Object iState
91017>>>>>>>     
91017>>>>>>>        // Handle tooltip support....
91017>>>>>>>        If (iState = 0) Begin
91019>>>>>>>            Send RequestDeleteToolTip
91020>>>>>>>        End 
91020>>>>>>>>
91020>>>>>>>        Else Begin
91021>>>>>>>            Send RequestAddToolTip
91022>>>>>>>        End
91022>>>>>>>>
91022>>>>>>>    End_Procedure
91023>>>>>>>
91023>>>>>>>    Procedure Page Integer iState
91025>>>>>>>        Forward Send Page iState
91027>>>>>>>        If (iState =1) Send private_DoInitWindow
91030>>>>>>>    End_Procedure
91031>>>>>>>
91031>>>>>>>    // Called by Page_Object. Handles tooltip creation. We use a dedicated
91031>>>>>>>    // method to perform AddToolTip because it is often the case that Page_Object
91031>>>>>>>    // is implemented in a mixin class.
91031>>>>>>>    Procedure RequestAddToolTip
91033>>>>>>>        Send AddToolTip
91034>>>>>>>    End_Procedure  // RequestAddToolTip
91035>>>>>>>
91035>>>>>>>
91035>>>>>>>    // Called by Page_Object. Handles tooltip removal. 
91035>>>>>>>    Procedure RequestDeleteToolTip
91037>>>>>>>        Send DeleteToolTip
91038>>>>>>>    End_Procedure // RequestDeleteToolTip
91039>>>>>>>End_Class
91040>>>>>
91040>>>>>Class cVDFD_CE_ProgressBar is a cProgressBar
91041>>>>>    
91041>>>>>    Procedure Construct_Object
91043>>>>>        Forward Send Construct_Object
91045>>>>>
91045>>>>>    End_Procedure
91046>>>>>
91046>>>>>    Procedure End_Construct_Object
91048>>>>>        Forward Send End_Construct_Object
91050>>>>>
91050>>>>>    End_Procedure
91051>>>>>
91051>>>>>End_Class
91052>>>Use Base\cVDFD_CE_RichEdit.pkg
Including file: Base\cVDFD_CE_RichEdit.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_RichEdit.pkg)
91052>>>>>Use cRichEdit.pkg
91052>>>>>
91052>>>>>Class cVDFD_CE_RichEdit is a cRichEdit
91053>>>>>    
91053>>>>>    Procedure Construct_Object
91055>>>>>        Forward Send Construct_Object
91057>>>>>
91057>>>>>    End_Procedure
91058>>>>>
91058>>>>>    Procedure End_Construct_Object
91060>>>>>        Forward Send End_Construct_Object
91062>>>>>
91062>>>>>    End_Procedure
91063>>>>>
91063>>>>>End_Class
91064>>>Use Base\cVDFD_CE_ScrollingContainer.pkg
Including file: Base\cVDFD_CE_ScrollingContainer.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_ScrollingContainer.pkg)
91064>>>>>Use cScrollingContainer.pkg
Including file: cScrollingContainer.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cScrollingContainer.pkg)
91064>>>>>>>// Provides support for scrolling containers.
91064>>>>>>>// Scrolling containers is provided by creating two objects,
91064>>>>>>>// a host (cScrollingContainer) and a scrolling clientarea (cScrollingClientArea)
91064>>>>>>>// The host has no public interface, you just drop the object. It should have only one child object
91064>>>>>>>// and that should be a scrolling client-area. If it is not, it is an error. It is also considered
91064>>>>>>>// an error to place a scrolling client area in any object other than a scrolling container.
91064>>>>>>>
91064>>>>>>>Use Windows.pkg
91064>>>>>>>Use cScrollingContainerMixin.pkg
91064>>>>>>>
91064>>>>>>>Class cScrollingClientArea is a Container3d
91065>>>>>>>    Import_Class_Protocol cScrollingClientAreaMixin
91066>>>>>>>    Procedure Construct_Object
91068>>>>>>>        Forward Send Construct_Object
91070>>>>>>>        Send Define_cScrollingClientAreaMixin
91071>>>>>>>    End_Procedure
91072>>>>>>>End_Class
91073>>>>>>>
91073>>>>>>>
91073>>>>>>>
91073>>>>>>>Class cScrollingContainer is a Container3d
91074>>>>>>>    Import_Class_Protocol cScrollingContainerMixin
91075>>>>>>>    Procedure Construct_Object
91077>>>>>>>        Forward Send Construct_Object
91079>>>>>>>        Send Define_cScrollingContainerMixin
91080>>>>>>>    End_Procedure
91081>>>>>>>End_Class
91082>>>>>
91082>>>>>Class cVDFD_CE_ScrollingContainer is a cScrollingContainer
91083>>>>>    
91083>>>>>    Procedure Construct_Object
91085>>>>>        Forward Send Construct_Object
91087>>>>>
91087>>>>>    End_Procedure
91088>>>>>
91088>>>>>    Procedure End_Construct_Object
91090>>>>>        Forward Send End_Construct_Object
91092>>>>>
91092>>>>>    End_Procedure
91093>>>>>
91093>>>>>End_Class
91094>>>Use Base\cVDFD_CE_SplitterContainer.pkg
Including file: Base\cVDFD_CE_SplitterContainer.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_SplitterContainer.pkg)
91094>>>>>Use cSplitterContainer.pkg
Including file: cSplitterContainer.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cSplitterContainer.pkg)
91094>>>>>>>Use Windows.Pkg
91094>>>>>>>Use cSplitterContainerMixin.pkg
91094>>>>>>>
91094>>>>>>>
91094>>>>>>>
91094>>>>>>>Class cSplitterContainer is a Container3d
91095>>>>>>>    Import_Class_Protocol cSplitterContainerMixin
91096>>>>>>>    Procedure Construct_Object
91098>>>>>>>        Forward Send Construct_Object
91100>>>>>>>        Send Define_cSplitterContainerMixin
91101>>>>>>>    End_Procedure
91102>>>>>>>End_Class
91103>>>>>>>
91103>>>>>>>
91103>>>>>>>Class cSplitterContainerChild is a Container3d
91104>>>>>>>    Import_Class_Protocol cSplitterContainerChildMixin
91105>>>>>>>    Procedure Construct_Object
91107>>>>>>>        Forward Send Construct_Object
91109>>>>>>>        Send Define_cSplitterContainerChildMixin
91110>>>>>>>        Set Border_Style to Border_Normal
91111>>>>>>>    End_Procedure
91112>>>>>>>End_Class
91113>>>>>>>
91113>>>>>
91113>>>>>Class cVDFD_CE_SplitterContainer is a cSplitterContainer
91114>>>>>    
91114>>>>>    Procedure Construct_Object
91116>>>>>        Forward Send Construct_Object
91118>>>>>
91118>>>>>    End_Procedure
91119>>>>>
91119>>>>>    Procedure End_Construct_Object
91121>>>>>        Forward Send End_Construct_Object
91123>>>>>
91123>>>>>    End_Procedure
91124>>>>>
91124>>>>>End_Class
91125>>>Use Base\cVDFD_CE_TextEdit.pkg
Including file: Base\cVDFD_CE_TextEdit.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_TextEdit.pkg)
91125>>>>>Use cTextEdit.pkg
91125>>>>>
91125>>>>>Class cVDFD_CE_TextEdit is a cTextEdit
91126>>>>>    
91126>>>>>    Procedure Construct_Object
91128>>>>>        Forward Send Construct_Object
91130>>>>>
91130>>>>>    End_Procedure
91131>>>>>
91131>>>>>    Procedure End_Construct_Object
91133>>>>>        Forward Send End_Construct_Object
91135>>>>>
91135>>>>>    End_Procedure
91136>>>>>
91136>>>>>End_Class
91137>>>Use Base\cVDFD_CE_ToolTipController.pkg
Including file: Base\cVDFD_CE_ToolTipController.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_ToolTipController.pkg)
91137>>>>>Use cToolTipController.pkg
91137>>>>>
91137>>>>>Class cVDFD_CE_ToolTipController is a cToolTipController
91138>>>>>    
91138>>>>>    Procedure Construct_Object
91140>>>>>        Forward Send Construct_Object
91142>>>>>
91142>>>>>    End_Procedure
91143>>>>>
91143>>>>>    Procedure End_Construct_Object
91145>>>>>        Forward Send End_Construct_Object
91147>>>>>
91147>>>>>    End_Procedure
91148>>>>>
91148>>>>>End_Class
91149>>>Use Base\cVDFD_CE_WinReport2.pkg
Including file: Base\cVDFD_CE_WinReport2.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_WinReport2.pkg)
91149>>>>>Use cWinReport2.pkg
Including file: cWinReport2.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cWinReport2.pkg)
91149>>>>>>>// cWinReport2.pkg
91149>>>>>>>
91149>>>>>>>// defines support for new Winprint2 cWinReport2 class
91149>>>>>>>
91149>>>>>>>
91149>>>>>>>Use DFRpt.pkg              // BasicReport RO Class for VDF
91149>>>>>>>Use WinPrint2.pkg          // WinPrint2 engine
Including file: Winprint2.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\Winprint2.pkg)
91149>>>>>>>>>// WinPrint2.pkg
91149>>>>>>>>>//
91149>>>>>>>>>Use windows.pkg
91149>>>>>>>>>Use LanguageText.pkg
91149>>>>>>>>>Use DLL.pkg
91149>>>>>>>>>Use WinPrint2_Api.pkg
Including file: WinPrint2_API.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\WinPrint2_API.pkg)
91149>>>>>>>>>>>//WinPrint2_API.pkg
91149>>>>>>>>>>>
91149>>>>>>>>>>>Use DLL.pkg
91149>>>>>>>>>>>
91149>>>>>>>>>>>External_Function WP_IsPrinterValid "IsPrinterValid" WinPrint.dll ;Returns Boolean // True if the the current printer is a valid one. False, otherwise.
91150>>>>>>>>>>>
91150>>>>>>>>>>>External_Function WP_ArePrintersInstalled "ArePrintersInstalled" WinPrint.dll ; // determines whether at least one printer is installedReturns Boolean // True, if a printer is installed, False if it is not.
91151>>>>>>>>>>>
91151>>>>>>>>>>>External_Function WP_ExecutePrinterSetupDialog "ExecutePrinterSetupDialog" WinPrint.dll ; // displays the "printer setup" dialog   Handle hWndParent; // window handle of the parent windowReturns Boolean // True if the OK button pressed; False, otherwise.
91152>>>>>>>>>>>
91152>>>>>>>>>>>External_Function WP_ExecutePrintDialog "ExecutePrintDialog" WinPrint.dll ; // displays the "Print" dialog   Handle hWndParent; // window handle of the parent windowReturns Boolean // True if the OK button pressed; False, otherwise.
91153>>>>>>>>>>>
91153>>>>>>>>>>>External_Function WP_GetCurrentDevice "GetCurrentDevice" WinPrint.dll ; // retrieves the name of the current printer device    Address aDevice ; // address of the string (255 chars) that will hold the device name upon returnReturns Boolean // True, if success; False if error occurred
91154>>>>>>>>>>>
91154>>>>>>>>>>>External_Function WP_GetPrintDialogFlags "GetPrintDialogFlags" WinPrint.dll ; // retrieves the current print optionsReturns UInteger // array of flags representing print-related options that are currently set
91155>>>>>>>>>>>
91155>>>>>>>>>>>External_Function WP_GetUserDefinedPapersize "GetUserDefinedPapersize" WinPrint.dll ;  // gets the size of user-defined paperReturns UInteger // // hi-word=length; lo-word=width
91156>>>>>>>>>>>
91156>>>>>>>>>>>External_Function WP_IsPrintDialogFlagSet "IsPrintDialogFlagSet" WinPrint.dll ; // determines whether a specific print-flag is set    UInteger iFlag ; // the printer flagReturns Boolean // True, if the flag is set; False, if it isn't
91157>>>>>>>>>>>
91157>>>>>>>>>>>External_Function WP_SelectPrinter "SelectPrinter" WinPrint.dll ; // selects a printer programatically    String sDevice; // the name of the printerReturns Boolean // True, if success; False, if error (such as an invalid printer name)
91158>>>>>>>>>>>
91158>>>>>>>>>>>External_Function WP_SetFirstPagePaperSource "SetFirstPagePaperSource"  WinPrint.dll ;        Integer iBin ; // the bim constantReturns Boolean // True if success, false if error
91159>>>>>>>>>>>
91159>>>>>>>>>>>External_Function WP_SetNumberOfPrintCopies "SetNumberOfPrintCopies" WinPrint.dll ; // sets the number of copies to print    UInteger iNumCopies; // number of copies to makeReturns Boolean // Always True
91160>>>>>>>>>>>
91160>>>>>>>>>>>External_Function WP_SetSpecificPrintDialogFlag "SetSpecificPrintDialogFlag" WinPrint.dll; // Sets/unsets one printer flag    UInteger fFlag; // printer flagReturns Boolean // True, if success; False if error occurred
91161>>>>>>>>>>>
91161>>>>>>>>>>>External_Function WP_SetPrintDialogFlags "SetPrintDialogFlags" WinPrint.dll; // Sets/unsets all printer flags in one call    UInteger fFlags; // printer flagsReturns Boolean // True, if success; False if error occurred
91162>>>>>>>>>>>
91162>>>>>>>>>>>External_Function WP_SetUserDefinedPapersize "SetUserDefinedPapersize" WinPrint.dll ;  // sets the size of user-defined paper    UInteger iPaperSize ; // hi-word=length; lo-word=widthReturns Boolean; // True, if success; False if error occurred
91163>>>>>>>>>>>External_Function WP_SetFontStyle "SetFontStyle" WinPrint.dll ; // sets multiple font attributes    Integer iStyles ; // series of flagsReturns Boolean // always True
91164>>>>>>>>>>>
91164>>>>>>>>>>>External_Function WP_SetFontBold "SetFontBold" WinPrint.dll ; // toggles the bold attribute of the current font    Boolean bBold ; // True to switch bold attribute on; False to switch it offReturns Boolean // always True
91165>>>>>>>>>>>
91165>>>>>>>>>>>External_Function WP_SetFontItalic "SetFontItalic" WinPrint.dll ; // toggles the italic attribute of the current font    Boolean bItalic ; // True to switch italic attribute on; False to switch it offReturns Boolean  // always True
91166>>>>>>>>>>>
91166>>>>>>>>>>>External_Function WP_SetFontUnderline "SetFontUnderline" WinPrint.dll ; // toggles the underline attribute of the current font    Boolean bUnderline ; // True to switch underline attribute on; False to switch it offReturns Boolean  // always True
91167>>>>>>>>>>>
91167>>>>>>>>>>>External_Function WP_SetFontStrikeout "SetFontStrikeout" WinPrint.dll ; // toggles the strikeout attribute of the current font    Boolean bStrikeout ; // True to switch strikeout attribute on; False to switch it offReturns Boolean  // always True
91168>>>>>>>>>>>
91168>>>>>>>>>>>External_Function WP_SetFontColor "SetFontColor" WinPrint.dll ; // sets the color of the current font    Integer iColor ; // color of the fontReturns Boolean  // always True
91169>>>>>>>>>>>
91169>>>>>>>>>>>External_Function WP_SetFontHeight "SetFontHeight" WinPrint.dll ; // sets the height of the font    UInteger iHeight ; // height of the font in points (multiplied by 100. Eg 12.5 point should be sent as 1250)Returns Boolean  // always True
91170>>>>>>>>>>>
91170>>>>>>>>>>>External_Function WP_SetFontName "SetFontName" WinPrint.dll ; // Sets the name of the font to use    String sFontName ; // name of the font to useReturns Boolean  // always True
91171>>>>>>>>>>>
91171>>>>>>>>>>>External_Function WP_DrawBitmap "DrawBitmap" WinPrint.dll ; // Draws a bitmap (BMP, JPG)    String  sBitmap;                 // Name of the bitmap    Integer iLeft;                   // distance from left edge to draw bitmap    Integer iTop;                    // distance from top edge to draw bitmap    Integer iWidth;                  // width of the bitmap    Integer iHeight;                 // height of the bitmap    Boolean bUpdateCurrentPosition;  // after drawing, should the current position be updated?Returns Boolean // True, if OK; False, if an error occurred.
91172>>>>>>>>>>>
91172>>>>>>>>>>>External_Function WP_DrawEllipse "DrawEllipse" WinPrint.dll ; // draws an elipse within a bounding rectangle    Integer iLeft;                   // distance from left edge to draw the ellipse    Integer iTop;                    // distance from top edge to draw the ellipse    Integer iWidth;                  // width of the bounding rectangle    Integer iHeight;                 // height of the bounding rectangle    Integer iBorderColor;            // color of the ellipse's edge    Integer iFillColor;              // internal color of the ellipse    Boolean  bFill;                  // should the ellipse be filled? (False=transparent)    UInteger iThickness;             // thickness of the elipse    Boolean  bUpdateCurrentPosition; // after drawing, should the current position be updated?    Boolean  bWrap;                  // Should the ellipse be drawn on future soft-page breaks?Returns Boolean // True, if OK; False, if an error occurred.
91173>>>>>>>>>>>
91173>>>>>>>>>>>External_Function WP_DrawLine "DrawLine" WinPrint.dll ; // draws a line from the current position    Integer iLeft;                   // distance from left edge to draw the line    Integer iTop;                    // distance from top edge to draw the line    Integer iLength;                 // length of the line    Boolean  bHorizontal;            // draw horizontal? (False=vertical)    Integer iColor;                  // color of the line    UInteger iThickness;             // thickness of the line    Boolean  bUpdateCurrentPosition; // after drawing, should the current position be updated?Returns Boolean // True, if OK; False, if an error occurred.
91174>>>>>>>>>>>
91174>>>>>>>>>>>External_Function WP_DrawRectangle "DrawRectangle" WinPrint.dll ; // draws a rectangle    Integer iLeft;                   // distance from left edge to draw the rectangle    Integer iTop;                    // distance from top edge to draw the rectangle    Integer iWidth;                  // width of the rectangle    Integer iHeight;                 // height of the rectangle    Integer iBorderColor;            // color of the rectangle's border    Integer iFillColor;              // internal color of the rectangle    Boolean  bFill;                  // should the rectangle be filled? (False=transparent)    UInteger iThickness;             // thickness of the rectangle's border    Boolean  bUpdateCurrentPosition; // after drawing, should the current position be updated?    Boolean  bWrap;                  // Should the rectangle be drawn on future soft-page breaks?Returns Boolean // True, if OK; False, if an error occurred.
91175>>>>>>>>>>>
91175>>>>>>>>>>>External_Function WP_DrawXYLine "DrawXYLine" WinPrint.dll ; // draws a line between two points    Integer iLeftStart;              // distance from left edge to draw from    Integer iTopStart;               // distance from top edge to draw from    Integer iLeftEnd;                // distance from left edge to draw to    Integer iTopEnd;                 // distance from top edge to draw to    Integer iColor;                  // color of the line    UInteger iThickness;             // thickness of the line    Boolean  bUpdateCurrentPosition; // after drawing, should the current position be updated?    Boolean  bWrap;                  // Should the line be drawn on future soft-page breaks?Returns Boolean // True, if OK; False, if an error occurred.
91176>>>>>>>>>>>
91176>>>>>>>>>>>External_Function WP_SetAbsoluteMargins "SetAbsoluteMargins" WinPrint.dll ; // modifies the top/bottom non-printable margin    UInteger iTop;      // the top margin offset    UInteger iBottom;   // the bottom margin offset    Boolean  bAllPages; // should all pages be affected? True=AllPages; False=first page onlyReturns Boolean // always True
91177>>>>>>>>>>>
91177>>>>>>>>>>>External_Function WP_SetMargins "SetMargins" WinPrint.dll ; // Sets the user-margins    UInteger iLeft;   // the left margin    UInteger iTop;    // the top margin    UInteger iRight;  // the right margin    UInteger iBottom; // the bottom marginReturns Boolean // always True
91178>>>>>>>>>>>
91178>>>>>>>>>>>External_Function WP_CreateDiagram "CreateDiagram" WinPrint.dll ; // Creates a new diagram    UInteger eType;       // type of diagram (Bar, Line, Pie)    UInteger eEffect;     // how it is drawn (2d or 3d, etc)    UInteger iWidth;      // width of the diagram    UInteger iHeight;     // height of the diagram    Boolean  bDrawXyAxis; // draw the xy-axis (for bar charts only)?Returns Handle // unique id for the diagram used in other diagram funtions
91179>>>>>>>>>>>
91179>>>>>>>>>>>External_Function WP_AddDiagramEntry "AddDiagramEntry" WinPrint.dll ; // Adds an item into a diagram    Handle   hDiagram;          // diagram handle returned by CreateDiagram()    String   sValueDescription; // description of the item    String   sValue;            // value of the item    Integer iBorderColor;       // color of the item's border    Integer iFillColor;         // color of the item's interior    Boolean  bFilled;           // should the item be drawn filled (with iFillColor), or transparent?    UInteger iNumDecimals;      // Number of decimals in the sValue argument    UInteger eValueOrPercent;   // How the value should be displayed (as value or percentage, etc)    Boolean  bExploded;         // should the value be "pulled out" (pie charts only)Returns Boolean // True, if success; False, if error
91180>>>>>>>>>>>
91180>>>>>>>>>>>External_Function WP_DrawDiagram "DrawDiagram" WinPrint.dll ; // draws a diagram    Handle   hDiagram;               // diagram handle returned by CreateDiagram()    UInteger iLeft;                  // x-coordinate to draw the diagram    UInteger iTop;                   // y-coordinate to draw the diagram    Boolean  bUpdateCurrentPosition; // after drawing, should the current position be updated?Returns Boolean // True, if success; False, if error
91181>>>>>>>>>>>
91181>>>>>>>>>>>External_Function WP_LockDiagram "LockDiagram" WinPrint.dll ; // Locks a diagram so that no more entries can be added    Handle hDiagram; // diagram handle returned by CreateDiagram()Returns Boolean // True, if success; False, if error
91182>>>>>>>>>>>
91182>>>>>>>>>>>External_Function WP_SetDiagramCaption "SetDiagramCaption" WinPrint.dll ; // Sets the caption of a diagram    Handle hDiagram; // diagram handle returned by CreateDiagram()    String sCaption; // the diagram's captionReturns Boolean // True, if success; False, if error
91183>>>>>>>>>>>
91183>>>>>>>>>>>External_Function WP_SetDiagramXText "SetDiagramXText" WinPrint.dll ; // Sets the horizontal label of a diagram    Handle hDiagram; // diagram handle returned by CreateDiagram()    String sText;    // the diagram's horizonal labelReturns Boolean // True, if success; False, if error
91184>>>>>>>>>>>
91184>>>>>>>>>>>External_Function WP_SetDiagramYText "SetDiagramYText" WinPrint.dll ; // Sets the vertical label of a diagram    Handle  hDiagram;      // diagram handle returned by CreateDiagram()    String  sText;         // the diagram's vertical label    Boolean bVerticalText; // should the text be drawn vertically (False=horizontally)Returns Boolean // True, if success; False, if error
91185>>>>>>>>>>>
91185>>>>>>>>>>>External_Function WP_BeginHeader "BeginHeader" WinPrint.dll ; // creates a new header    UInteger iHeaderType; // the type of header    UInteger iSubHeaderNum; // for subheaders, then number (1-0)Returns Boolean // always True
91186>>>>>>>>>>>
91186>>>>>>>>>>>External_Function WP_EndHeader "EndHeader" WinPrint.dll ; // declares the end of the current headerReturns Boolean // always True
91187>>>>>>>>>>>
91187>>>>>>>>>>>External_Function WP_SetExtraLineCheck "SetExtraLineCheck" WinPrint.dll ; // forces a soft page break if header plus number of lines don't fit on page    UInteger iNumLines; // number of lines in addition to header required before forcing a soft page-breakReturns Boolean; // always True
91188>>>>>>>>>>>External_Function WP_SetHeaderFrame "SetHeaderFrame" WinPrint.dll ; // sets the style, color and frame of a header    UInteger eFrame;     // style of frame (margin-to-margin, etc)    Integer iColor;      // color of the frame's edge    UInteger iThickness; // thickness of the frame    Integer iFillCol;    // the internal color of the frame (only used if bBilled=True)    Boolean  bFilled;    // True, if the frame should be filled with the iFillColor (False=Transparent)Returns Boolean // Always True
91189>>>>>>>>>>>
91189>>>>>>>>>>>External_Function WP_SetHeaderMargin "SetHeaderMargin" WinPrint.dll ; // Sets a margin of space on the inside and outside of the current header    UInteger eType;      // Specifies which margin areas is being set.    Integer  iSize;      // Size of the margin setting in the current report metricsReturns Boolean  // False if document is not started
91190>>>>>>>>>>>
91190>>>>>>>>>>>External_Function WP_SetHeaderPlacement "SetHeaderPlacement" WinPrint.dll ; // placement (left, center or right) of the header    UInteger ePlacement; // placed left, center or rightReturns Boolean //always True
91191>>>>>>>>>>>
91191>>>>>>>>>>>External_Function WP_SetHeaderWrap "SetHeaderWrap" WinPrint.dll ; // determines whether the current header is drawn on soft page-breaks    Boolean bWrap; // True, to wrap onto following pages; False, for current page onlyReturns Boolean // always True
91192>>>>>>>>>>>
91192>>>>>>>>>>>External_Function WP_WriteHeader "WriteHeader" WinPrint.dll ; // writes a header to the current page    UInteger eHeaderType;   // type of header    UInteger iSubHeaderNum; // for subheaders, the number (1-9)Returns Boolean // True, if success; False, if error
91193>>>>>>>>>>>
91193>>>>>>>>>>>External_Function WP_RGBToDFPrintColor "RGBToDFPrintColor" WinPrint.dll ; // converts R, G, and B values into a composite color that WinPrint expects    UInteger iRed;   // red component (1-255)    UInteger iGreen; // green component (1-255)    UInteger iBlue;  // blue component (1-255)Returns Integer // composite color
91194>>>>>>>>>>>
91194>>>>>>>>>>>External_Function WP_GetMetrics "GetMetrics" WinPrint.dll ; // gets the current unit of measurementReturns UInteger // unit of measurement (Inch or CM)
91195>>>>>>>>>>>
91195>>>>>>>>>>>External_Function WP_SetMetrics "SetMetrics" WinPrint.dll ; // sets the unit of measurement   UInteger eMetrics; // Inch or CMReturns Boolean // always True
91196>>>>>>>>>>>
91196>>>>>>>>>>>External_Function WP_ClearDocument "ClearDocument" WinPrint.dll ; // clears the resources of the document from memoryReturns Boolean // always True
91197>>>>>>>>>>>
91197>>>>>>>>>>>External_Function WP_NewDocument "NewDocument" WinPrint.dll ; // starts a new document, but preserves the printer settings   Boolean bAutoPreview ; // Should the Previewer be displayed immediatelyReturns Boolean // True, if success; False, if an error occurred
91198>>>>>>>>>>>
91198>>>>>>>>>>>External_Function WP_EndDocument "EndDocument" WinPrint.dll ; // Indicates that the document is finishedReturns Boolean // always True
91199>>>>>>>>>>>
91199>>>>>>>>>>>External_Function WP_ClearPrinter "ClearPrinter" WinPrint.dll ; // clears all printer and document resourcesReturns Boolean // True, if success; False, if an error occurred
91200>>>>>>>>>>>
91200>>>>>>>>>>>External_Function WP_ConfirmLines "ConfirmLines" WinPrint.dll ; // ensures that a specified number of lines will fit on the page; if not, a soft page-break is performed automatically    UInteger iNumLines; // number of lines that must fit on the pageReturns Boolean // True, if success; False, if an error occurred
91201>>>>>>>>>>>
91201>>>>>>>>>>>External_Function WP_CreatePage "CreatePage" WinPrint.dll ; // creates a new page of specified columns   UInteger iNumColumns; // number of columns (zero= no columns)Returns UInteger; // page number that was created
91202>>>>>>>>>>>External_Function WP_PreviewDocument "PreviewDocument" WinPrint.dll ; // previews the current document    Boolean bPrintDialog; // Determines whether the Print Dialog (range, etc) is displayed when the "print" button is clicked in the preview window.    Boolean bPrintSetup;  // Determines whether the Print Setup button is enabled (allows to change orientation, etc)    Boolean bPrint;       // Determines whether the Print button is enabledReturns Handle // non-zero = hViewerProcess; zero= error
91203>>>>>>>>>>>
91203>>>>>>>>>>>External_Function WP_ClosePreview "ClosePreview" WinPrint.dll ; // closes the preview windowReturns Boolean // True, if closed; False, if an error occurred (such as it not being already open)
91204>>>>>>>>>>>
91204>>>>>>>>>>>External_Function WP_PrintDocument "PrintDocument" WinPrint.dll ; // prints the current document    Handle hWndParent; // window handle of object to use for any modal outputReturns Boolean // True, if success; False, if an error occurred
91205>>>>>>>>>>>
91205>>>>>>>>>>>External_Function WP_SetAlign "SetAlign" WinPrint.dll ; // align future text    UInteger eAlign; // left, center or rightReturns Boolean // always True
91206>>>>>>>>>>>
91206>>>>>>>>>>>External_Function WP_WriteText "WriteText" WinPrint.dll ; // write text to the current position or column    String sText;               // the text to write    Boolean bNewLineAfterPrint; // should a "CR" be written after the text    UInteger iColumnNum;        // number of the column to write to (zero=no column, use current position)    Integer iNumDecimals;       // number of decimals in the text (-1 means sText is a string)    UInteger iWidth;            // width of text before truncatingReturns Boolean // True, if success; False, if an error occurred
91207>>>>>>>>>>>
91207>>>>>>>>>>>External_Function WP_WriteTextAtPosition "WriteTextAtPosition" WinPrint.dll ; // writes text to a specific position    String sText;               // the text to write    Boolean bNewLineAfterPrint; // should a "CR" be written after the text    UInteger iPosition;         // horizontal position to write the text    Integer iNumDecimals;       // number of decimals in the text (-1 means sText is a string)    UInteger iWidth;            // width of text before truncatingReturns Boolean // True, if success; False, if an error occurred
91208>>>>>>>>>>>
91208>>>>>>>>>>>External_Function WP_SetProgressCaption "SetProgressCaption" WinPrint.dll ;    String sProgressCaption ;Returns Boolean
91209>>>>>>>>>>>
91209>>>>>>>>>>>External_Function WP_SetReportTitle     "SetReportTitle"     WinPrint.dll ;    String sCaption ;Returns Boolean
91210>>>>>>>>>>>
91210>>>>>>>>>>>External_Function WP_ViewerWantsToClose "ViewerWantsToClose" WinPrint.dll ;Returns Integer
91211>>>>>>>>>>>
91211>>>>>>>>>>>External_Function WP_DisplayMessageBox  "DisplayMessageBox"  WinPrint.dll ;    String sCaption String sText ;Returns Integer
91212>>>>>>>>>>>
91212>>>>>>>>>>>External_Function WP_GetViewerWindow "GetViewerWindow" Winprint.dll ;Returns Handle
91213>>>>>>>>>>>
91213>>>>>>>>>>>External_Function WP_GetDocumentStatus "GetDocumentStatus" Winprint.dll ;Returns Integer // returns dsNotStarted, dsStarted, or dsFinished
91214>>>>>>>>>>>
91214>>>>>>>>>Use WinPrint_Constants.pkg
91214>>>>>>>>>Use Rgb.pkg
91214>>>>>>>>>Use GlobalFunctionsProcedures.pkg
91214>>>>>>>>>
91214>>>>>>>>>DEFINE INFINITE for -1
91214>>>>>>>>>DEFINE WAIT_TIMEOUT for |CI$00000102
91214>>>>>>>>>
91214>>>>>>>>>
91214>>>>>>>>>DEFINE QS_KEY            for |CI$0001
91214>>>>>>>>>DEFINE QS_MOUSEMOVE      for |CI$0002
91214>>>>>>>>>DEFINE QS_MOUSEBUTTON    for |CI$0004
91214>>>>>>>>>DEFINE QS_POSTMESSAGE    for |CI$0008
91214>>>>>>>>>DEFINE QS_TIMER          for |CI$0010
91214>>>>>>>>>DEFINE QS_PAINT          for |CI$0020
91214>>>>>>>>>DEFINE QS_SENDMESSAGE    for |CI$0040
91214>>>>>>>>>DEFINE QS_HOTKEY         for |CI$0080
91214>>>>>>>>>DEFINE QS_ALLPOSTMESSAGE for |CI$0100
91214>>>>>>>>>DEFINE QS_MOUSE          for (QS_MOUSEMOVE ior QS_MOUSEBUTTON)
91214>>>>>>>>>DEFINE QS_INPUT          for (QS_MOUSE ior QS_KEY)
91214>>>>>>>>>DEFINE QS_ALLEVENTS      for (QS_INPUT ior QS_POSTMESSAGE ior QS_TIMER ior QS_PAINT ior QS_HOTKEY)
91214>>>>>>>>>DEFINE QS_ALLINPUT       for (QS_INPUT ior QS_POSTMESSAGE ior QS_TIMER ior QS_PAINT ior QS_HOTKEY ior QS_SENDMESSAGE)
91214>>>>>>>>>
91214>>>>>>>>>External_Function WaitForSingleObject "WaitForSingleObject" Kernel32.dll Handle hHandle Dword dwMilliseconds Returns DWord
91215>>>>>>>>>External_Function GetCurrentProcessId "GetCurrentProcessId" Kernel32.dll Returns DWord
91216>>>>>>>>>External_Function GetCurrentProcess "GetCurrentProcess" Kernel32.dll Returns DWord
91217>>>>>>>>>
91217>>>>>>>>>External_Function MsgWaitForMultipleObjects "MsgWaitForMultipleObjects" User32.dll ;    DWORD nCount;             // number of handles in the object handle array    Address pHandles;     // pointer to the object-handle array    Boolean fWaitAll;     // wait for all or wait for one    DWORD dwMilliseconds; // time-out interval in milliseconds    DWORD dwWakeMask;     // type of input events to wait forReturns Dword
91218>>>>>>>>>
91218>>>>>>>>>Use GlobalFunctionsProcedures.pkg
91218>>>>>>>>>
91218>>>>>>>>>Class cWinPrint2 is a cObject // JJT: Will we need a windows handle for this like old one
91219>>>>>>>>>    Procedure Construct_Object
91221>>>>>>>>>        forward send construct_object
91223>>>>>>>>>
91223>>>>>>>>>        //*** internal properties
91223>>>>>>>>>        Property Integer DFCurrent_Color       0
91224>>>>>>>>>        Property String  DFCurrent_OutPut      "WinPrint"
91225>>>>>>>>>        Property Integer DFCurrent_Diagram     0
91226>>>>>>>>>        Property Integer DFCurrent_HeaderType  0
91227>>>>>>>>>        Property Integer DFCurrent_HeaderNr    0
91228>>>>>>>>>        Property Number  DFCurrent_FontSize    10
91229>>>>>>>>>        Property String  DFCurrent_Font        "Arial"
91230>>>>>>>>>
91230>>>>>>>>>        //*** Default values for margins 2.53 CM = 1 inch
91230>>>>>>>>>        Property Number  DFLeft_Margin    2.53
91231>>>>>>>>>        Property Number  DFTop_Margin     2.53
91232>>>>>>>>>        Property Number  DFright_Margin   2.53
91233>>>>>>>>>        Property Number  DFBottom_Margin  2.53
91234>>>>>>>>>
91234>>>>>>>>>        // If WP1 this defaults to false. In 2, it is true which means that the print job
91234>>>>>>>>>        // dialog appears when you hitprint in previewer.
91234>>>>>>>>>        Property Integer PrintDlgInPreview   1
91235>>>>>>>>>         // This does nothing in Wp2 (because you can't to this anyway)
91235>>>>>>>>>        Property Integer EnablePrintSetupFromPreview  True
91236>>>>>>>>>        Property Integer EnablePrintFromPreview  1
91237>>>>>>>>>
91237>>>>>>>>>        // is the GUI Suspended. This is privately maintained and is used
91237>>>>>>>>>        // to figure out if a preview panel is up or not
91237>>>>>>>>>        Property Integer pbIsSuspended False
91238>>>>>>>>>
91238>>>>>>>>>        Object oDFColorArray is an Array
91240>>>>>>>>>           //Moved into array
91240>>>>>>>>>           Set Value  0  To RGB_WHITE
91241>>>>>>>>>           Set Value  1  To RGB_RED
91242>>>>>>>>>           Set Value  2  To RGB_BLUE
91243>>>>>>>>>           Set Value  3  To RGB_GREEN
91244>>>>>>>>>           Set Value  4  To RGB_YELLOW
91245>>>>>>>>>           Set Value  5  To RGB_GREY
91246>>>>>>>>>           Set Value  6  To RGB_CYAN
91247>>>>>>>>>           Set Value  7  To RGB_MAGENTA
91248>>>>>>>>>           Set Value  8  To RGB_DRED
91249>>>>>>>>>           Set Value  9  To RGB_DBLUE
91250>>>>>>>>>           Set Value  10 To RGB_DGREEN
91251>>>>>>>>>           Set Value  11 To RGB_DYELLOW
91252>>>>>>>>>           Set Value  12 To RGB_DGREY
91253>>>>>>>>>           Set Value  13 To RGB_DCYAN
91254>>>>>>>>>           Set Value  14 To RGB_DMAGENTA
91255>>>>>>>>>           Set Value  15 To RGB_BLACK
91256>>>>>>>>>        End_Object
91257>>>>>>>>>
91257>>>>>>>>>        Object oDiagramArray is an Array
91259>>>>>>>>>        End_Object
91260>>>>>>>>>
91260>>>>>>>>>    End_Procedure
91261>>>>>>>>>
91261>>>>>>>>>    Function ViewerWantsToClose returns Boolean
91263>>>>>>>>>        Function_return (WP_ViewerWantsToClose())
91264>>>>>>>>>    end_Function
91265>>>>>>>>>
91265>>>>>>>>>    Function IsViewerActive returns boolean
91267>>>>>>>>>        Function_Return (WP_GetViewerWindow()<>0)
91268>>>>>>>>>    end_function
91269>>>>>>>>>
91269>>>>>>>>>    Function IsPrinterValid Returns Boolean
91271>>>>>>>>>        Function_Return (WP_IsPrinterValid()<>0)
91272>>>>>>>>>    End_Function
91273>>>>>>>>>
91273>>>>>>>>>    Function ArePrintersInstalled returns boolean
91275>>>>>>>>>        Function_Return (WP_ArePrintersInstalled()<>0)
91276>>>>>>>>>    End_Function
91277>>>>>>>>>
91277>>>>>>>>>
91277>>>>>>>>>    // returns docucument state: dsNotStarted, dsStarted, dsFinished
91277>>>>>>>>>    Function DocumentStatus returns Integer
91279>>>>>>>>>        Function_Return (WP_GetDocumentStatus())
91280>>>>>>>>>    end_function
91281>>>>>>>>>
91281>>>>>>>>>    // Might still be called from report class. Leave dummy stub
91281>>>>>>>>>    Procedure DFZeroCounters
91283>>>>>>>>>    End_Procedure
91284>>>>>>>>>
91284>>>>>>>>>    //***
91284>>>>>>>>>    Function DFNewPage Integer Columns Returns Integer
91286>>>>>>>>>        Integer iPageNum
91286>>>>>>>>>        // This returns a page number used in report object....(this may change)
91286>>>>>>>>>        Move (WP_CreatePage(Columns)) To iPageNum
91287>>>>>>>>>        If (iPageNum=0) Begin
91289>>>>>>>>>            Error DFERR_WINPRINT DFPrintError900
91290>>>>>>>>>>
91290>>>>>>>>>        End
91290>>>>>>>>>>
91290>>>>>>>>>        Function_Return iPageNum
91291>>>>>>>>>    End_Function
91292>>>>>>>>>
91292>>>>>>>>>    //***Return handle to use for winprint dialog. If main_window
91292>>>>>>>>>    //   exists, use it. Else, get object's handle
91292>>>>>>>>>    Function Report_Window_Handle returns handle
91294>>>>>>>>>        Handle hWnd
91294>>>>>>>>>        Handle hoObj
91294>>>>>>>>>        Get Focus of desktop to hoObj // start with the focus
91295>>>>>>>>>        Move (gOwnerWindowHandle(hoObj)) to hWnd // global function finds the right handle for us
91296>>>>>>>>>        function_return hWnd
91297>>>>>>>>>    End_Function
91298>>>>>>>>>
91298>>>>>>>>>
91298>>>>>>>>>    //***
91298>>>>>>>>>    Function DFPrintDialog Returns Boolean
91300>>>>>>>>>        Handle hwnd
91300>>>>>>>>>        Boolean bOk
91300>>>>>>>>>
91300>>>>>>>>>        Get Report_Window_Handle to hWnd
91301>>>>>>>>>        Move (WP_ExecutePrintDialog(hwnd)) To bOk
91302>>>>>>>>>
91302>>>>>>>>>        Function_Return bOk
91303>>>>>>>>>    End_Function
91304>>>>>>>>>
91304>>>>>>>>>
91304>>>>>>>>>    //*** You can only invoke the print setup if the report is cleared. If you try to to do this in
91304>>>>>>>>>    //    the wrong state you will get an error.
91304>>>>>>>>>    Function DFPrintSetupDialog Returns Boolean
91306>>>>>>>>>        Handle hwnd
91306>>>>>>>>>        Boolean bOk
91306>>>>>>>>>        Integer iStatus
91306>>>>>>>>>        Get ArePrintersInstalled to bOk
91307>>>>>>>>>        If not bOk Begin
91309>>>>>>>>>            Error DFERR_WINPRINT C_$NoInstalledPrinters
91310>>>>>>>>>>
91310>>>>>>>>>        End
91310>>>>>>>>>>
91310>>>>>>>>>        Else Begin
91311>>>>>>>>>            Get DocumentStatus to iStatus
91312>>>>>>>>>            
91312>>>>>>>>>            If (iStatus=dsNotStarted) Begin
91314>>>>>>>>>                Get Report_Window_Handle to hWnd
91315>>>>>>>>>                Move (WP_ExecutePrinterSetupDialog(hwnd)) to bOk
91316>>>>>>>>>                
91316>>>>>>>>>                // test that the selected printer is valid....
91316>>>>>>>>>                If bOK Begin
91318>>>>>>>>>                    Get IsPrinterValid to bOk // if printer not valid, it's not ok
91319>>>>>>>>>                    If not bOk Begin
91321>>>>>>>>>                        Error DFERR_WINPRINT DFPrintError936  // could not select a valid printer
91322>>>>>>>>>>
91322>>>>>>>>>                    End
91322>>>>>>>>>>
91322>>>>>>>>>                End
91322>>>>>>>>>>
91322>>>>>>>>>            End
91322>>>>>>>>>>
91322>>>>>>>>>            Else Begin
91323>>>>>>>>>               Error DFERR_WINPRINT DFPrintError966      // cannot change printer when report is active
91324>>>>>>>>>>
91324>>>>>>>>>            End
91324>>>>>>>>>>
91324>>>>>>>>>        End
91324>>>>>>>>>>
91324>>>>>>>>>        Function_Return bOk
91325>>>>>>>>>    End_Function
91326>>>>>>>>>
91326>>>>>>>>>
91326>>>>>>>>>    //*** Provided for backwards compatibility. DFPrintSetupDialog is more flexible because it returns a
91326>>>>>>>>>    //    false if cancel was selected.
91326>>>>>>>>>    Procedure DFPrintSetup
91328>>>>>>>>>        Boolean bOk
91328>>>>>>>>>        Get DFPrintSetupDialog to bOk
91329>>>>>>>>>    End_Procedure
91330>>>>>>>>>
91330>>>>>>>>>    //*** This invokes the print job dialog, prints the report, then clears the report document.
91330>>>>>>>>>    //    This should be called after the report is complete.
91330>>>>>>>>>    Procedure DFPrint
91332>>>>>>>>>        Integer bOk
91332>>>>>>>>>        Get DFPrintDialog To bOk
91333>>>>>>>>>        If bOk Begin
91335>>>>>>>>>            Send DFPrintDoc
91336>>>>>>>>>            Send DFClearDoc
91337>>>>>>>>>        End
91337>>>>>>>>>>
91337>>>>>>>>>    End_Procedure
91338>>>>>>>>>
91338>>>>>>>>>    Procedure DFSuspendGui boolean bSuspend
91340>>>>>>>>>        If (bSuspend<>pbIsSuspended(self)) begin
91342>>>>>>>>>            Send SuspendGui of Desktop bSuspend
91343>>>>>>>>>            Set pbIsSuspended to bSuspend
91344>>>>>>>>>        end
91344>>>>>>>>>>
91344>>>>>>>>>    end_procedure
91345>>>>>>>>>
91345>>>>>>>>>    // this is protected so that the queue is only pumped if the
91345>>>>>>>>>    // gui is suspended.
91345>>>>>>>>>    Procedure PumpMsgQueue
91347>>>>>>>>>        If (pbIsSuspended(self)) begin
91349>>>>>>>>>            Send PumpMsgQueue of desktop // permit painting
91350>>>>>>>>>        end
91350>>>>>>>>>>
91350>>>>>>>>>    end_procedure
91351>>>>>>>>>
91351>>>>>>>>>
91351>>>>>>>>>    //*** This does a modeless preview. This is what you'd want during
91351>>>>>>>>>    //    report generation and it may be what you want for report viewing.
91351>>>>>>>>>    Procedure DFPreviewNoWait
91353>>>>>>>>>        Boolean bOk
91353>>>>>>>>>        Boolean bPrntDlg bPrintSetup bPrint
91353>>>>>>>>>        integer iStatus
91353>>>>>>>>>        Get PrintDlgInPreview to bPrntDlg
91354>>>>>>>>>        Get EnablePrintSetupFromPreview to bPrintSetup
91355>>>>>>>>>        Get EnablePrintFromPreview to bPrint
91356>>>>>>>>>        Get DocumentStatus to iStatus
91357>>>>>>>>>        If (iStatus=dsStarted) begin
91359>>>>>>>>>            Send DfSuspendGui True
91360>>>>>>>>>        end
91360>>>>>>>>>>
91360>>>>>>>>>        Move (WP_PreviewDocument(bPrntDlg,bPrintSetup,bPrint)) To bOk
91361>>>>>>>>>        If not bOk Begin
91363>>>>>>>>>            Error DFERR_WINPRINT DFPrintError901
91364>>>>>>>>>>
91364>>>>>>>>>            Send DfSuspendGui False
91365>>>>>>>>>        End
91365>>>>>>>>>>
91365>>>>>>>>>    End_Procedure
91366>>>>>>>>>
91366>>>>>>>>>
91366>>>>>>>>>    //*** This does a modal preview. You might want this for report
91366>>>>>>>>>    //    viewing as the program knows when the viewer is closed
91366>>>>>>>>>    // Note that this is a private message and it was never intended that this
91366>>>>>>>>>    // should be used. We expect winprint reports to use modeless viewers.
91366>>>>>>>>>    Procedure DFPreviewWait
91368>>>>>>>>>        Handle hViewerProcess
91368>>>>>>>>>        Boolean bPrntDlg bPrintSetup bPrint
91368>>>>>>>>>        Integer iRetVal
91368>>>>>>>>>        Integer hwMain hMain
91368>>>>>>>>>
91368>>>>>>>>>        Get PrintDlgInPreview to bPrntDlg
91369>>>>>>>>>        Get EnablePrintSetupFromPreview to bPrintSetup
91370>>>>>>>>>        Get EnablePrintFromPreview to bPrint
91371>>>>>>>>>
91371>>>>>>>>>        Send DfSuspendGui True
91372>>>>>>>>>        Move (WP_PreviewDocument(bPrntDlg,bPrintSetup,bPrint)) To hViewerProcess
91373>>>>>>>>>
91373>>>>>>>>>        If (hViewerProcess = 0) Begin
91375>>>>>>>>>            Error DFERR_WINPRINT DFPrintError901
91376>>>>>>>>>>
91376>>>>>>>>>        End
91376>>>>>>>>>>
91376>>>>>>>>>        Else Begin
91377>>>>>>>>>            // We need to wait for either the Viewer to close, or a WM_PAINT message in the thread's queue...
91377>>>>>>>>>            Repeat
91377>>>>>>>>>>
91377>>>>>>>>>               Move (MsgWaitForMultipleObjects(1, AddressOf(hViewerProcess), False, INFINITE, QS_PAINT)) To iRetVal
91378>>>>>>>>>               Send PumpMsgQueue // permit painting
91379>>>>>>>>>            Until (iRetVal = 0) // 0 means that the viewer process terminated
91381>>>>>>>>>        end
91381>>>>>>>>>>
91381>>>>>>>>>        Send DfSuspendGui False
91382>>>>>>>>>
91382>>>>>>>>>       // Do what we can to force VDF application to the top.
91382>>>>>>>>>       // As 12.0 dfSuspendGUI actually properly disables the underlying windows. When the viewer
91382>>>>>>>>>       // is closed it cannot give the focus back to this so it goes elsewhere. This will force it
91382>>>>>>>>>       // back. 
91382>>>>>>>>>
91382>>>>>>>>>       Get main_window of desktop to hMain
91383>>>>>>>>>       If hMain Begin
91385>>>>>>>>>          Get window_handle of hMain to hwMain
91386>>>>>>>>>          If hwMain Begin
91388>>>>>>>>>              If (GetForegroundWindow()<>hwMain) Begin
91390>>>>>>>>>                  Move (SetForegroundWindow(hwMain)) to hwMain
91391>>>>>>>>>              End
91391>>>>>>>>>>
91391>>>>>>>>>          End
91391>>>>>>>>>>
91391>>>>>>>>>       End
91391>>>>>>>>>>
91391>>>>>>>>>
91391>>>>>>>>>    End_Procedure
91392>>>>>>>>>
91392>>>>>>>>>    Procedure DfPreview
91394>>>>>>>>>        send DfPreviewNoWait
91395>>>>>>>>>    end_procedure
91396>>>>>>>>>
91396>>>>>>>>>
91396>>>>>>>>>    //***
91396>>>>>>>>>    Procedure DFPrintDoc
91398>>>>>>>>>        Handle hwnd
91398>>>>>>>>>        Boolean bOk
91398>>>>>>>>>        Get Report_Window_Handle to hWnd
91399>>>>>>>>>        Move (WP_PrintDocument(hwnd)) To bOk
91400>>>>>>>>>
91400>>>>>>>>>        If not bOk Begin
91402>>>>>>>>>            Error DFERR_WINPRINT DFPrintError902
91403>>>>>>>>>>
91403>>>>>>>>>        End
91403>>>>>>>>>>
91403>>>>>>>>>    End_Procedure
91404>>>>>>>>>
91404>>>>>>>>>
91404>>>>>>>>>    //***
91404>>>>>>>>>    Procedure DFClearDoc
91406>>>>>>>>>        Boolean bOk
91406>>>>>>>>>        Get ArePrintersInstalled to bOk
91407>>>>>>>>>        If bOk begin
91409>>>>>>>>>            Move (WP_ClearDocument()) To bOk
91410>>>>>>>>>            Send DFSuspendGUI False
91411>>>>>>>>>            If not bOk Begin
91413>>>>>>>>>               Error DFERR_WINPRINT DFPrintError903 // error number right?
91414>>>>>>>>>>
91414>>>>>>>>>            End
91414>>>>>>>>>>
91414>>>>>>>>>        End
91414>>>>>>>>>>
91414>>>>>>>>>    End_Procedure
91415>>>>>>>>>
91415>>>>>>>>>    Procedure DFNewDoc Boolean bAutoPreview
91417>>>>>>>>>        Boolean bOk
91417>>>>>>>>>        // this is the most likely place we will encounter when we start a report. Check for
91417>>>>>>>>>        // printers and return an explicit error to make it easy to identify the error
91417>>>>>>>>>        Get ArePrintersInstalled to bOk
91418>>>>>>>>>        If not bOk begin
91420>>>>>>>>>            Error DFERR_WINPRINT C_$NoInstalledPrinters
91421>>>>>>>>>>
91421>>>>>>>>>        end
91421>>>>>>>>>>
91421>>>>>>>>>        else begin
91422>>>>>>>>>            Send DfClearDoc //JJT - a new doc should always start with a clear
91423>>>>>>>>>            If bAutoPreview Send DFSuspendGUI True
91426>>>>>>>>>            Move (WP_NewDocument(bAutoPreview)) To bOk
91427>>>>>>>>>
91427>>>>>>>>>            If not bOk Begin
91429>>>>>>>>>               Error DFERR_WINPRINT DFPrintError902  // could not print document
91430>>>>>>>>>>
91430>>>>>>>>>               Send DFSuspendGUI False
91431>>>>>>>>>            End
91431>>>>>>>>>>
91431>>>>>>>>>        end
91431>>>>>>>>>>
91431>>>>>>>>>    End_Procedure
91432>>>>>>>>>
91432>>>>>>>>>    //***
91432>>>>>>>>>    Procedure DFSetFont String sFontName
91434>>>>>>>>>        boolean bOk
91434>>>>>>>>>        Move (WP_SetFontName(sFontName)) To bOk
91435>>>>>>>>>
91435>>>>>>>>>        If not bOK Begin
91437>>>>>>>>>            Error DFERR_WINPRINT DFPrintError904
91438>>>>>>>>>>
91438>>>>>>>>>        End
91438>>>>>>>>>>
91438>>>>>>>>>    End_Procedure
91439>>>>>>>>>
91439>>>>>>>>>
91439>>>>>>>>>    //***
91439>>>>>>>>>    Procedure DFSetFontSize Integer iHeight Integer iWidth
91441>>>>>>>>>        boolean bOk
91441>>>>>>>>>        // note that width is ignored in new implementation
91441>>>>>>>>>        Move (WP_SetFontHeight(iHeight)) To bOk
91442>>>>>>>>>
91442>>>>>>>>>        If not bOK Begin
91444>>>>>>>>>            Error DFERR_WINPRINT  DFPrintError905
91445>>>>>>>>>>
91445>>>>>>>>>        End
91445>>>>>>>>>>
91445>>>>>>>>>    End_Procedure
91446>>>>>>>>>
91446>>>>>>>>>
91446>>>>>>>>>    //***
91446>>>>>>>>>    Procedure DFSetFontStyle DWORD dwStyle
91448>>>>>>>>>        boolean bOk
91448>>>>>>>>>        Move (WP_SetFontStyle(dwStyle)) To bOk
91449>>>>>>>>>
91449>>>>>>>>>        If not bOK Begin
91451>>>>>>>>>            Error DFERR_WINPRINT DFPrintError906
91452>>>>>>>>>>
91452>>>>>>>>>        End
91452>>>>>>>>>>
91452>>>>>>>>>    End_Procedure
91453>>>>>>>>>
91453>>>>>>>>>
91453>>>>>>>>>    //***
91453>>>>>>>>>    Procedure DFSetUnderline boolean bUnderline
91455>>>>>>>>>        boolean bOk
91455>>>>>>>>>
91455>>>>>>>>>        Move (WP_SetFontUnderline(bUnderline)) To bOk
91456>>>>>>>>>
91456>>>>>>>>>        If not bOK Begin
91458>>>>>>>>>            Error DFERR_WINPRINT DFPrintError907
91459>>>>>>>>>>
91459>>>>>>>>>        End
91459>>>>>>>>>>
91459>>>>>>>>>    End_Procedure
91460>>>>>>>>>
91460>>>>>>>>>
91460>>>>>>>>>    //***
91460>>>>>>>>>    Procedure DFSetBold Boolean bBold
91462>>>>>>>>>        Boolean bOk
91462>>>>>>>>>
91462>>>>>>>>>        Move (WP_SetFontBold(bBold)) To bOk
91463>>>>>>>>>
91463>>>>>>>>>        If not bOK Begin
91465>>>>>>>>>            Error DFERR_WINPRINT DFPrintError908
91466>>>>>>>>>>
91466>>>>>>>>>        End
91466>>>>>>>>>>
91466>>>>>>>>>    End_Procedure
91467>>>>>>>>>
91467>>>>>>>>>
91467>>>>>>>>>    //***
91467>>>>>>>>>    Procedure DFSetItalic Boolean bItalic
91469>>>>>>>>>        Boolean bOk
91469>>>>>>>>>
91469>>>>>>>>>        Move (WP_SetFontItalic(bItalic)) To bOk
91470>>>>>>>>>
91470>>>>>>>>>        If not bOK Begin
91472>>>>>>>>>            Error DFERR_WINPRINT DFPrintError909
91473>>>>>>>>>>
91473>>>>>>>>>        End
91473>>>>>>>>>>
91473>>>>>>>>>    End_Procedure
91474>>>>>>>>>
91474>>>>>>>>>
91474>>>>>>>>>    //***
91474>>>>>>>>>    Procedure DFSetStrikeout Boolean bStrikeout
91476>>>>>>>>>        Boolean bOk
91476>>>>>>>>>
91476>>>>>>>>>        Move (WP_SetFontStrikeout(bStrikeout)) To bOk
91477>>>>>>>>>
91477>>>>>>>>>        If not bOK Begin
91479>>>>>>>>>            Error DFERR_WINPRINT DFPrintError910
91480>>>>>>>>>>
91480>>>>>>>>>        End
91480>>>>>>>>>>
91480>>>>>>>>>    End_Procedure
91481>>>>>>>>>
91481>>>>>>>>>
91481>>>>>>>>>    //***
91481>>>>>>>>>    Procedure DFSetMargins Number nLeft Number nTop Number nRight Number nBottom
91483>>>>>>>>>        Boolean bOk
91483>>>>>>>>>        integer iLeft iRight iTop iBottom
91483>>>>>>>>>
91483>>>>>>>>>        Move (nLeft   * 100) to iLeft
91484>>>>>>>>>        Move (nRight  * 100) to iRight
91485>>>>>>>>>        Move (nTop    * 100) to iTop
91486>>>>>>>>>        Move (nBottom * 100) to iBottom
91487>>>>>>>>>
91487>>>>>>>>>        Move (WP_SetMargins(iLeft,iTop,iRight,iBottom)) To bOk
91488>>>>>>>>>
91488>>>>>>>>>        If bOk Begin
91490>>>>>>>>>            Set DFLeft_Margin   To nLeft
91491>>>>>>>>>            Set DFTop_Margin    To nTop
91492>>>>>>>>>            Set DFRight_Margin  To nRight
91493>>>>>>>>>            Set DFBottom_Margin To nBottom
91494>>>>>>>>>        End
91494>>>>>>>>>>
91494>>>>>>>>>        Else Begin
91495>>>>>>>>>            Error DFERR_WINPRINT DFPrintError911
91496>>>>>>>>>>
91496>>>>>>>>>        End
91496>>>>>>>>>>
91496>>>>>>>>>    End_Procedure
91497>>>>>>>>>
91497>>>>>>>>>
91497>>>>>>>>>    //***
91497>>>>>>>>>    Procedure DFSetLeftMargin Number nLeft
91499>>>>>>>>>        number  nTop nRight nBottom
91499>>>>>>>>>        Get DFTop_Margin    To nTop
91500>>>>>>>>>        Get DFRight_Margin  To nRight
91501>>>>>>>>>        Get DFBottom_Margin To nBottom
91502>>>>>>>>>        Send DFSetMargins nLeft nTop nRight nBottom
91503>>>>>>>>>    End_Procedure
91504>>>>>>>>>
91504>>>>>>>>>
91504>>>>>>>>>    //***
91504>>>>>>>>>    Procedure DFSetRightMargin Number nRight
91506>>>>>>>>>        number  nLeft nTop nBottom
91506>>>>>>>>>        Get DFLeft_Margin   To nLeft
91507>>>>>>>>>        Get DFTop_Margin    To nTop
91508>>>>>>>>>        Get DFBottom_Margin To nBottom
91509>>>>>>>>>        Send DFSetMargins nLeft nTop nRight nBottom
91510>>>>>>>>>    End_Procedure
91511>>>>>>>>>
91511>>>>>>>>>
91511>>>>>>>>>    //***
91511>>>>>>>>>    Procedure DFSetTopMargin Number nTop
91513>>>>>>>>>        number  nLeft nRight nBottom
91513>>>>>>>>>        Get DFLeft_Margin   To nLeft
91514>>>>>>>>>        Get DFRight_Margin  To nRight
91515>>>>>>>>>        Get DFBottom_Margin To nBottom
91516>>>>>>>>>        Send DFSetMargins nLeft nTop nRight nBottom
91517>>>>>>>>>    End_Procedure
91518>>>>>>>>>
91518>>>>>>>>>
91518>>>>>>>>>    //***
91518>>>>>>>>>    Procedure DFSetBottomMargin Number nBottom
91520>>>>>>>>>        number  nLeft nTop nRight
91520>>>>>>>>>        Get DFLeft_Margin   To nLeft
91521>>>>>>>>>        Get DFTop_Margin    To nTop
91522>>>>>>>>>        Get DFRight_Margin  To nRight
91523>>>>>>>>>        Send DFSetMargins nLeft nTop nRight nBottom
91524>>>>>>>>>    End_Procedure
91525>>>>>>>>>
91525>>>>>>>>>
91525>>>>>>>>>    //***
91525>>>>>>>>>    Procedure DFWriteText String sText Integer iStyle Integer iColumn Integer iDecimal Boolean bNewLineAfterPrint
91527>>>>>>>>>        Boolean bOk
91527>>>>>>>>>
91527>>>>>>>>>        Send DFSetFontStyle iStyle
91528>>>>>>>>>        Get ToAnsi sText To sText
91529>>>>>>>>>        Move (WP_WriteText(sText,bNewLineAfterPrint,iColumn,iDecimal,0)) To bOk
91530>>>>>>>>>        If not bOk Begin
91532>>>>>>>>>            Error DFERR_WINPRINT DFPrintError918
91533>>>>>>>>>>
91533>>>>>>>>>        End
91533>>>>>>>>>>
91533>>>>>>>>>        Send PumpMsgQueue // permit painting //JJT!!!!!!!!!!!
91534>>>>>>>>>    End_Procedure
91535>>>>>>>>>
91535>>>>>>>>>    //***
91535>>>>>>>>>    Procedure DFWrite String sText DWORD iStyle Integer iColumn Integer iDecimal Boolean bTrim
91537>>>>>>>>>        If (Num_Arguments>=5 and bTrim) Begin
91539>>>>>>>>>            Move (Rtrim(sText)) to sText
91540>>>>>>>>>        end
91540>>>>>>>>>>
91540>>>>>>>>>        Send DFWriteText sText iStyle iColumn iDecimal False
91541>>>>>>>>>    End_Procedure
91542>>>>>>>>>
91542>>>>>>>>>    //***
91542>>>>>>>>>    Procedure DFWriteLn String sText DWORD iStyle Integer iColumn Integer iDecimal Boolean bTrim
91544>>>>>>>>>        If (Num_Arguments>=5 and bTrim) Begin
91546>>>>>>>>>            Move (Rtrim(sText)) to sText
91547>>>>>>>>>        end
91547>>>>>>>>>>
91547>>>>>>>>>        Send DFWriteText sText iStyle iColumn iDecimal True
91548>>>>>>>>>    End_Procedure
91549>>>>>>>>>
91549>>>>>>>>>
91549>>>>>>>>>    //***
91549>>>>>>>>>    Procedure DFWriteTextAtPosition String sText integer iStyle Number nPosition Integer iDecimal ;                                    Number nMaxLength Boolean bNewLineAfterPrint
91551>>>>>>>>>        Boolean bOk
91551>>>>>>>>>        Integer iPosition iMaxLength
91551>>>>>>>>>        Send DFSetFontStyle iStyle
91552>>>>>>>>>        Get ToAnsi sText To sText
91553>>>>>>>>>        Move (nPosition * 100) to iPosition
91554>>>>>>>>>        Move (nMaxLength * 100) to iMaxLength
91555>>>>>>>>>        Move (WP_WriteTextAtPosition(sText,bNewLineAfterPrint,iPosition,iDecimal,iMaxLength)) To bOk
91556>>>>>>>>>        If not bOk Begin
91558>>>>>>>>>            Error DFERR_WINPRINT DFPrintError922
91559>>>>>>>>>>
91559>>>>>>>>>        End
91559>>>>>>>>>>
91559>>>>>>>>>         Send PumpMsgQueue // permit painting //JJT!!!!!!!!!!!
91560>>>>>>>>>    End_Procedure
91561>>>>>>>>>
91561>>>>>>>>>    //***
91561>>>>>>>>>    Procedure DFWritePos String sText integer iStyle Number nPosition Integer iDecimal Number nMaxLength boolean bTrim
91563>>>>>>>>>        Number nMax
91563>>>>>>>>>        If (Num_Arguments>=6 and bTrim) Begin
91565>>>>>>>>>            Move (Rtrim(sText)) to sText
91566>>>>>>>>>        end
91566>>>>>>>>>>
91566>>>>>>>>>
91566>>>>>>>>>        If (Num_Arguments<5) ;            Move 0 to nMax
91569>>>>>>>>>        Else ;            Move nMaxLength to nMax
91571>>>>>>>>>        Send DFWriteTextAtPosition sText iStyle nPosition iDecimal nMax False
91572>>>>>>>>>    End_Procedure
91573>>>>>>>>>
91573>>>>>>>>>    //***
91573>>>>>>>>>    Procedure DFWriteLnPos String sText integer iStyle Number nPosition Integer iDecimal Number nMaxLength boolean bTrim
91575>>>>>>>>>        Number nMax
91575>>>>>>>>>        If (Num_Arguments>=6 and bTrim) Begin
91577>>>>>>>>>            Move (Rtrim(sText)) to sText
91578>>>>>>>>>        end
91578>>>>>>>>>>
91578>>>>>>>>>
91578>>>>>>>>>        If (Num_Arguments<5) ;            Move 0 to nMax
91581>>>>>>>>>        Else ;            Move nMaxLength to nMax
91583>>>>>>>>>        Send DFWriteTextAtPosition sText iStyle nPosition iDecimal nMax True
91584>>>>>>>>>    End_Procedure
91585>>>>>>>>>
91585>>>>>>>>>    Procedure DFSetMetrics String sMetrics
91587>>>>>>>>>        integer eMetrics
91587>>>>>>>>>        // for backwards compatibility support both string names and integer enumerations
91587>>>>>>>>>        // it is better to use the enumeration value
91587>>>>>>>>>        If (sMetrics="INCH" or sMetrics="CM") Begin
91589>>>>>>>>>            Set DFCurrent_Metrics to sMetrics
91590>>>>>>>>>        end
91590>>>>>>>>>>
91590>>>>>>>>>        else Begin
91591>>>>>>>>>            Move sMetrics to eMetrics
91592>>>>>>>>>            Move (WP_SetMetrics(eMetrics)) To eMetrics
91593>>>>>>>>>        End
91593>>>>>>>>>>
91593>>>>>>>>>    End_Procedure
91594>>>>>>>>>
91594>>>>>>>>>    Function DFGetMetrics Returns Integer
91596>>>>>>>>>        Integer eMetrics
91596>>>>>>>>>        Move (WP_GetMetrics()) To eMetrics
91597>>>>>>>>>        Function_return eMetrics
91598>>>>>>>>>    End_Function
91599>>>>>>>>>
91599>>>>>>>>>
91599>>>>>>>>>    //**** Properties Maintained for compatibility with old Winprint (obsolete)
91599>>>>>>>>>    Function DFCurrent_Metrics returns string
91601>>>>>>>>>        Integer eMetrics
91601>>>>>>>>>        Get DFGetMetrics to eMetrics
91602>>>>>>>>>        Function_return (if(eMetrics=WPM_INCH,"INCH","CM"))
91603>>>>>>>>>    end_function
91604>>>>>>>>>
91604>>>>>>>>>    Procedure Set DFCurrent_Metrics string sCMorINCH
91606>>>>>>>>>        Send DFSetMetrics (if(sCMorINCH="INCH", WPM_INCH, WPM_CM))
91607>>>>>>>>>    End_Procedure
91608>>>>>>>>>
91608>>>>>>>>>
91608>>>>>>>>>
91608>>>>>>>>>
91608>>>>>>>>>
91608>>>>>>>>>    //***
91608>>>>>>>>>    Procedure DFBeginHeaderType Integer iHeaderNr Integer eHeaderType
91610>>>>>>>>>        Boolean bOk
91610>>>>>>>>>
91610>>>>>>>>>        If (eHeaderType=DFSubHeader or eHeaderType=DFSubTotal) Begin
91612>>>>>>>>>            //*** Do nothing for the moment
91612>>>>>>>>>        End
91612>>>>>>>>>>
91612>>>>>>>>>        Else ;            Move 0 to iHeaderNr // If the user made a mistake
91614>>>>>>>>>
91614>>>>>>>>>        Set DFCurrent_HeaderType To eHeaderType
91615>>>>>>>>>        Set DFCurrent_HeaderNr   To iHeaderNr
91616>>>>>>>>>
91616>>>>>>>>>        Move (WP_BeginHeader(eHeaderType, iHeaderNr)) To bOk
91617>>>>>>>>>
91617>>>>>>>>>        If not bOk Begin
91619>>>>>>>>>            Error DFERR_WINPRINT DFPrintError925
91620>>>>>>>>>>
91620>>>>>>>>>        End
91620>>>>>>>>>>
91620>>>>>>>>>    End_Procedure
91621>>>>>>>>>
91621>>>>>>>>>
91621>>>>>>>>>    //***
91621>>>>>>>>>    Procedure DFEndHeaderType
91623>>>>>>>>>        Boolean bOk
91623>>>>>>>>>
91623>>>>>>>>>        Move (WP_EndHeader()) To bOk
91624>>>>>>>>>
91624>>>>>>>>>        if not bOk begin
91626>>>>>>>>>            Error DFERR_WINPRINT DFPrintError926
91627>>>>>>>>>>
91627>>>>>>>>>        End
91627>>>>>>>>>>
91627>>>>>>>>>    End_Procedure
91628>>>>>>>>>
91628>>>>>>>>>
91628>>>>>>>>>    //***
91628>>>>>>>>>    Procedure DFWriteHeaderType Integer iHeaderNr Integer eHeaderType
91630>>>>>>>>>        Boolean bOk
91630>>>>>>>>>        Move (WP_WriteHeader(eHeaderType, iHeaderNr)) To bOk
91631>>>>>>>>>        if not bOk begin
91633>>>>>>>>>            Error DFERR_WINPRINT DFPrintError927
91634>>>>>>>>>>
91634>>>>>>>>>        End
91634>>>>>>>>>>
91634>>>>>>>>>    End_Procedure
91635>>>>>>>>>
91635>>>>>>>>>
91635>>>>>>>>>    //***
91635>>>>>>>>>    Procedure DFHeaderPosition Integer ePlace
91637>>>>>>>>>        Boolean bOk
91637>>>>>>>>>
91637>>>>>>>>>         Move (WP_SetHeaderPlacement(ePlace)) To bOk
91638>>>>>>>>>
91638>>>>>>>>>         if not bOk begin
91640>>>>>>>>>            Error DFERR_WINPRINT DFPrintError929
91641>>>>>>>>>>
91641>>>>>>>>>        End
91641>>>>>>>>>>
91641>>>>>>>>>    End_Procedure
91642>>>>>>>>>
91642>>>>>>>>>
91642>>>>>>>>>    //***
91642>>>>>>>>>    Procedure DFHeaderFrameType Integer eFrame integer iColor Number nWeight;                                Integer iFillColor Boolean bFillFrame
91644>>>>>>>>>        Integer iWeight
91644>>>>>>>>>        Boolean bOk
91644>>>>>>>>>
91644>>>>>>>>>        move (nWeight*100) To iWeight
91645>>>>>>>>>
91645>>>>>>>>>        Move (WP_SetHeaderFrame(eFrame,iColor,iWeight,iFillColor,bFillFrame)) To bOk
91646>>>>>>>>>
91646>>>>>>>>>         if not bOk begin
91648>>>>>>>>>            Error DFERR_WINPRINT DFPrintError930
91649>>>>>>>>>>
91649>>>>>>>>>        End
91649>>>>>>>>>>
91649>>>>>>>>>    End_Procedure
91650>>>>>>>>>
91650>>>>>>>>>  Procedure DFHeaderMargin Integer eType Number nSize
91652>>>>>>>>>        Boolean bOk
91652>>>>>>>>>        Integer iSize
91652>>>>>>>>>
91652>>>>>>>>>        move (nSize * 100) to iSize
91653>>>>>>>>>
91653>>>>>>>>>        move (WP_SetHeaderMargin(eType, iSize)) To bOk
91654>>>>>>>>>
91654>>>>>>>>>        if not bOk begin
91656>>>>>>>>>            Error DFERR_WINPRINT DFPrintError930
91657>>>>>>>>>>
91657>>>>>>>>>        end
91657>>>>>>>>>>
91657>>>>>>>>>    End_Procedure
91658>>>>>>>>>
91658>>>>>>>>>
91658>>>>>>>>>    //***
91658>>>>>>>>>    Procedure DFHeaderWrap Integer eOnOff
91660>>>>>>>>>         Boolean bOk
91660>>>>>>>>>
91660>>>>>>>>>         Move (WP_SetHeaderWrap(eOnOff)) To bOk
91661>>>>>>>>>
91661>>>>>>>>>         if not bOk begin
91663>>>>>>>>>            Error DFERR_WINPRINT DFPrintError931
91664>>>>>>>>>>
91664>>>>>>>>>        End
91664>>>>>>>>>>
91664>>>>>>>>>    End_Procedure
91665>>>>>>>>>
91665>>>>>>>>>    //***
91665>>>>>>>>>    Procedure DFWriteBMP String sFileName Number nStartX Number nStartY Number nHeight Number nWidth Boolean bUCp
91667>>>>>>>>>        Boolean bOk
91667>>>>>>>>>        Integer iStartX iStartY iHeight iWidth
91667>>>>>>>>>
91667>>>>>>>>>        If ((nStartX = -998) or (nStartX = -999));            move nStartX to iStartX
91670>>>>>>>>>        else ;            move (nStartX*100) To iStartX
91672>>>>>>>>>
91672>>>>>>>>>        If ((nStartY = -998) or (nStartY = -999));            move nStartY to iStartY
91675>>>>>>>>>        else ;            move (nStartY*100) To iStartY
91677>>>>>>>>>
91677>>>>>>>>>        If ((nWidth = -998) or (nWidth = -999));            move nWidth To iWidth
91680>>>>>>>>>        else ;            move (nWidth*100) To iWidth
91682>>>>>>>>>
91682>>>>>>>>>        If ((nHeight = -998) or (nHeight = -999));            move nHeight To iHeight
91685>>>>>>>>>        else ;            move (nHeight*100) To iHeight
91687>>>>>>>>>
91687>>>>>>>>>        Get_File_Path sFileName To sFileName
91688>>>>>>>>>        Move (WP_DrawBitmap(sFileName,iStartX,iStartY,iWidth,iHeight,bUCp)) to bOk
91689>>>>>>>>>
91689>>>>>>>>>        If not bOk Begin
91691>>>>>>>>>            Error DFERR_WINPRINT DFPrintError932
91692>>>>>>>>>>
91692>>>>>>>>>        End
91692>>>>>>>>>>
91692>>>>>>>>>    End_Procedure
91693>>>>>>>>>
91693>>>>>>>>>
91693>>>>>>>>>    //***
91693>>>>>>>>>    Procedure DFHeaderLineCheck Integer iLines
91695>>>>>>>>>        Boolean bOk
91695>>>>>>>>>
91695>>>>>>>>>         Move (WP_SetExtraLineCheck(iLines)) To bOk
91696>>>>>>>>>
91696>>>>>>>>>        If not bOk begin
91698>>>>>>>>>            Error DFERR_WINPRINT DFPrintError934
91699>>>>>>>>>>
91699>>>>>>>>>        End
91699>>>>>>>>>>
91699>>>>>>>>>    End_Procedure
91700>>>>>>>>>
91700>>>>>>>>>
91700>>>>>>>>>    //***
91700>>>>>>>>>    Procedure DFPrintFlags Integer Flags
91702>>>>>>>>>        Boolean bOk
91702>>>>>>>>>
91702>>>>>>>>>         Move (WP_SetPrintDialogFlags(Flags)) To bOk
91703>>>>>>>>>
91703>>>>>>>>>        If not bOk begin
91705>>>>>>>>>            Error DFERR_WINPRINT DFPrintError935
91706>>>>>>>>>>
91706>>>>>>>>>        End
91706>>>>>>>>>>
91706>>>>>>>>>    End_Procedure
91707>>>>>>>>>
91707>>>>>>>>>
91707>>>>>>>>>    //*** obsolete and maintained for winprint-I backwards compatibility (maybe should be removed)
91707>>>>>>>>>    //
91707>>>>>>>>>    Procedure DFSelectPrinter String sDriver String sDevice String sPort Boolean bUpdate
91709>>>>>>>>>        Send DFSetDevice sDevice
91710>>>>>>>>>    End_Procedure
91711>>>>>>>>>
91711>>>>>>>>>    //*** Preferred usage for WinprintII
91711>>>>>>>>>    Procedure DFSetDevice String sDevice
91713>>>>>>>>>        Boolean bOk
91713>>>>>>>>>
91713>>>>>>>>>        Move (WP_SelectPrinter(sDevice)) To bOk
91714>>>>>>>>>
91714>>>>>>>>>        If not bOk Begin
91716>>>>>>>>>            Error DFERR_WINPRINT DFPrintError936
91717>>>>>>>>>>
91717>>>>>>>>>        End
91717>>>>>>>>>>
91717>>>>>>>>>    End_Procedure
91718>>>>>>>>>
91718>>>>>>>>>    Procedure DFPrinterBinFirstPage Integer eBin
91720>>>>>>>>>        Boolean bOk
91720>>>>>>>>>
91720>>>>>>>>>         Move (WP_SetFirstPagePaperSource(eBin)) To bOk
91721>>>>>>>>>
91721>>>>>>>>>        If not bOk Begin
91723>>>>>>>>>            Error DFERR_WINPRINT DFPrintError937
91724>>>>>>>>>>
91724>>>>>>>>>        End
91724>>>>>>>>>>
91724>>>>>>>>>    End_Procedure
91725>>>>>>>>>
91725>>>>>>>>>
91725>>>>>>>>>    //***
91725>>>>>>>>>    Function DFGetDFColor Integer iRed Integer iGreen Integer iBlue Returns Integer
91727>>>>>>>>>        Integer iColor
91727>>>>>>>>>
91727>>>>>>>>>         Move (WP_RGBToDFPrintColor(iRed,iGreen,iBlue)) To iColor
91728>>>>>>>>>
91728>>>>>>>>>        If (iColor=0) Begin
91730>>>>>>>>>            Error DFERR_WINPRINT DFPrintError938
91731>>>>>>>>>>
91731>>>>>>>>>        End
91731>>>>>>>>>>
91731>>>>>>>>>        Function_Return iColor
91732>>>>>>>>>    End_Function
91733>>>>>>>>>
91733>>>>>>>>>
91733>>>>>>>>>    //***
91733>>>>>>>>>    Procedure DFSetDFColor Dword dwColor
91735>>>>>>>>>        Integer bOk
91735>>>>>>>>>
91735>>>>>>>>>         Move (WP_SetFontColor(dwColor)) To bOk
91736>>>>>>>>>
91736>>>>>>>>>        If not bOk Begin
91738>>>>>>>>>            Error DFERR_WINPRINT DFPrintError939
91739>>>>>>>>>>
91739>>>>>>>>>        End
91739>>>>>>>>>>
91739>>>>>>>>>    End_Procedure
91740>>>>>>>>>
91740>>>>>>>>>
91740>>>>>>>>>    //***
91740>>>>>>>>>    Procedure DFSetTopBottom Number nTop Number nBottom Boolean bAllPages
91742>>>>>>>>>        Boolean bOk
91742>>>>>>>>>        Integer iTop iBottom
91742>>>>>>>>>
91742>>>>>>>>>        move (nTop*100)    To iTop
91743>>>>>>>>>        move (nBottom*100) To iBottom
91744>>>>>>>>>
91744>>>>>>>>>        Move (WP_SetAbsoluteMargins(iTop,iBottom,bAllPages)) To bOk
91745>>>>>>>>>
91745>>>>>>>>>        If Not bOk Begin
91747>>>>>>>>>            Error DFERR_WINPRINT DFPrintError940
91748>>>>>>>>>>
91748>>>>>>>>>        End
91748>>>>>>>>>>
91748>>>>>>>>>    End_Procedure
91749>>>>>>>>>
91749>>>>>>>>>
91749>>>>>>>>>    //***
91749>>>>>>>>>    Procedure DFSetJMode Integer eAlign
91751>>>>>>>>>        Boolean bOk
91751>>>>>>>>>
91751>>>>>>>>>        Move (WP_SetAlign(eAlign)) To bOk
91752>>>>>>>>>
91752>>>>>>>>>        If Not bOk Begin
91754>>>>>>>>>            Error DFERR_WINPRINT DFPrintError941
91755>>>>>>>>>>
91755>>>>>>>>>        End
91755>>>>>>>>>>
91755>>>>>>>>>    End_Procedure
91756>>>>>>>>>
91756>>>>>>>>>
91756>>>>>>>>>    //***
91756>>>>>>>>>    Procedure DFWriteEllip Number nStartX Number nStartY Number nHeight Number nWidth ;              Dword dwBColor Dword dwFColor Boolean bFill Number nWeight Boolean bWrap Boolean bUCp
91758>>>>>>>>>
91758>>>>>>>>>        Boolean bOk
91758>>>>>>>>>        Integer iWeight
91758>>>>>>>>>        Integer iStartX iStartY iHeight iWidth
91758>>>>>>>>>
91758>>>>>>>>>        If ((nStartX = -998) or (nStartX = -999));            move nStartX To iStartX
91761>>>>>>>>>        else ;            move (nStartX*100) To iStartX
91763>>>>>>>>>
91763>>>>>>>>>        If ((nStartY = -998) or (nStartY = -999));            move nStartY To iStartY
91766>>>>>>>>>        else ;            move (nStartY*100) To iStartY
91768>>>>>>>>>
91768>>>>>>>>>        If ((nWidth = -998) or (nWidth = -999));            move nWidth To iWidth
91771>>>>>>>>>        else ;            move (nWidth*100) To iWidth
91773>>>>>>>>>
91773>>>>>>>>>        If ((nHeight = -998) or (nHeight = -999));            move nHeight To iHeight
91776>>>>>>>>>        else ;            move (nHeight*100) To iHeight
91778>>>>>>>>>
91778>>>>>>>>>        move (nWeight*100) To iWeight
91779>>>>>>>>>
91779>>>>>>>>>
91779>>>>>>>>>        Move (WP_DrawEllipse(iStartX,iStartY,iWidth,iHeight,;                        dwBColor,dwFColor,bFill,iWeight,bUCp,bWrap)) To bOk
91780>>>>>>>>>
91780>>>>>>>>>        If Not bOk Begin
91782>>>>>>>>>            Error DFERR_WINPRINT DFPrintError942
91783>>>>>>>>>>
91783>>>>>>>>>        End
91783>>>>>>>>>>
91783>>>>>>>>>    End_Procedure
91784>>>>>>>>>
91784>>>>>>>>>
91784>>>>>>>>>
91784>>>>>>>>>
91784>>>>>>>>>    //***
91784>>>>>>>>>    Procedure DFWriteRect Number nStartX Number nStartY Number nHeight Number nWidth;              Dword dwBColor Dword dwFColor Boolean bFill Number nWeight Boolean bWrap Boolean bUCp
91786>>>>>>>>>
91786>>>>>>>>>        Boolean bOk
91786>>>>>>>>>        Integer iWeight
91786>>>>>>>>>        Integer iStartX iStartY iHeight iWidth
91786>>>>>>>>>
91786>>>>>>>>>        If ((nStartX = -998) or (nStartX = -999));            move nStartX To iStartX
91789>>>>>>>>>        else ;            move (nStartX*100) To iStartX
91791>>>>>>>>>
91791>>>>>>>>>        If ((nStartY = -998) or (nStartY = -999));            move nStartY To iStartY
91794>>>>>>>>>        else ;            move (nStartY*100) To iStartY
91796>>>>>>>>>
91796>>>>>>>>>        If ((nWidth = -998) or (nWidth = -999));            move nWidth To iWidth
91799>>>>>>>>>        else ;            move (nWidth*100) To iWidth
91801>>>>>>>>>
91801>>>>>>>>>        If ((nHeight = -998) or (nHeight = -999));            move nHeight To iHeight
91804>>>>>>>>>        else ;            move (nHeight*100) To iHeight
91806>>>>>>>>>
91806>>>>>>>>>        move (nWeight*100) To iWeight
91807>>>>>>>>>
91807>>>>>>>>>        Move (WP_DrawRectangle(iStartX,iStartY,iWidth,iHeight,;                            dwBColor,dwFColor,bFill,iWeight,bUCp,bWrap)) To bOk
91808>>>>>>>>>
91808>>>>>>>>>        If Not bOk Begin
91810>>>>>>>>>            Error DFERR_WINPRINT DFPrintError944
91811>>>>>>>>>>
91811>>>>>>>>>        End
91811>>>>>>>>>>
91811>>>>>>>>>    End_Procedure
91812>>>>>>>>>
91812>>>>>>>>>
91812>>>>>>>>>
91812>>>>>>>>>
91812>>>>>>>>>    //***
91812>>>>>>>>>    Procedure DFLineCheck Integer iLines
91814>>>>>>>>>        Boolean bOk
91814>>>>>>>>>
91814>>>>>>>>>        Move (WP_ConfirmLines(iLines)) To bOk
91815>>>>>>>>>
91815>>>>>>>>>        If Not bOk Begin
91817>>>>>>>>>            Error DFERR_WINPRINT DFPrintError946
91818>>>>>>>>>>
91818>>>>>>>>>        End
91818>>>>>>>>>>
91818>>>>>>>>>    End_Procedure
91819>>>>>>>>>
91819>>>>>>>>>
91819>>>>>>>>>    //***
91819>>>>>>>>>    Procedure DFCreateDiagram Integer eType Integer eFx Number nHeight Number nWidth Integer bXyAxis
91821>>>>>>>>>        Handle hDiagram
91821>>>>>>>>>        Integer iWidth iHeight
91821>>>>>>>>>
91821>>>>>>>>>        move (nHeight*100) To iHeight
91822>>>>>>>>>        move (nWidth*100)  To iWidth
91823>>>>>>>>>
91823>>>>>>>>>        Set DFCurrent_Color To 0
91824>>>>>>>>>
91824>>>>>>>>>        Move (WP_CreateDiagram(eType,eFx,iWidth,iHeight,bXyAxis)) To hDiagram
91825>>>>>>>>>
91825>>>>>>>>>        If (hDiagram) Begin
91827>>>>>>>>>            Error DFERR_WINPRINT DFPrintError947
91828>>>>>>>>>>
91828>>>>>>>>>        End
91828>>>>>>>>>>
91828>>>>>>>>>        Else Begin
91829>>>>>>>>>            Set DFCurrent_Diagram To hDiagram
91830>>>>>>>>>        end
91830>>>>>>>>>>
91830>>>>>>>>>    End_Procedure
91831>>>>>>>>>
91831>>>>>>>>>
91831>>>>>>>>>    //***
91831>>>>>>>>>    Procedure DFDiagram_Item handle hDiagram String sLabel Number nValue;                             Dword dwBColor Dword dwFColor Integer eFill;                             Integer iDec Integer eValueOrPercent Integer eExt
91833>>>>>>>>>
91833>>>>>>>>>        Boolean bOk
91833>>>>>>>>>        Integer iCurrColor iValue
91833>>>>>>>>>
91833>>>>>>>>>        If (dwFColor = -1) Begin
91835>>>>>>>>>            Get DFCurrent_Color To iCurrColor
91836>>>>>>>>>            Increment iCurrColor
91837>>>>>>>>>            If (iCurrColor>15) Move 1 To iCurrColor
91840>>>>>>>>>            Set DFCurrent_Color To iCurrColor
91841>>>>>>>>>            Get DFGetColor iCurrColor To dwFColor
91842>>>>>>>>>        End
91842>>>>>>>>>>
91842>>>>>>>>>
91842>>>>>>>>>        Move (nValue *100) to iValue
91843>>>>>>>>>
91843>>>>>>>>>        Get ToAnsi sLabel To sLabel
91844>>>>>>>>>
91844>>>>>>>>>        Move (WP_AddDiagramEntry(hDiagram,sLabel,iValue,dwBColor,dwFColor,eFill,iDec,eValueorPercent,eExt)) To bOk
91845>>>>>>>>>
91845>>>>>>>>>        If not bOk Begin
91847>>>>>>>>>            Error DFERR_WINPRINT DFPrintError948
91848>>>>>>>>>>
91848>>>>>>>>>        End
91848>>>>>>>>>>
91848>>>>>>>>>    End_Procedure
91849>>>>>>>>>
91849>>>>>>>>>
91849>>>>>>>>>    //***
91849>>>>>>>>>    Procedure DFLockDiagram Handle hDiagram
91851>>>>>>>>>        Boolean bOk
91851>>>>>>>>>
91851>>>>>>>>>        Move (WP_LockDiagram(hDiagram)) To bOk
91852>>>>>>>>>
91852>>>>>>>>>        If not bOk Begin
91854>>>>>>>>>            Error DFERR_WINPRINT DFPrintError949
91855>>>>>>>>>>
91855>>>>>>>>>        End
91855>>>>>>>>>>
91855>>>>>>>>>    End_Procedure
91856>>>>>>>>>
91856>>>>>>>>>
91856>>>>>>>>>
91856>>>>>>>>>    //***
91856>>>>>>>>>    Procedure DFDrawDiagram Handle hDiagram Number nYPos Number nXPos Boolean bUCp
91858>>>>>>>>>        Boolean bOk
91858>>>>>>>>>        Integer iXPos
91858>>>>>>>>>        Integer iYPos
91858>>>>>>>>>
91858>>>>>>>>>        move (nXPos*100) To iXPos
91859>>>>>>>>>        move (nYPos*100) To iYPos
91860>>>>>>>>>
91860>>>>>>>>>        If nYPos Eq -999 Move -999 To iYPos
91863>>>>>>>>>
91863>>>>>>>>>        Move (WP_DrawDiagram(hDiagram,iXPos,iYPos,bUCp)) To bOk
91864>>>>>>>>>
91864>>>>>>>>>        If not bOk Begin
91866>>>>>>>>>            Error DFERR_WINPRINT DFPrintError950
91867>>>>>>>>>>
91867>>>>>>>>>        End
91867>>>>>>>>>>
91867>>>>>>>>>    End_Procedure
91868>>>>>>>>>
91868>>>>>>>>>
91868>>>>>>>>>
91868>>>>>>>>>    //***
91868>>>>>>>>>    Procedure DFDiagramLabel handle hDiagram String sLabel
91870>>>>>>>>>        Boolean bOk
91870>>>>>>>>>        Integer iLabelLen
91870>>>>>>>>>
91870>>>>>>>>>        Get ToAnsi sLabel To sLabel
91871>>>>>>>>>
91871>>>>>>>>>        Move (WP_SetDiagramCaption(hDiagram,sLabel)) To bOk
91872>>>>>>>>>
91872>>>>>>>>>        if not bOk Begin
91874>>>>>>>>>            Error DFERR_WINPRINT DFPrintError952
91875>>>>>>>>>>
91875>>>>>>>>>        End
91875>>>>>>>>>>
91875>>>>>>>>>    End_Procedure
91876>>>>>>>>>
91876>>>>>>>>>
91876>>>>>>>>>    //***
91876>>>>>>>>>    Procedure DFDiagramXLabel handle hDiagram String sLabel
91878>>>>>>>>>        Boolean bOk
91878>>>>>>>>>        Get ToAnsi sLabel To sLabel
91879>>>>>>>>>
91879>>>>>>>>>        Move (WP_SetDiagramXText(hDiagram,sLabel)) To bOk
91880>>>>>>>>>
91880>>>>>>>>>        if not bOk Begin
91882>>>>>>>>>            Error DFERR_WINPRINT DFPrintError953
91883>>>>>>>>>>
91883>>>>>>>>>        End
91883>>>>>>>>>>
91883>>>>>>>>>    End_Procedure
91884>>>>>>>>>
91884>>>>>>>>>
91884>>>>>>>>>    //***
91884>>>>>>>>>    Procedure DFDiagramYLabel handle hDiagram String sLabel Boolean bVertical
91886>>>>>>>>>        Boolean bOk
91886>>>>>>>>>        Get ToAnsi sLabel To sLabel
91887>>>>>>>>>
91887>>>>>>>>>        Move (WP_SetDiagramYText(hDiagram,sLabel,bVertical)) To bOk
91888>>>>>>>>>
91888>>>>>>>>>        if not bOk Begin
91890>>>>>>>>>            Error DFERR_WINPRINT DFPrintError954
91891>>>>>>>>>>
91891>>>>>>>>>        End
91891>>>>>>>>>>
91891>>>>>>>>>    End_Procedure
91892>>>>>>>>>
91892>>>>>>>>>
91892>>>>>>>>>    //***
91892>>>>>>>>>    Procedure DFWriteXYLine Number nStartX Number nStartY Number nStopX Number nStopY;              Dword dwColor Number nWeight Boolean bWrap Boolean bUCp
91894>>>>>>>>>
91894>>>>>>>>>        Boolean bOk
91894>>>>>>>>>        Integer iStartX iStartY iStopX iStopY
91894>>>>>>>>>        Integer iWeight
91894>>>>>>>>>
91894>>>>>>>>>        move (nStartX*100)  To iStartX
91895>>>>>>>>>        move (nStartY*100)  To iStartY
91896>>>>>>>>>        move (nStopX*100)   To iStopX
91897>>>>>>>>>        move (nStopY*100)   To iStopY
91898>>>>>>>>>
91898>>>>>>>>>        move (nWeight*100) To iWeight
91899>>>>>>>>>
91899>>>>>>>>>        If (nStopY  = -998) Move -998 To iStopY
91902>>>>>>>>>        If (nStopX  = -998) Move -998 To iStopX
91905>>>>>>>>>
91905>>>>>>>>>        If (nStartY  = -999) Move -999 To iStartY
91908>>>>>>>>>        If (nStartX  = -999) Move -999 To iStartX
91911>>>>>>>>>
91911>>>>>>>>>        Move (WP_DrawXYLine(iStartX,iStartY,iStopX,iStopY,dwColor,iWeight,bUCp,bWrap)) To bOk
91912>>>>>>>>>
91912>>>>>>>>>        if not bOk Begin
91914>>>>>>>>>            Error DFERR_WINPRINT DFPrintError955
91915>>>>>>>>>>
91915>>>>>>>>>        End
91915>>>>>>>>>>
91915>>>>>>>>>    End_Procedure
91916>>>>>>>>>
91916>>>>>>>>>
91916>>>>>>>>>    //***
91916>>>>>>>>>    Procedure DFWriteLine Number nStartX Number nStartY Number nLength;                          Boolean bHorizontal Dword dwColor Number nWeight Boolean bUCp
91918>>>>>>>>>
91918>>>>>>>>>        Boolean bOk
91918>>>>>>>>>        Integer iStartX iStartY iLength
91918>>>>>>>>>        Integer iWeight
91918>>>>>>>>>
91918>>>>>>>>>        move (nStartX*100)  To iStartX
91919>>>>>>>>>        move (nStartY*100)  To iStartY
91920>>>>>>>>>        move (nLength*100)  To iLength
91921>>>>>>>>>        move (nWeight*100)  To iWeight
91922>>>>>>>>>
91922>>>>>>>>>        If (nStartY = -999) Move -999 To iStartY
91925>>>>>>>>>        If (nStartX = -999) Move -999 To iStartX
91928>>>>>>>>>        If (nLength = -998) Move -998 To iLength
91931>>>>>>>>>
91931>>>>>>>>>        Move (WP_DrawLine(iSTartX,iStartY,iLength,bHorizontal,dwColor,iWeight,bUCp)) To bOk
91932>>>>>>>>>
91932>>>>>>>>>        if not bOk Begin
91934>>>>>>>>>            Error DFERR_WINPRINT DFPrintError956
91935>>>>>>>>>>
91935>>>>>>>>>        End
91935>>>>>>>>>>
91935>>>>>>>>>    End_Procedure
91936>>>>>>>>>
91936>>>>>>>>>
91936>>>>>>>>>    //***
91936>>>>>>>>>    Procedure DFClearPrinter
91938>>>>>>>>>        Boolean bOk
91938>>>>>>>>>
91938>>>>>>>>>        Move (WP_ClearPrinter()) To bOk
91939>>>>>>>>>
91939>>>>>>>>>        If not bOk Begin
91941>>>>>>>>>            Error DFERR_WINPRINT DFPrintError957
91942>>>>>>>>>>
91942>>>>>>>>>        End
91942>>>>>>>>>>
91942>>>>>>>>>    End_Procedure
91943>>>>>>>>>
91943>>>>>>>>>
91943>>>>>>>>>
91943>>>>>>>>>    //***
91943>>>>>>>>>     Function DFGetCurrentDevice Returns String
91945>>>>>>>>>        Boolean bOk
91945>>>>>>>>>        String  sDFStr
91945>>>>>>>>>        Address pDFStr
91945>>>>>>>>>
91945>>>>>>>>>        Move (Repeat( Character(0), 255 )) to sDFStr
91946>>>>>>>>>        GetAddress of sDFStr to pDFStr
91947>>>>>>>>>
91947>>>>>>>>>        Move (WP_GetCurrentDevice(pDFStr)) To bOk
91948>>>>>>>>>
91948>>>>>>>>>        If not bOk Begin
91950>>>>>>>>>            Error DFERR_WINPRINT DFPrintError959
91951>>>>>>>>>>
91951>>>>>>>>>        End
91951>>>>>>>>>>
91951>>>>>>>>>
91951>>>>>>>>>        Move (CString(sDFStr)) To sDFStr
91952>>>>>>>>>        Function_Return sDFStr
91953>>>>>>>>>     End_Function
91954>>>>>>>>>
91954>>>>>>>>>
91954>>>>>>>>>    // Note: DfGetCurrentPort and DFGetCurrentDriver do not exist in winprint2. Trying to
91954>>>>>>>>>    //       use these will result in a runtime error (which is good - don't use them)
91954>>>>>>>>>
91954>>>>>>>>>
91954>>>>>>>>>    //***
91954>>>>>>>>>     Function DFGetPrintDialogFlags Returns Dword
91956>>>>>>>>>        Dword dwRetVal
91956>>>>>>>>>
91956>>>>>>>>>        Move (WP_GetPrintDialogFlags()) To dwRetVal
91957>>>>>>>>>
91957>>>>>>>>>        Function_Return dwRetVal
91958>>>>>>>>>     End_Function
91959>>>>>>>>>
91959>>>>>>>>>
91959>>>>>>>>>    //***
91959>>>>>>>>>    //*** Returns PRN_TRUE=  if the flag is set     (1)
91959>>>>>>>>>    //*** Returns PRN_FALSE= If the flag not is set (0)
91959>>>>>>>>>    //***
91959>>>>>>>>>     Function DFCheckPrintDialogFlag Dword dwPDFlag Returns Boolean
91961>>>>>>>>>        Boolean bIsSet
91961>>>>>>>>>
91961>>>>>>>>>        Move (WP_IsPrintDialogFlagSet(dwPDFlag)) To bIsSet
91962>>>>>>>>>
91962>>>>>>>>>        Function_Return bIsSet
91963>>>>>>>>>     End_Function
91964>>>>>>>>>
91964>>>>>>>>>
91964>>>>>>>>>    //***
91964>>>>>>>>>     Procedure DFSetSpecPrintFlag Dword dwPDFlag
91966>>>>>>>>>        Boolean bOk
91966>>>>>>>>>
91966>>>>>>>>>        Move (WP_SetSpecificPrintDialogFlag(dwPDFlag)) To bOk
91967>>>>>>>>>
91967>>>>>>>>>        If not bOk Begin
91969>>>>>>>>>            Error DFERR_WINPRINT DFPrintError961
91970>>>>>>>>>>
91970>>>>>>>>>        End
91970>>>>>>>>>>
91970>>>>>>>>>     End_Procedure
91971>>>>>>>>>
91971>>>>>>>>>
91971>>>>>>>>>    //***
91971>>>>>>>>>     Function DFGetUserDefinedLength Returns Number
91973>>>>>>>>>        Integer iRetVal
91973>>>>>>>>>        Number  nRetVal
91973>>>>>>>>>
91973>>>>>>>>>        Move (WP_GetUserDefinedPapersize()) To iRetVal
91974>>>>>>>>>
91974>>>>>>>>>        If (iRetVal=0) Begin
91976>>>>>>>>>            Error DFERR_WINPRINT DFPrintError962
91977>>>>>>>>>>
91977>>>>>>>>>            Function_Return 0
91978>>>>>>>>>        End
91978>>>>>>>>>>
91978>>>>>>>>>
91978>>>>>>>>>        Move (Hi(iRetVal)) To nRetVal
91979>>>>>>>>>        move (nRetVal/100) To nRetVal //Returns CM
91980>>>>>>>>>
91980>>>>>>>>>        Function_Return nRetVal
91981>>>>>>>>>     End_Function
91982>>>>>>>>>
91982>>>>>>>>>
91982>>>>>>>>>    //***
91982>>>>>>>>>     Function DFGetUserDefinedWidth Returns Number
91984>>>>>>>>>        Integer iRetVal
91984>>>>>>>>>        Number  nRetVal
91984>>>>>>>>>
91984>>>>>>>>>        Move (WP_GetUserDefinedPapersize()) To iRetVal
91985>>>>>>>>>
91985>>>>>>>>>        If (iRetVal=0) Begin
91987>>>>>>>>>            Error DFERR_WINPRINT DFPrintError963
91988>>>>>>>>>>
91988>>>>>>>>>            Function_Return 0
91989>>>>>>>>>        End
91989>>>>>>>>>>
91989>>>>>>>>>
91989>>>>>>>>>        Move (Low(iRetVal)) To nRetVal
91990>>>>>>>>>        Move (nRetVal/100) To nRetVal //Returns CM
91991>>>>>>>>>
91991>>>>>>>>>        Function_Return nRetVal
91992>>>>>>>>>     End_Function
91993>>>>>>>>>
91993>>>>>>>>>
91993>>>>>>>>>    //*** To be set in CM
91993>>>>>>>>>     Procedure DFSetUserDefinedPapersize Number nLength Number nWidth
91995>>>>>>>>>        Integer bOk
91995>>>>>>>>>        Integer iLength iWidth iSize
91995>>>>>>>>>
91995>>>>>>>>>        move (nLength*100) To iLength
91996>>>>>>>>>        move (nWidth*100)  To iWidth
91997>>>>>>>>>        move ((iLength*65536)+iWidth) To iSize
91998>>>>>>>>>
91998>>>>>>>>>        Move (WP_SetUserDefinedPapersize(iSize)) To bOk
91999>>>>>>>>>
91999>>>>>>>>>        If not bOk Begin
92001>>>>>>>>>            Error DFERR_WINPRINT DFPrintError964
92002>>>>>>>>>>
92002>>>>>>>>>        End
92002>>>>>>>>>>
92002>>>>>>>>>     End_Procedure
92003>>>>>>>>>
92003>>>>>>>>>     Procedure DFSetNumberOfCopies Integer iNrOfCopies
92005>>>>>>>>>        Boolean bOk
92005>>>>>>>>>
92005>>>>>>>>>        Move (WP_SetNumberOfPrintCopies(iNrOfCopies)) to bOk
92006>>>>>>>>>
92006>>>>>>>>>        If not bOk Begin
92008>>>>>>>>>            Error DFERR_WINPRINT DFPrintError965
92009>>>>>>>>>>
92009>>>>>>>>>        end
92009>>>>>>>>>>
92009>>>>>>>>>     End_Procedure
92010>>>>>>>>>
92010>>>>>>>>>
92010>>>>>>>>>
92010>>>>>>>>>
92010>>>>>>>>>    //*************************************************************
92010>>>>>>>>>    //*** This procedures and functions are used when building  ***
92010>>>>>>>>>    //*** complex graphics when you need to change value of the ***
92010>>>>>>>>>    //*** current diagram, so you can mix diagrams within each  ***
92010>>>>>>>>>    //*** other.                                                ***
92010>>>>>>>>>    //*************************************************************
92010>>>>>>>>>
92010>>>>>>>>>
92010>>>>>>>>>    Function DFGetCurrentDiagram Returns Integer
92012>>>>>>>>>        Integer iRetVal
92012>>>>>>>>>        Get DFCurrent_Diagram To iRetVal
92013>>>>>>>>>        Function_Return iRetVal
92014>>>>>>>>>    End_Function
92015>>>>>>>>>
92015>>>>>>>>>    Procedure DFSetCurrentDiagram Integer iDiagram
92017>>>>>>>>>        Set DFCurrent_Diagram To iDiagram
92018>>>>>>>>>    End_Procedure
92019>>>>>>>>>
92019>>>>>>>>>    Procedure DFSetDiagramList Integer iItem Integer iDiagram
92021>>>>>>>>>        Set Value of oDiagramArray iItem To iDiagram
92022>>>>>>>>>    End_Procedure
92023>>>>>>>>>
92023>>>>>>>>>    Function DFGetDiagramList Integer iItem Returns Integer
92025>>>>>>>>>        Integer iRetVal
92025>>>>>>>>>        Get Value of oDiagramArray iItem To iRetVal
92026>>>>>>>>>        Function_Return iRetVal
92027>>>>>>>>>    End_Function
92028>>>>>>>>>
92028>>>>>>>>>    Procedure DFClearDiagramList
92030>>>>>>>>>        Send Delete_Data To oDiagramArray
92031>>>>>>>>>    End_Procedure
92032>>>>>>>>>
92032>>>>>>>>>
92032>>>>>>>>>    Function DFGetColor Integer iColor Returns Dword
92034>>>>>>>>>        Dword   dwRetVal
92034>>>>>>>>>        Get Value of oDFColorArray iColor To dwRetVal
92035>>>>>>>>>        Function_Return dwRetVal
92036>>>>>>>>>    End_Function
92037>>>>>>>>>
92037>>>>>>>>>    Function DFGetCurrentColor Returns Dword
92039>>>>>>>>>        Dword   dwRetVal
92039>>>>>>>>>        Integer iCurrColor
92039>>>>>>>>>
92039>>>>>>>>>        Get DFCurrent_Color To iCurrColor
92040>>>>>>>>>        Get DFGetColor iCurrColor To dwRetVal
92041>>>>>>>>>
92041>>>>>>>>>        Function_Return dwRetVal
92042>>>>>>>>>    End_Function
92043>>>>>>>>>
92043>>>>>>>>>    Procedure DFEndDocument
92045>>>>>>>>>        integer iVoid
92045>>>>>>>>>        Move (WP_EndDocument()) To iVoid
92046>>>>>>>>>        Send DfSuspendGui False
92047>>>>>>>>>    End_procedure
92048>>>>>>>>>
92048>>>>>>>>>    Procedure DFClosePreview
92050>>>>>>>>>        integer iVoid
92050>>>>>>>>>        Move (WP_ClosePreview()) To iVoid
92051>>>>>>>>>        Send DfSuspendGui False
92052>>>>>>>>>    End_procedure
92053>>>>>>>>>
92053>>>>>>>>>    Procedure SetProgressCaption string sCaption
92055>>>>>>>>>        integer iVoid
92055>>>>>>>>>        Move (ToAnsi(sCaption)) to sCaption
92056>>>>>>>>>        Move (WP_SetProgressCaption(sCaption)) To iVoid
92057>>>>>>>>>    End_procedure
92058>>>>>>>>>
92058>>>>>>>>>    Procedure SetReportTitle string sTitle
92060>>>>>>>>>        integer iVoid
92060>>>>>>>>>        Move (ToAnsi(sTitle)) to sTitle
92061>>>>>>>>>        Move (WP_SetReportTitle(sTitle)) To iVoid
92062>>>>>>>>>    End_procedure
92063>>>>>>>>>
92063>>>>>>>>>    Function PreviewYesNoBox string sCaption string sText returns integer
92065>>>>>>>>>        integer eResult
92065>>>>>>>>>        Move (ToAnsi(sCaption)) to sCaption
92066>>>>>>>>>        Move (ToAnsi(sText))    to sText
92067>>>>>>>>>        Move (WP_DisplayMessageBox(sCaption, sText)) To eResult
92068>>>>>>>>>        Function_return eResult
92069>>>>>>>>>    end_function
92070>>>>>>>>>
92070>>>>>>>>>    // internal function, used to extract different printer flags ranges based on
92070>>>>>>>>>    // the print flag integer. These flags use a decimal style of packing information
92070>>>>>>>>>    // where different printer options (paper, bin, etc) use different ranges and
92070>>>>>>>>>    // different steps. Everything above iTopVal is removed and everything that is not
92070>>>>>>>>>    // within the iStep range is removed.
92070>>>>>>>>>    Function PrintFlagRange integer iTopVal integer iStep returns integer
92072>>>>>>>>>        integer iFgs iFg
92072>>>>>>>>>        Get DFGetPrintDialogFlags to iFg
92073>>>>>>>>>        Move (mod(iFg,iTopVal) / iStep * iStep ) to iFg
92074>>>>>>>>>        function_return iFg
92075>>>>>>>>>    end_Function
92076>>>>>>>>>
92076>>>>>>>>>    Procedure DFSetPrinterPaper integer ePaperType
92078>>>>>>>>>        Send DFSetSpecPrintFlag ePaperType
92079>>>>>>>>>    End_Procedure
92080>>>>>>>>>
92080>>>>>>>>>    Function DFGetPrinterPaper returns integer //ePaperType
92082>>>>>>>>>        integer ePaperType
92082>>>>>>>>>        Get PrintFlagRange 500 10 to ePaperType // 10-490 in steps of 10
92083>>>>>>>>>        function_return ePaperType
92084>>>>>>>>>    End_Function
92085>>>>>>>>>
92085>>>>>>>>>
92085>>>>>>>>>    Procedure DFSetPrinterBin integer eBinType
92087>>>>>>>>>        Send DFSetSpecPrintFlag eBinType
92088>>>>>>>>>    End_Procedure
92089>>>>>>>>>
92089>>>>>>>>>    Function DFGetPrinterBin returns integer //eBinType
92091>>>>>>>>>        integer eBinType
92091>>>>>>>>>        Get PrintFlagRange 10000 500 to eBinType // 1000-9000 steps 500
92092>>>>>>>>>        function_return eBinType
92093>>>>>>>>>    End_Function
92094>>>>>>>>>
92094>>>>>>>>>
92094>>>>>>>>>    Procedure DFSetPrinterResolution integer eResType
92096>>>>>>>>>        Send DFSetSpecPrintFlag eResType
92097>>>>>>>>>    End_Procedure
92098>>>>>>>>>
92098>>>>>>>>>    Function DFGetPrinterResolution returns integer //eResType
92100>>>>>>>>>        integer eResType
92100>>>>>>>>>        Get PrintFlagRange 50000 10000 to eResType // 10000-500000 steps 10000
92101>>>>>>>>>        function_return eResType
92102>>>>>>>>>    End_Function
92103>>>>>>>>>
92103>>>>>>>>>
92103>>>>>>>>>    Procedure DFSetLandscape boolean bIsLandscape
92105>>>>>>>>>        Send DFSetSpecPrintFlag (If(bIsLandscape,DF_Landscape,DF_Portrait))
92106>>>>>>>>>    End_Procedure
92107>>>>>>>>>
92107>>>>>>>>>    Function DFGetLandscape returns boolean // bIsLandscape
92109>>>>>>>>>        boolean bIsLandscape
92109>>>>>>>>>        Get DFCheckPrintDialogFlag DF_Landscape to bIsLandscape
92110>>>>>>>>>        function_return bIsLandscape
92111>>>>>>>>>    End_Function
92112>>>>>>>>>
92112>>>>>>>>>    Function RGBToWPColor integer iRgb returns integer
92114>>>>>>>>>        integer iRed iGreen iBlue
92114>>>>>>>>>        integer iWPColor
92114>>>>>>>>>        Move (R_from_rgb(iRGB)) to iRed
92115>>>>>>>>>        Move (G_from_rgb(iRGB)) to iGreen
92116>>>>>>>>>        Move (B_from_rgb(iRGB)) to iBlue
92117>>>>>>>>>        Get DfGetDfColor iRed iGreen iBlue to iWPColor
92118>>>>>>>>>        function_Return iWPColor
92119>>>>>>>>>    end_function
92120>>>>>>>>>
92120>>>>>>>>>
92120>>>>>>>>>
92120>>>>>>>>>End_Class
92121>>>>>>>>>
92121>>>>>>>>>Global_Variable Integer ghoWinPrint2
92121>>>>>>>>>
92121>>>>>>>>>Get Create of desktop U_cWinPrint2 to ghoWinPrint2
92122>>>>>>>>>
92122>>>>>>>>>
92122>>>>>>>Use Winprint_Commands.pkg  // commands used by this class
92122>>>>>>>
92122>>>>>>>Class cWinReport2 is a BasicReport
92123>>>>>>>
92123>>>>>>>    Procedure Construct_Object
92125>>>>>>>        Forward send construct_object
92127>>>>>>>
92127>>>>>>>        Date Today
92127>>>>>>>        Sysdate Today
92128>>>>>>>
92128>>>>>>>        // should use built in DF function CurrentDateTime()
92128>>>>>>>        Property Date  RptToday    Today
92129>>>>>>>
92129>>>>>>>        Object RptTotal is an Array
92131>>>>>>>        End_Object
92132>>>>>>>
92132>>>>>>>        // If true, report is output upon completion. Either preview
92132>>>>>>>        // or printer depending on output_device_mode
92132>>>>>>>        Property Boolean AutoOutput_State True
92133>>>>>>>
92133>>>>>>>        // When a new page is created (DFNew_Page) and the number
92133>>>>>>>        // of columns is not passed, this is used.
92133>>>>>>>        Property Integer Print_Columns 0
92134>>>>>>>
92134>>>>>>>        // This determines if a DFNew_Page should be executed when the
92134>>>>>>>        // report starts. In some rare cases, you would not want this to
92134>>>>>>>        // occur until a subheader
92134>>>>>>>        Property Boolean AutoNew_Page_State True
92135>>>>>>>
92135>>>>>>>        // Output device (print or preview). Normally this is delegated to
92135>>>>>>>        // the report view.
92135>>>>>>>        //
92135>>>>>>>
92135>>>>>>>        Property Integer Private.Output_Device_Mode PRINT_TO_UNDEFINED
92136>>>>>>>
92136>>>>>>>        Property Handle phoWinPrint  ghoWinPrint2 // the report engine to use.
92137>>>>>>>
92137>>>>>>>        // JJT: For now this is for testing.
92137>>>>>>>        Property boolean pbModalViewer False
92138>>>>>>>
92138>>>>>>>        Property boolean pbMultiReports False
92139>>>>>>>
92139>>>>>>>        Property boolean pbFirstPagePrinted false
92140>>>>>>>
92140>>>>>>>    End_Procedure
92141>>>>>>>
92141>>>>>>>    // returns the current status of Winprint Document object. dsNotStarted, dsStarted, dsFinished
92141>>>>>>>    // note that the status can reflect a status from a different report. The winprint object is global.
92141>>>>>>>    Function DocumentStatus returns Boolean
92143>>>>>>>        integer iStatus
92143>>>>>>>        Get DocumentStatus of (phoWinprint(self)) to iStatus
92144>>>>>>>        function_return iStatus
92145>>>>>>>    End_function
92146>>>>>>>
92146>>>>>>>    Function IsViewerActive Returns Boolean
92148>>>>>>>        Boolean bIsActive
92148>>>>>>>        Get IsViewerActive of (phoWinPrint(Self)) to bIsActive
92149>>>>>>>        Function_Return bIsActive
92150>>>>>>>    End_Function
92151>>>>>>>
92151>>>>>>>    Function IsPrinterValid Returns Boolean
92153>>>>>>>        Function_Return (WP_IsPrinterValid()<>0)
92154>>>>>>>    End_Function
92155>>>>>>>
92155>>>>>>>    Function ArePrintersInstalled Returns Boolean
92157>>>>>>>        Function_Return (WP_ArePrintersInstalled()<>0)
92158>>>>>>>    End_Function
92159>>>>>>>
92159>>>>>>>
92159>>>>>>>    // All subtotal commands use the outer main report. This makes it easier to keep
92159>>>>>>>    // track of these numbers
92159>>>>>>>
92159>>>>>>>    Procedure Add_SubTotal Integer iCounter Number nData
92161>>>>>>>        Number nValue
92161>>>>>>>        Integer iObj
92161>>>>>>>        Move (RptTotal(Main_Report_Id(Self))) to iObj
92162>>>>>>>        Get Number_Value of iObj iCounter To nValue
92163>>>>>>>        Add nData To nValue
92164>>>>>>>        Set Array_Value of iObj iCounter To nValue
92165>>>>>>>    End_Procedure
92166>>>>>>>
92166>>>>>>>    Procedure Clr_SubTotal Integer iCounter
92168>>>>>>>        Set Array_Value of (RptTotal(Main_Report_Id(Self))) iCounter To 0
92169>>>>>>>    End_Procedure
92170>>>>>>>
92170>>>>>>>    Procedure Clr_AllSubTotals
92172>>>>>>>        Send Delete_Data of (RptTotal(Main_Report_Id(Self)))
92173>>>>>>>    End_Procedure
92174>>>>>>>
92174>>>>>>>    Function Sum_SubTotal Integer iTotal Returns Number
92176>>>>>>>        Number nRetVal
92176>>>>>>>        Get Number_Value of (RptTotal(Main_Report_Id(Self))) iTotal To nRetVal
92177>>>>>>>        Function_Return nRetVal
92178>>>>>>>    End_Function
92179>>>>>>>
92179>>>>>>>    //Return sub-total and clear accumulator
92179>>>>>>>    //
92179>>>>>>>    Function SubTotal Integer iTotal Returns Number
92181>>>>>>>        Number nRetVal
92181>>>>>>>        Get Sum_SubTotal  iTotal to nRetVal
92182>>>>>>>        Send Clr_SubTotal iTotal
92183>>>>>>>        Function_Return nRetVal
92184>>>>>>>    End_Function
92185>>>>>>>
92185>>>>>>>
92185>>>>>>>    // Note: Cols is optional. If no argument is passed it will use
92185>>>>>>>    //       the object's property Print_Columns (0 by default)
92185>>>>>>>    //
92185>>>>>>>    Procedure DFNew_Page Integer Cols
92187>>>>>>>        Integer PageNumber Columns
92187>>>>>>>        Boolean bFirstPagePrinted
92187>>>>>>>        // If no args passed used default setting
92187>>>>>>>        If (Num_Arguments=0) ;           Move (Print_Columns(Main_Report_id(Self))) to Columns
92190>>>>>>>        Else ;           Move Cols to Columns
92192>>>>>>>        Set Page_Feed   to -2   // No FormFeed
92193>>>>>>>        If (Child_Rpt_State(self)) ;            Send DFNew_Page of (Main_Report_Id(Self)) Columns
92196>>>>>>>        Else Begin
92197>>>>>>>            // we only want to print report_header once. When report starts
92197>>>>>>>            // this is set true, after the first print it is false. You can set
92197>>>>>>>            // this to true before and explicit dfNew_page to force a header
92197>>>>>>>            Get pbFirstPagePrinted to bFirstPagePrinted
92198>>>>>>>            Get  DFNewPage of (phoWinPrint(self)) Columns To PageNumber
92199>>>>>>>            If (PageNumber<>0) begin // if 0, it failed
92201>>>>>>>                Set No_PageCheck_State to True
92202>>>>>>>
92202>>>>>>>                //Top section
92202>>>>>>>                Send Page_Top
92203>>>>>>>                If Not bFirstPagePrinted Send Report_Header
92206>>>>>>>                Send Page_Header
92207>>>>>>>                Send Page_Title
92208>>>>>>>
92208>>>>>>>                Set New_Page_State to False
92209>>>>>>>                Set Page_End_State to False
92210>>>>>>>                Set No_PageCheck_State to False        // No longer Paging
92211>>>>>>>                Set pbFirstPagePrinted to True
92212>>>>>>>            End
92212>>>>>>>>
92212>>>>>>>        End
92212>>>>>>>>
92212>>>>>>>
92212>>>>>>>        // Footer section
92212>>>>>>>        //
92212>>>>>>>        // DO NOT CHANGE THE ORDER OF BOTTOM SECTIONS !!!!!
92212>>>>>>>        //
92212>>>>>>>
92212>>>>>>>        Send Page_Bottom
92213>>>>>>>
92213>>>>>>>        // in WinPrint it is not possible to replace Page_Footer
92213>>>>>>>        // with Report_Footer. If you use Report_Footer you will
92213>>>>>>>        // have both Page_Footer and Report_Footer
92213>>>>>>>        //
92213>>>>>>>        //If LastTime eq 0 Send Page_Footer
92213>>>>>>>        //else             Send Report_Footer
92213>>>>>>>
92213>>>>>>>        Send Page_Footer
92214>>>>>>>        Send Page_Total
92215>>>>>>>    End_Procedure
92216>>>>>>>
92216>>>>>>>    Procedure Ending_Main_Report
92218>>>>>>>        Boolean bCancel bMultiReports
92218>>>>>>>
92218>>>>>>>        Get Cancelled_state to bCancel
92219>>>>>>>        Get pbMultiReports to bMultiReports
92220>>>>>>>
92220>>>>>>>        Forward Send Ending_Main_Report
92222>>>>>>>
92222>>>>>>>        If bCancel Begin
92224>>>>>>>            Send DFEndDocument
92225>>>>>>>            Send DFClearDoc // this will also close the previewer
92226>>>>>>>        end
92226>>>>>>>>
92226>>>>>>>        Else Begin
92227>>>>>>>            Send Report_Footer
92228>>>>>>>
92228>>>>>>>            // if multi-reports, we don't do an end of report yet. The programmer must
92228>>>>>>>            // manually end the report by sending EndMultiReport
92228>>>>>>>            If (not(bMultiReports)) begin
92230>>>>>>>                Send EndWinPrintReport
92231>>>>>>>            end
92231>>>>>>>>
92231>>>>>>>
92231>>>>>>>        end
92231>>>>>>>>
92231>>>>>>>
92231>>>>>>>    End_Procedure
92232>>>>>>>
92232>>>>>>>    // This must get called when you are running multiple reports (pbMultiReport).
92232>>>>>>>    // Send this when the last report is complete.
92232>>>>>>>    Procedure EndMultiReport
92234>>>>>>>        Send EndWinPrintReport
92235>>>>>>>    End_procedure
92236>>>>>>>
92236>>>>>>>
92236>>>>>>>    Procedure EndWinPrintReport
92238>>>>>>>        Boolean bAutoOutput
92238>>>>>>>        integer iStatus eMode
92238>>>>>>>        Get DocumentStatus to iStatus
92239>>>>>>>        If (iStatus<>dsStarted) procedure_return
92242>>>>>>>
92242>>>>>>>        // this tells winprint that the report is complete
92242>>>>>>>        Send DFEndDocument
92243>>>>>>>        // if auto-output we print or display automatically.
92243>>>>>>>        // for winprint2, if in preview mode you must do this so the previewer can enter
92243>>>>>>>        // a modal state (which it may or may not need to do).
92243>>>>>>>        Get AutoOutput_state to bAutoOutput
92244>>>>>>>        Get Output_device_mode to eMode
92245>>>>>>>        If (bAutoOutput or eMode=PRINT_TO_WINDOW) begin
92247>>>>>>>            Send PrintReport
92248>>>>>>>            // if auto output, we assume that you are done when it is all over
92248>>>>>>>            // we only can do this with the modal viewer
92248>>>>>>>            If (bAutoOutput and pbModalViewer(self)) begin
92250>>>>>>>                Send DFClearDoc
92251>>>>>>>            end
92251>>>>>>>>
92251>>>>>>>        end
92251>>>>>>>>
92251>>>>>>>
92251>>>>>>>    End_Procedure
92252>>>>>>>
92252>>>>>>>
92252>>>>>>>    Function Setup_Report Returns Integer
92254>>>>>>>        Integer iErr iStatus eMode
92254>>>>>>>        Boolean bActiveViewer bChildReport bMultiReports bOk
92254>>>>>>>
92254>>>>>>>        Get Child_rpt_state to bChildReport
92255>>>>>>>
92255>>>>>>>        If not bChildReport Begin
92257>>>>>>>
92257>>>>>>>            // This makes sure that we are pointing to the new winprint2 engine object.
92257>>>>>>>            // normally this will be the new winprint, but it can be redirected
92257>>>>>>>            Get phoWinPrint to WinPrintID
92258>>>>>>>
92258>>>>>>>            // winprint must have installed printer. If not installed, generate error and stop the report
92258>>>>>>>            Get ArePrintersInstalled to bOk
92259>>>>>>>            If not bOk Begin
92261>>>>>>>                Error DFERR_WINPRINT C_$NoInstalledPrinters
92262>>>>>>>>
92262>>>>>>>                Function_Return 1
92263>>>>>>>            End
92263>>>>>>>>
92263>>>>>>>
92263>>>>>>>            // check if selected printer is valid. If not, generate error and stop the report
92263>>>>>>>            Get IsPrinterValid to bOk
92264>>>>>>>            If not bOk Begin
92266>>>>>>>                Error DFERR_WINPRINT DFPrintError936    // Could not select a valid printer
92267>>>>>>>>
92267>>>>>>>                Function_Return 1
92268>>>>>>>            End
92268>>>>>>>>
92268>>>>>>>
92268>>>>>>>            // make sure it is ok to start a new report but try to be smart about it.
92268>>>>>>>            // if a report is active (dsstarted or dsFinished) check to see if it is
92268>>>>>>>            // finished w/ no viewer. If so, assume the user closed the report and is done
92268>>>>>>>            // so just clear the report. If a viewer is present, declare an error.
92268>>>>>>>            Get DocumentStatus to iStatus
92269>>>>>>>            Get pbMultiReports to bMultiReports
92270>>>>>>>            // multi-report only in-progress is multi and it is started
92270>>>>>>>            Move (bMultiReports and iStatus=dsStarted) to bMultiReports
92271>>>>>>>            If not bMultiReports Begin
92273>>>>>>>                If (iStatus<>dsNotStarted) Begin
92275>>>>>>>                    Get IsViewerActive to bActiveViewer
92276>>>>>>>                    If (iStatus=dsFinished and not(bActiveViewer)) Begin
92278>>>>>>>                        Send DfClearDoc
92279>>>>>>>                    End
92279>>>>>>>>
92279>>>>>>>                    Else Begin
92280>>>>>>>                        Error DFERR_WINPRINT DFPrintError967
92281>>>>>>>>
92281>>>>>>>                        Function_Return 1
92282>>>>>>>                    End
92282>>>>>>>>
92282>>>>>>>                End
92282>>>>>>>>
92282>>>>>>>
92282>>>>>>>                // all new reports by default allow printing from viewer and they have the print job set up when you select print
92282>>>>>>>                // if you need to change these defaults, you can change these inside of Starting_main_report
92282>>>>>>>                // We only do this with non-multi-reports.
92282>>>>>>>                Send DFSetPrintDlgInPreview      True
92283>>>>>>>                Send DFSetEnablePrintFromPreview True
92284>>>>>>>
92284>>>>>>>            End
92284>>>>>>>>
92284>>>>>>>
92284>>>>>>>            // In the new winprint, this message is not needed and is a stub. For
92284>>>>>>>            // now it is in here for compatibility purposes
92284>>>>>>>            //You MUST always start a new report with this procedure
92284>>>>>>>            Send DFZeroCounters of (phoWinPrint(Self))
92285>>>>>>>            Send Clr_AllSubTotals
92286>>>>>>>
92286>>>>>>>        End
92286>>>>>>>>
92286>>>>>>>
92286>>>>>>>        Forward Get Setup_report to iErr
92288>>>>>>>
92288>>>>>>>        If (iErr=0) Begin
92290>>>>>>>            If not bChildReport Begin
92292>>>>>>>                // if part of a multi-report we don't do a new doc
92292>>>>>>>                If not bMultiReports Begin
92294>>>>>>>                    Get Output_Device_Mode to eMode
92295>>>>>>>                    Send DFNewDoc of (phoWinPrint(Self))  (eMode = PRINT_TO_WINDOW) // pass True of display while printing
92296>>>>>>>                End
92296>>>>>>>>
92296>>>>>>>                // Do new page if not part of a multi-report and we say don't do a new page
92296>>>>>>>                If (not(bMultiReports) or AutoNew_Page_State(Self)) Begin
92298>>>>>>>                    Set pbFirstPagePrinted to False // tells new page that this is the first time for this report
92299>>>>>>>                    Send DFNew_page
92300>>>>>>>                End
92300>>>>>>>>
92300>>>>>>>            End
92300>>>>>>>>
92300>>>>>>>        End
92300>>>>>>>>
92300>>>>>>>        Function_Return iErr
92301>>>>>>>    End_Function
92302>>>>>>>
92302>>>>>>>
92302>>>>>>>
92302>>>>>>>    // Cancel RO behavior - there is no device to close
92302>>>>>>>    //
92302>>>>>>>    Procedure Close_Output_Device
92304>>>>>>>    End_Procedure
92305>>>>>>>
92305>>>>>>>    // Cancel RO Behavior
92305>>>>>>>    //
92305>>>>>>>    Procedure Initialize_Output_Device
92307>>>>>>>    End_procedure
92308>>>>>>>
92308>>>>>>>
92308>>>>>>>    Function Output_Device_Mode Returns Integer
92310>>>>>>>        Integer hoId
92310>>>>>>>        String DevMode
92310>>>>>>>        Get Private.Output_Device_Mode to DevMode
92311>>>>>>>        If (DevMode=PRINT_TO_UNDEFINED) Begin
92313>>>>>>>            Get Report_View_Id to hoId
92314>>>>>>>            If hoID ;                Get OutPut_Device_Mode of hoID to DevMode
92317>>>>>>>            If (DevMode=PRINT_TO_UNDEFINED) ;                Move PRINT_TO_WINDOW to DevMode
92320>>>>>>>        End
92320>>>>>>>>
92320>>>>>>>        Function_Return DevMode
92321>>>>>>>    End_Function // Output_Destination
92322>>>>>>>
92322>>>>>>>    Procedure Set Output_Device_Mode Integer DevMode
92324>>>>>>>        Set Private.Output_Device_Mode to DevMode
92325>>>>>>>    End_Procedure // Set Output_Device
92326>>>>>>>
92326>>>>>>>    // displays a metric ruler in .5 increments. This can be
92326>>>>>>>    // sent to make it easy to see how fields and labels should
92326>>>>>>>    // be moved for alignment.
92326>>>>>>>    //
92326>>>>>>>    Procedure ShowRuler
92328>>>>>>>        integer i
92328>>>>>>>        number n
92328>>>>>>>        for i from 0 to 30
92334>>>>>>>>
92334>>>>>>>            Send DFWritePos of (phoWinPrint(self)) (String(i)) FONT_DEFAULT i -1 0
92335>>>>>>>            Move (i+.5) to n
92336>>>>>>>            Send DFWritePos of (phoWinPrint(self)) "." FONT_DEFAULT n -1 0
92337>>>>>>>        Loop
92338>>>>>>>>
92338>>>>>>>        Send DFWriteln of (phoWinPrint(self)) ''  FONT_DEFAULT FONT_DEFAULT -1
92339>>>>>>>    End_procedure
92340>>>>>>>
92340>>>>>>>      // status panel related agumentations to handle the auto-previewer
92340>>>>>>>
92340>>>>>>>      Procedure Update_Status string sVal
92342>>>>>>>         Integer eMode
92342>>>>>>>         Get Output_device_mode to eMode
92343>>>>>>>         If (eMode=PRINT_TO_WINDOW) Begin
92345>>>>>>>            Send SetProgressCaption  of (phoWinPrint(self)) sVal
92346>>>>>>>         End
92346>>>>>>>>
92346>>>>>>>         Else Begin
92347>>>>>>>            forward Send Update_Status sVal
92349>>>>>>>         end
92349>>>>>>>>
92349>>>>>>>      End_Procedure
92350>>>>>>>
92350>>>>>>>      Procedure Start_Status
92352>>>>>>>         Integer eMode
92352>>>>>>>         string sTitle sCaption
92352>>>>>>>         Get Output_device_mode to eMode
92353>>>>>>>         If (eMode=PRINT_TO_WINDOW) Begin
92355>>>>>>>            Get Report_Caption to sCaption
92356>>>>>>>            Get Report_Title to sTitle
92357>>>>>>>            If (sTitle<>"" and sCaption<>"") begin
92359>>>>>>>                Move ( sCaption- ":" * sTitle) to sTitle
92360>>>>>>>            end
92360>>>>>>>>
92360>>>>>>>            else begin
92361>>>>>>>                Move (sCaption - sTitle) to sTitle
92362>>>>>>>            end
92362>>>>>>>>
92362>>>>>>>            Send SetReportTitle of (phoWinPrint(self)) sTitle
92363>>>>>>>         End
92363>>>>>>>>
92363>>>>>>>         Else Begin
92364>>>>>>>            forward Send Start_status
92366>>>>>>>         end
92366>>>>>>>>
92366>>>>>>>      End_Procedure
92367>>>>>>>
92367>>>>>>>      Procedure Resume_Status
92369>>>>>>>         Integer eMode
92369>>>>>>>         Get Output_device_mode to eMode
92370>>>>>>>         If (eMode=PRINT_TO_WINDOW) Begin
92372>>>>>>>            Send DfPreviewNoWait of (phoWinPrint(self))
92373>>>>>>>         End
92373>>>>>>>>
92373>>>>>>>         Else Begin
92374>>>>>>>            forward Send Resume_Status
92376>>>>>>>         end
92376>>>>>>>>
92376>>>>>>>      End_Procedure
92377>>>>>>>
92377>>>>>>>      Procedure End_Status
92379>>>>>>>         Integer eMode
92379>>>>>>>         Get Output_device_mode to eMode
92380>>>>>>>         If (error_processing_state(self)) Begin
92382>>>>>>>            Send DFClosePreview
92383>>>>>>>         end
92383>>>>>>>>
92383>>>>>>>         If (eMode=PRINT_TO_WINDOW) Begin
92385>>>>>>>         End
92385>>>>>>>>
92385>>>>>>>         Else Begin
92386>>>>>>>            forward Send End_Status
92388>>>>>>>         end
92388>>>>>>>>
92388>>>>>>>      End_Procedure
92389>>>>>>>
92389>>>>>>>    Function Report_Interrupt Returns Integer
92391>>>>>>>         integer eStat
92391>>>>>>>         String sMess
92391>>>>>>>         Boolean bActiveViewer
92391>>>>>>>         Get IsViewerActive to bActiveViewer
92392>>>>>>>         If (Error_Check_State(self)) begin
92394>>>>>>>            Move C_$AnErrorWishToCancel to sMess
92395>>>>>>>         end
92395>>>>>>>>
92395>>>>>>>         Else begin
92396>>>>>>>            Move  C_$CancelThisReport to sMess
92397>>>>>>>         end
92397>>>>>>>>
92397>>>>>>>         If bActiveViewer Begin
92399>>>>>>>            Get PreviewYesNoBox of (phoWinPrint(self)) C_$ReportInterrupt sMess to eStat
92400>>>>>>>         end
92400>>>>>>>>
92400>>>>>>>         Else Begin
92401>>>>>>>            Get YesNo_Box sMess C_$ReportInterrupt to eStat
92402>>>>>>>         End
92402>>>>>>>>
92402>>>>>>>
92402>>>>>>>         Function_Return (eStat=MBR_YES)
92403>>>>>>>
92403>>>>>>>  End_Function
92404>>>>>>>
92404>>>>>>>  Function Test_KeyPressed Returns Integer
92406>>>>>>>     Boolean bStop bError bActiveViewer
92406>>>>>>>     integer eMode
92406>>>>>>>     // winreport will do this also, but this makes sure that this gets called
92406>>>>>>>     // for each body loop -- even if the body loop prints nothing
92406>>>>>>>     Send PumpMsgQueue of (phoWinPrint(self)) // permit painting
92407>>>>>>>     Get IsViewerActive to bActiveViewer
92408>>>>>>>     Get Output_device_mode to eMode
92409>>>>>>>     If bActiveViewer Begin
92411>>>>>>>        Get ViewerWantsToClose of (phoWinPrint(self)) to bStop
92412>>>>>>>        Get Error_Check_State to bError
92413>>>>>>>        if (bStop or bError) begin
92415>>>>>>>            Get Report_Interrupt to bStop
92416>>>>>>>        end
92416>>>>>>>>
92416>>>>>>>     end
92416>>>>>>>>
92416>>>>>>>     Else Begin
92417>>>>>>>        Forward Get Test_KeyPressed to bStop
92419>>>>>>>        If (eMode=PRINT_TO_WINDOW and not(bStop)) Begin
92421>>>>>>>            Send DfPreviewNoWait
92422>>>>>>>        end
92422>>>>>>>>
92422>>>>>>>     End
92422>>>>>>>>
92422>>>>>>>
92422>>>>>>>     Function_Return bStop
92423>>>>>>>  End_Function
92424>>>>>>>
92424>>>>>>>    Procedure OnClosingView
92426>>>>>>>        Send DFClearDoc
92427>>>>>>>    end_procedure
92428>>>>>>>
92428>>>>>>>
92428>>>>>>>    // Attempt to make this as intuitive as possible. You cannot invoke this when a
92428>>>>>>>    // report is active. If a report is not finished, you cannot do this.
92428>>>>>>>    // If a report is finsihed it may or may not have a viewer present.
92428>>>>>>>    // If a viewer is not present, we will clear the exising report (making the assumption
92428>>>>>>>    // that a modeless viewer was closed and the report will not be invoked again). If a viewer
92428>>>>>>>    // is active, we will pass this through to the winprint object which will show an error
92428>>>>>>>
92428>>>>>>>    Function DFPrintSetupDialog Returns Boolean// invoke printer setup dialog
92430>>>>>>>        Integer iStatus
92430>>>>>>>        Boolean bActiveViewer bOk
92430>>>>>>>        // we must have printers installed for this to work
92430>>>>>>>        Get ArePrintersInstalled to bOk
92431>>>>>>>        If not bOk Begin
92433>>>>>>>            Error DFERR_WINPRINT C_$NoInstalledPrinters
92434>>>>>>>>
92434>>>>>>>        End
92434>>>>>>>>
92434>>>>>>>        Else Begin
92435>>>>>>>            Get DocumentStatus to iStatus
92436>>>>>>>            If (iStatus=dsFinished) Begin
92438>>>>>>>                Get IsViewerActive to bActiveViewer
92439>>>>>>>                If not bActiveViewer Begin
92441>>>>>>>                    Send DfClearDoc
92442>>>>>>>                End
92442>>>>>>>>
92442>>>>>>>            End
92442>>>>>>>>
92442>>>>>>>            // the winprint object will generate an error if the status is not dsNotStarted.
92442>>>>>>>            // we want those errors
92442>>>>>>>            Get DFPrintSetupDialog of (phoWinPrint(Self)) to bOk
92443>>>>>>>        End
92443>>>>>>>>
92443>>>>>>>        Function_Return bOk
92444>>>>>>>    End_Procedure
92445>>>>>>>
92445>>>>>>>    // It is better to use DFPrintSetupDialog which tells you if the dialog was canceled
92445>>>>>>>    Procedure DFPrintSetup // invoke printer setup dialog
92447>>>>>>>        Boolean bOk
92447>>>>>>>        Get DFPrintSetupDialog to bOk
92448>>>>>>>    End_Procedure
92449>>>>>>>
92449>>>>>>>    Procedure DFClearDoc // clear document, remove viewer
92451>>>>>>>        Send DFClearDoc of (phoWinPrint(self))
92452>>>>>>>    end_procedure
92453>>>>>>>
92453>>>>>>>    Procedure DFEndDocument // tell winprint that the report is complete
92455>>>>>>>        Send DfEndDocument of (phoWinPrint(self))
92456>>>>>>>    end_procedure
92457>>>>>>>
92457>>>>>>>    Procedure DFClosePreview //close the previewer, does not clear the document
92459>>>>>>>        Send DfClosePreview of (phoWinPrint(self))
92460>>>>>>>    end_procedure
92461>>>>>>>
92461>>>>>>>    Procedure DFPrintDialog // popup print job dialog
92463>>>>>>>        Send DFPrintDialog of (phoWinPrint(self))
92464>>>>>>>    End_procedure
92465>>>>>>>
92465>>>>>>>    Procedure DFPrint // print with printer dialog
92467>>>>>>>        Send DFPrint of (phoWinPrint(self))
92468>>>>>>>    End_procedure
92469>>>>>>>
92469>>>>>>>    Procedure DFPrintDoc // print without printer dialog
92471>>>>>>>        Send DFPrintDoc of (phoWinPrint(self))
92472>>>>>>>    End_Procedure
92473>>>>>>>
92473>>>>>>>    Procedure DFPreviewWait // invoke previewer in modal mode
92475>>>>>>>       Send DFPreviewWait of (phoWinPrint(self))
92476>>>>>>>    End_Procedure
92477>>>>>>>
92477>>>>>>>    Procedure DFPreviewNoWait // invoke previwer in modeless mode
92479>>>>>>>       Send DFPreviewNoWait of (phoWinPrint(self))
92480>>>>>>>    End_Procedure
92481>>>>>>>
92481>>>>>>>    Procedure DFPreview // invokde previewer based on pbModalViewer property
92483>>>>>>>       Boolean bModalViewer
92483>>>>>>>       Get pbModalViewer to bModalViewer
92484>>>>>>>       If bModalViewer Begin
92486>>>>>>>           Send DFPreviewWait
92487>>>>>>>       end
92487>>>>>>>>
92487>>>>>>>       else Begin
92488>>>>>>>           Send DFPreviewNoWait
92489>>>>>>>       end
92489>>>>>>>>
92489>>>>>>>   End_Procedure
92490>>>>>>>
92490>>>>>>>    // Print report to appropriate device (printer, preview) based
92490>>>>>>>    // on output_device_mode
92490>>>>>>>    //
92490>>>>>>>    Procedure PrintReport
92492>>>>>>>        Integer eMode
92492>>>>>>>        Get OutPut_Device_Mode to eMode
92493>>>>>>>        If ((eMode=PRINT_TO_WINDOW) or (eMode=DEFERRED_PRINT_TO_WINDOW)) Begin
92495>>>>>>>           Send DFPreview
92496>>>>>>>        end
92496>>>>>>>>
92496>>>>>>>        Else If (eMode=PRINT_TO_PRINTER_NO_DIALOG) Begin
92499>>>>>>>           Send DFPrintDoc // print, no print job dialog
92500>>>>>>>        end
92500>>>>>>>>
92500>>>>>>>        Else Begin // (eMode=PRINT_TO_PRINTER)
92501>>>>>>>           Send DFPrint // print with print job dialog
92502>>>>>>>        end
92502>>>>>>>>
92502>>>>>>>    End_Procedure
92503>>>>>>>
92503>>>>>>>
92503>>>>>>>    Procedure DFSetPrinterPaper integer ePaperType
92505>>>>>>>        Send DFSetPrinterPaper of (phoWinPrint(self)) ePaperType
92506>>>>>>>    End_Procedure
92507>>>>>>>
92507>>>>>>>    Function DFGetPrinterPaper returns integer //ePaperType
92509>>>>>>>        integer ePaperType
92509>>>>>>>        Get DFGetPrinterPaper of (phoWinPrint(self)) to ePaperType
92510>>>>>>>        Function_return ePaperType
92511>>>>>>>    end_function
92512>>>>>>>
92512>>>>>>>
92512>>>>>>>    Procedure DFSetPrinterBin integer eBinType
92514>>>>>>>        Send DFSetPrinterBin of (phoWinPrint(self)) eBinType
92515>>>>>>>    End_Procedure
92516>>>>>>>
92516>>>>>>>    Function DFGetPrinterBin returns integer //eBinType
92518>>>>>>>        integer eBinType
92518>>>>>>>        Get DFGetPrinterBin of (phoWinPrint(self)) to eBinType
92519>>>>>>>        Function_return eBinType
92520>>>>>>>    end_function
92521>>>>>>>
92521>>>>>>>
92521>>>>>>>    Procedure DFSetPrinterResolution integer eResType
92523>>>>>>>        Send DFSetPrinterResolution of (phoWinPrint(self)) eResType
92524>>>>>>>    End_Procedure
92525>>>>>>>
92525>>>>>>>    Function DFGetPrinterResolution returns integer //eResType
92527>>>>>>>        Boolean eResType
92527>>>>>>>        Get DFGetPrinterResolution of (phoWinPrint(self)) to eResType
92528>>>>>>>        Function_return eResType
92529>>>>>>>    end_function
92530>>>>>>>
92530>>>>>>>
92530>>>>>>>    Procedure DFSetLandscape boolean bIsLandscape
92532>>>>>>>        Send DFSetLandscape of (phoWinPrint(self)) bIsLandscape
92533>>>>>>>    End_Procedure
92534>>>>>>>
92534>>>>>>>    Function DFGetLandscape returns boolean // bIsLandscape
92536>>>>>>>        Boolean bIsLandscape
92536>>>>>>>        Get DFGetLandscape of (phoWinPrint(self)) to bIsLandscape
92537>>>>>>>        Function_return bIsLandscape
92538>>>>>>>    end_function
92539>>>>>>>
92539>>>>>>>    Procedure DFSetMetrics integer eType
92541>>>>>>>        Send DFSetMetrics of (phoWinPrint(self)) eType
92542>>>>>>>    End_Procedure
92543>>>>>>>
92543>>>>>>>    Function DFGetMetrics returns integer
92545>>>>>>>        integer eType
92545>>>>>>>        Get DFGetMetrics of (phoWinPrint(self)) to eType
92546>>>>>>>        Function_return eType
92547>>>>>>>    end_function
92548>>>>>>>
92548>>>>>>>
92548>>>>>>>    Procedure DFSetPrintDlgInPreview boolean bShowDialog
92550>>>>>>>        Set PrintDlgInPreview of (phoWinPrint(self)) to bShowDialog
92551>>>>>>>    End_Procedure
92552>>>>>>>
92552>>>>>>>    Function DFGetPrintDlgInPreview returns boolean
92554>>>>>>>        boolean bShowDialog
92554>>>>>>>        Get PrintDlgInPreview of (phoWinPrint(self)) to bShowDialog
92555>>>>>>>        Function_return bShowDialog
92556>>>>>>>    end_function
92557>>>>>>>
92557>>>>>>>
92557>>>>>>>    Procedure DFSetEnablePrintFromPreview boolean bEnablePrint
92559>>>>>>>        Set EnablePrintFromPreview of (phoWinPrint(self)) to bEnablePrint
92560>>>>>>>    End_Procedure
92561>>>>>>>
92561>>>>>>>    Function DFGetEnablePrintFromPreview returns boolean
92563>>>>>>>        boolean bEnablePrint
92563>>>>>>>        Get EnablePrintFromPreview of (phoWinPrint(self)) to bEnablePrint
92564>>>>>>>        Function_return bEnablePrint
92565>>>>>>>    end_function
92566>>>>>>>
92566>>>>>>>
92566>>>>>>>
92566>>>>>>>    Procedure DFSetMargins number nLeft number nTop number nRight number nBottom
92568>>>>>>>        Send DFSetMargins of (phoWinPrint(self)) nLeft nTop nRight nBottom
92569>>>>>>>    End_Procedure
92570>>>>>>>
92570>>>>>>>    Procedure DFSetTopBottom number nTop number nBottom Boolean bAllPages
92572>>>>>>>        Send DFSetTopBottom of (phoWinPrint(self)) nTop nBottom bAllPages
92573>>>>>>>    End_Procedure
92574>>>>>>>
92574>>>>>>>
92574>>>>>>>    Procedure DFSetDevice string sPrinterName
92576>>>>>>>        Send DFSetDevice of (phoWinPrint(self)) sPrinterName
92577>>>>>>>    End_Procedure
92578>>>>>>>
92578>>>>>>>    Function DFGetCurrentDevice returns string // sPrinterName
92580>>>>>>>        String sPrinterName
92580>>>>>>>        Get DFGetCurrentDevice of (phoWinPrint(self)) to sPrinterName
92581>>>>>>>        Function_return sPrinterName
92582>>>>>>>    end_function
92583>>>>>>>
92583>>>>>>>
92583>>>>>>>    Procedure DFSetUserDefinedPapersize number nLength number nWidth
92585>>>>>>>        Send DFSetUserDefinedPapersize of (phoWinPrint(self)) nLength nWidth
92586>>>>>>>    End_Procedure
92587>>>>>>>
92587>>>>>>>    Function DFGetUserDefinedLength returns number
92589>>>>>>>        number nSize
92589>>>>>>>        Get DFGetUserDefinedLength of (phoWinPrint(self)) to nSize
92590>>>>>>>        Function_return nSize
92591>>>>>>>    end_function
92592>>>>>>>
92592>>>>>>>    Function DFGetUserDefinedWidth returns number
92594>>>>>>>        number nSize
92594>>>>>>>        Get DFGetUserDefinedWidth of (phoWinPrint(self)) to nSize
92595>>>>>>>        Function_return nSize
92596>>>>>>>    end_function
92597>>>>>>>
92597>>>>>>>
92597>>>>>>>    Procedure DFSetNumberOfCopies integer iCopies
92599>>>>>>>        Send DFSetNumberOfCopies of (phoWinPrint(self)) iCopies
92600>>>>>>>    End_Procedure
92601>>>>>>>
92601>>>>>>>    Procedure DFPrinterBinFirstPage integer eBinType
92603>>>>>>>        Send DFPrinterBinFirstPage of (phoWinPrint(self)) eBinType
92604>>>>>>>    End_Procedure
92605>>>>>>>
92605>>>>>>>    Procedure DFClearPrinter
92607>>>>>>>        Send DFClearPrinter of (phoWinPrint(self))
92608>>>>>>>    End_Procedure
92609>>>>>>>
92609>>>>>>>    Function DFGetDFColor integer iRed integer iGreen integer iBlue returns integer
92611>>>>>>>        integer iWPColor
92611>>>>>>>        Get DFGetDFColor of (phoWinPrint(self)) iRed iGreen iBlue to iWPColor
92612>>>>>>>        Function_return iWPColor
92613>>>>>>>    end_function
92614>>>>>>>
92614>>>>>>>    Function RGBToWPColor integer iRgb returns integer
92616>>>>>>>        integer iWPColor
92616>>>>>>>        Get RGBToWPColor of (phoWinPrint(self)) iRGB to iWPColor
92617>>>>>>>        Function_return iWPColor
92618>>>>>>>    end_function
92619>>>>>>>
92619>>>>>>>
92619>>>>>>>End_Class
92620>>>>>
92620>>>>>Class cVDFD_CE_WinReport2 is a cWinReport2
92621>>>>>    
92621>>>>>    Procedure Construct_Object
92623>>>>>        Forward Send Construct_Object
92625>>>>>
92625>>>>>    End_Procedure
92626>>>>>
92626>>>>>    Procedure End_Construct_Object
92628>>>>>        Forward Send End_Construct_Object
92630>>>>>
92630>>>>>    End_Procedure
92631>>>>>
92631>>>>>End_Class
92632>>>Use Base\cVDFD_CE_XmlHttpTransfer.pkg
Including file: Base\cVDFD_CE_XmlHttpTransfer.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_XmlHttpTransfer.pkg)
92632>>>>>Use cXmlHttpTransfer.pkg
Including file: cXmlHttpTransfer.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cXmlHttpTransfer.pkg)
92632>>>>>>>//*************************************************************************
92632>>>>>>>//*
92632>>>>>>>//*  Copyright (c) 2001 Data Access Corporation, Miami Florida,
92632>>>>>>>//*  All rights reserved.
92632>>>>>>>//*  DataFlex is a registered trademark of Data Access Corporation.
92632>>>>>>>//*
92632>>>>>>>//*************************************************************************
92632>>>>>>>//*
92632>>>>>>>//*  Module Name:
92632>>>>>>>//*      cXmlHttpTransfer.pkg
92632>>>>>>>//*
92632>>>>>>>//*  Creator:
92632>>>>>>>//*      JJT
92632>>>>>>>//*
92632>>>>>>>//*
92632>>>>>>>//*  Purpose:
92632>>>>>>>//*      VDF XML internet transfer class definitions.
92632>>>>>>>//*
92632>>>>>>>//*************************************************************************
92632>>>>>>>
92632>>>>>>>Use cHttpTransfer.pkg
92632>>>>>>>Use CharTranslate.pkg
92632>>>>>>>Use Flexml.pkg
Including file: Flexml.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\Flexml.pkg)
92632>>>>>>>>>//****************************************************************************************
92632>>>>>>>>>//                                                                                       *
92632>>>>>>>>>//  FLEXML.PKG                                                                            *
92632>>>>>>>>>//                                                                                       *
92632>>>>>>>>>//  Interface package for FLEXML.DLL - extension system for Extensible Markup Language.  *
92632>>>>>>>>>//                                                                                       *
92632>>>>>>>>>//  Written by Michael Gouker, 7/31/99                                                   *
92632>>>>>>>>>// 12/19/2000 JJT - Major revision changes for VDF7/SP2.                                 *
92632>>>>>>>>>//                                                                                       *
92632>>>>>>>>>//****************************************************************************************
92632>>>>>>>>>Use LanguageText.pkg
92632>>>>>>>>>Use Windows.pkg
92632>>>>>>>>>Use GlobalFunctionsProcedures.pkg
92632>>>>>>>>>
92632>>>>>>>>>// Used to designate that a handle is a handle to an Xml Dom object. This
92632>>>>>>>>>// is used/required by server web-services but could be used elsewhere .
92632>>>>>>>>>
92632>>>>>>>>>
92632>>>>>>>>>// Types of Nodes
92632>>>>>>>>>
92632>>>>>>>>>
92632>>>>>>>>>// classes and methods defined in fmac
92632>>>>>>>>>
92632>>>>>>>>>
92632>>>>>>>>>Register_Function transformNode Integer infcXSLNode Returns String
92632>>>>>>>>>
92632>>>>>>>>>
92632>>>>>>>>>
92632>>>>>>>>>
92632>>>>>>>>>
92632>>>>>>>>>
92632>>>>>>>>>
92632>>>>>>>>>
92632>>>>>>>>>
92632>>>>>>>>>// XML function & procedure registration
92632>>>>>>>>>
92632>>>>>>>>>Register_Procedure Set XmlInterface Integer iHandle
92632>>>>>>>>>Register_Function XmlInterface Returns Integer
92632>>>>>>>>>
92632>>>>>>>>>// NODE Properties
92632>>>>>>>>>Register_Function phAttributes Returns Integer
92632>>>>>>>>>Register_Function psBaseName Returns String
92632>>>>>>>>>Register_Function phChildNodes Returns Integer
92632>>>>>>>>>Register_Function phDefinition Returns Integer
92632>>>>>>>>>Register_Function phFirstChild Returns Integer
92632>>>>>>>>>Register_Function phLastChild Returns Integer
92632>>>>>>>>>Register_Function phNextSibling Returns Integer
92632>>>>>>>>>Register_Function psNameSpaceURI Returns String
92632>>>>>>>>>Register_Function psNodeName Returns String
92632>>>>>>>>>Register_Function piNodeType Returns Integer
92632>>>>>>>>>Register_Function psNodeTypeString Returns String
92632>>>>>>>>>Register_Function phOwnerDocument Returns Integer
92632>>>>>>>>>Register_Function phParentNode Returns Integer
92632>>>>>>>>>Register_Function pbParsed Returns Integer
92632>>>>>>>>>Register_Function psPrefix Returns String
92632>>>>>>>>>Register_Function phPreviousSibling Returns Integer
92632>>>>>>>>>Register_Function pbSpecified Returns Integer
92632>>>>>>>>>Register_Function psText Returns String
92632>>>>>>>>>Register_Procedure Set psText String sText
92632>>>>>>>>>Register_Function psXML Returns String
92632>>>>>>>>>
92632>>>>>>>>>// Node Read write properties
92632>>>>>>>>>
92632>>>>>>>>>Register_Procedure Set psDataType String sTypeName
92632>>>>>>>>>Register_Function psDataType Returns String
92632>>>>>>>>>Register_Procedure Set pvNodeTypedValue Integer iType Integer iAddress
92632>>>>>>>>>Register_Function pvNodeTypedValue Integer iType Returns Integer  // address of data
92632>>>>>>>>>Register_Procedure Set psNodeValue String sValue
92632>>>>>>>>>Register_Function psNodeValue Returns String
92632>>>>>>>>>
92632>>>>>>>>>// Node Methods
92632>>>>>>>>>
92632>>>>>>>>>Register_Function AppendChild Integer iChildInfc Returns Integer
92632>>>>>>>>>Register_Function CloneInfcNode Integer bRecurse Returns Integer
92632>>>>>>>>>Register_Function HasChildNodes Returns Integer
92632>>>>>>>>>Register_Function InsertBefore Integer infcNodeToInsert Integer iWhere Returns Integer
92632>>>>>>>>>Register_Function RemoveChild Integer iChildToRemove Returns Integer
92632>>>>>>>>>Register_Function ReplaceChild Integer iNewChild Integer iChildToReplace Returns Integer
92632>>>>>>>>>Register_Function SelectNodes String selectstring Returns Integer
92632>>>>>>>>>Register_Function SelectSingleNode String selectstring Returns Integer
92632>>>>>>>>>
92632>>>>>>>>>// Node Collections
92632>>>>>>>>>// READONLY PROPERTIES
92632>>>>>>>>>
92632>>>>>>>>>Register_Function phItem Integer iItem Returns Integer
92632>>>>>>>>>Register_Function phElementItem Integer iItem Returns Integer
92632>>>>>>>>>
92632>>>>>>>>>Register_Function piLength Returns Integer
92632>>>>>>>>>
92632>>>>>>>>>//*     GET_ENUMNODELIST                  */  typ_p1_int | qt_int | out_two,
92632>>>>>>>>>//*     GET_RESET                         */  qt_int | out_one,
92632>>>>>>>>>
92632>>>>>>>>>// Named Node Map
92632>>>>>>>>>
92632>>>>>>>>>//*     GET_NAMEDITEM                     */  typ_p1_str | qt_int | out_two,
92632>>>>>>>>>
92632>>>>>>>>>Register_Function NamedItem String sName Returns Integer
92632>>>>>>>>>Register_Function QualifiedItem String sBaseName String sNameSpace Returns Integer
92632>>>>>>>>>Register_Function RemoveNamedItem String sName Returns Integer
92632>>>>>>>>>Register_Function RemoveQualifiedItem String sBaseName String sNameSpace Returns Integer
92632>>>>>>>>>Register_Function SetNamedItem Integer iInterface Returns Integer
92632>>>>>>>>>
92632>>>>>>>>>// XML DOM Document
92632>>>>>>>>>// Read only properties
92632>>>>>>>>>
92632>>>>>>>>>Register_Function phDocType Returns Integer
92632>>>>>>>>>Register_Function phImplementation Returns Integer
92632>>>>>>>>>Register_Function phParseError Returns Integer
92632>>>>>>>>>Register_Function piReadyState Returns Integer
92632>>>>>>>>>Register_Function psURL Returns String
92632>>>>>>>>>
92632>>>>>>>>>// Read Write Properties
92632>>>>>>>>>
92632>>>>>>>>>Register_Procedure Set pbAsync Integer bValue
92632>>>>>>>>>Register_Function pbAsync Returns Integer
92632>>>>>>>>>Register_Procedure Set phDocumentElement Integer iElement
92632>>>>>>>>>Register_Function phDocumentElement Returns Integer
92632>>>>>>>>>Register_Procedure Set pbPreserveWhiteSpace Integer bValue
92632>>>>>>>>>Register_Function pbPreserveWhiteSpace Returns Integer
92632>>>>>>>>>Register_Procedure Set pbResolveExternals Integer bValue
92632>>>>>>>>>Register_Function pbResolveExternals Returns Integer
92632>>>>>>>>>Register_Procedure Set pbValidateOnParse Integer bValue
92632>>>>>>>>>Register_Function pbValidateOnParse Returns Integer
92632>>>>>>>>>
92632>>>>>>>>>// Events
92632>>>>>>>>>
92632>>>>>>>>>// Methods
92632>>>>>>>>>
92632>>>>>>>>>Register_Function Abort Returns Integer
92632>>>>>>>>>Register_Function ElementsByTagName String sTagName Returns Integer
92632>>>>>>>>>Register_Function LoadDocument String sURLName Returns Integer
92632>>>>>>>>>Register_Function LoadXML String sXMLText Returns Integer
92632>>>>>>>>>Register_Function NodeFromID String sNodeName Returns Integer
92632>>>>>>>>>Register_Function SaveDocument String sURLName Returns Integer
92632>>>>>>>>>
92632>>>>>>>>>// Parse Error
92632>>>>>>>>>// Read Only Properties
92632>>>>>>>>>
92632>>>>>>>>>Register_Function piErrorCode Returns Integer
92632>>>>>>>>>Register_Function piFilePos Returns Integer
92632>>>>>>>>>Register_Function piLine Returns Integer
92632>>>>>>>>>Register_Function piLinePos Returns Integer
92632>>>>>>>>>Register_Function psReason Returns String
92632>>>>>>>>>Register_Function psSrcText Returns String
92632>>>>>>>>>Register_Function psURL Returns String
92632>>>>>>>>>
92632>>>>>>>>>// DOM Implementation
92632>>>>>>>>>// Method
92632>>>>>>>>>
92632>>>>>>>>>Register_Function HasFeature String sSystem String sFeature Returns Integer
92632>>>>>>>>>
92632>>>>>>>>>// Methods
92632>>>>>>>>>
92632>>>>>>>>>Register_Function substringData Integer iOffset Integer iCount Returns String
92632>>>>>>>>>Register_Function appendData String sData Returns Integer
92632>>>>>>>>>Register_Function insertData Integer iOffset String sData Returns Integer
92632>>>>>>>>>Register_Function deleteData Integer iOffset Integer iCount Returns Integer
92632>>>>>>>>>Register_Function replaceData Integer iOffset Integer iCount String sData Returns Integer
92632>>>>>>>>>
92632>>>>>>>>>// Attributes
92632>>>>>>>>>
92632>>>>>>>>>Register_Function psName Returns String
92632>>>>>>>>>
92632>>>>>>>>>// Elements
92632>>>>>>>>>// Read Only properties
92632>>>>>>>>>
92632>>>>>>>>>Register_Function psTagName Returns String
92632>>>>>>>>>
92632>>>>>>>>>// Methods
92632>>>>>>>>>
92632>>>>>>>>>Register_Procedure Set attributeValue String sName String sValue
92632>>>>>>>>>Register_Function attributeValue String sName Returns String
92632>>>>>>>>>Register_Function removeAttribute String sName Returns Integer
92632>>>>>>>>>Register_Function attributeNode String sName Returns Integer
92632>>>>>>>>>Register_Procedure Set attributeNode Integer iNode Returns Integer
92632>>>>>>>>>Register_Function removeAttributeNode Integer iNode Returns Integer
92632>>>>>>>>>
92632>>>>>>>>>// DOM Text
92632>>>>>>>>>// Methods
92632>>>>>>>>>
92632>>>>>>>>>Register_Function splitText Integer iOffset Returns Integer
92632>>>>>>>>>
92632>>>>>>>>>// DOM Processing Instruction
92632>>>>>>>>>// Read Only Properties
92632>>>>>>>>>Register_Function psTarget Returns String
92632>>>>>>>>>
92632>>>>>>>>>// DOM Document Type
92632>>>>>>>>>
92632>>>>>>>>>Register_Function phEntities Returns Integer
92632>>>>>>>>>Register_Function phNotations Returns Integer
92632>>>>>>>>>
92632>>>>>>>>>// DOM Notations
92632>>>>>>>>>
92632>>>>>>>>>Register_Function psPublicID Returns String
92632>>>>>>>>>Register_Function psSystemID Returns String
92632>>>>>>>>>Register_Function psNotationName Returns String
92632>>>>>>>>>
92632>>>>>>>>>// create nodes
92632>>>>>>>>>
92632>>>>>>>>>Register_Function createAttribute String sName Returns Integer
92632>>>>>>>>>Register_Function createCDataSection String sValue Returns Integer
92632>>>>>>>>>Register_Function createComment String sValue Returns Integer
92632>>>>>>>>>Register_Function createDocumentFragment Returns Integer
92632>>>>>>>>>Register_Function createElement String sTagName Returns Integer
92632>>>>>>>>>Register_Function createEntityReference String sEntityName Returns Integer
92632>>>>>>>>>Register_Function createNode Integer iNodeType String sName String sNameSpace Returns Integer
92632>>>>>>>>>Register_Function createProcessingInstruction String sTarget String sData Returns Integer
92632>>>>>>>>>Register_Function createTextNode String sData Returns Integer
92632>>>>>>>>>
92632>>>>>>>>>Register_Function ChangeNodeType Integer iTypeOfNode Integer bSetInterface Returns Integer
92632>>>>>>>>>
92632>>>>>>>>>
92632>>>>>>>>>// ******************************************************************************
92632>>>>>>>>>//
92632>>>>>>>>>//          Part 1:  Base Document Logic Specialized For Templates
92632>>>>>>>>>//
92632>>>>>>>>>// ******************************************************************************
92632>>>>>>>>>
92632>>>>>>>>>//
92632>>>>>>>>>//  XML Collections
92632>>>>>>>>>//
92632>>>>>>>>>//  Collection mixin has common functions to both node lists and named node maps
92632>>>>>>>>>//
92632>>>>>>>>>
92632>>>>>>>>>// This provides functions required of all XMLDOM objects.
92632>>>>>>>>>//
92632>>>>>>>>>Class cXMLDOMMixin is a Mixin
92633>>>>>>>>>
92633>>>>>>>>>    // Create an XML object of passed class Id and bind passed interface. returns
92633>>>>>>>>>    // the object handle. All dynamic XML object can be created using this syntax
92633>>>>>>>>>
92633>>>>>>>>>    Function CreateXMLObject Integer iClassId Integer hinfXMLInterface Returns Handle
92635>>>>>>>>>        Handle hoId hoDocument
92635>>>>>>>>>        // We will always create objects at the DOMDocument level.
92635>>>>>>>>>        Get DocumentObject to hoDocument
92636>>>>>>>>>        If (hoDocument=0) Begin  // this should never happen.
92638>>>>>>>>>            Error DFERR_XML_INTERNAL_ERROR C_$XmlFailedNoDocObject
92639>>>>>>>>>>
92639>>>>>>>>>            Function_Return 0
92640>>>>>>>>>        End
92640>>>>>>>>>>
92640>>>>>>>>>        If hinfXMLInterface Begin
92642>>>>>>>>>            Get Create of hoDocument iClassId to hoID
92643>>>>>>>>>            Set XMLInterface of hoID to hinfXMLInterface
92644>>>>>>>>>        End
92644>>>>>>>>>>
92644>>>>>>>>>        Function_Return hoID
92645>>>>>>>>>    End_Function
92646>>>>>>>>>
92646>>>>>>>>>    // create an XML Node object based on the interface type.
92646>>>>>>>>>    // this will convert the interface to the proper type and will create
92646>>>>>>>>>    // an appropriate DF object.
92646>>>>>>>>>    // This requires that a DocumentObject exists
92646>>>>>>>>>
92646>>>>>>>>>    Function CreateXMLNode Handle hinfc Returns Handle
92648>>>>>>>>>        Integer hoNode iType iClassId
92648>>>>>>>>>        Handle  hoDocument
92648>>>>>>>>>        // Get the node type of the infc handle w/o creating a DF object
92648>>>>>>>>>        Move (invokexml(DF_IXMLDOMNODE, GET_piNodeType, hinfc, 0, 0, 0, 0)) to iType
92649>>>>>>>>>        Move (invokexml(DF_IXMLDOMNODE, GET_ChangeNodeType, hinfc, iType, 1, 0, 0)) to hInfc
92650>>>>>>>>>        If (hinfc=0) Begin
92652>>>>>>>>>            // this should not happen and we would need to know about this.
92652>>>>>>>>>            Error DFERR_XML_INTERNAL_ERROR (C_$XmlFailedNoDocObject + String(iType))
92653>>>>>>>>>>
92653>>>>>>>>>            Function_Return 0
92654>>>>>>>>>        End
92654>>>>>>>>>>
92654>>>>>>>>>        Get DocumentObject to hoDocument
92655>>>>>>>>>        // you can augment your class IDs in a single place.
92655>>>>>>>>>        Get NodeClassId of hoDocument iType to iClassId
92656>>>>>>>>>        // MG: 12/6/00 Changed to create nodes inside of the document object.
92656>>>>>>>>>        Get CreateXMLObject of hoDocument iClassId hinfc to hoNode
92657>>>>>>>>>
92657>>>>>>>>>        Function_Return hoNode
92658>>>>>>>>>    End_Function
92659>>>>>>>>>
92659>>>>>>>>>
92659>>>>>>>>>    // Change object's class. This let's you change the class id of an object
92659>>>>>>>>>    // on an object by object basis. This would let you create nodes (e.g. elements)
92659>>>>>>>>>    // that have a custom interface for each node type. Normally, this would be sent
92659>>>>>>>>>    // after a node has been created using one of the default classes
92659>>>>>>>>>    Function ChangeNodeClass Integer hoNode Integer iClassID Returns Handle
92661>>>>>>>>>        Integer iType
92661>>>>>>>>>        Handle  hinfcNew
92661>>>>>>>>>        Get piNodeType of hoNode to iType
92662>>>>>>>>>        Get ChangeNodeType of hoNode iType False to hInfcNew
92663>>>>>>>>>        Send Destroy to hoNode // destroy object and old infc handle.
92664>>>>>>>>>        Get CreateXMLObject iClassId hinfcNew to hoNode
92665>>>>>>>>>        Function_Return hoNode
92666>>>>>>>>>    End_Function
92667>>>>>>>>>
92667>>>>>>>>>End_Class
92668>>>>>>>>>
92668>>>>>>>>>
92668>>>>>>>>>Class cXMLDOMCollectionMixin is a Mixin
92669>>>>>>>>>
92669>>>>>>>>>    Import_Class_Protocol cXMLDOMMixin
92670>>>>>>>>>
92670>>>>>>>>>    //  Returns number of items in the collection
92670>>>>>>>>>    //
92670>>>>>>>>>    Function NodeListLength Returns Integer
92672>>>>>>>>>        Integer iLength
92672>>>>>>>>>        Get piLength to iLength
92673>>>>>>>>>        Function_Return iLength
92674>>>>>>>>>    End_Function
92675>>>>>>>>>
92675>>>>>>>>>    // Returns an XML node object for pass item
92675>>>>>>>>>    //
92675>>>>>>>>>    Function CollectionNode Integer I Returns Handle
92677>>>>>>>>>        Integer hoNewNode
92677>>>>>>>>>        Integer infcItem
92677>>>>>>>>>        Get phItem i to infcItem
92678>>>>>>>>>        If (infcItem) ;            Get CreateXMLNode infcItem to hoNewNode
92681>>>>>>>>>        Function_Return hoNewNode
92682>>>>>>>>>    End_Function
92683>>>>>>>>>
92683>>>>>>>>>
92683>>>>>>>>>End_Class
92684>>>>>>>>>
92684>>>>>>>>>// Simple declarations of collections.
92684>>>>>>>>>
92684>>>>>>>>>Class cXMLDOMNodeList is a BaseXmlDomNodeList
92685>>>>>>>>>    Import_Class_Protocol cXMLDOMCollectionMixin
92686>>>>>>>>>End_Class
92687>>>>>>>>>
92687>>>>>>>>>Class cXMLDOMNamedNodeMap is a BaseXmlDomNamedNodeMap
92688>>>>>>>>>
92688>>>>>>>>>    Import_Class_Protocol cXMLDOMCollectionMixin
92689>>>>>>>>>
92689>>>>>>>>>    // returns a node attribute that matches passed name, zero if none
92689>>>>>>>>>    Function NamedNode String sName Returns Handle
92691>>>>>>>>>        Integer hoNewNode
92691>>>>>>>>>        Integer infcItem
92691>>>>>>>>>        Get NamedItem sName to infcItem
92692>>>>>>>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
92695>>>>>>>>>        Function_Return hoNewNode
92696>>>>>>>>>    End_Function
92697>>>>>>>>>
92697>>>>>>>>>    // Adds or changes a node attribute
92697>>>>>>>>>    // This should return the passed object Id which is now bound to the attribute. If an error, returns 0
92697>>>>>>>>>    Function SetNamedNode Handle hoNode Returns Handle
92699>>>>>>>>>        Integer hinfcNode hinfcItem
92699>>>>>>>>>        Get XMLInterface of hoNode to hinfcNode // node of passed attribute
92700>>>>>>>>>        Get SetNamedItem hinfcNode to hinfcItem
92701>>>>>>>>>        If hinfcItem ;            Set XMLInterface of hoNode to hinfcItem
92704>>>>>>>>>        Else ;            Move 0 to hoNode // zero indicates error
92706>>>>>>>>>        Function_Return hoNode
92707>>>>>>>>>    End_Function
92708>>>>>>>>>
92708>>>>>>>>>    // removes named attribute, Returns handle of removed node or zero if not found.
92708>>>>>>>>>    // Note that returned object must be disposed of or moved somewhere else.
92708>>>>>>>>>    Function RemoveNamedNode String sName Returns Handle
92710>>>>>>>>>        Integer hoNewNode
92710>>>>>>>>>        Integer infcItem
92710>>>>>>>>>        Get RemoveNamedItem sName to infcItem
92711>>>>>>>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
92714>>>>>>>>>        Function_Return hoNewNode
92715>>>>>>>>>    End_Function
92716>>>>>>>>>
92716>>>>>>>>>    Function QualifiedNode String sNameSpace String sBaseName Returns Handle
92718>>>>>>>>>        Integer hoNewNode
92718>>>>>>>>>        Integer infcItem
92718>>>>>>>>>        Get QualifiedItem  sBaseName sNameSpace  to infcItem
92719>>>>>>>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
92722>>>>>>>>>        Function_Return hoNewNode
92723>>>>>>>>>    End_Function
92724>>>>>>>>>
92724>>>>>>>>>    Function RemoveQualifiedNode String sNameSpace String sBaseName Returns Handle
92726>>>>>>>>>        Integer hoNewNode
92726>>>>>>>>>        Integer infcItem
92726>>>>>>>>>        Get RemoveQualifiedItem sBaseName sNameSpace to infcItem
92727>>>>>>>>>        If infcItem ;            Get CreateXMLNode infcItem to hoNewNode
92730>>>>>>>>>        Function_Return hoNewNode
92731>>>>>>>>>    End_Function
92732>>>>>>>>>
92732>>>>>>>>>End_Class
92733>>>>>>>>>
92733>>>>>>>>>
92733>>>>>>>>>
92733>>>>>>>>>// Mixin for nodes.
92733>>>>>>>>>//
92733>>>>>>>>>//  First the declaration of functions that have no object references.
92733>>>>>>>>>//
92733>>>>>>>>>
92733>>>>>>>>>
92733>>>>>>>>>Class cXMLDOMNodeMixin is a Mixin
92734>>>>>>>>>
92734>>>>>>>>>    Import_Class_Protocol cXMLDOMMixin
92735>>>>>>>>>
92735>>>>>>>>>    //  Append Node to the end of list. Returns passed Object handle if Ok, 0 if error
92735>>>>>>>>>
92735>>>>>>>>>    Function AppendNode Handle hoNode Returns Handle
92737>>>>>>>>>        Integer hoNewTextNode
92737>>>>>>>>>        Integer hinfcNode
92737>>>>>>>>>        Integer infcReturned
92737>>>>>>>>>        // Get COM Interface to call Append child.
92737>>>>>>>>>        Get XMLInterface of hoNode to hinfcNode
92738>>>>>>>>>        If (hinfcNode=0) Function_Return 0
92741>>>>>>>>>        Get AppendChild hinfcNode to infcReturned
92742>>>>>>>>>        // Interface returned is stored in DataFlex object.
92742>>>>>>>>>        If (infcReturned=0) Function_Return 0
92745>>>>>>>>>        Set XMLInterface of hoNode to infcReturned
92746>>>>>>>>>        Function_Return hoNode
92747>>>>>>>>>    End_Function
92748>>>>>>>>>
92748>>>>>>>>>    //  Insert NewNode before Node. Returns passed newnode Object handle if Ok, 0 if error
92748>>>>>>>>>
92748>>>>>>>>>    Function InsertBeforeNode Integer hoNewNode Integer hoNode Returns Handle
92750>>>>>>>>>        Integer hinfcNewNode hinfcNode iType hoRefNode
92750>>>>>>>>>        Integer infcReturned
92750>>>>>>>>>        // DOM says if no refnode argument passed or it is 0, append to end
92750>>>>>>>>>        If (Num_Arguments=1) ;            Move 0 to hoRefNode
92753>>>>>>>>>        Else ;            Move hoNode to hoRefNode
92755>>>>>>>>>        Get XMLInterface of hoNewNode to hinfcNewNode
92756>>>>>>>>>        If (hinfcNewNode=0) Function_Return 0
92759>>>>>>>>>        If hoRefNode Begin
92761>>>>>>>>>            Get XMLInterface of hoRefNode to hinfcNode
92762>>>>>>>>>            If (hinfcNode=0) Function_Return 0
92765>>>>>>>>>        End
92765>>>>>>>>>>
92765>>>>>>>>>        Get InsertBefore hinfcNewNode hinfcNode to infcReturned
92766>>>>>>>>>        If (infcReturned=0) Function_Return 0
92769>>>>>>>>>        // Interface returned is stored in DataFlex object.
92769>>>>>>>>>        Set XMLInterface of hoNewNode to infcReturned
92770>>>>>>>>>        Function_Return hoNewNode
92771>>>>>>>>>    End_Function
92772>>>>>>>>>
92772>>>>>>>>>    //  Remove Node. Returns object Id of removed node, zero if error
92772>>>>>>>>>    //  Important: The node is not destroyed! This lets you move it elsewhere if you want
92772>>>>>>>>>
92772>>>>>>>>>    Function RemoveNode Integer hoNode Returns Handle
92774>>>>>>>>>        Integer hInfcNode
92774>>>>>>>>>        Get XMLInterface of hoNode to hInfcNode
92775>>>>>>>>>        If (hinfcNode=0) Function_Return 0
92778>>>>>>>>>        Get RemoveChild hInfcNode to hinfcNode
92779>>>>>>>>>        If (hinfcNode=0) Function_Return 0
92782>>>>>>>>>        Set XMLInterface of hoNode to hinfcNode
92783>>>>>>>>>        Function_Return hoNode
92784>>>>>>>>>    End_Function
92785>>>>>>>>>
92785>>>>>>>>>    //  Replace Node. Returns object Id of replaced node, zero if error
92785>>>>>>>>>    //  Important: The replaced node is not destroyed! This lets you move it elsewhere if you want
92785>>>>>>>>>
92785>>>>>>>>>    Function ReplaceNode Integer hoNewNode Integer hoNodeToReplace Returns Handle
92787>>>>>>>>>        Integer hInfcNewNode hinfcNodetoReplace hinfcNode
92787>>>>>>>>>        Get XMLInterface of hoNewNode       to hInfcNewNode
92788>>>>>>>>>        Get XMLInterface of hoNodetoReplace to hInfcNodetoreplace
92789>>>>>>>>>        If (hinfcNewNode=0 or hInfcNodeToReplace=0) Function_Return 0
92792>>>>>>>>>        Get ReplaceChild hInfcNewNode hinfcNodeToReplace to hinfcNode
92793>>>>>>>>>        If (hinfcNode=0) Function_Return 0
92796>>>>>>>>>        Set XMLInterface of hoNodetoReplace to hinfcNode
92797>>>>>>>>>        Function_Return hoNodetoReplace
92798>>>>>>>>>    End_Function
92799>>>>>>>>>
92799>>>>>>>>>    // Remove the named node. Returns handle to removed node. You must destroy
92799>>>>>>>>>    // or move this removed object as needed
92799>>>>>>>>>
92799>>>>>>>>>    Function RemoveNamedNode String sQueryString Returns Handle
92801>>>>>>>>>        Integer hoNode
92801>>>>>>>>>        Integer hInfcTemplate hinfcNode
92801>>>>>>>>>        Get SelectSingleNode sQueryString to hinfcTemplate
92802>>>>>>>>>        If (hinfcTemplate) Begin
92804>>>>>>>>>            // Remove child returns an interface to the disassociated node.
92804>>>>>>>>>            // It should be disposed by setting it to an object and then calling destroy
92804>>>>>>>>>            Get RemoveChild hInfcTemplate to hInfcNode
92805>>>>>>>>>            If hInfcNode Get CreateXMLNode hinfcNode to hoNode
92808>>>>>>>>>        End
92808>>>>>>>>>>
92808>>>>>>>>>        Function_Return hoNode
92809>>>>>>>>>    End_Function
92810>>>>>>>>>
92810>>>>>>>>>    // This function creates a clone of the passed Node. if bRecurse all child nodes are also
92810>>>>>>>>>    // cloned. The object Id of the new clone object is returned.
92810>>>>>>>>>    // The interface of the object returned can be used in AppendChild to add
92810>>>>>>>>>    // the node to the XML Document.
92810>>>>>>>>>
92810>>>>>>>>>    Function CloneNode Integer bRecurse Returns Handle
92812>>>>>>>>>        Handle hoNewNode
92812>>>>>>>>>        Handle hinfcNewNode
92812>>>>>>>>>        Get CloneInfcNode (If(bRecurse,-1,0)) to hinfcNewNode
92813>>>>>>>>>        If hinfcNewNode ;            Get CreateXMLNode hinfcNewNode to hoNewNode
92816>>>>>>>>>        Function_Return hoNewNode
92817>>>>>>>>>    End_Function
92818>>>>>>>>>
92818>>>>>>>>>    //  Create a collection of all nodes. returns handle of a cXMLDomNodeList
92818>>>>>>>>>
92818>>>>>>>>>    Function ChildNodes Returns Handle
92820>>>>>>>>>        Integer infcNodeList
92820>>>>>>>>>        Integer hoNodeList
92820>>>>>>>>>        Get phChildNodes to infcNodeList
92821>>>>>>>>>        If (infcNodeList) ;            Get CreateXMLObject U_cXMLDOMNodeList infcNodeList to hoNodeList
92824>>>>>>>>>        Function_Return hoNodeList
92825>>>>>>>>>    End_Function
92826>>>>>>>>>
92826>>>>>>>>>    //  Create a collection of all attributes. returns handle of a cXMLDomNodeMapList
92826>>>>>>>>>
92826>>>>>>>>>    Function AttributeNodes Returns Handle
92828>>>>>>>>>        Integer hoCollectionId   // Object to hold collection
92828>>>>>>>>>        Integer hinfcAttributes  // XML Interface for collection
92828>>>>>>>>>        Get phAttributes to hinfcAttributes
92829>>>>>>>>>        If (hinfcAttributes) ;            Get CreateXMLObject U_cXMLDOMNamedNodeMap hinfcAttributes to hoCollectionId
92832>>>>>>>>>        Function_Return hoCollectionId
92833>>>>>>>>>    End_Function
92834>>>>>>>>>    
92834>>>>>>>>>    //  Create a collection of all attributes for the temporary attribute node object.
92834>>>>>>>>>    //  Using this saves a small amount of time creating and destroying this object but
92834>>>>>>>>>    //  it must be used with care. This binding is temporary!
92834>>>>>>>>>    Function TempAttributeNodes Returns Handle
92836>>>>>>>>>        Handle hoCollectionId hoDocument
92836>>>>>>>>>        Handle hinfcAttributes  // XML Interface for collection
92836>>>>>>>>>        Get phAttributes to hinfcAttributes
92837>>>>>>>>>        If (hinfcAttributes) Begin
92839>>>>>>>>>            Get DocumentObject to hoDocument
92840>>>>>>>>>            Get phoTempDomNodeMap of hoDocument to hoCollectionId
92841>>>>>>>>>            Set XMLInterface of hoCollectionId to hinfcAttributes
92842>>>>>>>>>        End
92842>>>>>>>>>>
92842>>>>>>>>>        Function_Return hoCollectionId
92843>>>>>>>>>    End_Function
92844>>>>>>>>>    
92844>>>>>>>>>
92844>>>>>>>>>    // Returns a collection of just elements
92844>>>>>>>>>
92844>>>>>>>>>    Function ElementNodes String sQueryString Returns Handle
92846>>>>>>>>>        Integer hoNodeList
92846>>>>>>>>>        Integer hinfcNodeList
92846>>>>>>>>>        Get ElementsByTagName sQueryString to hinfcNodeList
92847>>>>>>>>>        If (hinfcNodeList <> 0) ;            Get CreateXMLObject U_cXMLDOMNodeList hinfcNodeList to hoNodeList
92850>>>>>>>>>        Function_Return hoNodeList
92851>>>>>>>>>    End_Function
92852>>>>>>>>>
92852>>>>>>>>>
92852>>>>>>>>>
92852>>>>>>>>>    // Return object handle for query.
92852>>>>>>>>>
92852>>>>>>>>>    Function FindNode String sQueryString Returns Handle
92854>>>>>>>>>        Integer hoNode
92854>>>>>>>>>        Integer hinfcNode
92854>>>>>>>>>        Get SelectSingleNode sQueryString to hinfcNode
92855>>>>>>>>>        //inkey windowindex
92855>>>>>>>>>        If (hinfcNode <> 0) ;            Get CreateXMLNode hInfcNode to hoNode
92858>>>>>>>>>        Function_Return hoNode
92859>>>>>>>>>    End_Function
92860>>>>>>>>>
92860>>>>>>>>>    // Return object handle for a collection node.
92860>>>>>>>>>
92860>>>>>>>>>
92860>>>>>>>>>    Function FindNodeList String sQueryString Returns Handle
92862>>>>>>>>>        Integer hoNodeList
92862>>>>>>>>>        Integer hinfcNodeList
92862>>>>>>>>>        Get SelectNodes sQueryString to hinfcNodeList
92863>>>>>>>>>        If (hinfcNodeList <> 0) ;            Get CreateXMLObject U_cXMLDOMNodeList hinfcNodeList to hoNodeList
92866>>>>>>>>>        Function_Return hoNodeList
92867>>>>>>>>>    End_Function
92868>>>>>>>>>
92868>>>>>>>>>    // The CreatexxxxxNode messages creates an node object for the type specified. Both
92868>>>>>>>>>    // the interface and the object or of the correct type (i.e. element, comment)
92868>>>>>>>>>    // These all return an object handle which can be used to place the object via
92868>>>>>>>>>    // appendNode or InsertBeforeNode
92868>>>>>>>>>
92868>>>>>>>>>    // This function creates a child element, returning a dataflex object.
92868>>>>>>>>>    // The interface of the object returned can be used in AppendChild to add
92868>>>>>>>>>    // the element to the XML Document.
92868>>>>>>>>>
92868>>>>>>>>>    Function CreateElementNode String sTagName String sValue Returns Handle
92870>>>>>>>>>        Integer hoNewElement
92870>>>>>>>>>        Integer hoDocumentObject
92870>>>>>>>>>        Integer infcNewElement
92870>>>>>>>>>        Integer iClassId
92870>>>>>>>>>        // The DataFlex objects are created inside the nodes (elements).
92870>>>>>>>>>        // Create an element in the document and assign its interface to the new DF object.
92870>>>>>>>>>        Get DocumentObject to hoDocumentObject
92871>>>>>>>>>        Get createElement of hoDocumentObject sTagName to infcNewElement
92872>>>>>>>>>        If infcNewElement Begin // if there was an error, no infc handle would be returned
92874>>>>>>>>>            Get NodeClassId of hoDocumentObject NODE_ELEMENT to iClassId
92875>>>>>>>>>            Get CreateXMLObject iClassId infcNewElement to hoNewElement
92876>>>>>>>>>            If hoNewElement ; // very unlikely this will be zero                Set psText of hoNewElement to sValue
92879>>>>>>>>>        End
92879>>>>>>>>>>
92879>>>>>>>>>        Function_Return hoNewElement
92880>>>>>>>>>    End_Function
92881>>>>>>>>>
92881>>>>>>>>>    // This function creates an attribute in a document. Attributes are _NOT_ children of an element.
92881>>>>>>>>>    // A DataFlex object is returned. An attribute can be added to an xml document using
92881>>>>>>>>>    // get AddAttributeNode.
92881>>>>>>>>>
92881>>>>>>>>>    Function CreateAttributeNode String sName String sValue Returns Handle
92883>>>>>>>>>        Integer hoNewAttribute
92883>>>>>>>>>        Integer hoDocumentObject
92883>>>>>>>>>        Integer infcNewAttribute
92883>>>>>>>>>        Integer iClassId
92883>>>>>>>>>        Get DocumentObject to hoDocumentObject
92884>>>>>>>>>        // Create an Attribute in the document and assign its interface to the new DF object.
92884>>>>>>>>>        Get createAttribute of hoDocumentObject sName to infcNewAttribute
92885>>>>>>>>>        If infcNewAttribute Begin // if there was an error, no infc handle would be returned
92887>>>>>>>>>            Get NodeClassId of hoDocumentObject NODE_ATTRIBUTE to iClassId
92888>>>>>>>>>            Get CreateXMLObject iClassId infcNewAttribute to hoNewAttribute
92889>>>>>>>>>            // Set the value of the attribute.
92889>>>>>>>>>            If hoNewAttribute ; // very unlikely this will be 0                Set psText of hoNewAttribute to sValue
92892>>>>>>>>>        End
92892>>>>>>>>>>
92892>>>>>>>>>        Function_Return hoNewAttribute
92893>>>>>>>>>    End_Function
92894>>>>>>>>>
92894>>>>>>>>>    // This function creates a child comment, returning a dataflex object.
92894>>>>>>>>>    // The interface of the object returned can be used in AppendChild to add
92894>>>>>>>>>    // the comment to the XML Document.
92894>>>>>>>>>
92894>>>>>>>>>    Function CreateChildComment String sValue Returns Handle
92896>>>>>>>>>        Integer hoNewComment
92896>>>>>>>>>        Integer hoDocumentObject
92896>>>>>>>>>        Integer infcNewComment
92896>>>>>>>>>        Integer iClassID
92896>>>>>>>>>        Get DocumentObject to hoDocumentObject
92897>>>>>>>>>        // Create an Comment in the document and assign its interface to the new DF object.
92897>>>>>>>>>        Get createComment of hoDocumentObject sValue to infcNewComment
92898>>>>>>>>>        If infcNewComment Begin // if there was an error, no infc handle would be returned
92900>>>>>>>>>            Get NodeClassId of hoDocumentObject NODE_COMMENT to iClassId
92901>>>>>>>>>            Get CreateXMLObject iClassId infcNewComment to hoNewComment
92902>>>>>>>>>            If hoNewComment ; // very unlikely this will be 0                Set psText of hoNewComment to sValue
92905>>>>>>>>>        End
92905>>>>>>>>>>
92905>>>>>>>>>        Function_Return hoNewComment
92906>>>>>>>>>    End_Function
92907>>>>>>>>>
92907>>>>>>>>>    // This function creates a child processing instruction, returning a dataflex object.
92907>>>>>>>>>    // The interface of the object returned can be used in AppendChild to add
92907>>>>>>>>>    // the processing instruction to the XML Document.
92907>>>>>>>>>
92907>>>>>>>>>    Function CreateChildProcessingInstruction String sTarget String sValue Returns Handle
92909>>>>>>>>>        Integer hoNewProcessingInstruction
92909>>>>>>>>>        Integer hoDocumentObject
92909>>>>>>>>>        Integer infcNewProcessingInstruction
92909>>>>>>>>>        Integer iClassID
92909>>>>>>>>>        Get DocumentObject to hoDocumentObject
92910>>>>>>>>>        // Create an ProcessingInstruction in the document and assign its interface to the new DF object.
92910>>>>>>>>>        Get createProcessingInstruction of hoDocumentObject sTarget sValue to infcNewProcessingInstruction
92911>>>>>>>>>        If infcNewProcessingInstruction  Begin // if there was an error, no infc handle would be returned
92913>>>>>>>>>            Get NodeClassId of hoDocumentObject NODE_PROCESSING_INSTRUCTION to iClassId
92914>>>>>>>>>            Get CreateXMLObject iClassID infcNewProcessingInstruction to hoNewProcessingInstruction
92915>>>>>>>>>        End
92915>>>>>>>>>>
92915>>>>>>>>>        Function_Return hoNewProcessingInstruction
92916>>>>>>>>>    End_Function
92917>>>>>>>>>
92917>>>>>>>>>    // This function creates a child text node, returning a dataflex object.
92917>>>>>>>>>    // The interface of the object returned can be used in AppendChild to add
92917>>>>>>>>>    // the text node to the XML Document.
92917>>>>>>>>>
92917>>>>>>>>>    Function CreateChildTextNode String sValue Returns Handle
92919>>>>>>>>>        Integer hoNewTextNode
92919>>>>>>>>>        Integer hoDocumentObject
92919>>>>>>>>>        Integer infcNewTextNode
92919>>>>>>>>>        Integer iClassID
92919>>>>>>>>>        Get DocumentObject to hoDocumentObject
92920>>>>>>>>>        // Create an TextNode in the document and assign its interface to the new DF object.
92920>>>>>>>>>        Get createTextNode of hoDocumentObject sValue to infcNewTextNode
92921>>>>>>>>>        If infcNewTextNode Begin // if there was an error, no infc handle would be returned
92923>>>>>>>>>            Get NodeClassId of hoDocumentObject NODE_TEXT to iClassId
92924>>>>>>>>>            Get CreateXMLObject iClassId infcNewTextNode to hoNewTextNode
92925>>>>>>>>>        End
92925>>>>>>>>>>
92925>>>>>>>>>        Function_Return hoNewTextNode
92926>>>>>>>>>    End_Function
92927>>>>>>>>>
92927>>>>>>>>>    // This function creates a cdata text node, returning a dataflex object.
92927>>>>>>>>>    // The interface of the object returned can be used in AppendChild to add
92927>>>>>>>>>    // the cdata node to the XML Document.
92927>>>>>>>>>
92927>>>>>>>>>    Function CreateCDATASectionNode String sValue Returns Handle
92929>>>>>>>>>        Integer hoNewNode
92929>>>>>>>>>        Integer hoDocumentObject
92929>>>>>>>>>        Integer infcNewNode
92929>>>>>>>>>        Integer iClassId
92929>>>>>>>>>        // The DataFlex objects are created inside the nodes (elements).
92929>>>>>>>>>        // Create an element in the document and assign its interface to the new DF object.
92929>>>>>>>>>        Get DocumentObject to hoDocumentObject
92930>>>>>>>>>        Get createCDATASection of hoDocumentObject sValue to infcNewNode
92931>>>>>>>>>        If infcNewNode Begin
92933>>>>>>>>>            Get NodeClassId of hoDocumentObject NODE_CDATA_SECTION to iClassId
92934>>>>>>>>>            Get CreateXMLObject iClassId infcNewNode to hoNewNode
92935>>>>>>>>>        End
92935>>>>>>>>>>
92935>>>>>>>>>        Function_Return hoNewNode
92936>>>>>>>>>    End_Function
92937>>>>>>>>>
92937>>>>>>>>>    // Create a document fragment.  Document fragments can be used to house nodes temporarily. When
92937>>>>>>>>>    // You append or insert a document fragment (appendNode InsertBeforeNode) child nodes are appended
92937>>>>>>>>>    // to the destination object and not the fragment node itself. This is useful!
92937>>>>>>>>>
92937>>>>>>>>>    Function CreateDocumentFragmentNode Returns Handle
92939>>>>>>>>>        Integer hoNew
92939>>>>>>>>>        Integer hoDocumentObject
92939>>>>>>>>>        Integer infcNew
92939>>>>>>>>>        Integer iClassID
92939>>>>>>>>>        Get DocumentObject to hoDocumentObject
92940>>>>>>>>>        // Create an Comment in the document and assign its interface to the new DF object.
92940>>>>>>>>>        Get createDocumentFragment of hoDocumentObject to infcNew
92941>>>>>>>>>        If infcNew Begin // if there was an error, no infc handle would be returned
92943>>>>>>>>>            Get NodeClassId of hoDocumentObject NODE_DOCUMENT_FRAGMENT to iClassId
92944>>>>>>>>>            Get CreateXMLObject iClassId infcNew to hoNew
92945>>>>>>>>>        End
92945>>>>>>>>>>
92945>>>>>>>>>        Function_Return hoNew
92946>>>>>>>>>    End_Function
92947>>>>>>>>>
92947>>>>>>>>>    //  Create a Node of any passed Type (e.g. Node_element). Normally you don't need this as there are
92947>>>>>>>>>    //  specific messages to do this for each node type. Node that this lets you pass namespaces as a separate
92947>>>>>>>>>    //  parameter. With all of the other messages (e.g. createElementNode) you pass namespaces as prefixed to
92947>>>>>>>>>    // the tagname (e.g. Get CreateElementNode "MyNameSpace:MyTag" "MyValue" to hoEle)
92947>>>>>>>>>
92947>>>>>>>>>    Function CreateChildNode Integer iNodeType String sTagName String sNameSpace Returns Handle
92949>>>>>>>>>        Integer hoNewNode hoDocumentObject
92949>>>>>>>>>        Integer infcNewNode
92949>>>>>>>>>        Integer iClassid iType
92949>>>>>>>>>        Get DocumentObject to hoDocumentObject
92950>>>>>>>>>        Get NodeClassId iNodeType to iClassId
92951>>>>>>>>>        If (iClassId<>0) Begin
92953>>>>>>>>>            // Create a node in the document and assign its interface to the new DF object.
92953>>>>>>>>>            Get createNode of hoDocumentObject iNodeType sTagName sNameSpace to infcNewNode
92954>>>>>>>>>            // this is required to force the interface type to be correct.
92954>>>>>>>>>            Move (invokexml(DF_IXMLDOMNODE, GET_piNodeType, infcNewNode, 0, 0, 0, 0)) to iType
92955>>>>>>>>>            Move (invokexml(DF_IXMLDOMNODE, GET_ChangeNodeType, infcNewNode, iType, 1, 0, 0)) to infcNewNode
92956>>>>>>>>>
92956>>>>>>>>>            If infcNewNode ;                Get CreateXMLObject iClassId infcNewNode to hoNewNode
92959>>>>>>>>>        End
92959>>>>>>>>>>
92959>>>>>>>>>        Function_Return hoNewNode
92960>>>>>>>>>    End_Function
92961>>>>>>>>>
92961>>>>>>>>>
92961>>>>>>>>>
92961>>>>>>>>>    // The Addxxxxx messages create a new node and appends it to the list. When used as a function,
92961>>>>>>>>>    // the object handle is returned and must be disposed of later by the programmer.
92961>>>>>>>>>    // When used as a procedure, the object is destroyed--it just does it and is done.
92961>>>>>>>>>
92961>>>>>>>>>    Function AddElement String sTagName String sValue Returns Handle
92963>>>>>>>>>        Integer hoNewElement
92963>>>>>>>>>        Get CreateElementNode sTagName sValue to hoNewElement
92964>>>>>>>>>        If hoNewElement Get AppendNode hoNewElement to hoNewElement
92967>>>>>>>>>        Function_Return hoNewElement
92968>>>>>>>>>    End_Function
92969>>>>>>>>>
92969>>>>>>>>>    Procedure AddElement String sTagName String sValue
92971>>>>>>>>>        Integer hoNewElement
92971>>>>>>>>>        Get AddElement sTagName sValue to hoNewElement
92972>>>>>>>>>        If hoNewElement ;            Send Destroy to hoNewElement
92975>>>>>>>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddElement"))
92977>>>>>>>>>    End_Procedure
92978>>>>>>>>>
92978>>>>>>>>>    // this returns the object, This is often needed
92978>>>>>>>>>    Function CreateElementNodeNS String sNameSpace String sTagName String sValue Returns Handle
92980>>>>>>>>>        Integer hoNewElement
92980>>>>>>>>>        Get CreateChildNode NODE_ELEMENT sTagName sNameSpace to hoNewElement
92981>>>>>>>>>        If (hoNewElement and sValue<>"") ;            Set psText of hoNewElement to sValue
92984>>>>>>>>>        Function_Return hoNewElement
92985>>>>>>>>>    End_Procedure
92986>>>>>>>>>
92986>>>>>>>>>
92986>>>>>>>>>    // this returns the object, This is often needed
92986>>>>>>>>>    Function AddElementNS String sNameSpace String sTagName String sValue Returns Handle
92988>>>>>>>>>        Integer hoNewElement
92988>>>>>>>>>        Get CreateElementNodeNS sNameSpace sTagName sValue to hoNewElement
92989>>>>>>>>>        If hoNewElement Begin
92991>>>>>>>>>            Get AppendNode hoNewElement to hoNewElement
92992>>>>>>>>>        End
92992>>>>>>>>>>
92992>>>>>>>>>        Function_Return hoNewElement
92993>>>>>>>>>    End_Function
92994>>>>>>>>>
92994>>>>>>>>>    Procedure AddElementNS String sNameSpace String sTagName String sValue
92996>>>>>>>>>        Integer hoNewElement
92996>>>>>>>>>        Get AddElementNS sNameSpace sTagName sValue to hoNewElement
92997>>>>>>>>>        If hoNewElement ;            Send Destroy to hoNewElement
93000>>>>>>>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddElementNS"))
93002>>>>>>>>>    End_Procedure
93003>>>>>>>>>
93003>>>>>>>>>    Function AddAttributeNode Handle hoNode Returns Handle
93005>>>>>>>>>        Handle hInfc
93005>>>>>>>>>        Get Set_AttributeNode (XmlInterface(hoNode)) to hInfc
93006>>>>>>>>>        If hInfc ; // if ret value we have a replacement            Set XmlInterface of hoNode to hInfc
93009>>>>>>>>>        Function_Return hoNode
93010>>>>>>>>>    End_Function
93011>>>>>>>>>
93011>>>>>>>>>//    // is this needed
93011>>>>>>>>>//    Function AddAttributeNodeNS handle hoNode returns Handle
93011>>>>>>>>>//        Get AddAttributeNode hoNode to hoNode
93011>>>>>>>>>//        function_return hoNode
93011>>>>>>>>>//    End_Function
93011>>>>>>>>>
93011>>>>>>>>>    Function AttributeValueNode String sName Returns Handle
93013>>>>>>>>>        Handle hInfc
93013>>>>>>>>>        Handle hoNode
93013>>>>>>>>>        Get AttributeNode sName to hInfc
93014>>>>>>>>>        If hInfc ; // if ret value we have a replacement           Get CreateXMLNode hInfc to hoNode
93017>>>>>>>>>        Function_Return hoNode
93018>>>>>>>>>    End_Function
93019>>>>>>>>>
93019>>>>>>>>>    Function AttributeValueNodeNS String sNameSpace String sBaseName Returns Handle
93021>>>>>>>>>        Handle hoAttrs hoAttr
93021>>>>>>>>>        String sValue
93021>>>>>>>>>        Get TempAttributeNodes to hoAttrs
93022>>>>>>>>>        If hoAttrs Begin
93024>>>>>>>>>            Get QualifiedNode of hoAttrs sNamespace sBaseName to hoAttr
93025>>>>>>>>>            Set XMLInterface of hoAttrs to 0
93026>>>>>>>>>        End
93026>>>>>>>>>>
93026>>>>>>>>>        Function_Return hoAttr
93027>>>>>>>>>    End_Function
93028>>>>>>>>>
93028>>>>>>>>>
93028>>>>>>>>>    Function CreateAttributeNodeNS String sNameSpace String sName String sValue Returns Handle
93030>>>>>>>>>        Integer hoNewAttribute
93030>>>>>>>>>        Get CreateChildNode NODE_ATTRIBUTE sName sNameSpace to hoNewAttribute
93031>>>>>>>>>        If hoNewAttribute ;            Set psText of hoNewAttribute to sValue
93034>>>>>>>>>        Function_Return hoNewAttribute
93035>>>>>>>>>    End_Function
93036>>>>>>>>>
93036>>>>>>>>>    Procedure AddAttributeNS String sNameSpace String sName String sValue
93038>>>>>>>>>       Handle hoNode
93038>>>>>>>>>       Get CreateAttributeNodeNS sNameSpace sName sValue to hoNode
93039>>>>>>>>>       If hoNode Begin
93041>>>>>>>>>          Get AddAttributeNode hoNode to hoNode
93042>>>>>>>>>          If hoNode Send Destroy of hoNode
93045>>>>>>>>>       End
93045>>>>>>>>>>
93045>>>>>>>>>       Else ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddAttributeNS"))
93047>>>>>>>>>    End_Procedure
93048>>>>>>>>>
93048>>>>>>>>>
93048>>>>>>>>>    // This function encapsulates creation and addition of attributes to a node.
93048>>>>>>>>>    // should only work with element class
93048>>>>>>>>>    Procedure AddAttribute String sName String sValue
93050>>>>>>>>>        Set AttributeValue sName to sValue
93051>>>>>>>>>    End_Procedure
93052>>>>>>>>>
93052>>>>>>>>>    // This function encapsulates creation and addition of comments to a node.
93052>>>>>>>>>    // The return value is a Boolean that is currently unused.
93052>>>>>>>>>
93052>>>>>>>>>    Procedure AddChildComment String sValue
93054>>>>>>>>>        Integer hoNewNode
93054>>>>>>>>>        Get createChildComment sValue to hoNewNode
93055>>>>>>>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddChildComment"))
93058>>>>>>>>>        Else Begin
93059>>>>>>>>>            Get AppendNode hoNewNode to hoNewNode
93060>>>>>>>>>            Send Destroy to hoNewNode
93061>>>>>>>>>        End
93061>>>>>>>>>>
93061>>>>>>>>>    End_Procedure
93062>>>>>>>>>
93062>>>>>>>>>    // This function encapsulates creation and addition of processing instructions to a node.
93062>>>>>>>>>    // The return value is a Boolean that is currently unused.
93062>>>>>>>>>
93062>>>>>>>>>    Procedure AddChildProcessingInstruction String sTarget String sValue
93064>>>>>>>>>        Integer hoNewNode
93064>>>>>>>>>        Get createChildProcessingInstruction sTarget sValue to hoNewNode
93065>>>>>>>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddChildProcessingInstruction"))
93068>>>>>>>>>        Else Begin
93069>>>>>>>>>            Get AppendNode hoNewNode to hoNewNode
93070>>>>>>>>>            Send Destroy to hoNewNode
93071>>>>>>>>>        End
93071>>>>>>>>>>
93071>>>>>>>>>    End_Procedure
93072>>>>>>>>>
93072>>>>>>>>>
93072>>>>>>>>>    // This function encapsulates creation and addition of text nodes to a node.
93072>>>>>>>>>    // The return value is a Boolean that is currently unused.
93072>>>>>>>>>
93072>>>>>>>>>    Procedure AddChildTextNode String sValue
93074>>>>>>>>>        Integer hoNewNode
93074>>>>>>>>>        Get createChildTextNode sValue to hoNewNode
93075>>>>>>>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddChildTextNode"))
93078>>>>>>>>>        Else Begin
93079>>>>>>>>>            Get AppendNode hoNewNode to hoNewNode
93080>>>>>>>>>            Send Destroy to hoNewNode
93081>>>>>>>>>        End
93081>>>>>>>>>>
93081>>>>>>>>>    End_Procedure
93082>>>>>>>>>
93082>>>>>>>>>    // This procedure encapsulates creation and addition of cdata text nodes to a node.
93082>>>>>>>>>    Procedure AddCDataSection String sValue
93084>>>>>>>>>        Handle hoNewNode
93084>>>>>>>>>        Get CreateCDATASectionNode sValue to hoNewNode
93085>>>>>>>>>        If not hoNewNode ;            Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_AddCDataSection"))
93088>>>>>>>>>        Else Begin
93089>>>>>>>>>            Get AppendNode hoNewNode to hoNewNode
93090>>>>>>>>>            Send Destroy to hoNewNode
93091>>>>>>>>>        End
93091>>>>>>>>>>
93091>>>>>>>>>    End_Procedure
93092>>>>>>>>>
93092>>>>>>>>>
93092>>>>>>>>>    Function AddChildNode Integer iNodeType String sTagName String sNameSpace Returns Handle
93094>>>>>>>>>        Integer hoNewNode
93094>>>>>>>>>        Integer hoDocumentObject
93094>>>>>>>>>        Get DocumentObject to hoDocumentObject
93095>>>>>>>>>        Get createChildNode of hoDocumentObject iNodeType sTagName sNamespace to hoNewNode
93096>>>>>>>>>        If hoNewNode ;            Get AppendNode hoNewNode to hoNewNode
93099>>>>>>>>>        Function_Return hoNewNode
93100>>>>>>>>>    End_Function
93101>>>>>>>>>    
93101>>>>>>>>>    // don't use the runtime/msxml version of this. Instead just return the
93101>>>>>>>>>    // first text from the first child node. This is much faster
93101>>>>>>>>>    Function psText Returns String
93103>>>>>>>>>        Handle hText
93103>>>>>>>>>        String sValue
93103>>>>>>>>>        Get phFirstChild to hText
93104>>>>>>>>>        Get InfcNodeValue hText to sValue
93105>>>>>>>>>        Function_Return sValue        
93106>>>>>>>>>    End_Function
93107>>>>>>>>>     
93107>>>>>>>>>    // Use this to call the internal Text property. This returns all text for all child
93107>>>>>>>>>    // node. You rarely would want to do this. The is uses the msxml psText which can 
93107>>>>>>>>>    // get slow with very large files. If for some reason you need all of the child node's
93107>>>>>>>>>    // text and the file is large, you might want to consider doing this process manually.
93107>>>>>>>>>    Function AllChildNodesText Returns String
93109>>>>>>>>>        String sValue
93109>>>>>>>>>        Forward Get psText to sValue
93111>>>>>>>>>        Function_Return sValue        
93112>>>>>>>>>    End_Function
93113>>>>>>>>>    
93113>>>>>>>>>    // return the interface NodeValue without having to create a
93113>>>>>>>>>    // new object
93113>>>>>>>>>    Function InfcNodeValue Handle hInfc Returns String
93115>>>>>>>>>        Integer hoDocument hoTempNode
93115>>>>>>>>>        String sValue
93115>>>>>>>>>        If (hinfc) Begin
93117>>>>>>>>>            Get DocumentObject to hoDocument
93118>>>>>>>>>            Get phoTempDomNode of hoDocument to hoTempNode
93119>>>>>>>>>            Set XMLInterface of hoTempNode to hInfc
93120>>>>>>>>>            Get psNodeValue of hoTempNode to sValue
93121>>>>>>>>>            Set XMLInterface of hoTempNode to 0
93122>>>>>>>>>        End
93122>>>>>>>>>>
93122>>>>>>>>>        Function_Return sValue
93123>>>>>>>>>    End_Function
93124>>>>>>>>>    
93124>>>>>>>>>    // ChildNodeValue is used to get the "value" of an element. This is useful when the element
93124>>>>>>>>>    // only has a single value (similar to an attribute).
93124>>>>>>>>>    
93124>>>>>>>>>    Function ChildNodeValue String sTagName Returns String
93126>>>>>>>>>        Integer hoTempNode hoDocument
93126>>>>>>>>>        Integer hinfcTempNode 
93126>>>>>>>>>        String sRetVal
93126>>>>>>>>>        Get SelectSingleNode sTagName to hinfcTempNode
93127>>>>>>>>>        If (hinfcTempNode <> 0) Begin
93129>>>>>>>>>            Get DocumentObject to hoDocument
93130>>>>>>>>>            Get phoTempDomNode of hoDocument to hoTempNode
93131>>>>>>>>>            Set XMLInterface of hoTempNode to hinfcTempNode
93132>>>>>>>>>            Get phFirstChild of hoTempNode to hinfcTempNode
93133>>>>>>>>>            Set XMLInterface of hoTempNode to 0
93134>>>>>>>>>            If hinfcTempNode Begin
93136>>>>>>>>>                Get InfcNodeValue hinfcTempNode to sRetVal
93137>>>>>>>>>            End
93137>>>>>>>>>>
93137>>>>>>>>>        End
93137>>>>>>>>>>
93137>>>>>>>>>        Function_Return sRetVal
93138>>>>>>>>>    End_Function
93139>>>>>>>>>
93139>>>>>>>>>    // This simple function allows a parent to change the text of one of its elements.
93139>>>>>>>>>    // This actually occurs quite a bit, because (as stated above) lowest level
93139>>>>>>>>>    // elements are frequently used as properties.
93139>>>>>>>>>    //
93139>>>>>>>>>    Procedure SetChildNodeValue String sTagName String sValue
93141>>>>>>>>>        Integer hoTempNode
93141>>>>>>>>>        Integer hinfcTempNode
93141>>>>>>>>>        // Search for the node that matches.
93141>>>>>>>>>        Get SelectSingleNode sTagName to hinfcTempNode
93142>>>>>>>>>        // If no match is found, add a new element with the tag.
93142>>>>>>>>>        If (hinfcTempNode = 0) ;            Send AddElement sTagName sValue
93145>>>>>>>>>        Else Begin
93146>>>>>>>>>            Get CreateXMLObject U_BaseXMLDOMNode hinfcTempNode to hoTempNode
93147>>>>>>>>>            If hoTempNode Begin
93149>>>>>>>>>                // Set the text of the element.
93149>>>>>>>>>                Set psText of hoTempNode to sValue
93150>>>>>>>>>                Send Destroy to hoTempNode
93151>>>>>>>>>            End
93151>>>>>>>>>>
93151>>>>>>>>>            Else ;                Error DFERR_XML_INTERNAL_ERROR (SFormat(C_$XmlMethodFailure, "msg_SetChildNodeValue"))
93153>>>>>>>>>        End
93153>>>>>>>>>>
93153>>>>>>>>>    End_Procedure
93154>>>>>>>>>
93154>>>>>>>>>    // These messages are used to allow you to travese through a nodes.
93154>>>>>>>>>
93154>>>>>>>>>    Function FirstChild Returns Handle
93156>>>>>>>>>        Handle hoChild
93156>>>>>>>>>        Integer hinfcChild
93156>>>>>>>>>        Get phFirstChild  to hinfcChild
93157>>>>>>>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
93160>>>>>>>>>        Function_Return hoChild
93161>>>>>>>>>    End_Function
93162>>>>>>>>>
93162>>>>>>>>>    Function NextSibling Returns Handle
93164>>>>>>>>>        Handle hoChild
93164>>>>>>>>>        Integer hinfcChild
93164>>>>>>>>>        Get phNextSibling  to hinfcChild
93165>>>>>>>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
93168>>>>>>>>>        Function_Return hoChild
93169>>>>>>>>>    End_Function
93170>>>>>>>>>
93170>>>>>>>>>    Function PreviousSibling Returns Handle
93172>>>>>>>>>        Handle hoChild
93172>>>>>>>>>        Integer hinfcChild
93172>>>>>>>>>        Get phPreviousSibling  to hinfcChild
93173>>>>>>>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
93176>>>>>>>>>        Function_Return hoChild
93177>>>>>>>>>    End_Function
93178>>>>>>>>>
93178>>>>>>>>>    Function LastChild Returns Handle
93180>>>>>>>>>        Handle hoChild
93180>>>>>>>>>        Integer hinfcChild
93180>>>>>>>>>        Get phLastChild  to hinfcChild
93181>>>>>>>>>        If (hinfcChild) ;            Get CreateXMLNode hinfcChild to hoChild
93184>>>>>>>>>        Function_Return hoChild
93185>>>>>>>>>    End_Function
93186>>>>>>>>>
93186>>>>>>>>>    // return an object that is the parent of the current node
93186>>>>>>>>>    Function ParentNode Returns Handle
93188>>>>>>>>>        Handle hoId
93188>>>>>>>>>        Handle hinfcXMLInterface
93188>>>>>>>>>        Get phParentNode to hinfcXMLInterface
93189>>>>>>>>>        If (hinfcXMLInterface) ;            Get CreateXmlNode hinfcXMLInterface to hoID
93192>>>>>>>>>        Function_Return hoID
93193>>>>>>>>>    End_Function
93194>>>>>>>>>
93194>>>>>>>>>    // Same as NextSibling except it uses or destroys the current node
93194>>>>>>>>>    //
93194>>>>>>>>>    // optimized version does not destroy/create object unless it needs to.  
93194>>>>>>>>>    // if the next node is the same node type we will resuse this object
93194>>>>>>>>>    // else this object is destroyed 
93194>>>>>>>>>    Function NextNode Returns Handle
93196>>>>>>>>>        Handle hoNode hoDocument
93196>>>>>>>>>        Handle hInfc
93196>>>>>>>>>        Get phNextSibling to hInfc
93197>>>>>>>>>        If hInfc Begin
93199>>>>>>>>>            Get DocumentObject to hoDocument
93200>>>>>>>>>            Move Self to hoNode
93201>>>>>>>>>            Send BindXMLInfc of hoDocument hInfc (&hoNode)
93202>>>>>>>>>        End
93202>>>>>>>>>>
93202>>>>>>>>>        Else Begin
93203>>>>>>>>>            Send Destroy
93204>>>>>>>>>            Move 0 to hoNode
93205>>>>>>>>>        End
93205>>>>>>>>>>
93205>>>>>>>>>        Function_Return hoNode
93206>>>>>>>>>    End_Function
93207>>>>>>>>>        
93207>>>>>>>>>        
93207>>>>>>>>>    // Enumerate through all nodes.
93207>>>>>>>>>
93207>>>>>>>>>    Procedure EnumerateNodes Integer iMsg Integer hoReceiver String sVal1 String sVal2
93209>>>>>>>>>        Integer i iLen
93209>>>>>>>>>        Integer hoNode
93209>>>>>>>>>        Integer hoNodeCollection
93209>>>>>>>>>        Get ChildNodes to hoNodeCollection
93210>>>>>>>>>        If (hoNodeCollection <> 0) Begin
93212>>>>>>>>>            Get NodeListLength of hoNodeCollection to iLen
93213>>>>>>>>>            Decrement iLen
93214>>>>>>>>>            For i from 0 to iLen
93220>>>>>>>>>>
93220>>>>>>>>>                // For each record, process its fields.
93220>>>>>>>>>                Get CollectionNode of hoNodeCollection i to hoNode
93221>>>>>>>>>                Send iMsg of hoReceiver hoNode sVal1 sVal2
93222>>>>>>>>>                Send Destroy of hoNode
93223>>>>>>>>>            Loop
93224>>>>>>>>>>
93224>>>>>>>>>            Send Destroy of hoNodeCollection
93225>>>>>>>>>        End
93225>>>>>>>>>>
93225>>>>>>>>>    End_Procedure
93226>>>>>>>>>
93226>>>>>>>>>    // Enumerate through all elements.
93226>>>>>>>>>
93226>>>>>>>>>    Procedure EnumerateElements Integer iMsg Integer hoReceiver String sVal1 String sVal2
93228>>>>>>>>>        Integer i iLen
93228>>>>>>>>>        Integer hoNode
93228>>>>>>>>>        Integer hoNodeCollection
93228>>>>>>>>>        Get ChildNodes to hoNodeCollection
93229>>>>>>>>>        If (hoNodeCollection <> 0) Begin
93231>>>>>>>>>            Get NodeListLength of hoNodeCollection to iLen
93232>>>>>>>>>            Decrement iLen
93233>>>>>>>>>            For i from 0 to iLen
93239>>>>>>>>>>
93239>>>>>>>>>                // For each record, process its fields.
93239>>>>>>>>>                Get CollectionNode of hoNodeCollection i to hoNode
93240>>>>>>>>>                If (piNodeType(hoNode)=NODE_ELEMENT) ;                    Send iMsg of hoReceiver hoNode sVal1 sVal2
93243>>>>>>>>>                Send Destroy of hoNode
93244>>>>>>>>>            Loop
93245>>>>>>>>>>
93245>>>>>>>>>            Send Destroy of hoNodeCollection
93246>>>>>>>>>        End
93246>>>>>>>>>>
93246>>>>>>>>>    End_Procedure
93247>>>>>>>>>
93247>>>>>>>>>
93247>>>>>>>>>    // enumerate through all attributes. There is no recurse here because attributes will not
93247>>>>>>>>>    // contain attributes.
93247>>>>>>>>>
93247>>>>>>>>>    Procedure EnumerateAttributes Integer iMsg Integer hoReceiver String sSomeValue
93249>>>>>>>>>        Integer i iLen
93249>>>>>>>>>        Integer hoNode
93249>>>>>>>>>        Integer hoNodeMapCollection
93249>>>>>>>>>        // we don't use tempattributenodes because we don't know what the enum message will do.
93249>>>>>>>>>        Get AttributeNodes to hoNodeMapCollection
93250>>>>>>>>>        If (hoNodeMapCollection <> 0) Begin
93252>>>>>>>>>            Get NodeListLength of hoNodeMapCollection to iLen
93253>>>>>>>>>            Decrement iLen
93254>>>>>>>>>            For i from 0 to iLen
93260>>>>>>>>>>
93260>>>>>>>>>                // For each record, process its fields.
93260>>>>>>>>>                Get CollectionNode of hoNodeMapCollection i to hoNode
93261>>>>>>>>>                Send iMsg of hoReceiver hoNode sSomeValue
93262>>>>>>>>>                Send Destroy of hoNode
93263>>>>>>>>>            Loop
93264>>>>>>>>>>
93264>>>>>>>>>            Send Destroy of hoNodeMapCollection
93265>>>>>>>>>        End
93265>>>>>>>>>>
93265>>>>>>>>>    End_Procedure
93266>>>>>>>>>
93266>>>>>>>>>
93266>>>>>>>>>    Function XSLTransformation Integer hoXSLDocument Returns String
93268>>>>>>>>>        Integer infcXSLStartAt
93268>>>>>>>>>        String sBuffer
93268>>>>>>>>>        // Transformation is of current object using passed XSLDocument.
93268>>>>>>>>>        Get XMLInterface of hoXSLDocument to infcXSLStartAt
93269>>>>>>>>>        Get TransformNode infcXSLStartAt to sBuffer
93270>>>>>>>>>        Function_Return sBuffer
93271>>>>>>>>>    End_Function
93272>>>>>>>>>
93272>>>>>>>>>    // This allows for transformations not limited to the size of the string buffer
93272>>>>>>>>>    //
93272>>>>>>>>>    // Note that it is up to the programmer to dispose of the memory allocated at pBuffer
93272>>>>>>>>>    // by using the free(pBuffer) function
93272>>>>>>>>>    //
93272>>>>>>>>>    Function XSLTransformationToAddress Integer hoXSLDocument Returns Address
93274>>>>>>>>>        Integer infcXSLStartAt
93274>>>>>>>>>        Address pBuffer
93274>>>>>>>>>        // Transformation is of current object using passed XSLDocument.
93274>>>>>>>>>        Get XMLInterface of hoXSLDocument to infcXSLStartAt
93275>>>>>>>>>        Get TransformNodeToAddress infcXSLStartAt to pBuffer
93276>>>>>>>>>        Function_Return pBuffer
93277>>>>>>>>>    End_Function
93278>>>>>>>>>
93278>>>>>>>>>
93278>>>>>>>>>    // extract base name from string. e.g.: ns:name --> name
93278>>>>>>>>>    //
93278>>>>>>>>>    Function BaseNameFromQName String sName Returns String
93280>>>>>>>>>        Integer iPos
93280>>>>>>>>>        Move (Pos(":",sName)) to iPos
93281>>>>>>>>>        If iPos Begin
93283>>>>>>>>>            Move (remove(sName,1,iPos)) to sName
93284>>>>>>>>>        End
93284>>>>>>>>>>
93284>>>>>>>>>        Function_Return sName
93285>>>>>>>>>    End_Function
93286>>>>>>>>>
93286>>>>>>>>>    // extract prefix name from string. e.g.: ns:name --> ns
93286>>>>>>>>>    //
93286>>>>>>>>>    Function PrefixNameFromQName String sName Returns String
93288>>>>>>>>>        String sPreFix
93288>>>>>>>>>        Integer iPos
93288>>>>>>>>>        Move (Pos(":",sName)) to iPos
93289>>>>>>>>>        If iPos Begin
93291>>>>>>>>>            Move (Left(sName,iPos-1)) to sPreFix
93292>>>>>>>>>        End
93292>>>>>>>>>>
93292>>>>>>>>>        Function_Return sPreFix
93293>>>>>>>>>    End_Function
93294>>>>>>>>>
93294>>>>>>>>>
93294>>>>>>>>>    // Returns true if node is element and namespace and base name match
93294>>>>>>>>>    //
93294>>>>>>>>>    Function IsElementNS String sNamespaceURI String sBaseName Returns Boolean
93296>>>>>>>>>         Function_Return (piNodeType(Self)=NODE_ELEMENT and ;                          psNameSpaceURI(Self)=sNamespaceURI and ;                          psBaseName(Self)=sBaseName )
93297>>>>>>>>>    End_Function
93298>>>>>>>>>
93298>>>>>>>>>    // Returns node of first occurence of child node matching namespace and base name
93298>>>>>>>>>    //
93298>>>>>>>>>    Function ChildElementNS String sNameSpaceURI String sBaseName Returns Handle
93300>>>>>>>>>        Handle hoNode
93300>>>>>>>>>        Get FirstChild to hoNode
93301>>>>>>>>>        While (hoNode and not(IsElementNS(hoNode, sNameSpaceURI, sBaseName)))
93305>>>>>>>>>            Get NextNode of hoNode to hoNode
93306>>>>>>>>>        End
93307>>>>>>>>>>
93307>>>>>>>>>        Function_Return hoNode
93308>>>>>>>>>    End_Function
93309>>>>>>>>>
93309>>>>>>>>>    // Returns node of next occurence of sibling node matching namespace and base name
93309>>>>>>>>>    // and destroys the current node.
93309>>>>>>>>>//    Function NextElementNS String sNameSpaceURI String sBaseName Returns Handle
93309>>>>>>>>>//        handle hoNode
93309>>>>>>>>>//        Get NextSibling to hoNode
93309>>>>>>>>>//        While (hoNode and not(IsElementNS(hoNode, sNameSpaceURI, sBaseName)))
93309>>>>>>>>>//            Get NextNode of hoNode to hoNode
93309>>>>>>>>>//        end
93309>>>>>>>>>//        Send Destroy
93309>>>>>>>>>//        function_return hoNode
93309>>>>>>>>>//    end_function
93309>>>>>>>>>
93309>>>>>>>>>    Function NextElementNS String sNameSpaceURI String sBaseName Returns Handle
93311>>>>>>>>>        Handle hoNode
93311>>>>>>>>>        // NextNode may return the same object or it may destroy the object and
93311>>>>>>>>>        // return nothing or a different object
93311>>>>>>>>>        Get NextNode to hoNode
93312>>>>>>>>>        While (hoNode and not(IsElementNS(hoNode, sNameSpaceURI, sBaseName)))
93316>>>>>>>>>            // use of hoNode is required. This can be different than self
93316>>>>>>>>>            Get NextNode of hoNode to hoNode
93317>>>>>>>>>        End
93318>>>>>>>>>>
93318>>>>>>>>>         
93318>>>>>>>>>        Function_Return hoNode
93319>>>>>>>>>    End_Function
93320>>>>>>>>>
93320>>>>>>>>>
93320>>>>>>>>>    // Returns value (string) first occurence of child node matching namespace and base name
93320>>>>>>>>>    //
93320>>>>>>>>>    Function ChildElementValueNS String sNameSpaceURI String sBaseName Returns String
93322>>>>>>>>>        Handle hoNext
93322>>>>>>>>>        String sText
93322>>>>>>>>>        Get ChildElementNS sNameSpaceURI sBaseName to hoNext
93323>>>>>>>>>        If hoNext Begin
93325>>>>>>>>>            Get psText of hoNext to sText
93326>>>>>>>>>            Send destroy of hoNext
93327>>>>>>>>>        End
93327>>>>>>>>>>
93327>>>>>>>>>        Function_Return sText
93328>>>>>>>>>    End_Function
93329>>>>>>>>>
93329>>>>>>>>>    Procedure SetChildElementValueNS String sNameSpaceURI String sBaseName String sValue
93331>>>>>>>>>        Integer hoNode
93331>>>>>>>>>        Integer hinfcTempNode
93331>>>>>>>>>        Get ChildElementNS sNameSpaceURI sBaseName to hoNode
93332>>>>>>>>>        If (hoNode=0) Begin
93334>>>>>>>>>            Send AddElementNS sNameSpaceURI sBaseName sValue
93335>>>>>>>>>        End
93335>>>>>>>>>>
93335>>>>>>>>>        Else Begin
93336>>>>>>>>>            Set psText of hoNode to sValue
93337>>>>>>>>>            Send destroy of hoNode
93338>>>>>>>>>        End
93338>>>>>>>>>>
93338>>>>>>>>>    End_Procedure
93339>>>>>>>>>
93339>>>>>>>>>
93339>>>>>>>>>//    // Returns node of first occurence of child node matching namespace and base name
93339>>>>>>>>>//    // that has an attrib value that contains a specified value
93339>>>>>>>>>//    //
93339>>>>>>>>>//    //Doc/ Visibility=Public
93339>>>>>>>>>//    Function FindElementNodeWithAttribNS string sNamespace string sBaseName string sAttribName string sAttribValue returns handle
93339>>>>>>>>>//        handle hoNext hoNode
93339>>>>>>>>>//        string sName
93339>>>>>>>>>//        Get FirstChild to hoNode
93339>>>>>>>>>//        While (hoNode)
93339>>>>>>>>>//            If (IsElementNS(hoNode, sNameSpace, sBaseName)) begin
93339>>>>>>>>>//                Get AttributeValue of hoNode sAttribName to sName
93339>>>>>>>>>//                If (sName=sAttribValue) Begin
93339>>>>>>>>>//                    Function_return hoNode
93339>>>>>>>>>//                end
93339>>>>>>>>>//            end
93339>>>>>>>>>//            Get NextSibling of hoNode to hoNext
93339>>>>>>>>>//            Send Destroy of hoNode
93339>>>>>>>>>//            Move hoNext to hoNode
93339>>>>>>>>>//        end
93339>>>>>>>>>//        function_return 0
93339>>>>>>>>>//    end_function
93339>>>>>>>>>
93339>>>>>>>>>    // pass a prefix and try to finds its NameSpaceURI. Start at current node and work up to parent.
93339>>>>>>>>>    // This can be useful when a qualified name is found in an attribute value
93339>>>>>>>>>    //
93339>>>>>>>>>    Function PrefixToNamespaceURI String sPrefix Returns String
93341>>>>>>>>>        Handle hoNode
93341>>>>>>>>>        Integer i iNodes
93341>>>>>>>>>        Integer hoNodes hoParentNode hoAttNode
93341>>>>>>>>>        Boolean bDone bParent
93341>>>>>>>>>        String sAttPrefix sName sNameSpace
93341>>>>>>>>>
93341>>>>>>>>>        Move Self to hoNode
93342>>>>>>>>>        While not bDone
93346>>>>>>>>>            Get TempAttributeNodes of hoNode to hoNodes
93347>>>>>>>>>            If (hoNodes <> 0) Begin
93349>>>>>>>>>                Get NodeListLength of hoNodes to iNodes
93350>>>>>>>>>                For i from 0 to (iNodes-1)
93356>>>>>>>>>>
93356>>>>>>>>>                    // For each record, process its fields.
93356>>>>>>>>>                    Get CollectionNode of hoNodes i to hoAttNode
93357>>>>>>>>>                    Get psPrefix of hoAttNode to sAttPrefix
93358>>>>>>>>>                    Get psBaseName of hoAttNode to sName
93359>>>>>>>>>                    // with legacy msxml, xmlns="foo" returns psPrefix="xmlns" and pbBaseName=""
93359>>>>>>>>>                    // with newer msxml, xmlns="foo" returns psPrefix="" and pbBaseName="xmlns"
93359>>>>>>>>>                    // We handle both cases here. 
93359>>>>>>>>>                    
93359>>>>>>>>>                    If ( (sAttPrefix="xmlns" and sName=sPrefix) or ; // if a normal xmlns:xx="foo" match (sPrefix="xx") or a legacy xmlns="foo" match (sPrefix="")                         (sPrefix="" and sAttPrefix="" and sName="xmlns") ) Begin // special test for newer msxml xmlns="foo" match (sPrefix="")
93361>>>>>>>>>
93361>>>>>>>>>                        Get Value of hoAttNode to sNameSpace
93362>>>>>>>>>                        Move True to bDone
93363>>>>>>>>>                        Move (iNodes-1) to i
93364>>>>>>>>>
93364>>>>>>>>>                    End
93364>>>>>>>>>>
93364>>>>>>>>>
93364>>>>>>>>>                    Send Destroy of hoAttNode
93365>>>>>>>>>                Loop
93366>>>>>>>>>>
93366>>>>>>>>>                Set XMLInterface of hoNodes to 0
93367>>>>>>>>>            End
93367>>>>>>>>>>
93367>>>>>>>>>            
93367>>>>>>>>>            Get ParentNode of hoNode to hoParentNode
93368>>>>>>>>>            If bParent Send destroy of hoNode
93371>>>>>>>>>            If not bDone Begin
93373>>>>>>>>>                If not hoParentNode Move True to bDone
93376>>>>>>>>>                Else Begin
93377>>>>>>>>>                    Move True to bParent
93378>>>>>>>>>                    Move hoParentNode to hoNode
93379>>>>>>>>>                End
93379>>>>>>>>>>
93379>>>>>>>>>            End
93379>>>>>>>>>>
93379>>>>>>>>>        End
93380>>>>>>>>>>
93380>>>>>>>>>        Function_Return sNameSpace
93381>>>>>>>>>    End_Function
93382>>>>>>>>>
93382>>>>>>>>>
93382>>>>>>>>>
93382>>>>>>>>>End_Class
93383>>>>>>>>>
93383>>>>>>>>>// Set up basic inheritance for specialized forms of XML classes.
93383>>>>>>>>>// This needs to be done so we can make objects of these types.
93383>>>>>>>>>
93383>>>>>>>>>Class cXMLDOMElement is a BaseXmlDomElement
93384>>>>>>>>>    Import_Class_Protocol cXMLDOMNodeMixin
93385>>>>>>>>>
93385>>>>>>>>>// Send AddAttribute
93385>>>>>>>>>// Get  AddAttributeNode
93385>>>>>>>>>// Send RemoveAttribute
93385>>>>>>>>>// Get  AttributeValue
93385>>>>>>>>>// Get  AttributeValueNode
93385>>>>>>>>>
93385>>>>>>>>>// Send AddAttributeNS
93385>>>>>>>>>// Get  AddAttributeNodeNS
93385>>>>>>>>>// Send RemoveAttributeNs
93385>>>>>>>>>// Get  AttributeValueNS
93385>>>>>>>>>// Get  AttributeValueNodeNS
93385>>>>>>>>>
93385>>>>>>>>>    // Should use AddAttributeValue...does same thing
93385>>>>>>>>>    Procedure SetAttributeValue String sName String sValue
93387>>>>>>>>>        Send AddAttribute sName sValue
93388>>>>>>>>>    End_Procedure
93389>>>>>>>>>
93389>>>>>>>>>    // Note: Get_AttributeValue already there
93389>>>>>>>>>
93389>>>>>>>>>    Procedure RemoveAttribute String sName
93391>>>>>>>>>        Integer iVal
93391>>>>>>>>>        Get RemoveAttribute sName to iVal
93392>>>>>>>>>    End_Procedure
93393>>>>>>>>>
93393>>>>>>>>>    Function AttributeValueNS String sNameSpace String sBaseName Returns String
93395>>>>>>>>>        String sValue
93395>>>>>>>>>        Handle hinfcItem
93395>>>>>>>>>        Handle hoDoc hoTempAttributeNodes hoNode
93395>>>>>>>>>        Integer hinfcAttributes
93395>>>>>>>>>        
93395>>>>>>>>>//        // test if the basename attribute exists at all. This is an opimization as this
93395>>>>>>>>>//        // message is much faster allowing for quicker false matches (good for client web-services).
93395>>>>>>>>>//        Get AttributeValue sBaseName to sValue // doesn't work as expected
93395>>>>>>>>>//        If (sValue<>"") Begin 
93395>>>>>>>>>            Get TempAttributeNodes to hoTempAttributeNodes
93396>>>>>>>>>            Get QualifiedItem of hoTempAttributeNodes sBaseName sNameSpace  to hinfcItem
93397>>>>>>>>>            Set XMLInterface of hoTempAttributeNodes to 0
93398>>>>>>>>>            If hinfcItem Begin
93400>>>>>>>>>                Get DocumentObject to hoDoc
93401>>>>>>>>>                Get phoTempDomNode of hoDoc to hoNode
93402>>>>>>>>>                Set XMLInterface of hoNode to hinfcItem
93403>>>>>>>>>                Get psNodeValue of hoNode to sValue
93404>>>>>>>>>                Set XMLInterface of hoNode to 0
93405>>>>>>>>>            End
93405>>>>>>>>>>
93405>>>>>>>>>//        End
93405>>>>>>>>>        Function_Return sValue
93406>>>>>>>>>    End_Function
93407>>>>>>>>>
93407>>>>>>>>>// replaced with optimized version above
93407>>>>>>>>>//    Function AttributeValueNS String sNameSpace String sBaseName Returns String
93407>>>>>>>>>//        Handle hoAttr
93407>>>>>>>>>//        String sValue
93407>>>>>>>>>//
93407>>>>>>>>>//        Get AttributeValueNodeNS sNameSpace sBaseName to hoAttr
93407>>>>>>>>>//        If hoAttr Begin
93407>>>>>>>>>//            Get Value of hoAttr to sValue
93407>>>>>>>>>//            Send destroy of hoAttr
93407>>>>>>>>>//        End
93407>>>>>>>>>//        function_return sValue
93407>>>>>>>>>//    end_function
93407>>>>>>>>>
93407>>>>>>>>>    Procedure RemoveAttributeNS String sNameSpace String sBaseName
93409>>>>>>>>>        Handle hoAttrs hoAttr
93409>>>>>>>>>        String sValue
93409>>>>>>>>>        Get TempAttributeNodes to hoAttrs
93410>>>>>>>>>        If hoAttrs Begin
93412>>>>>>>>>            Get RemoveQualifiedNode of hoAttrs sNamespace sBaseName to hoAttr
93413>>>>>>>>>            Set XMLInterface of hoAttrs to 0
93414>>>>>>>>>            If hoAttr ;                Send destroy of hoAttr
93417>>>>>>>>>        End
93417>>>>>>>>>>
93417>>>>>>>>>    End_Procedure
93418>>>>>>>>>
93418>>>>>>>>>End_Class
93419>>>>>>>>>
93419>>>>>>>>>Class cXMLDOMNode is a BaseXmlDomNode
93420>>>>>>>>>    Import_Class_Protocol cXMLDOMNodeMixin
93421>>>>>>>>>End_Class
93422>>>>>>>>>
93422>>>>>>>>>Class cXMLDOMAttribute is a BaseXmlDomAttribute
93423>>>>>>>>>    Import_Class_Protocol cXMLDOMNodeMixin
93424>>>>>>>>>End_Class
93425>>>>>>>>>
93425>>>>>>>>>Class cXMLDOMComment is a BaseXmlDomComment
93426>>>>>>>>>    Import_Class_Protocol cXMLDOMNodeMixin
93427>>>>>>>>>End_Class
93428>>>>>>>>>
93428>>>>>>>>>Class cXMLDOMProcessingInstruction is a BaseXmlDomProcessingInstruction
93429>>>>>>>>>    Import_Class_Protocol cXMLDOMNodeMixin
93430>>>>>>>>>End_Class
93431>>>>>>>>>
93431>>>>>>>>>Class cXMLDOMTextNode is a BaseXmlDomTextNode
93432>>>>>>>>>    Import_Class_Protocol cXMLDOMNodeMixin
93433>>>>>>>>>End_Class
93434>>>>>>>>>
93434>>>>>>>>>Class cXMLDOMCDATASection is a BaseXmlDomCDATASection
93435>>>>>>>>>    Import_Class_Protocol cXMLDOMNodeMixin
93436>>>>>>>>>End_Class
93437>>>>>>>>>
93437>>>>>>>>>Class cXMLDOMDocumentType is a BaseXmlDomDocumentType
93438>>>>>>>>>    Import_Class_Protocol cXMLDOMNodeMixin
93439>>>>>>>>>    
93439>>>>>>>>>
93439>>>>>>>>>//        Function EnumerateEntities Integer iMsg Integer hoReceiver Integer bEnumerate Integer iSomeValue Returns Handle
93439>>>>>>>>>//            Integer i
93439>>>>>>>>>//            Integer hoNode
93439>>>>>>>>>//            Integer hoNamedNodeMap
93439>>>>>>>>>//            Integer hinfcNamedNodeMap
93439>>>>>>>>>//            Integer iLength
93439>>>>>>>>>
93439>>>>>>>>>//            Get phEntities To hinfcNamedNodeMap
93439>>>>>>>>>
93439>>>>>>>>>//            showln "The interface of the named node map is " hinfcNamedNodeMap
93439>>>>>>>>>
93439>>>>>>>>>//            If (hinfcNamedNodeMap <> 0) Begin
93439>>>>>>>>>//                Get CreateXMLObject U_cXMLDOMNamedNodeMap hinfcNamedNodeMap to hoNamedNodeMap
93439>>>>>>>>>//                Get piLength Of hoNamedNodeMap To iLength
93439>>>>>>>>>//                Showln "There are " iLength " items in map"
93439>>>>>>>>>
93439>>>>>>>>>//                ///                For i From 0 To (NodeListLength(hoNamedNodeMap)-1)
93439>>>>>>>>>//                ///                    // For each record, process its fields.
93439>>>>>>>>>//                //                    Get CollectionNode Of hoNamedNodeMap i To hoNode
93439>>>>>>>>>//                //                    Send iMsg Of hoReceiver hoNode bEnumerate iSomeValue
93439>>>>>>>>>//                //                    Send Destroy_Object Of hoNode
93439>>>>>>>>>//                //                Loop
93439>>>>>>>>>//            End
93439>>>>>>>>>//            Send Destroy To hoNamedNodeMap
93439>>>>>>>>>//            Function_Return 0
93439>>>>>>>>>//        End_Function
93439>>>>>>>>>
93439>>>>>>>>>//        Function EnumerateNotations Integer iMsg Integer hoReceiver Integer bEnumerate Integer iSomeValue Returns Handle
93439>>>>>>>>>//            Integer i
93439>>>>>>>>>//            Integer hoNode
93439>>>>>>>>>//            Integer hoNamedNodeMap
93439>>>>>>>>>//            Integer hinfcNamedNodeMap
93439>>>>>>>>>//            Integer iLength
93439>>>>>>>>>
93439>>>>>>>>>//            Object oNamedNodeMap Is A cXMLDOMNamedNodeMap
93439>>>>>>>>>//                Move Self To hoNamedNodeMap
93439>>>>>>>>>//            End_Object
93439>>>>>>>>>
93439>>>>>>>>>//            Get phNotations To hinfcNamedNodeMap
93439>>>>>>>>>
93439>>>>>>>>>//            showln "The interface of the named node map is " hinfcNamedNodeMap
93439>>>>>>>>>
93439>>>>>>>>>//            If (hinfcNamedNodeMap <> 0) Begin
93439>>>>>>>>>//                Set XMLInterface Of hoNamedNodeMap To hinfcNamedNodeMap
93439>>>>>>>>>//                Get piLength Of hoNamedNodeMap To iLength
93439>>>>>>>>>//                Showln "There are " iLength " items in map"
93439>>>>>>>>>
93439>>>>>>>>>/////                For i From 0 To (NodeListLength(hoNamedNodeMap)-1)
93439>>>>>>>>>/////                    // For each record, process its fields.
93439>>>>>>>>>////                    Get CollectionNode Of hoNamedNodeMap i To hoNode
93439>>>>>>>>>////                    Send iMsg Of hoReceiver hoNode bEnumerate iSomeValue
93439>>>>>>>>>////                    Send Destroy_Object Of hoNode
93439>>>>>>>>>////                Loop
93439>>>>>>>>>//            End
93439>>>>>>>>>//            Send Destroy_Object To hoNamedNodeMap
93439>>>>>>>>>//            Function_Return 0
93439>>>>>>>>>//        End_Function
93439>>>>>>>>>
93439>>>>>>>>>End_Class
93440>>>>>>>>>
93440>>>>>>>>>Class cXMLDOMNotation is a BaseXmlDomNotation
93441>>>>>>>>>    Import_Class_Protocol cXMLDOMNodeMixin
93442>>>>>>>>>End_Class
93443>>>>>>>>>
93443>>>>>>>>>Class cXMLDOMEntity is a BaseXmlDomEntity
93444>>>>>>>>>    Import_Class_Protocol cXMLDOMNodeMixin
93445>>>>>>>>>End_Class
93446>>>>>>>>>
93446>>>>>>>>>Class cXMLDOMEntityReference is a BaseXmlDomEntityReference
93447>>>>>>>>>    Import_Class_Protocol cXMLDOMNodeMixin
93448>>>>>>>>>End_Class
93449>>>>>>>>>
93449>>>>>>>>>Class cXMLDOMDocumentFragment is a BaseXmlDomDocumentFragment
93450>>>>>>>>>    Import_Class_Protocol cXMLDOMNodeMixin
93451>>>>>>>>>End_Class
93452>>>>>>>>>
93452>>>>>>>>>
93452>>>>>>>>>Class cXMLDOMParseError is a BaseXMLDomParseError
93453>>>>>>>>>    // returns an error sub-object as a sibling of this error object
93453>>>>>>>>>    Function ErrorItemNode Integer iItem Returns Handle
93455>>>>>>>>>        Handle hoParseErrorNode hoParent
93455>>>>>>>>>        Handle hParseErrorIntf
93455>>>>>>>>>        Get ErrorItem iItem to hParseErrorIntf
93456>>>>>>>>>        If (hParseErrorIntf) Begin
93458>>>>>>>>>            // add to parent in case developer destroys the current object
93458>>>>>>>>>            Get Parent to hoParent
93459>>>>>>>>>            Get Create of hoParent U_cXMLDOMParseError to hoParseErrorNode
93460>>>>>>>>>            Set XmlInterface of hoParseErrorNode to hParseErrorIntf
93461>>>>>>>>>        End
93461>>>>>>>>>>
93461>>>>>>>>>        Function_Return hoParseErrorNode
93462>>>>>>>>>    End_Function         
93463>>>>>>>>>End_Class
93464>>>>>>>>>
93464>>>>>>>>>// Base document class with Base functions.
93464>>>>>>>>>
93464>>>>>>>>>Class cXMLDOMDocument is an BaseXmlDomDocument
93465>>>>>>>>>
93465>>>>>>>>>    Import_Class_Protocol cXMLDOMNodeMixin
93466>>>>>>>>>
93466>>>>>>>>>    Procedure Construct_Object
93468>>>>>>>>>        Handle hInfc
93468>>>>>>>>>        Forward Send Construct_Object
93470>>>>>>>>>        Property String psDocumentName ""
93471>>>>>>>>>        Property Integer phPrivateDocumentElement 0
93472>>>>>>>>>        Property Handle phoTempDomNode (Create(Self,U_cXMLDomNode))
93473>>>>>>>>>        Property Handle phoTempDomNodeMap (Create(Self,U_cXMLDOMNamedNodeMap))
93474>>>>>>>>>        
93474>>>>>>>>>        // added in 15.1. If no COM pointer, msxml6 is most likely not installed. This will
93474>>>>>>>>>        // raise an unhandled error, which could be augmented to do something else.
93474>>>>>>>>>        Get XmlInterface to hInfc
93475>>>>>>>>>        If (hInfc=0) Begin
93477>>>>>>>>>            Send ErrorCreatingXMLObject
93478>>>>>>>>>        End
93478>>>>>>>>>>
93478>>>>>>>>>    End_Procedure
93479>>>>>>>>>
93479>>>>>>>>>    // returns the classId for the passed NodeType. This is a good augmentation point. All nodes
93479>>>>>>>>>    // within an xml document come here to get a class. So, if you want to augment and return a
93479>>>>>>>>>    // different class, just check the node type and return whatever -- else forward
93479>>>>>>>>>
93479>>>>>>>>>    Function NodeClassId Integer iType Returns Integer
93481>>>>>>>>>        Integer iClassId
93481>>>>>>>>>        Case Begin
93481>>>>>>>>>            Case (iType=NODE_ELEMENT)                   Move U_cXMLDOMElement      to iClassId
93484>>>>>>>>>            Case (iType=NODE_ATTRIBUTE)                 Move U_cXMLDOMAttribute    to iClassId
93488>>>>>>>>>            Case (iType=NODE_TEXT)                      Move U_cXMLDOMTextNode     to iClassId
93492>>>>>>>>>            Case (iType=NODE_CDATA_SECTION)             Move U_cXMLDOMCDATASection to iClassId
93496>>>>>>>>>            Case (iType=NODE_ENTITY_REFERENCE)          Move U_cXMLDOMEntityReference to iClassId
93500>>>>>>>>>            Case (iType=NODE_ENTITY)                    Move U_cXMLDOMEntity       to iClassId
93504>>>>>>>>>            Case (iType=NODE_PROCESSING_INSTRUCTION)    Move U_cXMLDOMProcessingInstruction to iClassId
93508>>>>>>>>>            Case (iType=NODE_COMMENT)                   Move U_cXMLDOMComment      to iClassId
93512>>>>>>>>>            Case (iType=NODE_DOCUMENT)                  Move U_cXMLDOMDocument     to iClassId
93516>>>>>>>>>            Case (iType=NODE_DOCUMENT_TYPE)             Move U_cXMLDOMDocumentType to iClassId
93520>>>>>>>>>            Case (iType=NODE_DOCUMENT_FRAGMENT)         Move U_cXMLDOMDocumentFragment to iClassId
93524>>>>>>>>>            Case (iType=NODE_NOTATION)                  Move U_cXMLDOMNotation     to iClassId
93528>>>>>>>>>            Case (iType=0)                              Move 0                     to iClassId // this is an error!!
93532>>>>>>>>>            Case Else                                   Move U_cXMLDOMNode         to iClassId
93534>>>>>>>>>        Case End
93534>>>>>>>>>        Function_Return iClassId
93535>>>>>>>>>    End_Function
93536>>>>>>>>>
93536>>>>>>>>>    // Load an XML Document. The name of the document is stored in a property
93536>>>>>>>>>    // that must be set for this function to work correctly.
93536>>>>>>>>>
93536>>>>>>>>>    Function LoadXMLDocument Returns Integer
93538>>>>>>>>>        String sDocumentName
93538>>>>>>>>>        Integer bRetVal
93538>>>>>>>>>        Get psDocumentName to sDocumentName
93539>>>>>>>>>        Get LoadDocument sDocumentName to bRetVal
93540>>>>>>>>>        If (bRetVal = 0);            Function_Return True
93543>>>>>>>>>        Else;            Function_Return False
93545>>>>>>>>>    End_Function
93546>>>>>>>>>
93546>>>>>>>>>    Function SaveXMLDocument Returns Integer
93548>>>>>>>>>        String sDocumentName
93548>>>>>>>>>        Integer bRetVal
93548>>>>>>>>>        Get psDocumentName to sDocumentName
93549>>>>>>>>>        Get SaveDocument sDocumentName to bRetVal
93550>>>>>>>>>        Function_Return bRetVal
93551>>>>>>>>>    End_Function
93552>>>>>>>>>
93552>>>>>>>>>    // Load an XML from a string. This aguments the C message to ret 1 if Ok and 0 if error.
93552>>>>>>>>>    //
93552>>>>>>>>>    Function LoadXML String sXML Returns Integer
93554>>>>>>>>>        Integer bRetVal
93554>>>>>>>>>        // for some reason the parser will not work properly with embedded double quotes.
93554>>>>>>>>>        // Change all " to ' in document.
93554>>>>>>>>>        //Move (replaces('"',sXML,"'")) to sXML  // removed this. Bad Idea.
93554>>>>>>>>>        Forward Get LoadXml sXML to bRetVal
93556>>>>>>>>>        If (bRetVal = 0) ;            Function_Return True
93559>>>>>>>>>        Else;            Function_Return False
93561>>>>>>>>>    End_Function
93562>>>>>>>>>
93562>>>>>>>>>    // Load an XML string from an address. This aguments the C message to ret 1 if Ok and 0 if error.
93562>>>>>>>>>    //
93562>>>>>>>>>    Function LoadXMLFromAddress Address pXML Returns Integer
93564>>>>>>>>>        Integer bRetVal
93564>>>>>>>>>        Forward Get LoadXmlFromAddress pXML to bRetVal
93566>>>>>>>>>        If (bRetVal = 0) ;            Function_Return True
93569>>>>>>>>>        Else;            Function_Return False
93571>>>>>>>>>    End_Function
93572>>>>>>>>>
93572>>>>>>>>>
93572>>>>>>>>>    // Allow Nodes and Node node lists to get the parent document.
93572>>>>>>>>>
93572>>>>>>>>>    Function DocumentObject Returns Handle
93574>>>>>>>>>        Function_Return Self
93575>>>>>>>>>    End_Function
93576>>>>>>>>>
93576>>>>>>>>>    // Access to the root node allows for searches and iterations.
93576>>>>>>>>>    // The root node is a cNode.
93576>>>>>>>>>
93576>>>>>>>>>    Function DocumentElement Returns Handle
93578>>>>>>>>>        Integer hNewNode       // Object ID of Root Node
93578>>>>>>>>>        Integer infcNode   // XML Element Interface
93578>>>>>>>>>// we used to buffer this so we'd always return the same object. This is dangerous. If the devloper
93578>>>>>>>>>// deletes the root and then creates some other object with this name, we will have problems. Now we
93578>>>>>>>>>// always create a new root now - which means you can create multiple roots (which is probably ok).
93578>>>>>>>>>
93578>>>>>>>>>//        Get phPrivateDocumentElement to hNewNode
93578>>>>>>>>>//        // if for some reason the developer sends destroy to the root element then
93578>>>>>>>>>//        // we must check that acutally exists. If not, create the root all over again
93578>>>>>>>>>//        Get Object_Id of hNewNode to hNewNode // if Object no longer exists, 0 is returned
93578>>>>>>>>>//        If not (hNewNode) Begin
93578>>>>>>>>>//            // Call XML to get the document root element.
93578>>>>>>>>>//            Get phDocumentElement To infcNode
93578>>>>>>>>>//            If infcNode Begin
93578>>>>>>>>>//                Get CreateXMLObject U_cXMLDOMElement infcNode to hNewNode
93578>>>>>>>>>//                Set phPrivateDocumentElement to hNewNode
93578>>>>>>>>>//            end
93578>>>>>>>>>//        End
93578>>>>>>>>>
93578>>>>>>>>>        Get phDocumentElement to infcNode
93579>>>>>>>>>        If infcNode Begin
93581>>>>>>>>>            Get CreateXMLObject U_cXMLDOMElement infcNode to hNewNode
93582>>>>>>>>>            Set phPrivateDocumentElement to hNewNode // we no longer use this at all
93583>>>>>>>>>        End
93583>>>>>>>>>>
93583>>>>>>>>>        Function_Return hNewNode
93584>>>>>>>>>    End_Function
93585>>>>>>>>>
93585>>>>>>>>>    //  CreateRootNode is used to set up the first element in a document.
93585>>>>>>>>>    //  It should only be used when creating new files.
93585>>>>>>>>>
93585>>>>>>>>>    Function CreateDocumentElement String sTagName Returns Handle
93587>>>>>>>>>        Integer hNewNode       // Object ID of Root Node
93587>>>>>>>>>        Integer infcNode   // XML Element Interface
93587>>>>>>>>>        // Call XML to create an element in the document.
93587>>>>>>>>>        Get CreateElement sTagName to infcNode
93588>>>>>>>>>        // Tie the element interface to the DataFlex object.
93588>>>>>>>>>        If infcNode ;            Get CreateXMLObject U_cXMLDOMElement infcNode to hNewNode
93591>>>>>>>>>        // Call XML to set the root element of the document.
93591>>>>>>>>>        Set phDocumentElement to infcNode
93592>>>>>>>>>        Set phPrivateDocumentElement to hNewNode
93593>>>>>>>>>        Function_Return hNewNode
93594>>>>>>>>>    End_Function
93595>>>>>>>>>
93595>>>>>>>>>    Function CreateDocumentElementNS String sNamespace String sTagName Returns Handle
93597>>>>>>>>>        Integer hNewNode       // Object ID of Root Node
93597>>>>>>>>>        Integer infcNode iType  // XML Element Interface
93597>>>>>>>>>        Get CreateElementNodeNS sNameSpace sTagName "" to hNewNode
93598>>>>>>>>>        Get XmlInterface of hNewNode to infcNode
93599>>>>>>>>>        Set phDocumentElement to infcNode
93600>>>>>>>>>        Set phPrivateDocumentElement to hNewNode
93601>>>>>>>>>        Function_Return hNewNode
93602>>>>>>>>>    End_Function
93603>>>>>>>>>
93603>>>>>>>>>
93603>>>>>>>>>
93603>>>>>>>>>    // return the DocType as a document-type object. Returns 0 if no dtd
93603>>>>>>>>>    // Access to information from the doc type object is limited. Use get psXML
93603>>>>>>>>>    Function DocTypeNode Returns Handle
93605>>>>>>>>>        Handle hinfcDocType hoDocType
93605>>>>>>>>>        Get phDocType to hinfcDocType
93606>>>>>>>>>        If hinfcDocType ;            Get CreateXMLObject U_cXMLDOMDocumentType hinfcDocType to hoDocType
93609>>>>>>>>>        Function_Return hoDocType
93610>>>>>>>>>    End_Function
93611>>>>>>>>>
93611>>>>>>>>>    Function phXMLErrorObject Returns Handle
93613>>>>>>>>>        Integer hoParseErrorObject
93613>>>>>>>>>        Integer hInfcParseError
93613>>>>>>>>>        Get phParseError to hInfcParseError
93614>>>>>>>>>        If hInfcParseError ;            Get CreateXMLObject U_cXMLDOMParseError hinfcParseError to hoParseErrorObject
93617>>>>>>>>>        Function_Return hoParseErrorObject
93618>>>>>>>>>    End_Function
93619>>>>>>>>>
93619>>>>>>>>>    //  The following procedure is meant to be overridden by one provided by the developer.
93619>>>>>>>>>
93619>>>>>>>>>    Procedure BasicParseErrorReport
93621>>>>>>>>>        String sProblem
93621>>>>>>>>>        String sLinePosition
93621>>>>>>>>>        String sDescr
93621>>>>>>>>>        String sReason
93621>>>>>>>>>        String sSource
93621>>>>>>>>>        Integer hoParseErrorObject
93621>>>>>>>>>        Get phXMLErrorObject to hoParseErrorObject
93622>>>>>>>>>        If hoParseErrorObject Begin
93624>>>>>>>>>            Move (SFormat(C_$CannotLoad, psDocumentName(Self)) + "."+character(13)+character(10)) to sProblem
93625>>>>>>>>>            Move (SFormat(C_$ParsingError, piLine(hoParseErrorObject), piLinePos(hoParseErrorObject))) to sLinePosition
93626>>>>>>>>>            Move (sLinePosition +character(13)+character(10)) to sLinePosition
93627>>>>>>>>>
93627>>>>>>>>>            Move (C_$Reason + ":" * (psReason(hoParseErrorObject))  +character(13)+character(10)) to sReason
93628>>>>>>>>>            Move (C_$Source + ":" * (psSrcText(hoParseErrorObject))) to sSource
93629>>>>>>>>>            Move (sProblem + sLinePosition + sReason + sSource) to sDescr
93630>>>>>>>>>            Error DFERR_XML_INTERNAL_ERROR sDescr
93631>>>>>>>>>>
93631>>>>>>>>>            Send Destroy of hoParseErrorObject
93632>>>>>>>>>        End
93632>>>>>>>>>>
93632>>>>>>>>>        Else ;            Error DFERR_XML_INTERNAL_ERROR C_$NotCreatedParseObject
93634>>>>>>>>>    End_Procedure
93635>>>>>>>>>
93635>>>>>>>>>    // bind an xml interface node to the passed XML object. If the
93635>>>>>>>>>    // object type is of the wrong type, we will destroy it and recreate it
93635>>>>>>>>>    // which is why hoNode is passed byRef.
93635>>>>>>>>>    // to use this you'd have to use the lower level private messages to get the
93635>>>>>>>>>    // xml interface handles and then bind them to an object. Just like in COM you could
93635>>>>>>>>>    // bind these to the same object, which might save some parsing time. This is made private
93635>>>>>>>>>    // because the time savings would probably be small and would not justify the extra
93635>>>>>>>>>    // complexity.
93635>>>>>>>>>    // It is a programming error to pass this a zero handle.
93635>>>>>>>>>    Procedure BindXMLInfc Handle hInfc Handle ByRef hoNode
93637>>>>>>>>>        Integer iType iClassId iType2
93637>>>>>>>>>        Get piNodeType of hoNode to iType2 // type of the DF XML object
93638>>>>>>>>>        
93638>>>>>>>>>        // Get the node type of the infc handle w/o creating a DF object
93638>>>>>>>>>        Move (invokexml(DF_IXMLDOMNODE, GET_piNodeType, hinfc, 0, 0, 0, 0)) to iType
93639>>>>>>>>>        Move (invokexml(DF_IXMLDOMNODE, GET_ChangeNodeType, hinfc, iType, 1, 0, 0)) to hInfc
93640>>>>>>>>>        If (hinfc=0) Begin
93642>>>>>>>>>            // this should not happen and we would need to know about this.
93642>>>>>>>>>            Error DFERR_XML_INTERNAL_ERROR (C_$XmlFailedNoDocObject + String(iType))
93643>>>>>>>>>>
93643>>>>>>>>>            Function_Return 0
93644>>>>>>>>>        End
93644>>>>>>>>>>
93644>>>>>>>>>        // if the type is the same we can reuse the current object and binding it to the interface pointer
93644>>>>>>>>>        If (iType=iType2) Begin
93646>>>>>>>>>            // resuse Self and return
93646>>>>>>>>>            Set XMLInterface of hoNode to hInfc
93647>>>>>>>>>        End
93647>>>>>>>>>>
93647>>>>>>>>>        // if diffrent type, destroy the existing object and recreate it
93647>>>>>>>>>        Else Begin
93648>>>>>>>>>            Send Destroy of hoNode
93649>>>>>>>>>            Get NodeClassId iType to iClassId
93650>>>>>>>>>            Get CreateXMLObject iClassId hInfc to hoNode
93651>>>>>>>>>        End
93651>>>>>>>>>>
93651>>>>>>>>>    End_Procedure
93652>>>>>>>>>    
93652>>>>>>>>>    Function ValidateDocument Returns Handle
93654>>>>>>>>>        Handle hParseErrorIntf hoParseError
93654>>>>>>>>>        Forward Get ValidateDocument to hParseErrorIntf
93656>>>>>>>>>        If hParseErrorIntf Begin
93658>>>>>>>>>            Get CreateXMLObject U_cXMLDOMParseError hParseErrorIntf to hoParseError
93659>>>>>>>>>        End
93659>>>>>>>>>>
93659>>>>>>>>>        Function_Return hoParseError
93660>>>>>>>>>    End_Function
93661>>>>>>>>>    
93661>>>>>>>>>    Function AddExternalSchemaDocument String sSchema Handle hoSchema Returns Boolean
93663>>>>>>>>>        Handle hInfc
93663>>>>>>>>>        Boolean bOk
93663>>>>>>>>>        Get XmlInterface of hoSchema to hInfc
93664>>>>>>>>>        Forward Get AddExternalSchemaDocument sSchema hInfc to bOk
93666>>>>>>>>>        Function_Return (not(bOk))
93667>>>>>>>>>    End_Function
93668>>>>>>>>>        
93668>>>>>>>>>    Function AddExternalSchemaFile String sSchema String sFile Returns Boolean
93670>>>>>>>>>        Boolean bOk
93670>>>>>>>>>        Forward Get AddExternalSchemaFile sSchema sFile to bOk
93672>>>>>>>>>        Function_Return (not(bOk))
93673>>>>>>>>>    End_Function
93674>>>>>>>>>
93674>>>>>>>>>    Procedure Set psSelectionNamespaces String sNamespaces
93676>>>>>>>>>        Set psDomSecondLevelProperty "SelectionNamespaces" to sNamespaces
93677>>>>>>>>>    End_Procedure
93678>>>>>>>>>
93678>>>>>>>>>    Function psSelectionNamespaces Returns String
93680>>>>>>>>>        String  sNamespaces
93680>>>>>>>>>        Get psDomSecondLevelProperty "SelectionNamespaces" to sNamespaces
93681>>>>>>>>>        Function_Return sNamespaces
93682>>>>>>>>>    End_Function
93683>>>>>>>>>    
93683>>>>>>>>>    Procedure Set pbMultipleErrorMessages Boolean bMultipleErrors
93685>>>>>>>>>        Set pbDomSecondLevelProperty "MultipleErrorMessages" to bMultipleErrors
93686>>>>>>>>>    End_Procedure
93687>>>>>>>>>
93687>>>>>>>>>    Function pbMultipleErrorMessages Returns Boolean
93689>>>>>>>>>        Boolean bMultipleErrors
93689>>>>>>>>>        Get pbDomSecondLevelProperty "MultipleErrorMessages" to bMultipleErrors
93690>>>>>>>>>        Function_Return bMultipleErrors
93691>>>>>>>>>    End_Function
93692>>>>>>>>>    
93692>>>>>>>>>    Procedure ErrorCreatingXMLObject
93694>>>>>>>>>        Error DFERR_XML_INTERNAL_ERROR "Could not create XML COM object. MSXML6 may not be properly installed and registered."
93695>>>>>>>>>>
93695>>>>>>>>>    End_Procedure
93696>>>>>>>>>    
93696>>>>>>>>>
93696>>>>>>>>>End_Class
93697>>>>>>>>>
93697>>>>>>>Use RegistryAPI.pkg
93697>>>>>>>// Xml Translate modes
93697>>>>>>>//
93697>>>>>>>Enum_list
93697>>>>>>>    Define xtNoTranslate    // no translation
93697>>>>>>>    Define xtUtf8toOem      // from UTF-8 to OEM
93697>>>>>>>    Define xtOemtoUtf8      // from OEM to UTF-8
93697>>>>>>>End_Enum_list
93697>>>>>>>
93697>>>>>>>// these define the three characters that define BOM for utf8.
93697>>>>>>>// These serve no purpos and are rarely used. If used they must be removed 
93697>>>>>>>Define C_BOM1 for |CI$EF
93697>>>>>>>Define C_BOM2 for |CI$BB
93697>>>>>>>Define C_BOM3 for |CI$BF
93697>>>>>>>
93697>>>>>>>
93697>>>>>>>
93697>>>>>>>// define Xml transfer status codes used by peXmlTransferStatus
93697>>>>>>>Enum_list
93697>>>>>>>    define xtsOk                 // ok
93697>>>>>>>    define xtsHttpRequestFailed  // the post/get http request returned an error
93697>>>>>>>    define xtsBadRequest         // Request data is bad or missing
93697>>>>>>>    define xtsInvalidContentType // response content type not xml
93697>>>>>>>    define xtsNoData             // return has no data
93697>>>>>>>    define xtsNotXml             // return value not XML (could not load in object)
93697>>>>>>>    define xtsError              // unspecified return error
93697>>>>>>>end_enum_list
93697>>>>>>>
93697>>>>>>>
93697>>>>>>>Class cXmlHttpTransfer is a cHttpTransfer
93698>>>>>>>
93698>>>>>>>   Procedure Construct_Object
93700>>>>>>>      Forward send Construct_object
93702>>>>>>>
93702>>>>>>>      Property Integer peTranslateSent     xtOemtoUtf8  // translation mode for sent posted data
93703>>>>>>>
93703>>>>>>>      Property Integer peTranslateReceived xtUtf8toOem  // tranlation mode for received data
93704>>>>>>>
93704>>>>>>>      Property String  psContentTypeSent "text/xml; charset=utf-8"     // default content type for posted data
93705>>>>>>>
93705>>>>>>>      Property Boolean pbClearHeaders      True         // should headers always be cleared before a post
93706>>>>>>>
93706>>>>>>>      property address paDataReceived 0                 // maintained by object
93707>>>>>>>
93707>>>>>>>      property integer piDataReceivedLength 0           // maintained by object
93708>>>>>>>
93708>>>>>>>      Property String  psContentTypeReceived ''         // content type received
93709>>>>>>>
93709>>>>>>>      Property String  psContentTypeExpected 'text/xml' // content type received - expected value should be contained in here.
93710>>>>>>>
93710>>>>>>>      Property Boolean pbDataRequiredSent True
93711>>>>>>>      Property Boolean pbDataRequiredReceived True
93712>>>>>>>      Property Integer peXmlTransferStatus xtsOk
93713>>>>>>>   end_procedure
93714>>>>>>>
93714>>>>>>>   // private helper function. Convert data passed by pointer to an XML document.
93714>>>>>>>   // return 0, if error
93714>>>>>>>   //
93714>>>>>>>   Function DatatoXml address aXml returns handle
93716>>>>>>>       integer iVoid bOk
93716>>>>>>>       Handle hoXml
93716>>>>>>>       Move 0 to hoXml
93717>>>>>>>       // Create the XML dom object at the desktop level so it does not get destroyed
93717>>>>>>>       // when this cXmlHttpTransfer object is destroyed.
93717>>>>>>>       Get Create of desktop U_cXmlDomDocument to hoXml
93718>>>>>>>       Get LoadXmlFromAddress of hoXml aXml to bOk
93719>>>>>>>       If not bOk Begin
93721>>>>>>>           Send Destroy of hoXml
93722>>>>>>>           Move 0 to hoXml
93723>>>>>>>       end
93723>>>>>>>>
93723>>>>>>>       Function_return hoXml
93724>>>>>>>   end_function
93725>>>>>>>
93725>>>>>>>   // Translate data. pass: Data and translation mode.
93725>>>>>>>   //     returns pointer to new translated data 0 if no translate needed.
93725>>>>>>>   //     Passed data is not changed.
93725>>>>>>>   // Currently we support: xtUtf8toOem, xtOemtoUtf8 and xtNoTranslate
93725>>>>>>>   // This is an excellent candidate for augmentation to add more modes
93725>>>>>>>   //
93725>>>>>>>   Function TranslateData integer eXlt address aData integer iDataLen returns address
93727>>>>>>>       address aDataXlt
93727>>>>>>>       Case Begin
93727>>>>>>>          Case (eXlt=xtUtf8toOem)
93729>>>>>>>              Move (Utf8toOemBuffer(aData,iDataLen)) to aDataXlt
93730>>>>>>>              case Break
93731>>>>>>>          Case (eXlt=xtOemtoUtf8)
93734>>>>>>>              Move (OemToUtf8Buffer(aData,iDataLen)) to aDataXlt
93735>>>>>>>              case Break
93736>>>>>>>          case else
93736>>>>>>>              Move 0 to aDataXlt
93737>>>>>>>       Case End
93737>>>>>>>       Function_return aDataXlt
93738>>>>>>>   End_function
93739>>>>>>>
93739>>>>>>>   // Clear paDataReceived and free any memory associated w/ pointer
93739>>>>>>>   //
93739>>>>>>>   Procedure ClearDataReceived
93741>>>>>>>        address aDataReceived
93741>>>>>>>        integer iVoid
93741>>>>>>>        Get paDataReceived to aDataReceived
93742>>>>>>>        If (aDataReceived<>0) ;            Move (Free(aDataReceived)) to iVoid
93745>>>>>>>        Set paDataReceived to 0
93746>>>>>>>        Set piDataReceivedLength to 0
93747>>>>>>>   End_procedure
93748>>>>>>>
93748>>>>>>>   // augment to release any memory in paDataReceived
93748>>>>>>>   //
93748>>>>>>>   procedure Destroy_Object
93750>>>>>>>       Send ClearDataReceived
93751>>>>>>>       forward send Destroy_object
93753>>>>>>>   end_procedure
93754>>>>>>>
93754>>>>>>>   // translate data in paReveived based on peTranslateReceived property.
93754>>>>>>>   // This clears the data received buffer and returns zero terminated memory pointer
93754>>>>>>>   // you create invalid translations
93754>>>>>>>   //
93754>>>>>>>   Function TranslateDataReceived returns Address
93756>>>>>>>       address aDataReceived aDataReceivedXlt
93756>>>>>>>       Get paDataReceived to aDataReceived
93757>>>>>>>       Get TranslateData (peTranslateReceived(self)) aDataReceived (piDataReceivedLength(self)) to aDataReceivedXlt
93758>>>>>>>       if (aDataReceivedXLT<>0) ;  // if translation occurred,          Send ClearDataReceived   // clear out the original received data
93761>>>>>>>       else Begin
93762>>>>>>>          Move aDataReceived to aDataReceivedXlt // if no translation, just point to the existing data
93763>>>>>>>          Set paDataReceived to 0                // and remove the object's access to that data
93764>>>>>>>          Set piDataReceivedLength to 0
93765>>>>>>>       end
93765>>>>>>>>
93765>>>>>>>       Function_Return aDataReceivedXlt
93766>>>>>>>   end_function
93767>>>>>>>
93767>>>>>>>   // called during http transfer. Take passed data and append to paDataReceived.
93767>>>>>>>   // If new transfer save contenttype.
93767>>>>>>>   //
93767>>>>>>>   Procedure OnDataReceived string sContentType string sData
93769>>>>>>>        integer bOk iVoid
93769>>>>>>>        address aOldData
93769>>>>>>>        address aNewData
93769>>>>>>>        integer iOldDataLen
93769>>>>>>>        integer iDataLen
93769>>>>>>>        integer iNewLen
93769>>>>>>>        Move (length(sData)) to iDataLen
93770>>>>>>>        If (iDatalen>0) Begin // if passed data is empty--do nothing
93772>>>>>>>            Get paDataReceived to aOldData
93773>>>>>>>            If (aOldData=0) Begin                           // first time called, new data
93775>>>>>>>
93775>>>>>>>                // check for BOM (Byte Order Marker) at the start of the file.
93775>>>>>>>                // if found remove it as it serves no purpose and messes up the translate logic.                
93775>>>>>>>                If (iDataLen>3 and Ascii(Left(sData,1))=C_BOM1 and Ascii(Mid(sData,1,2))=C_BOM2 and Ascii(Mid(sData,1,3))=C_BOM3) Begin
93777>>>>>>>                    Move (Remove(sData,1,3)) to sData
93778>>>>>>>                    Move (iDataLen-3) to iDataLen
93779>>>>>>>                End
93779>>>>>>>>
93779>>>>>>>                
93779>>>>>>>                Set psContentTypeReceived to sContentType   // store content type
93780>>>>>>>                Move (Alloc(iDataLen+1)) to aNewData  // alloc extra byte for zero termination...just in case.
93781>>>>>>>                Move 0 to iOldDataLen
93782>>>>>>>                Move iDataLen to iNewLen
93783>>>>>>>            end
93783>>>>>>>>
93783>>>>>>>            Else Begin
93784>>>>>>>                Get piDataReceivedLength to iOldDataLen
93785>>>>>>>                Move (iOldDataLen+iDataLen) to iNewLen
93786>>>>>>>                Move (ReAlloc(aOldData,iNewLen+1)) to aNewData // note extra byte at end
93787>>>>>>>            end
93787>>>>>>>>
93787>>>>>>>            Move (memcopy(aNewData+iOldDataLen, AddressOf(sData), iDataLen)) to bOk // copy on top of term zero
93788>>>>>>>            Move (StoreC(aNewData,iNewLen,0)) to iVoid // add terminating zero at end.
93789>>>>>>>            Set paDataReceived to aNewData
93790>>>>>>>            set piDataReceivedLength to iNewLen // length does not include term zero
93791>>>>>>>        End
93791>>>>>>>>
93791>>>>>>>   end_procedure
93792>>>>>>>
93792>>>>>>>   // Post and Receive XML data via node. Returns 0 if failure (could not xfer, bad data, etc.)
93792>>>>>>>   //
93792>>>>>>>   Function HttpPostXmlNode  string sHost string sFilePath handle  hoXmlNode returns handle
93794>>>>>>>       address aXmlNode aXml
93794>>>>>>>       integer iVoid iLen
93794>>>>>>>       handle hoXml
93794>>>>>>>
93794>>>>>>>       Move 0 to aXmlNode
93795>>>>>>>       Move 0 to iLen
93796>>>>>>>       // if the node is zero, this might be an error. We will test for this later
93796>>>>>>>       // by seeing if the address point is 0 or the length is 0
93796>>>>>>>       If (hoXmlNode<>0) Begin
93798>>>>>>>           Get paXml of hoXmlNode to aXmlNode
93799>>>>>>>           if (aXmlNode<>0) ;              Move (CStringLength(aXmlNode)) to iLen // we assume data from paXml is always zero terminated
93802>>>>>>>              //Move (Length(aXmlNode)) to iLen // we assume data from paXml is always zero terminated
93802>>>>>>>       end
93802>>>>>>>>
93802>>>>>>>       Get HttpPostXmlAddr sHost sFilePath aXmlNode iLen to aXml
93803>>>>>>>       If aXmlNode ;           Move (free(aXmlNode)) to iVoid
93806>>>>>>>
93806>>>>>>>       // if data is returned (aXML) it is non-zero and content type is correct.
93806>>>>>>>       // if no data, an error has been registered or no data is an ok condition
93806>>>>>>>       If (aXml<>0) Begin
93808>>>>>>>           Get DatatoXml aXml to hoXml
93809>>>>>>>           If (hoXml=0) Begin
93811>>>>>>>               // this indicates that data was returned but it could not be loaded as XML
93811>>>>>>>               Set peXmlTransferStatus to xtsNotXml
93812>>>>>>>               // store the bad data for debugging purposes
93812>>>>>>>               Set paDataReceived to aXml
93813>>>>>>>               Set piDataReceivedLength to (CStringLength(aXml))
93814>>>>>>>               //Set piDataReceivedLength to (Length(aXml))
93814>>>>>>>           end
93814>>>>>>>>
93814>>>>>>>           Else Begin
93815>>>>>>>               Move (Free(aXml)) to iVoid
93816>>>>>>>           end
93816>>>>>>>>
93816>>>>>>>       end
93816>>>>>>>>
93816>>>>>>>       else begin
93817>>>>>>>          Move 0 to hoXml
93818>>>>>>>       end
93818>>>>>>>>
93818>>>>>>>       Function_return hoXml
93819>>>>>>>   end_function
93820>>>>>>>
93820>>>>>>>   Function HttpPostXmlString string sHost string sFilePath string  sXml returns string
93822>>>>>>>       Address aXml
93822>>>>>>>       integer iVoid
93822>>>>>>>       Get HttpPostXmlAddr sHost sFilePath (AddressOf(sXml)) (Length(sXml)) to aXml
93823>>>>>>>       If (aXml<>0) Begin
93825>>>>>>>          Move aXml to sXml           // if data returned, assign to string
93826>>>>>>>          Move (Free(aXml)) to iVoid  // and free data
93827>>>>>>>       end
93827>>>>>>>>
93827>>>>>>>       Else ;          Move '' to sXml
93829>>>>>>>       function_return sXml
93830>>>>>>>   End_function
93831>>>>>>>
93831>>>>>>>   Function HttpPostXmlAddr  string sHost string sFilePath address aXml integer iLen returns Address
93833>>>>>>>        integer bOk iVoid
93833>>>>>>>        address aXmlXlt
93833>>>>>>>        address aDataReceived
93833>>>>>>>        Boolean bDataRequiredSent bDataRequiredReceived
93833>>>>>>>        string sContentTypeReceived sContentTypeExpected
93833>>>>>>>
93833>>>>>>>        Get pbDataRequiredSent     to bDataRequiredSent
93834>>>>>>>        Get pbDataRequiredReceived to bDataRequiredReceived
93835>>>>>>>
93835>>>>>>>
93835>>>>>>>        // This checks that data exists. If it exists, we assume it is XML format which
93835>>>>>>>        // will always be true when you use HttpXmlNode
93835>>>>>>>        If (bDataRequiredSent and (aXML=0 or iLen=0)) Begin
93837>>>>>>>            Set peXmlTransferStatus to xtsBadRequest
93838>>>>>>>            Function_return 0
93839>>>>>>>        end
93839>>>>>>>>
93839>>>>>>>
93839>>>>>>>        // translate data if needed, returns 0 if no translation
93839>>>>>>>        If (aXML<>0) Begin
93841>>>>>>>            Get TranslateData (peTranslateSent(self)) aXml iLen to aXmlXlt
93842>>>>>>>        end
93842>>>>>>>>
93842>>>>>>>        If (aXmlXlt<>0) begin
93844>>>>>>>            Move (CStringLength(aXmlXlt)) to iLen // if translated...assume zero termination at end
93845>>>>>>>            //Move (Length(aXmlXlt)) to iLen // if translated...assume zero termination at end
93845>>>>>>>            Get HttpPostXmlAddrNoXlt sHost sFilepath aXmlXlt iLen to bOk
93846>>>>>>>            Move (Free(aXmlXlt)) to iVoid // no longer need tranlsated data
93847>>>>>>>        end
93847>>>>>>>>
93847>>>>>>>        Else ;            Get HttpPostXmlAddrNoXlt sHost sFilepath aXml iLen to bOk
93849>>>>>>>
93849>>>>>>>        If bOk Begin
93851>>>>>>>           Set peXmlTransferStatus to xtsOk
93852>>>>>>>           Get TranslateDataReceived to aDataReceived   // current pointer to data (is returned)
93853>>>>>>>        end
93853>>>>>>>>
93853>>>>>>>        else Begin
93854>>>>>>>            Set peXmlTransferStatus to xtsHttpRequestFailed
93855>>>>>>>            Send ClearDataReceived               // if error, clear data
93856>>>>>>>            Move 0 to aDataReceived              // and return 0
93857>>>>>>>            Function_return 0
93858>>>>>>>        End
93858>>>>>>>>
93858>>>>>>>
93858>>>>>>>        // I am not sure this could ever happen. But if length is 0, we have no data
93858>>>>>>>        //If (aDataReceived and Length(aDataReceived)=0) Begin
93858>>>>>>>        If (aDataReceived and CStringLength(aDataReceived)=0) Begin
93860>>>>>>>            Move (Free(aDataReceived)) to iVoid
93861>>>>>>>            Move 0 to aDataReceived
93862>>>>>>>        end
93862>>>>>>>>
93862>>>>>>>
93862>>>>>>>        If aDataReceived Begin
93864>>>>>>>            // we have data, check that the content type is ok. This is as far
93864>>>>>>>            // as we can go here.
93864>>>>>>>            Get psContentTypeReceived to sContentTypeReceived
93865>>>>>>>            Get psContentTypeExpected to sContentTypeExpected
93866>>>>>>>            // If contentType expected is empty, we allow anything
93866>>>>>>>            If (sContentTypeExpected<>"" And pos(sContentTypeExpected,sContentTypeReceived)=0) Begin
93868>>>>>>>                 Set peXmlTransferStatus to xtsInvalidContentType
93869>>>>>>>                 // store the bad data for debugging purposes
93869>>>>>>>                 Set paDataReceived to aDataReceived
93870>>>>>>>                 Set piDataReceivedLength to (CStringLength(aDataReceived))
93871>>>>>>>                 //Set piDataReceivedLength to (Length(aDataReceived))
93871>>>>>>>                 Move 0 to aDataReceived
93872>>>>>>>            end
93872>>>>>>>>
93872>>>>>>>        end
93872>>>>>>>>
93872>>>>>>>        Else if (bDataRequiredReceived) Begin // data is zero but required
93875>>>>>>>            Set peXmlTransferStatus to xtsNodata
93876>>>>>>>        end
93876>>>>>>>>
93876>>>>>>>        Function_return aDataReceived
93877>>>>>>>   End_Procedure
93878>>>>>>>
93878>>>>>>>   Function HttpPostXmlAddrNoXlt  string sHost string sFilePath address aXml integer iLen returns integer
93880>>>>>>>        Boolean bOk
93880>>>>>>>        Integer iError
93880>>>>>>>        Send ClearDataReceived  // this should be zero, just in case it is not
93881>>>>>>>        Set psRemoteHost to sHost
93882>>>>>>>        // You need to clear headers between posts. If you need to set custom headers you should
93882>>>>>>>        // set pbClearHeaders to false and then manually send ClearHeaders and AddHeaders in your code
93882>>>>>>>        If (pbClearHeaders(self)) ;            Send ClearHeaders
93885>>>>>>>        Get AddHeader "CONTENT-TYPE" (psContentTypeSent(self)) to bok
93886>>>>>>>        Get HttpPostAddrRequest sFilePath aXml iLen False to bOK
93887>>>>>>>        function_return bOk
93888>>>>>>>   End_Procedure
93889>>>>>>>
93889>>>>>>>
93889>>>>>>>   Function HttpGetXmlNode  string sHost string sFilePath returns handle
93891>>>>>>>       address aXml
93891>>>>>>>       integer iVoid
93891>>>>>>>       Handle hoXml
93891>>>>>>>       Get HttpGetXmlAddr sHost sFilePath to aXml
93892>>>>>>>       // if data is returned (aXML) it is non-zero and content type is correct.
93892>>>>>>>       // if no data, an error has been registered or no data is an ok condition
93892>>>>>>>       If (aXml<>0) Begin
93894>>>>>>>           Get DatatoXml aXml to hoXml
93895>>>>>>>           If (hoXml=0) Begin
93897>>>>>>>               // this indicates that data was returned but it could not be loaded as XML
93897>>>>>>>               Set peXmlTransferStatus to xtsNotXml
93898>>>>>>>               // store the bad data for debugging purposes
93898>>>>>>>               Set paDataReceived to aXml
93899>>>>>>>               Set piDataReceivedLength to (CStringLength(aXml))
93900>>>>>>>               //Set piDataReceivedLength to (Length(aXml))
93900>>>>>>>           end
93900>>>>>>>>
93900>>>>>>>           Else Begin
93901>>>>>>>               Move (Free(aXml)) to iVoid
93902>>>>>>>           end
93902>>>>>>>>
93902>>>>>>>       end
93902>>>>>>>>
93902>>>>>>>       else begin
93903>>>>>>>          Move 0 to hoXml
93904>>>>>>>       end
93904>>>>>>>>
93904>>>>>>>       Function_return hoXml
93905>>>>>>>   end_function
93906>>>>>>>
93906>>>>>>>   Function HttpGetXmlString string sHost string sFilePath returns string
93908>>>>>>>       Address aXml
93908>>>>>>>       string  sXml
93908>>>>>>>       integer iVoid
93908>>>>>>>       Get HttpGetXmlAddr sHost sFilePath to aXml
93909>>>>>>>       If (aXml<>0) Begin
93911>>>>>>>          Move aXml to sXml           // if data returned, assign to string
93912>>>>>>>          Move (Free(aXml)) to iVoid  // and free data
93913>>>>>>>       end
93913>>>>>>>>
93913>>>>>>>       else ;          Move '' to sXml
93915>>>>>>>       function_return sXml
93916>>>>>>>   End_function
93917>>>>>>>
93917>>>>>>>   Function HttpGetXmlAddr  string sHost string sFilePath returns Address
93919>>>>>>>        integer bOk iVoid
93919>>>>>>>        address aDataReceived
93919>>>>>>>        Boolean bDataRequiredReceived
93919>>>>>>>        string sContentTypeReceived sContentTypeExpected
93919>>>>>>>
93919>>>>>>>        Get pbDataRequiredReceived to bDataRequiredReceived
93920>>>>>>>
93920>>>>>>>        Get HttpGetXmlNoXlt sHost sFilepath to bOk
93921>>>>>>>        If bOk Begin
93923>>>>>>>           Set peXmlTransferStatus to xtsOk
93924>>>>>>>           Get TranslateDataReceived to aDataReceived   // current pointer to data (is returned)
93925>>>>>>>        end
93925>>>>>>>>
93925>>>>>>>        else Begin
93926>>>>>>>            Set peXmlTransferStatus to xtsHttpRequestFailed
93927>>>>>>>            Send ClearDataReceived               // if error, clear data
93928>>>>>>>            Move 0 to aDataReceived              // and return 0
93929>>>>>>>            Function_return 0
93930>>>>>>>        End
93930>>>>>>>>
93930>>>>>>>
93930>>>>>>>        // I am not sure this could ever happen. But if length is 0, we have no data
93930>>>>>>>        //If (aDataReceived and Length(aDataReceived)=0) Begin
93930>>>>>>>        If (aDataReceived and CStringLength(aDataReceived)=0) Begin
93932>>>>>>>            Move (Free(aDataReceived)) to iVoid
93933>>>>>>>            Move 0 to aDataReceived
93934>>>>>>>        end
93934>>>>>>>>
93934>>>>>>>
93934>>>>>>>        If aDataReceived Begin
93936>>>>>>>            // we have data, check that the content type is ok. This is as far
93936>>>>>>>            // as we can go here.
93936>>>>>>>            Get psContentTypeReceived to sContentTypeReceived
93937>>>>>>>            Get psContentTypeExpected to sContentTypeExpected
93938>>>>>>>            // If contentType expected is empty, we allow anything
93938>>>>>>>            If (sContentTypeExpected<>"" And pos(sContentTypeExpected,sContentTypeReceived)=0) Begin
93940>>>>>>>                 Set peXmlTransferStatus to xtsInvalidContentType
93941>>>>>>>                 // store the bad data for debugging purposes
93941>>>>>>>                 Set paDataReceived to aDataReceived
93942>>>>>>>                 Set piDataReceivedLength to (CStringLength(aDataReceived))
93943>>>>>>>                 //Set piDataReceivedLength to (Length(aDataReceived))
93943>>>>>>>                 Move 0 to aDataReceived
93944>>>>>>>            end
93944>>>>>>>>
93944>>>>>>>        end
93944>>>>>>>>
93944>>>>>>>        Else if (bDataRequiredReceived) Begin // data is zero but required
93947>>>>>>>            Set peXmlTransferStatus to xtsNodata
93948>>>>>>>        end
93948>>>>>>>>
93948>>>>>>>        Function_return aDataReceived
93949>>>>>>>   End_Procedure
93950>>>>>>>
93950>>>>>>>   // low level get - no translation of data. returns received data in paDataReceived
93950>>>>>>>   //
93950>>>>>>>   Function HttpGetXmlNoXlt  string sHost string sFilePath returns Integer
93952>>>>>>>        Integer bOk
93952>>>>>>>        Send ClearDataReceived  // this should be zero, just in case it is not
93953>>>>>>>        Set psRemoteHost to sHost
93954>>>>>>>        Get HttpGetRequest sFilePath to bOK
93955>>>>>>>        Function_return bOk
93956>>>>>>>   End_Procedure
93957>>>>>>>
93957>>>>>>>   // After an XML xfer request this message can be sent to display an error message if one occurred.
93957>>>>>>>   // Normally you would first check peXmlTransferStatus to see if it is not xtsOk. If not, send
93957>>>>>>>   // LastError to see the error
93957>>>>>>>
93957>>>>>>>   // return last xml transfer error text
93957>>>>>>>   Function TransferErrorDescription returns string
93959>>>>>>>        string  sError sFaultCode sFaultString sText sType
93959>>>>>>>        integer eXmlTransferStatus
93959>>>>>>>        Get peXmlTransferStatus to eXmlTransferStatus
93960>>>>>>>        Case Begin
93960>>>>>>>            case (eXmlTransferStatus=xtsOk)                 Move ''                             to sError
93963>>>>>>>            case (eXmlTransferStatus=xtsHttpRequestFailed)  Move C_$HttpRequestFailed           to sError
93967>>>>>>>            case (eXmlTransferStatus=xtsBadRequest)         Move C_$BadOrMissingDataSent        to sError
93971>>>>>>>            case (eXmlTransferStatus=xtsInvalidContentType) Move (SFormat(C_$InvalidContentTypeReceived,psContentTypeReceived(self))) to sError
93975>>>>>>>            case (eXmlTransferStatus=xtsNoData)             Move C_$NoDataWasReceived           to sError
93979>>>>>>>            case (eXmlTransferStatus=xtsNotXml)             Move C_$ReceivedDataNotInXMLFormat  to sError
93983>>>>>>>            case else                                       Move C_$ReceivedDataIsBad           to sError
93985>>>>>>>        Case end
93985>>>>>>>        Function_return sError
93986>>>>>>>    end_function
93987>>>>>>>
93987>>>>>>>
93987>>>>>>>   Procedure LastError
93989>>>>>>>        integer eXmlTransferStatus
93989>>>>>>>        string sError
93989>>>>>>>
93989>>>>>>>        Get peXmlTransferStatus to eXmlTransferStatus
93990>>>>>>>        If (eXmlTransferStatus<>xtsOk) begin
93992>>>>>>>            Get TransferErrorDescription to sError
93993>>>>>>>            error DFERR_XML_HTTP sError
93994>>>>>>>>
93994>>>>>>>        end
93994>>>>>>>>
93994>>>>>>>   end_Procedure
93995>>>>>>>
93995>>>>>>>End_Class
93996>>>>>
93996>>>>>Class cVDFD_CE_XmlHttpTransfer is a cXmlHttpTransfer
93997>>>>>    
93997>>>>>    Procedure Construct_Object
93999>>>>>        Forward Send Construct_Object
94001>>>>>
94001>>>>>    End_Procedure
94002>>>>>
94002>>>>>    Procedure End_Construct_Object
94004>>>>>        Forward Send End_Construct_Object
94006>>>>>
94006>>>>>    End_Procedure
94007>>>>>
94007>>>>>End_Class
94008>>>Use Base\cVDFD_CE_DbBitmap.pkg
Including file: Base\cVDFD_CE_DbBitmap.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbBitmap.pkg)
94008>>>>>Use dbBitmap.pkg
94008>>>>>
94008>>>>>Class cVDFD_CE_DbBitmap is a dbBitmap
94009>>>>>    
94009>>>>>    Procedure Construct_Object
94011>>>>>        Forward Send Construct_Object
94013>>>>>
94013>>>>>    End_Procedure
94014>>>>>
94014>>>>>    Procedure End_Construct_Object
94016>>>>>        Forward Send End_Construct_Object
94018>>>>>
94018>>>>>    End_Procedure
94019>>>>>
94019>>>>>End_Class
94020>>>Use Base\cVDFD_CE_DbCheckbox.pkg
Including file: Base\cVDFD_CE_DbCheckbox.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbCheckbox.pkg)
94020>>>>>Use dfEnChk.pkg
94020>>>>>
94020>>>>>Class cVDFD_CE_DbCheckbox is a dbCheckbox
94021>>>>>    
94021>>>>>    Procedure Construct_Object
94023>>>>>        Forward Send Construct_Object
94025>>>>>
94025>>>>>    End_Procedure
94026>>>>>
94026>>>>>    Procedure End_Construct_Object
94028>>>>>        Forward Send End_Construct_Object
94030>>>>>
94030>>>>>    End_Procedure
94031>>>>>
94031>>>>>End_Class
94032>>>Use Base\cVDFD_CE_DbComboForm.pkg
Including file: Base\cVDFD_CE_DbComboForm.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbComboForm.pkg)
94032>>>>>Use dfcentry.pkg
94032>>>>>
94032>>>>>Class cVDFD_CE_DbComboForm is a dbComboForm
94033>>>>>    
94033>>>>>    Procedure Construct_Object
94035>>>>>        Forward Send Construct_Object
94037>>>>>
94037>>>>>    End_Procedure
94038>>>>>
94038>>>>>    Procedure End_Construct_Object
94040>>>>>        Forward Send End_Construct_Object
94042>>>>>
94042>>>>>    End_Procedure
94043>>>>>
94043>>>>>End_Class
94044>>>Use Base\cVDFD_CE_DbContainer3D.pkg
Including file: Base\cVDFD_CE_DbContainer3D.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbContainer3D.pkg)
94044>>>>>Use dfClient.pkg
94044>>>>>
94044>>>>>Class cVDFD_CE_DbContainer3D is a dbContainer3D
94045>>>>>    
94045>>>>>    Procedure Construct_Object
94047>>>>>        Forward Send Construct_Object
94049>>>>>
94049>>>>>    End_Procedure
94050>>>>>
94050>>>>>    Procedure End_Construct_Object
94052>>>>>        Forward Send End_Construct_Object
94054>>>>>
94054>>>>>    End_Procedure
94055>>>>>
94055>>>>>End_Class
94056>>>Use Base\cVDFD_CE_DbForm.pkg
Including file: Base\cVDFD_CE_DbForm.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbForm.pkg)
94056>>>>>Use dfEntry.pkg
94056>>>>>
94056>>>>>Class cVDFD_CE_DbForm is a dbForm
94057>>>>>    
94057>>>>>    Procedure Construct_Object
94059>>>>>        Forward Send Construct_Object
94061>>>>>
94061>>>>>    End_Procedure
94062>>>>>
94062>>>>>    Procedure End_Construct_Object
94064>>>>>        Forward Send End_Construct_Object
94066>>>>>
94066>>>>>    End_Procedure
94067>>>>>
94067>>>>>End_Class
94068>>>Use Base\cVDFD_CE_DbGrid.pkg
Including file: Base\cVDFD_CE_DbGrid.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbGrid.pkg)
94068>>>>>Use dfTable.pkg
94068>>>>>
94068>>>>>Class cVDFD_CE_DbGrid is a dbGrid
94069>>>>>    
94069>>>>>    Procedure Construct_Object
94071>>>>>        Forward Send Construct_Object
94073>>>>>
94073>>>>>    End_Procedure
94074>>>>>
94074>>>>>    Procedure End_Construct_Object
94076>>>>>        Forward Send End_Construct_Object
94078>>>>>
94078>>>>>    End_Procedure
94079>>>>>
94079>>>>>End_Class
94080>>>Use Base\cVDFD_CE_DbGroup.pkg
Including file: Base\cVDFD_CE_DbGroup.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbGroup.pkg)
94080>>>>>Use dfallent.pkg
94080>>>>>
94080>>>>>Class cVDFD_CE_DbGroup is a dbGroup
94081>>>>>    
94081>>>>>    Procedure Construct_Object
94083>>>>>        Forward Send Construct_Object
94085>>>>>
94085>>>>>    End_Procedure
94086>>>>>
94086>>>>>    Procedure End_Construct_Object
94088>>>>>        Forward Send End_Construct_Object
94090>>>>>
94090>>>>>    End_Procedure
94091>>>>>
94091>>>>>End_Class
94092>>>Use Base\cVDFD_CE_DbList.pkg
Including file: Base\cVDFD_CE_DbList.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbList.pkg)
94092>>>>>Use dfSelLst.pkg
94092>>>>>
94092>>>>>Class cVDFD_CE_DbList is a dbList
94093>>>>>    
94093>>>>>    Procedure Construct_Object
94095>>>>>        Forward Send Construct_Object
94097>>>>>
94097>>>>>    End_Procedure
94098>>>>>
94098>>>>>    Procedure End_Construct_Object
94100>>>>>        Forward Send End_Construct_Object
94102>>>>>
94102>>>>>    End_Procedure
94103>>>>>
94103>>>>>End_Class
94104>>>Use Base\cVDFD_CE_DbModalPanel.pkg
Including file: Base\cVDFD_CE_DbModalPanel.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbModalPanel.pkg)
94104>>>>>Use dfClient.pkg
94104>>>>>
94104>>>>>Class cVDFD_CE_DbModalPanel is a dbModalPanel
94105>>>>>    
94105>>>>>    Procedure Construct_Object
94107>>>>>        Forward Send Construct_Object
94109>>>>>
94109>>>>>    End_Procedure
94110>>>>>
94110>>>>>    Procedure End_Construct_Object
94112>>>>>        Forward Send End_Construct_Object
94114>>>>>
94114>>>>>    End_Procedure
94115>>>>>
94115>>>>>End_Class
94116>>>Use Base\cVDFD_CE_DbRadioGroup.pkg
Including file: Base\cVDFD_CE_DbRadioGroup.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbRadioGroup.pkg)
94116>>>>>Use dfEnRad.pkg
94116>>>>>
94116>>>>>Class cVDFD_CE_DbRadioGroup is a dbRadioGroup
94117>>>>>    
94117>>>>>    Procedure Construct_Object
94119>>>>>        Forward Send Construct_Object
94121>>>>>
94121>>>>>    End_Procedure
94122>>>>>
94122>>>>>    Procedure End_Construct_Object
94124>>>>>        Forward Send End_Construct_Object
94126>>>>>
94126>>>>>    End_Procedure
94127>>>>>
94127>>>>>End_Class
94128>>>Use Base\cVDFD_CE_DbSpinForm.pkg
Including file: Base\cVDFD_CE_DbSpinForm.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbSpinForm.pkg)
94128>>>>>Use dfSpnEnt.pkg
94128>>>>>
94128>>>>>Class cVDFD_CE_DbSpinForm is a dbSpinForm
94129>>>>>    
94129>>>>>    Procedure Construct_Object
94131>>>>>        Forward Send Construct_Object
94133>>>>>
94133>>>>>    End_Procedure
94134>>>>>
94134>>>>>    Procedure End_Construct_Object
94136>>>>>        Forward Send End_Construct_Object
94138>>>>>
94138>>>>>    End_Procedure
94139>>>>>
94139>>>>>End_Class
94140>>>Use Base\cVDFD_CE_DbTabDialog.pkg
Including file: Base\cVDFD_CE_DbTabDialog.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbTabDialog.pkg)
94140>>>>>// Source File: cVDFD_CE_DbTabDialog.pkg
94140>>>>>
94140>>>>>Use dfTabDlg.pkg
94140>>>>>
94140>>>>>Class cVDFD_CE_DbTabDialog is a dbTabDialog
94141>>>>>    
94141>>>>>    Procedure Construct_Object
94143>>>>>        Forward Send Construct_Object
94145>>>>>
94145>>>>>    End_Procedure
94146>>>>>
94146>>>>>    Procedure End_Construct_Object
94148>>>>>        Forward Send End_Construct_Object
94150>>>>>
94150>>>>>    End_Procedure
94151>>>>>
94151>>>>>End_Class   // cVDFD_CE_DbTabDialog
94152>>>>>
94152>>>>>// End of File: cVDFD_CE_DbTabDialog.pkg
94152>>>Use Base\cVDFD_CE_DbTabDialogView.pkg
Including file: Base\cVDFD_CE_DbTabDialogView.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbTabDialogView.pkg)
94152>>>>>Use dfTabDlg.pkg
94152>>>>>
94152>>>>>Class cVDFD_CE_DbTabDialogView is a dbTabDialogView
94153>>>>>    
94153>>>>>    Procedure Construct_Object
94155>>>>>        Forward Send Construct_Object
94157>>>>>
94157>>>>>    End_Procedure
94158>>>>>
94158>>>>>    Procedure End_Construct_Object
94160>>>>>        Forward Send End_Construct_Object
94162>>>>>
94162>>>>>    End_Procedure
94163>>>>>
94163>>>>>End_Class
94164>>>Use Base\cVDFD_CE_DbTrackbar.pkg
Including file: Base\cVDFD_CE_DbTrackbar.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbTrackbar.pkg)
94164>>>>>Use dbTrckBr.pkg
94164>>>>>
94164>>>>>Class cVDFD_CE_DbTrackbar is a dbTrackbar
94165>>>>>    
94165>>>>>    Procedure Construct_Object
94167>>>>>        Forward Send Construct_Object
94169>>>>>
94169>>>>>    End_Procedure
94170>>>>>
94170>>>>>    Procedure End_Construct_Object
94172>>>>>        Forward Send End_Construct_Object
94174>>>>>
94174>>>>>    End_Procedure
94175>>>>>
94175>>>>>End_Class
94176>>>Use Base\cVDFD_CE_DbView.pkg
Including file: Base\cVDFD_CE_DbView.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbView.pkg)
94176>>>>>//*****************************************************************************************
94176>>>>>// Copyright (c)  2004  Todd Forsberg d/b/a Threshold Software (VDFD)
94176>>>>>// All rights reserved.
94176>>>>>//
94176>>>>>// $Authors     : Todd Forsberg (todd_forsberg@hotmail.com)
94176>>>>>//
94176>>>>>// $FileName    :
94176>>>>>// $ProjectName : VDF Framework
94176>>>>>// $Created     :
94176>>>>>// $Type        :
94176>>>>>//
94176>>>>>// Contents:
94176>>>>>//
94176>>>>>//
94176>>>>>// Properties:
94176>>>>>//
94176>>>>>//
94176>>>>>// Methods:
94176>>>>>//
94176>>>>>//
94176>>>>>//
94176>>>>>//
94176>>>>>//*****************************************************************************************
94176>>>>>Use DfClient.pkg
94176>>>>>
94176>>>>>Class cVDFD_CE_DbView is a dbView
94177>>>>>    
94177>>>>>    Procedure Construct_Object
94179>>>>>        Forward Send Construct_Object
94181>>>>>
94181>>>>>    End_Procedure
94182>>>>>
94182>>>>>    Procedure End_Construct_Object
94184>>>>>        Forward Send End_Construct_Object
94186>>>>>
94186>>>>>    End_Procedure
94187>>>>>
94187>>>>>End_Class
94188>>>Use Base\cVDFD_CE_DfTimer.pkg
Including file: Base\cVDFD_CE_DfTimer.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DfTimer.pkg)
94188>>>>>Use dftimer.pkg
Including file: Dftimer.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\Dftimer.pkg)
94188>>>>>>>//************************************************************************
94188>>>>>>>//--- DFTimer   Timer package for DataFlex programs
94188>>>>>>>//
94188>>>>>>>// Copyright (c) 1983-2002 Data Access Corporation, Miami Florida,
94188>>>>>>>// All rights reserved.
94188>>>>>>>// DataFlex is a registered trademark of Data Access Corporation.
94188>>>>>>>//
94188>>>>>>>//************************************************************************
94188>>>>>>>//  Description:
94188>>>>>>>//      This package contains all components needed to implement timers
94188>>>>>>>//      in a DataFlex 4 program.
94188>>>>>>>//
94188>>>>>>>//
94188>>>>>>>//  Author: Eddy Kleinjan, Data Access Nederland
94188>>>>>>>//************************************************************************
94188>>>>>>>// 03/03/2001 EK  Fixed Timer_Active_State to check for valid windows
94188>>>>>>>//                handle before trying to set or kill a timer.
94188>>>>>>>//                Fixed Kill_All_Timers to check for valid windows
94188>>>>>>>//                handle before trying to kill a timer.
94188>>>>>>>//                The windows handle might not exist anymore when the
94188>>>>>>>//                program is being exited using Exit_Application.
94188>>>>>>>// 12/13/2001 JJT fixed Timer_Active_State to check for -1 (not 0). Fixed a
94188>>>>>>>//                a bug where set Timeout started inactive timers.
94188>>>>>>>//                Added code to force timer object to desktop
94188>>>>>>>//************************************************************************
94188>>>>>>>// CLASS DFTimer
94188>>>>>>>//
94188>>>>>>>// Usage:
94188>>>>>>>//    Object MyTimer is a DFTimer
94188>>>>>>>//
94188>>>>>>>//        Set Timeout to 2000                             // Default 1000
94188>>>>>>>//        Set Auto_Start_State to TRUE|FALSE              // Default TRUE
94188>>>>>>>//        Set Auto_Stop_State to TRUE|FALSE               // Default TRUE
94188>>>>>>>//        Set Timer_Message to MyMessage                  // Default 0
94188>>>>>>>//        Set Timer_Object to (MyObject(self))            // Default 0
94188>>>>>>>//        Set Timer_Active_State to TRUE|FALSE            // Default FALSE
94188>>>>>>>//
94188>>>>>>>//        // Augment when no Timer_Message
94188>>>>>>>//        Procedure OnTimer
94188>>>>>>>//            Send Info_Box "HEY, WAKE UP!"
94188>>>>>>>//        End_Procedure
94188>>>>>>>//
94188>>>>>>>//    End_Object
94188>>>>>>>//
94188>>>>>>>// DESCRIPTION
94188>>>>>>>//      Objects of this class can be used to trigger an event after a
94188>>>>>>>//      certain amount of time has passed. You can specify this time
94188>>>>>>>//      by setting the Timeout property of the object. This timeout
94188>>>>>>>//      is in miliseconds.
94188>>>>>>>//
94188>>>>>>>//      Whenever a timer event happens, it will notify the object by
94188>>>>>>>//      sending an OnTimer event. You can trap this event to do whatever
94188>>>>>>>//      you want the timer to do. By default this OnTimer event
94188>>>>>>>//      will send the Timer_Message to Timer_Object, when these have
94188>>>>>>>//      been specified.
94188>>>>>>>//
94188>>>>>>>//      By default, you have to activate a timer by setting its
94188>>>>>>>//      Timer_Active_State to TRUE. When the timer has been placed
94188>>>>>>>//      inside a user-interface object, it can also be activated
94188>>>>>>>//      automatically when this user-interface object is being
94188>>>>>>>//      activated. This only happes when it Auto_Start_State is TRUE,
94188>>>>>>>//      which is the default setting. In such a case, the timer will
94188>>>>>>>//      also automatically being stopped when the user-interface
94188>>>>>>>//      object is taken of the screen. This depends on the
94188>>>>>>>//      Auto_Stop_Timer state to happen.
94188>>>>>>>//
94188>>>>>>>//      When you need to set a new timeout value, you can do so
94188>>>>>>>//      even when the timer is active. It will adjust the timeout
94188>>>>>>>//      immediately.
94188>>>>>>>//
94188>>>>>>>//      Note that timer events depend on Windows for the delivery of
94188>>>>>>>//      the event. Since timer events get a low priority in Windows,
94188>>>>>>>//      it might put your program on hold when other programs are very
94188>>>>>>>//      busy. In such a case, you will only receive one timer event
94188>>>>>>>//      after the process stopped. There is no way, other than
94188>>>>>>>//      calculating it yourself, to determine how many time has passed
94188>>>>>>>//      or how many timer event should have happened since the last
94188>>>>>>>//      timer event or timer activation.
94188>>>>>>>//
94188>>>>>>>// PUBLIC INTERFACE
94188>>>>>>>//
94188>>>>>>>//    PROPERTIES
94188>>>>>>>//
94188>>>>>>>//    Auto_Start_State When TRUE (default) the timer will be activated
94188>>>>>>>//                     automatically when the object will be (virtually)
94188>>>>>>>//                     paged on the screen.
94188>>>>>>>//                     Example: When a timer object has been placed
94188>>>>>>>//                     inside a view, then the timer will be activated
94188>>>>>>>//                     when the view is activated.
94188>>>>>>>//
94188>>>>>>>//    Auto_Stop_State  When TRUE (default) the timer will be deactivated
94188>>>>>>>//                     automatically when the object will be (virtually)
94188>>>>>>>//                     taken off the screen.
94188>>>>>>>//
94188>>>>>>>//    Timeout          The timeout value for the timer to fire. The
94188>>>>>>>//                     timeout value must be set in miliseconds.
94188>>>>>>>//                     This property may be set even when the timer is
94188>>>>>>>//                     active. The new timeout value will be applied
94188>>>>>>>//                     immediately.
94188>>>>>>>//                     NOTE: The timeout set here is never precise. It
94188>>>>>>>//                     depends on Windows to deliver the message to our
94188>>>>>>>//                     application.
94188>>>>>>>//                     Default 1000.
94188>>>>>>>//
94188>>>>>>>//    Timer_Active_State
94188>>>>>>>//                     Set to TRUE to activate the timer, to FALSE to
94188>>>>>>>//                     deactivate the timer.
94188>>>>>>>//
94188>>>>>>>//
94188>>>>>>>//    Timer_Message    This property can be set to a messageID which has
94188>>>>>>>//                     to be sent whenever a timer event occurs. Default
94188>>>>>>>//                     this message will be send to the object itself
94188>>>>>>>//                     unless a Timer_Object as been specified.
94188>>>>>>>//
94188>>>>>>>//    Timer_Object     This property can be set to an objectID which has
94188>>>>>>>//                     to receive the Timer_Message whenever a timer
94188>>>>>>>//                     event occurs. This value has no meaning when
94188>>>>>>>//                     no Timer_Message has been set.
94188>>>>>>>//
94188>>>>>>>//    METHODS
94188>>>>>>>//
94188>>>>>>>//    OnTimer          This event will happen whenever the specified
94188>>>>>>>//                     amount of time has passed and the timer is
94188>>>>>>>//                     active. By default it sends the message in
94188>>>>>>>//                     the Timer_Message property to the object in
94188>>>>>>>//                     the Timer_Object when these have been specified.
94188>>>>>>>//                     When you don't need this, you can just override
94188>>>>>>>//                     the OnTimer event.
94188>>>>>>>//
94188>>>>>>>// PUBLIC INTERFACE
94188>>>>>>>//
94188>>>>>>>//    Page_Object      Has been augmented to auto_start the timer when
94188>>>>>>>//                     it becomes active as part or a user-interface
94188>>>>>>>//                     object.
94188>>>>>>>//
94188>>>>>>>//    Page_Delete      Has been augmented to auto_stop the timer when
94188>>>>>>>//                     it is deactivated as part or a user-interface
94188>>>>>>>//                     object.
94188>>>>>>>//
94188>>>>>>>//    Destroy_Object   Has been augmented to deactivate the timer.
94188>>>>>>>//
94188>>>>>>>Use LanguageText.pkg
94188>>>>>>>Use Windows.pkg
94188>>>>>>>Use WinUser.pkg
94188>>>>>>>
94188>>>>>>>External_Function SetTimer "SetTimer" User32.DLL ;    Integer hWnd ;    Integer idTimer ;    Integer idTimeout ;    Pointer tmprc ;    Returns Integer
94189>>>>>>>
94189>>>>>>>External_Function KillTimer "KillTimer" User32.DLL ;    Integer hWnd ;    Integer idTimer ;    Returns Integer
94190>>>>>>>
94190>>>>>>>// This global integer holds the ID of the object
94190>>>>>>>// that manages all timers.
94190>>>>>>>Integer giTimerManager
94190>>>>>>>
94190>>>>>>>// This class is used to store the object IDs
94190>>>>>>>// of the active timer objects. It augments
94190>>>>>>>// the Destroy_Object procedure to notify
94190>>>>>>>// the DFTimerManager to kill all its active
94190>>>>>>>// timers.
94190>>>>>>>// NOTE: This class looks very much like the
94190>>>>>>>// Set class. I didn't want to use Set because
94190>>>>>>>// Remove_Element shifts items which I don't
94190>>>>>>>// want to happen because item numbers are used
94190>>>>>>>// as timerIDs.
94190>>>>>>>
94190>>>>>>>Class TimersArray is an Array
94191>>>>>>>
94191>>>>>>>    Function Find_Object Integer iObj Returns Integer
94193>>>>>>>        Integer iMax
94193>>>>>>>        Integer iItem
94193>>>>>>>        Integer iValue
94193>>>>>>>        Get Item_count to iMax
94194>>>>>>>        Decrement iMax
94195>>>>>>>        For iItem from 1 to iMax
94201>>>>>>>>
94201>>>>>>>            Get Integer_Value item iItem to iValue
94202>>>>>>>            If iValue EQ iObj;                Function_Return iItem
94205>>>>>>>        Loop
94206>>>>>>>>
94206>>>>>>>        Function_Return -1
94207>>>>>>>    End_Function
94208>>>>>>>
94208>>>>>>>    Procedure Add_Object Integer iObj Returns Integer
94210>>>>>>>        Integer iItem
94210>>>>>>>        Get Find_Object iObj to iItem
94211>>>>>>>        If iItem LT 0 Begin
94213>>>>>>>            Get Find_Object 0 to iItem
94214>>>>>>>            If iItem LT 0 ;                Get Item_Count to iItem
94217>>>>>>>        End
94217>>>>>>>>
94217>>>>>>>        Set Array_Value item iItem to iObj
94218>>>>>>>        Procedure_Return iItem
94219>>>>>>>    End_Procedure
94220>>>>>>>
94220>>>>>>>    Procedure Remove_Object Integer iObj
94222>>>>>>>        Integer iItem
94222>>>>>>>        Get Find_Object iObj to iItem
94223>>>>>>>        If iItem GT 0 ;            Set Array_Value item iItem to 0
94226>>>>>>>    End_Procedure
94227>>>>>>>
94227>>>>>>>    Procedure Destroy_Object
94229>>>>>>>        Delegate Send Kill_All_Timers
94231>>>>>>>        Forward Send Destroy_Object
94233>>>>>>>    End_Procedure
94234>>>>>>>
94234>>>>>>>End_Class // TimersArray
94235>>>>>>>
94235>>>>>>>// This class is the actual timer manager
94235>>>>>>>// A timer will be created when Message Set_Timer_Active_State
94235>>>>>>>// has been send. This message needs two arguments. The first
94235>>>>>>>// is the objectID of the object to receive the timer event,
94235>>>>>>>// and the second is state. The object which ID has been passed,
94235>>>>>>>// needs to have a Timeout property to return the timeout for the
94235>>>>>>>// timer and it also needs to handle the MSG_OnTimer whenever a
94235>>>>>>>// timer event occurs.
94235>>>>>>>// The objectID of the Object will be placed in an array which contains
94235>>>>>>>// the objectIDs of all active timers. The Windows timer ID of a timer
94235>>>>>>>// is the itemnumber of the object in the array.
94235>>>>>>>//
94235>>>>>>>Class DFTimerManager is a DfBaseControl
94236>>>>>>>
94236>>>>>>>    Procedure Construct_Object
94238>>>>>>>
94238>>>>>>>        Forward Send Construct_Object
94240>>>>>>>
94240>>>>>>>        Set Visible_State to FALSE
94241>>>>>>>
94241>>>>>>>        Set External_Class_Name "cVdfTimer" to "static"
94242>>>>>>>        Set External_Message WM_TIMER to OnTimer
94243>>>>>>>
94243>>>>>>>        Object TimersArray is a TimersArray
94245>>>>>>>            Set Array_Value item 0 to -9999 // So we don't use item 0
94246>>>>>>>        End_Object
94247>>>>>>>
94247>>>>>>>        Move self to giTimerManager
94248>>>>>>>
94248>>>>>>>    End_Procedure
94249>>>>>>>
94249>>>>>>>    Procedure Set Timer_Active_State Integer iObj Integer iState
94251>>>>>>>        Integer iTimerID
94251>>>>>>>        Integer iTimeout
94251>>>>>>>        Integer iResult
94251>>>>>>>        Integer iSet
94251>>>>>>>        Dword   nResult
94251>>>>>>>        Handle  hWnd
94251>>>>>>>
94251>>>>>>>        // Get the handle of this object
94251>>>>>>>        Get Window_Handle to hWnd
94252>>>>>>>        If (Not(hWnd)) Begin
94254>>>>>>>            Error DFERR_DFTIMER C_$TimerNoHandle
94255>>>>>>>>
94255>>>>>>>            Procedure_Return
94256>>>>>>>        End
94256>>>>>>>>
94256>>>>>>>
94256>>>>>>>        // Test if handle is valid. If not, we leave.
94256>>>>>>>        If (Not(IsWindow(hWnd))) ;            Procedure_Return
94259>>>>>>>
94259>>>>>>>        Move (TimersArray(self)) to iSet
94260>>>>>>>
94260>>>>>>>        If (iSet) Begin
94262>>>>>>>
94262>>>>>>>            // Let's create or modify a timer
94262>>>>>>>            If iState Begin
94264>>>>>>>
94264>>>>>>>                // Get the exising to new TimerID
94264>>>>>>>                Get MSG_Add_Object of iSet iObj to iTimerID
94265>>>>>>>
94265>>>>>>>                // Set/Modify the timer
94265>>>>>>>                Get Timeout of iObj to iTimeout
94266>>>>>>>                Move (SetTimer(hWnd, iTimerID, iTimeout, 0)) to iResult
94267>>>>>>>                If Not iResult Begin
94269>>>>>>>                    Error DFERR_DFTIMER C_$TooManyTimers
94270>>>>>>>>
94270>>>>>>>                    Procedure_Return
94271>>>>>>>                End
94271>>>>>>>>
94271>>>>>>>
94271>>>>>>>            End
94271>>>>>>>>
94271>>>>>>>
94271>>>>>>>            // Let's kill an existing timer
94271>>>>>>>            Else Begin
94272>>>>>>>
94272>>>>>>>                // Look up the object in the set
94272>>>>>>>                Get Find_Object of iSet iObj to iTimerID
94273>>>>>>>
94273>>>>>>>                If iTimerID EQ -1 ;                    Procedure_Return
94276>>>>>>>
94276>>>>>>>                // Kill the timer
94276>>>>>>>                Move (KillTimer(hWnd, iTimerID)) to iResult
94277>>>>>>>                If Not iResult Begin
94279>>>>>>>                    Move (GetLastError()) to nResult
94280>>>>>>>                    Error DFERR_DFTIMER (C_$CantKillTimer * string(nResult) - "!")
94281>>>>>>>>
94281>>>>>>>                    Procedure_Return
94282>>>>>>>                End
94282>>>>>>>>
94282>>>>>>>
94282>>>>>>>                // Remove the objectID
94282>>>>>>>                Send Remove_Object to iSet iObj
94283>>>>>>>            End
94283>>>>>>>>
94283>>>>>>>        End
94283>>>>>>>>
94283>>>>>>>    End_Procedure
94284>>>>>>>
94284>>>>>>>    Function Timer_Active_State Integer iObj Returns Integer
94286>>>>>>>        Integer iResult
94286>>>>>>>        Get Find_Object of (TimersArray(self)) iObj to iResult
94287>>>>>>>        Function_Return (iResult<>-1) // note: -1= not found
94288>>>>>>>    End_Function
94289>>>>>>>
94289>>>>>>>    // Will be called by the Set when it is being destroyed.
94289>>>>>>>    Procedure Kill_All_Timers
94291>>>>>>>        Integer iMax
94291>>>>>>>        Integer iSet
94291>>>>>>>        Integer iItem
94291>>>>>>>        Integer iObj
94291>>>>>>>        Integer iResult
94291>>>>>>>        Handle  hWnd
94291>>>>>>>
94291>>>>>>>        // Get the handle of this object
94291>>>>>>>        Get Window_Handle to hWnd
94292>>>>>>>        If (Not(hWnd)) Begin
94294>>>>>>>            Error DFERR_DFTIMER C_$TimerNoHandle
94295>>>>>>>>
94295>>>>>>>            Procedure_Return
94296>>>>>>>        End
94296>>>>>>>>
94296>>>>>>>
94296>>>>>>>        // If the window handle is no longer valid, we
94296>>>>>>>        // leave this procedure. This can happen when the
94296>>>>>>>        // program is begin aborted using Exit_Application
94296>>>>>>>        If (Not(IsWindow(hWnd))) ;            Procedure_Return
94299>>>>>>>
94299>>>>>>>        // Scan the set and kill all known timers
94299>>>>>>>        Move (TimersArray(self)) to iSet
94300>>>>>>>        If (iSet) Begin
94302>>>>>>>            Get Item_Count of iSet to iMax
94303>>>>>>>            Decrement iMax
94304>>>>>>>            For iItem From 1 to iMax
94310>>>>>>>>
94310>>>>>>>                Get Integer_Value of iSet item iItem to iObj
94311>>>>>>>                If iObj Begin
94313>>>>>>>                    Move (KillTimer(hWnd, iItem)) to iResult
94314>>>>>>>                    Set Array_Value of iSet item iItem to 0
94315>>>>>>>                End
94315>>>>>>>>
94315>>>>>>>            Loop
94316>>>>>>>>
94316>>>>>>>        End
94316>>>>>>>>
94316>>>>>>>
94316>>>>>>>    End_Procedure
94317>>>>>>>
94317>>>>>>>    Procedure OnTimer Integer wParam Integer lParam
94319>>>>>>>        Integer iObj
94319>>>>>>>        Get Integer_Value of (TimersArray(self)) item wParam to iObj
94320>>>>>>>        If Not iObj Begin
94322>>>>>>>            Error DFERR_DFTIMER C_$TimerWithoutObject
94323>>>>>>>>
94323>>>>>>>            Procedure_Return
94324>>>>>>>        End
94324>>>>>>>>
94324>>>>>>>        Send OnTimer to iObj wParam lParam
94325>>>>>>>    End_Procedure
94326>>>>>>>
94326>>>>>>>    Procedure Destroy_Object
94328>>>>>>>        Send Kill_All_Timers
94329>>>>>>>        Forward Send Destroy_Object
94331>>>>>>>        Move 0 to giTimerManager
94332>>>>>>>    End_Procedure
94333>>>>>>>
94333>>>>>>>End_Class // DFTimerManger
94334>>>>>>>
94334>>>>>>>
94334>>>>>>>
94334>>>>>>>
94334>>>>>>>// This class acts as a container for the
94334>>>>>>>// timer manager object. This is needed because
94334>>>>>>>// A DFTimerManager object created directly at the
94334>>>>>>>// desktop doesn't have a Window_Handle which we
94334>>>>>>>// need to create a Windoows timer. By placing
94334>>>>>>>// this non-visual container around the timer
94334>>>>>>>// manager, it does get a Window_Handle.
94334>>>>>>>// The procedure End_Construct_Object has been
94334>>>>>>>// augmented to create a window and also
94334>>>>>>>// automatically page all children, which will
94334>>>>>>>// be the timer manager.
94334>>>>>>>//
94334>>>>>>>Class DFTimerManagerPanel is a dfBasePanel
94335>>>>>>>
94335>>>>>>>    Procedure Construct_Object
94337>>>>>>>        Forward Send Construct_Object
94339>>>>>>>        Set Visible_State to FALSE
94340>>>>>>>        Object DFTimerManager is a DFTimerManager
94342>>>>>>>        End_Object
94343>>>>>>>    End_Procedure
94344>>>>>>>
94344>>>>>>>    Procedure End_Construct_Object
94346>>>>>>>        Forward Send End_Construct_Object
94348>>>>>>>        Send Page_Object TRUE
94349>>>>>>>        Broadcast Send Page_Object TRUE
94351>>>>>>>    End_Procedure
94352>>>>>>>
94352>>>>>>>End_Class
94353>>>>>>>
94353>>>>>>>// This is the class the user uses to create DFTimer objects
94353>>>>>>>
94353>>>>>>>
94353>>>>>>>//{ OverrideProperty=Skip_State DesignTime=False }
94353>>>>>>>//{ OverrideProperty=TypeFace DesignTime=False }
94353>>>>>>>Class DFTimer is a Textbox
94354>>>>>>>
94354>>>>>>>    Procedure Construct_Object
94356>>>>>>>        Forward Send Construct_Object
94358>>>>>>>
94358>>>>>>>        // Make sure this object never appears
94358>>>>>>>        Set Visible_State to FALSE
94359>>>>>>>
94359>>>>>>>        Property Integer Private.Timeout    1000
94360>>>>>>>
94360>>>>>>>        Property Integer Timer_Message      0
94361>>>>>>>        Property Integer Timer_Object       0
94362>>>>>>>        Property Integer Auto_Start_State   True
94363>>>>>>>        Property Integer Auto_Stop_State    True
94364>>>>>>>    End_Procedure
94365>>>>>>>
94365>>>>>>>    Procedure Set Timer_Active_State Integer iState
94367>>>>>>>        Integer iObj
94367>>>>>>>        Move self to iObj
94368>>>>>>>        If giTimerManager ;            Set Timer_Active_State of giTimerManager iObj to iState
94371>>>>>>>    End_Procedure
94372>>>>>>>
94372>>>>>>>    Function Timer_Active_State Returns Integer
94374>>>>>>>        Integer iState
94374>>>>>>>        Integer iObj
94374>>>>>>>        Move self to iObj
94375>>>>>>>        If giTimerManager ;            Get Timer_Active_State of giTimerManager iObj to iState
94378>>>>>>>        Function_Return iState
94379>>>>>>>    End_Function
94380>>>>>>>
94380>>>>>>>    Procedure Set Timeout Integer iTimeout
94382>>>>>>>        Integer iActive
94382>>>>>>>        Set Private.Timeout to iTimeout
94383>>>>>>>        Get Timer_Active_State to iActive
94384>>>>>>>        If iActive ;            Set Timer_Active_State to TRUE
94387>>>>>>>    End_Procedure
94388>>>>>>>
94388>>>>>>>    Function Timeout Returns Integer
94390>>>>>>>        Integer iTimeout
94390>>>>>>>        Get Private.Timeout to iTimeout
94391>>>>>>>        Function_Return iTimeout
94392>>>>>>>    End_Function
94393>>>>>>>
94393>>>>>>>    Procedure OnTimer Integer iwParam Integer ilParam
94395>>>>>>>        Integer iMsg
94395>>>>>>>        Integer iObj
94395>>>>>>>        Get Timer_Message to iMsg
94396>>>>>>>        If (iMsg) Begin
94398>>>>>>>            Get Timer_Object  to iObj
94399>>>>>>>            If iObj ;                Send iMsg to iObj iwParam ilParam
94402>>>>>>>            Else ;                Send iMsg iwParam ilParam
94404>>>>>>>        End
94404>>>>>>>>
94404>>>>>>>    End_Procedure
94405>>>>>>>
94405>>>>>>>    // Augmented to Auto_Start a timer
94405>>>>>>>    //
94405>>>>>>>    Procedure Page_Object Integer iState
94407>>>>>>>        Forward Send Page_Object iState
94409>>>>>>>        If (iState AND Auto_Start_State(self)) ;            Set Timer_Active_State to TRUE
94412>>>>>>>    End_Procedure
94413>>>>>>>
94413>>>>>>>    // Augmented to Auto_Stop a timer
94413>>>>>>>    //
94413>>>>>>>    Procedure Page_Delete
94415>>>>>>>        If (Auto_Stop_State(self)) ;            Set Timer_Active_State to FALSE
94418>>>>>>>        Forward Send Page_Delete
94420>>>>>>>    End_Procedure
94421>>>>>>>
94421>>>>>>>    // Augmented to stop the timer
94421>>>>>>>    //
94421>>>>>>>    Procedure Destroy_Object
94423>>>>>>>        Set Timer_Active_State to FALSE
94424>>>>>>>        Forward Send Destroy_Object
94426>>>>>>>    End_Procedure
94427>>>>>>>
94427>>>>>>>End_Class // DFTimer
94428>>>>>>>
94428>>>>>>>//
94428>>>>>>>// This was moved into a method so it can be reliable created
94428>>>>>>>// at the desktop. Note that cDesktop adds method to cDesktop class (class of desktop)
94428>>>>>>>//
94428>>>>>>>Procedure CreateDfTimerManagerPanel FOR cDesktop
94430>>>>>>>    // Create the Desktop Timer Manager Object.
94430>>>>>>>    Object DFTimerManagerPanel is a DFTimerManagerPanel
94432>>>>>>>    End_Object
94433>>>>>>>End_Procedure
94434>>>>>>>
94434>>>>>>>Send CreateDfTimerManagerPanel of DESKTOP
94435>>>>>>>
94435>>>>>
94435>>>>>Class cVDFD_CE_DfTimer is a dfTimer
94436>>>>>    
94436>>>>>    Procedure Construct_Object
94438>>>>>        Forward Send Construct_Object
94440>>>>>
94440>>>>>    End_Procedure
94441>>>>>
94441>>>>>    Procedure End_Construct_Object
94443>>>>>        Forward Send End_Construct_Object
94445>>>>>
94445>>>>>    End_Procedure
94446>>>>>
94446>>>>>End_Class
94447>>>Use Base\cVDFD_CE_FontDialog.pkg
Including file: Base\cVDFD_CE_FontDialog.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_FontDialog.pkg)
94447>>>>>Use Font_dlg.pkg
94447>>>>>
94447>>>>>Class cVDFD_CE_FontDialog is a FontDialog
94448>>>>>    
94448>>>>>    Procedure Construct_Object
94450>>>>>        Forward Send Construct_Object
94452>>>>>
94452>>>>>    End_Procedure
94453>>>>>
94453>>>>>    Procedure End_Construct_Object
94455>>>>>        Forward Send End_Construct_Object
94457>>>>>
94457>>>>>    End_Procedure
94458>>>>>
94458>>>>>End_Class
94459>>>Use Base\cVDFD_CE_Form.pkg
Including file: Base\cVDFD_CE_Form.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_Form.pkg)
94459>>>>>Use Windows.pkg
94459>>>>>
94459>>>>>Class cVDFD_CE_Form is a Form
94460>>>>>    
94460>>>>>    Procedure Construct_Object
94462>>>>>        Forward Send Construct_Object
94464>>>>>
94464>>>>>    End_Procedure
94465>>>>>
94465>>>>>    Procedure End_Construct_Object
94467>>>>>        Forward Send End_Construct_Object
94469>>>>>
94469>>>>>    End_Procedure
94470>>>>>
94470>>>>>End_Class
94471>>>Use Base\cVDFD_CE_Grid.pkg
Including file: Base\cVDFD_CE_Grid.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_Grid.pkg)
94471>>>>>Use Windows.pkg
94471>>>>>
94471>>>>>Class cVDFD_CE_Grid is a Grid
94472>>>>>    
94472>>>>>    Procedure Construct_Object
94474>>>>>        Forward Send Construct_Object
94476>>>>>
94476>>>>>    End_Procedure
94477>>>>>
94477>>>>>    Procedure End_Construct_Object
94479>>>>>        Forward Send End_Construct_Object
94481>>>>>
94481>>>>>    End_Procedure
94482>>>>>
94482>>>>>End_Class
94483>>>Use Base\cVDFD_CE_Group.pkg
Including file: Base\cVDFD_CE_Group.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_Group.pkg)
94483>>>>>Use Windows.pkg
94483>>>>>
94483>>>>>Class cVDFD_CE_Group is a Group
94484>>>>>    
94484>>>>>    Procedure Construct_Object
94486>>>>>        Forward Send Construct_Object
94488>>>>>
94488>>>>>    End_Procedure
94489>>>>>
94489>>>>>    Procedure End_Construct_Object
94491>>>>>        Forward Send End_Construct_Object
94493>>>>>
94493>>>>>    End_Procedure
94494>>>>>
94494>>>>>End_Class
94495>>>Use Base\cVDFD_CE_LineControl.pkg
Including file: Base\cVDFD_CE_LineControl.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_LineControl.pkg)
94495>>>>>Use dfLine.pkg
94495>>>>>
94495>>>>>Class cVDFD_CE_LineControl is a LineControl
94496>>>>>    
94496>>>>>    Procedure Construct_Object
94498>>>>>        Forward Send Construct_Object
94500>>>>>
94500>>>>>    End_Procedure
94501>>>>>
94501>>>>>    Procedure End_Construct_Object
94503>>>>>        Forward Send End_Construct_Object
94505>>>>>
94505>>>>>    End_Procedure
94506>>>>>
94506>>>>>End_Class
94507>>>Use Base\cVDFD_CE_List.pkg
Including file: Base\cVDFD_CE_List.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_List.pkg)
94507>>>>>Use Windows.pkg
94507>>>>>
94507>>>>>Class cVDFD_CE_List is a List
94508>>>>>    
94508>>>>>    Procedure Construct_Object
94510>>>>>        Forward Send Construct_Object
94512>>>>>
94512>>>>>    End_Procedure
94513>>>>>
94513>>>>>    Procedure End_Construct_Object
94515>>>>>        Forward Send End_Construct_Object
94517>>>>>
94517>>>>>    End_Procedure
94518>>>>>
94518>>>>>End_Class
94519>>>Use Base\cVDFD_CE_ModalPanel.pkg
Including file: Base\cVDFD_CE_ModalPanel.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_ModalPanel.pkg)
94519>>>>>Use Windows.pkg
94519>>>>>
94519>>>>>Class cVDFD_CE_ModalPanel is a ModalPanel
94520>>>>>    
94520>>>>>    Procedure Construct_Object
94522>>>>>        Forward Send Construct_Object
94524>>>>>
94524>>>>>    End_Procedure
94525>>>>>
94525>>>>>    Procedure End_Construct_Object
94527>>>>>        Forward Send End_Construct_Object
94529>>>>>
94529>>>>>    End_Procedure
94530>>>>>
94530>>>>>End_Class
94531>>>Use Base\cVDFD_CE_OpenDialog.pkg
Including file: Base\cVDFD_CE_OpenDialog.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_OpenDialog.pkg)
94531>>>>>Use File_dlg.pkg
94531>>>>>
94531>>>>>Class cVDFD_CE_OpenDialog is a OpenDialog
94532>>>>>    
94532>>>>>    Procedure Construct_Object
94534>>>>>        Forward Send Construct_Object
94536>>>>>
94536>>>>>    End_Procedure
94537>>>>>
94537>>>>>    Procedure End_Construct_Object
94539>>>>>        Forward Send End_Construct_Object
94541>>>>>
94541>>>>>    End_Procedure
94542>>>>>
94542>>>>>End_Class
94543>>>Use Base\cVDFD_CE_PrintDialog.pkg
Including file: Base\cVDFD_CE_PrintDialog.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_PrintDialog.pkg)
94543>>>>>Use Prnt_dlg.pkg
94543>>>>>
94543>>>>>Class cVDFD_CE_PrintDialog is a PrintDialog
94544>>>>>    
94544>>>>>    Procedure Construct_Object
94546>>>>>        Forward Send Construct_Object
94548>>>>>
94548>>>>>    End_Procedure
94549>>>>>
94549>>>>>    Procedure End_Construct_Object
94551>>>>>        Forward Send End_Construct_Object
94553>>>>>
94553>>>>>    End_Procedure
94554>>>>>
94554>>>>>End_Class
94555>>>Use Base\cVDFD_CE_Radio.pkg
Including file: Base\cVDFD_CE_Radio.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_Radio.pkg)
94555>>>>>Use Windows.pkg
94555>>>>>
94555>>>>>Class cVDFD_CE_Radio is a Radio
94556>>>>>    
94556>>>>>    Procedure Construct_Object
94558>>>>>        Forward Send Construct_Object
94560>>>>>
94560>>>>>    End_Procedure
94561>>>>>
94561>>>>>    Procedure End_Construct_Object
94563>>>>>        Forward Send End_Construct_Object
94565>>>>>
94565>>>>>    End_Procedure
94566>>>>>
94566>>>>>End_Class
94567>>>Use Base\cVDFD_CE_RadioGroup.pkg
Including file: Base\cVDFD_CE_RadioGroup.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_RadioGroup.pkg)
94567>>>>>Use Windows.pkg
94567>>>>>
94567>>>>>Class cVDFD_CE_RadioGroup is a RadioGroup
94568>>>>>    
94568>>>>>    Procedure Construct_Object
94570>>>>>        Forward Send Construct_Object
94572>>>>>
94572>>>>>    End_Procedure
94573>>>>>
94573>>>>>    Procedure End_Construct_Object
94575>>>>>        Forward Send End_Construct_Object
94577>>>>>
94577>>>>>    End_Procedure
94578>>>>>
94578>>>>>End_Class
94579>>>Use Base\cVDFD_CE_ReportView.pkg
Including file: Base\cVDFD_CE_ReportView.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_ReportView.pkg)
94579>>>>>Use DFRptVw.pkg
94579>>>>>
94579>>>>>Class cVDFD_CE_ReportView is a ReportView
94580>>>>>    
94580>>>>>    Procedure Construct_Object
94582>>>>>        Forward Send Construct_Object
94584>>>>>
94584>>>>>    End_Procedure
94585>>>>>
94585>>>>>    Procedure End_Construct_Object
94587>>>>>        Forward Send End_Construct_Object
94589>>>>>
94589>>>>>    End_Procedure
94590>>>>>
94590>>>>>End_Class
94591>>>Use Base\cVDFD_CE_SaveAsDialog.pkg
Including file: Base\cVDFD_CE_SaveAsDialog.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_SaveAsDialog.pkg)
94591>>>>>Use File_dlg.pkg
94591>>>>>
94591>>>>>Class cVDFD_CE_SaveAsDialog is a SaveAsDialog
94592>>>>>    
94592>>>>>    Procedure Construct_Object
94594>>>>>        Forward Send Construct_Object
94596>>>>>
94596>>>>>    End_Procedure
94597>>>>>
94597>>>>>    Procedure End_Construct_Object
94599>>>>>        Forward Send End_Construct_Object
94601>>>>>
94601>>>>>    End_Procedure
94602>>>>>
94602>>>>>End_Class
94603>>>Use Base\cVDFD_CE_Set.pkg
Including file: Base\cVDFD_CE_Set.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_Set.pkg)
94603>>>>>Use Set.pkg
94603>>>>>
94603>>>>>Class cVDFD_CE_Set is a Set
94604>>>>>    
94604>>>>>    Procedure Construct_Object
94606>>>>>        Forward Send Construct_Object
94608>>>>>
94608>>>>>    End_Procedure
94609>>>>>
94609>>>>>    Procedure End_Construct_Object
94611>>>>>        Forward Send End_Construct_Object
94613>>>>>
94613>>>>>    End_Procedure
94614>>>>>
94614>>>>>End_Class
94615>>>Use Base\cVDFD_CE_SpinForm.pkg
Including file: Base\cVDFD_CE_SpinForm.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_SpinForm.pkg)
94615>>>>>Use dfSpnFrm.pkg
94615>>>>>
94615>>>>>Class cVDFD_CE_SpinForm is a SpinForm
94616>>>>>    
94616>>>>>    Procedure Construct_Object
94618>>>>>        Forward Send Construct_Object
94620>>>>>
94620>>>>>    End_Procedure
94621>>>>>
94621>>>>>    Procedure End_Construct_Object
94623>>>>>        Forward Send End_Construct_Object
94625>>>>>
94625>>>>>    End_Procedure
94626>>>>>
94626>>>>>End_Class
94627>>>Use Base\cVDFD_CE_TabDialog.pkg
Including file: Base\cVDFD_CE_TabDialog.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_TabDialog.pkg)
94627>>>>>Use Windows.pkg
94627>>>>>
94627>>>>>Class cVDFD_CE_TabDialog is a TabDialog
94628>>>>>    
94628>>>>>    Procedure Construct_Object
94630>>>>>        Forward Send Construct_Object
94632>>>>>
94632>>>>>    End_Procedure
94633>>>>>
94633>>>>>    Procedure End_Construct_Object
94635>>>>>        Forward Send End_Construct_Object
94637>>>>>
94637>>>>>    End_Procedure
94638>>>>>
94638>>>>>End_Class
94639>>>Use Base\cVDFD_CE_TextBox.pkg
Including file: Base\cVDFD_CE_TextBox.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_TextBox.pkg)
94639>>>>>Use Windows.pkg
94639>>>>>
94639>>>>>Class cVDFD_CE_TextBox is a TextBox
94640>>>>>    
94640>>>>>    Procedure Construct_Object
94642>>>>>        Forward Send Construct_Object
94644>>>>>
94644>>>>>    End_Procedure
94645>>>>>
94645>>>>>    Procedure End_Construct_Object
94647>>>>>        Forward Send End_Construct_Object
94649>>>>>
94649>>>>>    End_Procedure
94650>>>>>
94650>>>>>End_Class
94651>>>Use Base\cVDFD_CE_ToolPanel.pkg
Including file: Base\cVDFD_CE_ToolPanel.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_ToolPanel.pkg)
94651>>>>>Use Windows.pkg
94651>>>>>
94651>>>>>Class cVDFD_CE_ToolPanel is a ToolPanel
94652>>>>>    
94652>>>>>    Procedure Construct_Object
94654>>>>>        Forward Send Construct_Object
94656>>>>>
94656>>>>>    End_Procedure
94657>>>>>
94657>>>>>    Procedure End_Construct_Object
94659>>>>>        Forward Send End_Construct_Object
94661>>>>>
94661>>>>>    End_Procedure
94662>>>>>
94662>>>>>End_Class
94663>>>Use Base\cVDFD_CE_Trackbar.pkg
Including file: Base\cVDFD_CE_Trackbar.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_Trackbar.pkg)
94663>>>>>Use TrckBr.pkg
94663>>>>>
94663>>>>>Class cVDFD_CE_Trackbar is a Trackbar
94664>>>>>    
94664>>>>>    Procedure Construct_Object
94666>>>>>        Forward Send Construct_Object
94668>>>>>
94668>>>>>    End_Procedure
94669>>>>>
94669>>>>>    Procedure End_Construct_Object
94671>>>>>        Forward Send End_Construct_Object
94673>>>>>
94673>>>>>    End_Procedure
94674>>>>>
94674>>>>>End_Class
94675>>>Use Base\cVDFD_CE_TreeView.pkg
Including file: Base\cVDFD_CE_TreeView.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_TreeView.pkg)
94675>>>>>Use dfTreeVw.pkg
94675>>>>>
94675>>>>>Class cVDFD_CE_TreeView is a TreeView
94676>>>>>    
94676>>>>>    Procedure Construct_Object
94678>>>>>        Forward Send Construct_Object
94680>>>>>
94680>>>>>    End_Procedure
94681>>>>>
94681>>>>>    Procedure End_Construct_Object
94683>>>>>        Forward Send End_Construct_Object
94685>>>>>
94685>>>>>    End_Procedure
94686>>>>>
94686>>>>>End_Class
94687>>>Use Base\cVDFD_CE_View.pkg
Including file: Base\cVDFD_CE_View.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_View.pkg)
94687>>>>>Use Dfadlg.pkg
94687>>>>>
94687>>>>>Class cVDFD_CE_View is a View
94688>>>>>    
94688>>>>>    Procedure Construct_Object
94690>>>>>        Forward Send Construct_Object
94692>>>>>
94692>>>>>    End_Procedure
94693>>>>>
94693>>>>>    Procedure End_Construct_Object
94695>>>>>        Forward Send End_Construct_Object
94697>>>>>
94697>>>>>    End_Procedure
94698>>>>>
94698>>>>>End_Class
94699>>>
94699>>>// Added 2012-10-13
94699>>>Use Base\cVDFD_CE_ClientArea.pkg 
Including file: Base\cVDFD_CE_ClientArea.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_ClientArea.pkg)
94699>>>>>//**********************************************************************************[v3]***
94699>>>>>// Copyright (c) 2006 Threshold Software
94699>>>>>// All rights reserved.
94699>>>>>//
94699>>>>>// DO NOT DISTRIBUTE THIS FILE OR ANY PART OF IT !
94699>>>>>//
94699>>>>>// $FileName    : cVDFD_ClientArea.pkg
94699>>>>>// $ProjectName : VDFD Framework
94699>>>>>// $Authors     : Todd Forsberg
94699>>>>>// $Created     : 05.31.2006  18:57
94699>>>>>//
94699>>>>>// Required Files:
94699>>>>>//
94699>>>>>//
94699>>>>>// Contents:
94699>>>>>//
94699>>>>>//
94699>>>>>// Properties:
94699>>>>>//
94699>>>>>//
94699>>>>>// Methods:
94699>>>>>//
94699>>>>>//
94699>>>>>//*****************************************************************************************
94699>>>>>
94699>>>>>//* Class:        cVDFD_ClientArea
94699>>>>>//* Package Name: cVDFD_ClientArea.pkg
94699>>>>>
94699>>>>>//Use VDFD_Commands.pkg
94699>>>>>Use Dfpanel.pkg
94699>>>>>Use Mixin\cVDFD_CE_ClassNameArray_Mixin.pkg
94699>>>>>
94699>>>>>Class cVDFD_CE_ClientArea is a ClientArea
94700>>>>>
94700>>>>>    // Construct_Object: Object constructor.
94700>>>>>    Procedure Construct_Object
94702>>>>>        Forward Send Construct_Object
94704>>>>>    
94704>>>>>        // Define new Properties: Property {Type} {pxName} {initial_value}
94704>>>>>    
94704>>>>>        // Create child objects
94704>>>>>    
94704>>>>>        // Set property values:
94704>>>>>    
94704>>>>>    End_Procedure
94705>>>>>
94705>>>>>    // Finish object construction
94705>>>>>    Procedure End_Construct_Object
94707>>>>>        Forward Send End_Construct_Object
94709>>>>>
94709>>>>>    End_Procedure
94710>>>>>
94710>>>>>    // Create and augment procedure and functions
94710>>>>>    
94710>>>>>    Procedure OnResize
94712>>>>>        Forward Send OnResize
94714>>>>>        //VDFD_Showln "OnResize in Client Area"
94714>>>>>        String sBmp
94714>>>>>        Get Bitmap to sBmp
94715>>>>>        If (sBmp <> "") Set Bitmap to sBmp
94718>>>>>    End_Procedure
94719>>>>>
94719>>>>>    Procedure Set GuiSize Integer iHeight Integer iWidth
94721>>>>>        Forward Set GuiSize to iHeight iWidth
94723>>>>>        Send OnResize
94724>>>>>    End_Procedure
94725>>>>>
94725>>>>>End_Class // cVDFD_ClientArea
94726>>>>>
94726>>>>>// End of File: cVDFD_ClientArea.pkg
94726>>>Use Base\cVDFD_CE_Panel.pkg
Including file: Base\cVDFD_CE_Panel.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_Panel.pkg)
94726>>>>>//***************************************************************************
94726>>>>>//*
94726>>>>>//* Class:        cVDFD_Panel
94726>>>>>//* Package Name: cVDFD_Panel.pkg
94726>>>>>//*
94726>>>>>//***************************************************************************
94726>>>>>
94726>>>>>Use Dfpanel.pkg
94726>>>>>
94726>>>>>Class cVDFD_CE_Panel is a Panel
94727>>>>>
94727>>>>>    // Construct_Object: Object constructor.
94727>>>>>    Procedure Construct_object
94729>>>>>        Forward Send Construct_Object
94731>>>>>        
94731>>>>>        // Define new Properties: Property {Type} {pxName} {initial_value}
94731>>>>>        Property Handle phoDockingManager
94732>>>>>        
94732>>>>>        // Create child objects
94732>>>>>        
94732>>>>>        // Set property values:
94732>>>>>        
94732>>>>>    End_Procedure
94733>>>>>
94733>>>>>    // Create and augment procedure and functions
94733>>>>>    Procedure Minimize
94735>>>>>        Boolean bResult
94735>>>>>        Handle hWnd
94735>>>>>        Get Window_Handle to hWnd
94736>>>>>        Move (ShowWindow(hWnd,SW_MINIMIZE)) to bResult
94737>>>>>    End_Procedure
94738>>>>>
94738>>>>>    Procedure Hide
94740>>>>>        Boolean bResult
94740>>>>>        Handle hWnd
94740>>>>>        Get Window_Handle to hWnd
94741>>>>>        Move (ShowWindow(hWnd,SW_HIDE)) to bResult
94742>>>>>    End_Procedure
94743>>>>>    
94743>>>>>    Procedure Maximize
94745>>>>>        Boolean bResult
94745>>>>>        Handle hWnd
94745>>>>>        Get Window_Handle to hWnd
94746>>>>>        Move (ShowWindow(hWnd,SW_MAXIMIZE)) to bResult
94747>>>>>    End_Procedure
94748>>>>>    
94748>>>>>    Procedure ShowMaximized
94750>>>>>        Boolean bResult
94750>>>>>        Handle hWnd
94750>>>>>        Get Window_Handle to hWnd
94751>>>>>        Move (ShowWindow(hWnd,SW_SHOWMAXIMIZED)) to bResult
94752>>>>>    End_Procedure
94753>>>>>
94753>>>>>End_Class // cVDFD_Panel
94754>>>
94754>>>// Added 2012-10-14
94754>>>Use Base\cVDFD_CE_DbTabPage.pkg
Including file: Base\cVDFD_CE_DbTabPage.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_DbTabPage.pkg)
94754>>>>>Use dfTabDlg.pkg
94754>>>>>
94754>>>>>Class cVDFD_CE_DbTabPage is a dbTabPage
94755>>>>>    
94755>>>>>    Procedure Construct_Object
94757>>>>>        Forward Send Construct_Object
94759>>>>>
94759>>>>>    End_Procedure
94760>>>>>
94760>>>>>    Procedure End_Construct_Object
94762>>>>>        Forward Send End_Construct_Object
94764>>>>>
94764>>>>>    End_Procedure
94765>>>>>
94765>>>>>End_Class   // cVDFD_CE_DbTabPage
94766>>>>>
94766>>>>>//End of File: cVDFD_CE_DbTabPage.pkg
94766>>>
94766>>>// Added 2013-01-01
94766>>>Use Base\cVDFD_CE_TabPage.pkg
Including file: Base\cVDFD_CE_TabPage.pkg    (F:\GitHub\vdfd-framework-community\AppSrc\Base\cVDFD_CE_TabPage.pkg)
94766>>>>>Use Windows.pkg
94766>>>>>
94766>>>>>Class cVDFD_CE_TabPage is a TabPage
94767>>>>>    
94767>>>>>    Procedure Construct_Object
94769>>>>>        Forward Send Construct_Object
94771>>>>>
94771>>>>>    End_Procedure
94772>>>>>
94772>>>>>    Procedure End_Construct_Object
94774>>>>>        Forward Send End_Construct_Object
94776>>>>>
94776>>>>>    End_Procedure
94777>>>>>
94777>>>>>End_Class
94778>>>>>
94778>>>>>// End of File: cVDFD_CE_TabPage.pkg
94778>Use cCJStandardCommandBarSystem.pkg
Including file: cCJStandardCommandBarSystem.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cCJStandardCommandBarSystem.pkg)
94778>>>// these are all the packages used in a standard MDI menubar/toolbar system
94778>>>
94778>>>Use cCJCommandBarSystem.pkg
94778>>>Use cCJStandardMenuItemClasses.pkg
Including file: cCJStandardMenuItemClasses.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cCJStandardMenuItemClasses.pkg)
94778>>>>>Use Dfpanel.pkg
94778>>>>>Use cCJCommandBarSystem.pkg
94778>>>>>Use LanguageText.pkg
94778>>>>>
94778>>>>>
94778>>>>>Class cCJUndoMenuItem is a cCJMenuItem
94779>>>>>    
94779>>>>>    Procedure Construct_Object
94781>>>>>        Forward Send Construct_Object
94783>>>>>        Set psCaption   to C_$CaptionUndo
94784>>>>>        Set psToolTip to C_$ToolTipUndo
94785>>>>>        Set psDescription to C_$DescUndo
94786>>>>>        Set psImage to "ActionUndo.ico"
94787>>>>>        Set pbActiveUpdate to True
94788>>>>>        Set psCategory to C_$CategoryEdit
94789>>>>>        Set psShortcut to C_$Key_Ctrl_Z
94790>>>>>    End_Procedure
94791>>>>>
94791>>>>>    Procedure OnExecute Variant vCommandBarControl
94793>>>>>        Send Undo of (focus(Self))
94794>>>>>    End_Procedure
94795>>>>>    
94795>>>>>    Function IsEnabled Returns Boolean
94797>>>>>        Boolean bEnabled
94797>>>>>        Get CanUndo of (Focus(Self)) to bEnabled
94798>>>>>        Function_Return bEnabled
94799>>>>>    End_Function
94800>>>>>         
94800>>>>>End_Class
94801>>>>>
94801>>>>>
94801>>>>>Class cCJDeleteEditMenuItem is a cCJMenuItem
94802>>>>>    
94802>>>>>    Procedure Construct_Object
94804>>>>>        Forward Send Construct_Object
94806>>>>>        Set psCaption   to C_$CaptionDelete
94807>>>>>        Set psToolTip to C_$ToolTipDelete
94808>>>>>        Set psDescription to C_$DescDelete
94809>>>>>        Set psImage to "actionDelete.ico"
94810>>>>>        Set psShortcut to C_$Key_Delete
94811>>>>>        Set pbActiveUpdate to True
94812>>>>>        Set psCategory to C_$CategoryEdit
94813>>>>>    End_Procedure
94814>>>>>
94814>>>>>
94814>>>>>    Procedure OnExecute Variant vCommandBarControl
94816>>>>>        Send Delete of (focus(Self))
94817>>>>>    End_Procedure
94818>>>>>    
94818>>>>>    Function IsEnabled Returns Boolean
94820>>>>>        Boolean bEnabled
94820>>>>>        Get CanDelete of (Focus(Self)) to bEnabled
94821>>>>>        Function_Return bEnabled
94822>>>>>    End_Function
94823>>>>>         
94823>>>>>End_Class
94824>>>>>
94824>>>>>
94824>>>>>Class cCJCutMenuItem is a cCJMenuItem
94825>>>>>    
94825>>>>>    Procedure Construct_Object
94827>>>>>        Forward Send Construct_Object
94829>>>>>        Set psCaption   to C_$CaptionCut
94830>>>>>        Set psToolTip to C_$TooltipCut
94831>>>>>        Set psDescription to C_$DescCut
94832>>>>>        Set psImage to "actionCut.ico"
94833>>>>>        Set psShortcut to C_$Key_Ctrl_X
94834>>>>>        Set pbActiveUpdate to True
94835>>>>>        Set psCategory to C_$CategoryEdit
94836>>>>>    End_Procedure
94837>>>>>
94837>>>>>
94837>>>>>    Procedure OnExecute Variant vCommandBarControl
94839>>>>>        Send Cut of (focus(Self))
94840>>>>>    End_Procedure
94841>>>>>    
94841>>>>>    Function IsEnabled Returns Boolean
94843>>>>>        Boolean bEnabled
94843>>>>>        Get CanCut of (Focus(Self)) to bEnabled
94844>>>>>        Function_Return bEnabled
94845>>>>>    End_Function
94846>>>>>         
94846>>>>>End_Class
94847>>>>>
94847>>>>>
94847>>>>>Class cCJCopyMenuItem is a cCJMenuItem
94848>>>>>    
94848>>>>>    Procedure Construct_Object
94850>>>>>        Forward Send Construct_Object
94852>>>>>        Set psCaption   to C_$CaptionCopy
94853>>>>>        Set psToolTip to C_$ToolTipCopy
94854>>>>>        Set psDescription to C_$DescCopy
94855>>>>>        Set psImage to "actionCopy.ico"
94856>>>>>        Set psShortcut to C_$Key_Ctrl_C
94857>>>>>        Set pbActiveUpdate to True
94858>>>>>        Set psCategory to C_$CategoryEdit
94859>>>>>    End_Procedure
94860>>>>>
94860>>>>>
94860>>>>>    Procedure OnExecute Variant vCommandBarControl
94862>>>>>        Send Copy of (focus(Self))
94863>>>>>    End_Procedure
94864>>>>>    
94864>>>>>    Function IsEnabled Returns Boolean
94866>>>>>        Boolean bEnabled
94866>>>>>        Get CanCopy of (Focus(Self)) to bEnabled
94867>>>>>        Function_Return bEnabled
94868>>>>>    End_Function
94869>>>>>         
94869>>>>>End_Class
94870>>>>>
94870>>>>>
94870>>>>>Class cCJPasteMenuItem is a cCJMenuItem
94871>>>>>    
94871>>>>>    Procedure Construct_Object
94873>>>>>        Forward Send Construct_Object
94875>>>>>        Set psCaption   to C_$CaptionPaste
94876>>>>>        Set psToolTip to C_$ToolTipPaste
94877>>>>>        Set psDescription to C_$DescPaste
94878>>>>>        Set psImage to "actionPaste.ico"
94879>>>>>        Set pbActiveUpdate to True
94880>>>>>        Set psShortcut to C_$Key_Ctrl_V
94881>>>>>        Set psCategory to C_$CategoryEdit
94882>>>>>    End_Procedure
94883>>>>>
94883>>>>>
94883>>>>>    Procedure OnExecute Variant vCommandBarControl
94885>>>>>        Send Paste of (focus(Self))
94886>>>>>    End_Procedure
94887>>>>>    
94887>>>>>    Function IsEnabled Returns Boolean
94889>>>>>        Boolean bEnabled
94889>>>>>        Get CanPaste of (Focus(Self)) to bEnabled
94890>>>>>        Function_Return bEnabled
94891>>>>>    End_Function
94892>>>>>         
94892>>>>>End_Class
94893>>>>>
94893>>>>>Class cCJSelectAllMenuItem is a cCJMenuItem
94894>>>>>    
94894>>>>>    Procedure Construct_Object
94896>>>>>        Forward Send Construct_Object
94898>>>>>        Set psCaption   to C_$CaptionSelectAll
94899>>>>>        Set psToolTip to C_$ToolTipSelectAll
94900>>>>>        Set psDescription to C_$DescSelectAll
94901>>>>>        Set pbActiveUpdate to True
94902>>>>>        Set psShortcut to C_$Key_Ctrl_A
94903>>>>>        Set psCategory to C_$CategoryEdit
94904>>>>>    End_Procedure
94905>>>>>
94905>>>>>
94905>>>>>    Procedure OnExecute Variant vCommandBarControl
94907>>>>>        Send Select_All of (focus(Self))
94908>>>>>    End_Procedure
94909>>>>>    
94909>>>>>    Function IsEnabled Returns Boolean
94911>>>>>        Boolean bEnabled
94911>>>>>        Get CanSelect of (Focus(Self)) to bEnabled
94912>>>>>        Function_Return bEnabled
94913>>>>>    End_Function
94914>>>>>         
94914>>>>>End_Class
94915>>>>>
94915>>>>> 
94915>>>>>Class cCJExitMenuItem is a cCJMenuItem
94916>>>>>
94916>>>>>    Procedure Construct_Object
94918>>>>>        Forward Send Construct_Object
94920>>>>>        Set psCaption to C_$CaptionExit
94921>>>>>        Set psToolTip to C_$ToolTipExit
94922>>>>>        Set psDescription to C_$ToolTipExit
94923>>>>>        Set psShortcut to C_$Key_Alt_F4
94924>>>>>        Set psCategory to C_$CategoryFile
94925>>>>>    End_Procedure
94926>>>>>
94926>>>>>    Procedure OnExecute Variant vCommandBarControl
94928>>>>>        Send Exit_Application of Desktop
94929>>>>>    End_Procedure
94930>>>>>
94930>>>>>End_Class           
94931>>>>>
94931>>>>>Class cCJHelpMenuItem is a cCJMenuItem    
94932>>>>>
94932>>>>>    Procedure Construct_Object
94934>>>>>        Forward Send Construct_Object
94936>>>>>        Set psCaption to C_$CaptionHelp
94937>>>>>        Set psDescription to C_$ToolTipHelp
94938>>>>>        Set psToolTip to C_$DescHelp
94939>>>>>        Set psImage to "ActionHelp.ico"
94940>>>>>        Set psShortcut to "F1"
94941>>>>>        Set psCategory to C_$CategoryHelp
94942>>>>>    End_Procedure
94943>>>>>    
94943>>>>>    Procedure OnExecute Variant vCommandBarControl
94945>>>>>        Send Help of (Focus(Self))
94946>>>>>    End_Procedure
94947>>>>>
94947>>>>>End_Class
94948>>>>>
94948>>>>>Class cCJStatusbarMenuItem is a cCJMenuItem
94949>>>>>
94949>>>>>    Procedure Construct_Object
94951>>>>>        Forward Send Construct_Object
94953>>>>>        Set psCaption to C_$CaptionAddStatusbar
94954>>>>>        Set psToolTip to C_$ToolTipAddStatusbar
94955>>>>>        Set psDescription to  C_$DescAddStatusbar
94956>>>>>        Set psCategory to C_$CategoryWindow
94957>>>>>    End_Procedure
94958>>>>>
94958>>>>>    Procedure OnExecute Variant vCommandBarControl
94960>>>>>        Handle hoCommandBars hoClientArea
94960>>>>>        Get CommandBarSystemObject to hoCommandBars
94961>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
94962>>>>>        If hoClientArea Begin
94964>>>>>            // the clientarea's parent panel has message
94964>>>>>            Send Toggle_StatusBar of (Parent(hoClientArea))
94965>>>>>        End
94965>>>>>>
94965>>>>>    End_Procedure
94966>>>>>
94966>>>>>     Function IsChecked Returns Boolean
94968>>>>>        Boolean bOn
94968>>>>>        Handle hoCommandBars hoClientArea
94968>>>>>        Get CommandBarSystemObject to hoCommandBars
94969>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
94970>>>>>        If hoClientArea Begin
94972>>>>>            // the clientarea's parent panel has message
94972>>>>>            Get StatusBar_State of (Parent(hoClientArea)) to bOn
94973>>>>>        End
94973>>>>>>
94973>>>>>        Function_Return bOn
94974>>>>>     End_Function
94975>>>>>End_Class
94976>>>>>
94976>>>>>Class cCJAutoArrangeIconsMenuItem is a cCJMenuItem
94977>>>>>
94977>>>>>    Procedure Construct_Object
94979>>>>>        Forward Send Construct_Object
94981>>>>>        Set psCaption to C_$CaptionAutoArrangeIcons
94982>>>>>        Set psToolTip to C_$ToolTipAutoArrangeIcons
94983>>>>>        Set psDescription to C_$DescAutoArrangeIcons
94984>>>>>        Set psCategory to C_$CategoryWindow
94985>>>>>    End_Procedure
94986>>>>>
94986>>>>>    Procedure OnExecute Variant vCommandBarControl
94988>>>>>        Handle hoCommandBars hoClientArea
94988>>>>>        Get CommandBarSystemObject to hoCommandBars
94989>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
94990>>>>>        If hoClientArea Begin
94992>>>>>            // the clientarea's parent panel has message
94992>>>>>            Send Toggle_Auto_Arrange_Icons of (Parent(hoClientArea))
94993>>>>>        End
94993>>>>>>
94993>>>>>    End_Procedure
94994>>>>>    
94994>>>>>     Function IsChecked Returns Boolean
94996>>>>>        Boolean bOn
94996>>>>>        Handle hoCommandBars hoClientArea
94996>>>>>        Get CommandBarSystemObject to hoCommandBars
94997>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
94998>>>>>        If hoClientArea Begin
95000>>>>>            // the clientarea's parent panel has message
95000>>>>>            Get Auto_Arrange_Icons_State of (Parent(hoClientArea)) to bOn
95001>>>>>        End
95001>>>>>>
95001>>>>>        Function_Return bOn
95002>>>>>     End_Function
95003>>>>>End_Class
95004>>>>>
95004>>>>>Class cCJRestoreMenusMenuItem is a cCJMenuItem
95005>>>>>
95005>>>>>    Procedure Construct_Object
95007>>>>>        Forward Send Construct_Object
95009>>>>>        Set psCaption to C_$CaptionRestoreMenus
95010>>>>>        Set psToolTip to C_$ToolTipRestoreMenus
95011>>>>>        Set psDescription to C_$DescRestoreMenus
95012>>>>>        Set psCategory to C_$CategoryWindow
95013>>>>>    End_Procedure
95014>>>>>
95014>>>>>    Procedure OnExecute Variant vCommandBarControl
95016>>>>>        Handle hoCommandBars
95016>>>>>        Get CommandBarSystemObject to hoCommandBars
95017>>>>>        Send RestoreLayout of hoCommandBars
95018>>>>>    End_Procedure
95019>>>>>    
95019>>>>>End_Class
95020>>>>>
95020>>>>>Class cCJCascadeMenuItem is a cCJMenuItem
95021>>>>>
95021>>>>>    Procedure Construct_Object
95023>>>>>        Forward Send Construct_Object
95025>>>>>        Set psCaption to C_$CaptionCascade
95026>>>>>        Set psToolTip to C_$ToolTipCascade
95027>>>>>        Set psDescription to  C_$DescCascade
95028>>>>>        Set psImage to "ActionCascade.ico"
95029>>>>>        Set psCategory to C_$CategoryWindow
95030>>>>>    End_Procedure
95031>>>>>    
95031>>>>>    Procedure OnExecute Variant vCommandBarControl
95033>>>>>        Handle hoCommandBars hoClientArea
95033>>>>>        Get CommandBarSystemObject to hoCommandBars
95034>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
95035>>>>>        If hoClientArea Begin
95037>>>>>            Send Cascade_Windows of hoClientArea
95038>>>>>        End
95038>>>>>>
95038>>>>>    End_Procedure
95039>>>>>End_Class
95040>>>>>
95040>>>>>Class cCJTileHorizontally is a cCJMenuItem
95041>>>>>
95041>>>>>    Procedure Construct_Object
95043>>>>>        Forward Send Construct_Object
95045>>>>>        Set psCaption to C_$CaptionTileHorizontally 
95046>>>>>        Set psToolTip to C_$ToolTipTileHorizontally  
95047>>>>>        Set psDescription to  C_$DescTileHorizontally
95048>>>>>        Set psImage to "ActionTileHorizontally.ico"
95049>>>>>        Set psCategory to C_$CategoryWindow
95050>>>>>    End_Procedure
95051>>>>>
95051>>>>>    Procedure OnExecute Variant vCommandBarControl
95053>>>>>        Handle hoCommandBars hoClientArea
95053>>>>>        Get CommandBarSystemObject to hoCommandBars
95054>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
95055>>>>>        If hoClientArea Begin
95057>>>>>            Send Tile_Windows_Horizontal of hoClientArea
95058>>>>>        End
95058>>>>>>
95058>>>>>    End_Procedure
95059>>>>>End_Class
95060>>>>>
95060>>>>>Class cCJTileVertically is a cCJMenuItem
95061>>>>>
95061>>>>>    Procedure Construct_Object
95063>>>>>        Forward Send Construct_Object
95065>>>>>        Set psCaption to C_$CaptionTileVertically  
95066>>>>>        Set psToolTip to C_$ToolTipTileVertically
95067>>>>>        Set psDescription to  C_$DescTileVertically
95068>>>>>        Set psImage to "ActionTileVertically.ico"
95069>>>>>        Set psCategory to C_$CategoryWindow
95070>>>>>    End_Procedure
95071>>>>>
95071>>>>>    Procedure OnExecute Variant vCommandBarControl
95073>>>>>        Handle hoCommandBars hoClientArea
95073>>>>>        Get CommandBarSystemObject to hoCommandBars
95074>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
95075>>>>>        If hoClientArea Begin
95077>>>>>            Send Tile_Windows_Vertical of hoClientArea
95078>>>>>        End
95078>>>>>>
95078>>>>>    End_Procedure
95079>>>>>End_Class
95080>>>>>
95080>>>>>Class cCJMinimizeWindowsMenuItem is a cCJMenuItem
95081>>>>>
95081>>>>>    Procedure Construct_Object
95083>>>>>        Forward Send Construct_Object
95085>>>>>        Set psCaption to C_$CaptionMinimizeWindows 
95086>>>>>        Set psToolTip to C_$ToolTipMinimizeWindows
95087>>>>>        Set psDescription to  C_$DescMinimizeWindows
95088>>>>>        Set psCategory to C_$CategoryWindow
95089>>>>>    End_Procedure
95090>>>>>
95090>>>>>    Procedure OnExecute Variant vCommandBarControl
95092>>>>>        Handle hoCommandBars hoClientArea
95092>>>>>        Get CommandBarSystemObject to hoCommandBars
95093>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
95094>>>>>        If hoClientArea Begin
95096>>>>>            // the clientarea's parent panel has message
95096>>>>>            Send Minimize_all_Windows of (Parent(hoClientArea))
95097>>>>>        End
95097>>>>>>
95097>>>>>    End_Procedure
95098>>>>>End_Class
95099>>>>>
95099>>>>>
95099>>>>>Class cCJRestoreWindowsMenuItem is a cCJMenuItem
95100>>>>>
95100>>>>>    Procedure Construct_Object
95102>>>>>        Forward Send Construct_Object
95104>>>>>        Set psCaption to C_$CaptionRestoreWindows
95105>>>>>        Set psToolTip to C_$ToolTipRestoreWindows
95106>>>>>        Set psDescription to  C_$DescRestoreWindows
95107>>>>>        Set psCategory to C_$CategoryWindow
95108>>>>>    End_Procedure
95109>>>>>
95109>>>>>    Procedure OnExecute Variant vCommandBarControl
95111>>>>>        Handle hoCommandBars hoClientArea
95111>>>>>        Get CommandBarSystemObject to hoCommandBars
95112>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
95113>>>>>        If hoClientArea Begin
95115>>>>>            // the clientarea's parent panel has message
95115>>>>>            Send Restore_all_Windows of (Parent(hoClientArea))
95116>>>>>        End
95116>>>>>>
95116>>>>>    End_Procedure
95117>>>>>End_Class
95118>>>>>
95118>>>>>Class cCJArrangeIconsMenuItem is a cCJMenuItem
95119>>>>>
95119>>>>>    Procedure Construct_Object
95121>>>>>        Forward Send Construct_Object
95123>>>>>        Set psCaption to C_$CaptionArrangeIcons  
95124>>>>>        Set psToolTip to C_$ToolTipArrangeIcons
95125>>>>>        Set psDescription to  C_$DescArrangeIcons
95126>>>>>        Set psCategory to C_$CategoryWindow
95127>>>>>    End_Procedure
95128>>>>>
95128>>>>>    Procedure OnExecute Variant vCommandBarControl
95130>>>>>        Handle hoCommandBars hoClientArea
95130>>>>>        Get CommandBarSystemObject to hoCommandBars
95131>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
95132>>>>>        If hoClientArea Begin
95134>>>>>            Send Arrange_Icons of hoClientArea
95135>>>>>        End
95135>>>>>>
95135>>>>>    End_Procedure
95136>>>>>
95136>>>>>End_Class
95137>>>>>    
95137>>>Use cCJAboutMenuItem.pkg
Including file: cCJAboutMenuItem.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cCJAboutMenuItem.pkg)
95137>>>>>Use cCJCommandBarSystem.pkg
95137>>>>>Use LanguageText.pkg
95137>>>>>
95137>>>>>// It is expected that if you use this class that you provide an about object that is
95137>>>>>// activated via activate_about such as DfAbout.pkg. We don't use this for you automatically
95137>>>>>// because you may wish to create your own custom about package.
95137>>>>>
95137>>>>>Class cCJAboutMenuItem is a cCJMenuItem    
95138>>>>>
95138>>>>>    Procedure Construct_Object
95140>>>>>        Forward Send Construct_Object
95142>>>>>        Set psCaption to C_$CaptionAbout
95143>>>>>        Set psDescription to C_$ToolTipAbout
95144>>>>>        Set psToolTip to C_$DescAbout
95145>>>>>        Set psImage to "ActionAbout.ico"
95146>>>>>        Set psCategory to C_$CategoryHelp
95147>>>>>    End_Procedure
95148>>>>>    
95148>>>>>    Procedure OnExecute Variant vCommandBarControl
95150>>>>>        Handle hoCommandBars hoClientArea
95150>>>>>        Get CommandBarSystemObject to hoCommandBars
95151>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
95152>>>>>        If hoClientArea Begin
95154>>>>>            Send Activate_About of hoClientArea
95155>>>>>        End
95155>>>>>>
95155>>>>>    End_Procedure
95156>>>>>
95156>>>>>End_Class
95157>>>>>
95157>>>>>
95157>>>Use cCJDeoMenuItemClasses.pkg
95157>>>Use cCJMDIWindowsMenuItem.pkg
Including file: cCJMDIWindowsMenuItem.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cCJMDIWindowsMenuItem.pkg)
95157>>>>>Use cCJCommandBarSystem.pkg
95157>>>>>
95157>>>>>Register_Function Client_ID Returns Integer
95157>>>>>
95157>>>>>// only used by cCJMDIWIndowsMenuItem
95157>>>>>Class cCJMDIWindowItem is a cCJMenuItem
95158>>>>>
95158>>>>>    Procedure Construct_Object
95160>>>>>        Forward Send Construct_Object
95162>>>>>        Property Handle phWindow 0 // object id of view
95163>>>>>        Set pbControlFlagNoMovable to True
95164>>>>>        Set pbActiveUpdate to True
95165>>>>>    End_Procedure
95166>>>>>    
95166>>>>>    Procedure OnExecute Variant vCommandBarControl
95168>>>>>        Handle hWindow
95168>>>>>        Get phWindow to hWindow
95169>>>>>        Send Activate_View of hWindow
95170>>>>>    End_Procedure
95171>>>>>    
95171>>>>>End_Class                
95172>>>>>
95172>>>>>
95172>>>>>Class cCJMDIWindowsMenuItem is a cCJMenuItem
95173>>>>>    
95173>>>>>    Procedure Construct_Object
95175>>>>>        Forward Send Construct_Object
95177>>>>>        Property Handle[] phArrayOfWindows
95178>>>>>        Set peControlType to xtpControlPopup
95179>>>>>        Set psCategory to C_$CategoryWindow
95180>>>>>    End_Procedure
95181>>>>>    
95181>>>>>     // This adds MDI windows to the existing menu items.
95181>>>>>     // This removes any existing windows menus and always adds a new set to the end
95181>>>>>
95181>>>>>     Procedure OnPopupInit Variant vCommandBarControl Handle hCommandBarControls
95183>>>>>        Handle  hClientArea hView
95183>>>>>        String  sLabel
95183>>>>>        Integer i iWindows
95183>>>>>        Handle[] hArrayOfWindows
95184>>>>>        Variant vItem
95184>>>>>        
95184>>>>>        // delete all windows actions and menu items. Assume we have an array of DF action objects for the windows
95184>>>>>        // also assume that destroying an action removes all menu instances of that action
95184>>>>>        Get phArrayOfWindows to hArrayOfWindows
95185>>>>>        Move (SizeOfArray(hArrayOfWindows)) to iWindows
95186>>>>>        For i from 0 to (iWindows-1)
95192>>>>>>
95192>>>>>            Send Destroy of hArrayOfWindows[i] // assume this removes all menu items of this action
95193>>>>>        Loop
95194>>>>>>
95194>>>>>        Move (ResizeArray(hArrayOfWindows,0)) to hArrayOfWindows
95195>>>>>
95195>>>>>        // Add all views to this menu. Create the action and add the item
95195>>>>>        Move 0 to i
95196>>>>>        Get Client_Id to hClientArea // object id of client area
95197>>>>>        If (hClientArea > 0) Begin
95199>>>>>            Get Next_Mdi_Dialog of hClientArea True to hView // find first view
95200>>>>>            While (hView <> 0)
95204>>>>>                If (Active_State(hView)) Begin
95206>>>>>                    // create the action
95206>>>>>                    Get Create U_cCJMDIWindowItem to hArrayOfWindows[i]
95207>>>>>                    Get Label of hView to sLabel // caption bar (name) of view
95208>>>>>                    Set psCaption of hArrayOfWindows[i] to sLabel
95209>>>>>                    Set psDescription of hArrayOfWindows[i] to ("Make this view (" - trim(sLabel) - ") the active window.")
95210>>>>>                    If (current_scope(desktop)=hView and View_mode(hView)<>VIEWMODE_ICONIZE) Begin
95212>>>>>                        Set pbChecked of hArrayOfWindows[i] to True
95213>>>>>                    End
95213>>>>>>
95213>>>>>                    Set phWindow of hArrayOfWindows[i] to hView // used by custom OnExecute
95214>>>>>                    If (i=0) Begin
95216>>>>>                        Set pbControlBeginGroup of hArrayOfWindows[i] to True
95217>>>>>                    End
95217>>>>>>
95217>>>>>                    // Create a menu item for this action
95217>>>>>                    Get AddDynamicControl of hArrayOfWindows[i] hCommandBarControls to vItem
95218>>>>>                    Increment i
95219>>>>>                End
95219>>>>>>
95219>>>>>                Get Next_Mdi_Dialog of hClientArea False to hView // find next
95220>>>>>            Loop
95221>>>>>>
95221>>>>>        End
95221>>>>>>
95221>>>>>
95221>>>>>        Set phArrayOfWindows to hArrayOfWindows
95222>>>>>
95222>>>>>     End_Procedure
95223>>>>>     
95223>>>>>End_Class
95224>>>>>
95224>
95224>Object oHtmlHelp is a cHtmlHelp
95226>End_Object
95227>
95227>Object oApplication is a cApplication
95229>    Set peHelpType to htHtmlHelp
95230>End_Object
95231>
95231>Object oToolTipController is a cVDFD_CE_ToolTipController
95233>    Move Self to ghoToolTipController
95234>End_Object
95235>
95235>Use oEditContextMenu.pkg
Including file: oEditContextMenu.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\oEditContextMenu.pkg)
95235>>>Use cCJStandardMenuItemClasses.pkg
95235>>>
95235>>>Object oEditContextMenu is a cCJContextMenu
95237>>>    
95237>>>    Move Self to Default_Form_Floating_Menu_ID
95238>>>    
95238>>>    Object oUndoMenuItem is a cCJUndoMenuItem
95240>>>    End_Object
95241>>>    
95241>>>    Object oCutMenuItem is a cCJCutMenuItem
95243>>>        Set pbControlBeginGroup to True
95244>>>    End_Object
95245>>>    
95245>>>    Object oCopyMenuItem is a cCJCopyMenuItem
95247>>>    End_Object
95248>>>
95248>>>    Object oPasteMenuItem is a cCJPasteMenuItem
95250>>>    End_Object
95251>>>
95251>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
95253>>>    End_Object
95254>>>
95254>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
95256>>>        Set pbControlBeginGroup to True
95257>>>    End_Object
95258>>>
95258>>>End_Object
95259>>>
95259>Use oDEOEditContextMenu17.pkg
Including file: oDEOEditContextMenu17.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\oDEOEditContextMenu17.pkg)
95259>>>Use Windows.pkg
95259>>>Use cCJStandardMenuItemClasses.pkg
95259>>>Use cCJDeoMenuItemClasses.pkg
95259>>>
95259>>>
95259>>>Object oDEOEditContextMenu17 is a cCJContextMenu
95261>>>    
95261>>>    Move Self to Default_dbFloating_Menu_ID
95262>>>    
95262>>>    Object oUndoMenuItem is a cCJUndoMenuItem
95264>>>    End_Object
95265>>>    
95265>>>    Object oCutMenuItem is a cCJCutMenuItem
95267>>>        Set pbControlBeginGroup to True
95268>>>    End_Object
95269>>>    
95269>>>    Object oCopyMenuItem is a cCJCopyMenuItem
95271>>>    End_Object
95272>>>
95272>>>    Object oPasteMenuItem is a cCJPasteMenuItem
95274>>>    End_Object
95275>>>
95275>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
95277>>>    End_Object
95278>>>
95278>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
95280>>>        Set pbControlBeginGroup to True
95281>>>    End_Object
95282>>>
95282>>>    Object oPromptMenuItem is a cCJPromptMenuItem
95284>>>        Set pbControlBeginGroup to True
95285>>>    End_Object
95286>>>
95286>>>    Object oFindNextMenu is a cCJFindNextMenuItem
95288>>>        Set pbControlBeginGroup to True
95289>>>    End_Object
95290>>>
95290>>>    Object oFindPreviousMenu is a cCJFindPreviousMenuItem
95292>>>    End_Object
95293>>>
95293>>>    Object oClearMenuItem is a cCJClearMenuItem
95295>>>        Set pbControlBeginGroup to True
95296>>>    End_Object
95297>>>
95297>>>    Object oClearAllMenu is a cCJClearAllMenuItem
95299>>>    End_Object
95300>>>
95300>>>    Object oSaveMenu is a cCJSaveMenuItem
95302>>>    End_Object
95303>>>    
95303>>>    Object oDeleteMenu is a cCJDeleteMenuItem
95305>>>    End_Object
95306>>>
95306>>>    Object oRememberitem is a cCJRememberFieldMenuItem
95308>>>        Set pbControlBeginGroup to True
95309>>>    End_Object
95310>>>
95310>>>    Object oRetainItem is a cCJRememberLastFieldMenuItem
95312>>>    End_Object
95313>>>
95313>>>    Object oUnRememberitem is a cCJUnRememberFieldMenuItem
95315>>>    End_Object
95316>>>
95316>>>    Object oCJClearAllDynamicDefaults is a cCJUnRememberFieldAllMenuItem
95318>>>    End_Object
95319>>>
95319>>>End_Object
95320>
95320>Object oMain is a cVDFD_CE_Panel
95322>    Set Label To "My Project"
95323>    Set Location to 4 3
95324>    Set Size to 300 450
95325>
95325>    Object oCommandBarSystem is a cCJCommandBarSystem
95327>        Set pbTimerUpdate to True
95328>
95328>        Procedure OnCreateCommandBars
95331>            Handle hoOptions
95331>            Get OptionsObject to hoOptions
95332>            Forward Send OnCreateCommandBars
95334>        End_Procedure
95335>
95335>        Object oMenuBar is a cCJMenuBar
95337>
95337>            Object oFileMenu is a cCJMenuItem
95339>                Set peControlType to xtpControlPopup          
95340>                Set psCaption   to "&File"
95341>                Set psDescription to "Find, Save, Delete, Clear information or quit this application."
95342>                Set psCategory to "Menus"
95343>
95343>                Object oClearMenuItem is a cCJClearMenuItem
95345>                    Set pbAddToDesignerMenu to True
95346>                End_Object
95347>
95347>                Object oClearAllMenu is a cCJClearAllMenuItem
95349>                    Set pbAddToDesignerMenu to True
95350>                End_Object
95351>
95351>                Object oPromptMenuItem is a cCJPromptMenuItem
95353>                    Set pbAddToDesignerMenu to True
95354>                    Set pbControlBeginGroup to True
95355>                End_Object
95356>
95356>                Object oFindMenuItem is a cCJFindMenuItem
95358>                    Set pbAddToDesignerMenu to True
95359>                    Set pbControlBeginGroup to True
95360>                End_Object
95361>
95361>                Object oFindNextMenu is a cCJFindNextMenuItem
95363>                    Set pbAddToDesignerMenu to True
95364>                End_Object
95365>
95365>                Object oFindPreviousMenu is a cCJFindPreviousMenuItem
95367>                    Set pbAddToDesignerMenu to True
95368>                End_Object
95369>
95369>                Object oFindFirstMenu is a cCJFindFirstMenuItem
95371>                    Set pbAddToDesignerMenu to True
95372>                End_Object
95373>
95373>                Object oFindLastMenu is a cCJFindLastMenuItem
95375>                    Set pbAddToDesignerMenu to True
95376>                End_Object
95377>
95377>                Object oSaveMenuItem is a cCJSaveMenuItem
95379>                    Set pbAddToDesignerMenu to True
95380>                    Set pbControlBeginGroup to True
95381>                End_Object
95382>
95382>                Object oDeleteMenuItem is a cCJDeleteMenuItem
95384>                    Set pbAddToDesignerMenu to True
95385>                End_Object
95386>
95386>                Object oExitMenu is a cCJExitMenuItem
95388>                    Set pbControlBeginGroup to True
95389>                End_Object
95390>
95390>            End_Object
95391>
95391>            Object oViewMenu is a cCJMenuItem
95393>                Set peControlType to xtpControlPopup
95394>                Set psCaption to "&View"
95395>                Set psToolTip to "View"
95396>                Set psDescription to "Available Views"
95397>
95397>                Object oNewViewMenuItem is a cCJMenuItem
95399>                    Set psCaption to "New View"
95400>                    Set psTooltip to "New View"
95401>                
95401>                    Procedure OnExecute Variant vCommandBarControl
95404>                        Handle hoClient
95404>                        Get Client_Id to hoClient
95405>                        Send Activate_oTEST_VDFD_CE_vw of hoClient
95406>                    End_Procedure
95407>                End_Object
95408>            End_Object
95409>            
95409>            Object oReportMenu is a cCJMenuItem
95411>                Set peControlType to xtpControlPopup          
95412>                Set psCaption to "&Report"
95413>                Set psToolTip to "Report"
95414>                Set psDescription to "Available Reports"
95415>            End_Object
95416>
95416>            Object oNavigateMenu is a cCJMenuItem
95418>                Set peControlType to xtpControlPopup      
95419>                Set psCaption to "&Navigate"    
95420>                Set psTooltip to "Navigate"    
95421>                Set psDescription to "Move to different areas of the application"
95422>
95422>                Object oNextAreaMenu is a cCJNextAreaMenu
95424>                End_Object
95425>
95425>                Object oPriorAreaMenu is a cCJPriorAreaMenu
95427>                End_Object
95428>
95428>                Object oNextViewMenu is a cCJNextViewMenu
95430>                End_Object
95431>
95431>                Object oPriorViewMenu is a cCJPriorViewMenu
95433>                End_Object
95434>
95434>                Object oPromptMenu is a cCJPromptMenuItem
95436>                    Set pbControlBeginGroup to True
95437>                End_Object
95438>
95438>                Object oZoomMenu is a cCJZoomMenuItem
95440>                End_Object
95441>
95441>            End_Object
95442>
95442>            Object oWindowMenu is a cCJMDIWindowsMenuItem
95444>                Set peControlType to xtpControlPopup
95445>                Set psCaption to "&Window"
95446>                Set psToolTip to "Window"
95447>                Set psDescription to "Display Current Views and set other display options."    
95448>
95448>                // These are the static windows items. More will be created in onInitPopup 
95448>                Object oDisplayOptionsMenu is a cCJMenuItem
95450>                    Set peControlType to xtpControlPopup          
95451>                    Set psCaption to "&Display Options"
95452>                    Set psToolTip to "Display Options"
95453>                    Set psDescription to "Set display options"
95454>
95454>                    Object oStatusbarMenu is a cCJStatusbarMenuItem
95456>                    End_Object
95457>
95457>                    Object oAutoArrangeIconsMenu is a cCJAutoArrangeIconsMenuItem
95459>                    End_Object
95460>
95460>                    Object oRestoreMenusMenu is a cCJRestoreMenusMenuItem
95462>                        Set pbControlBeginGroup to True
95463>                    End_Object
95464>
95464>                End_Object
95465>
95465>                Object oCascadeMenu is a cCJCascadeMenuItem
95467>                    Set pbControlBeginGroup to True
95468>                End_Object
95469>
95469>                Object oHorizTile is a cCJTileHorizontally
95471>                End_Object
95472>
95472>                Object oVertTile is a cCJTileVertically
95474>                End_Object
95475>
95475>                Object oMinimizeMenuItem is a cCJMinimizeWindowsMenuItem
95477>                    Set pbControlBeginGroup to True
95478>                End_Object
95479>
95479>                Object oRestoreMenuItem is a cCJRestoreWindowsMenuItem
95481>                End_Object
95482>
95482>                Object oArrangeIconsMenuItem is a cCJAutoArrangeIconsMenuItem
95484>                    Set pbControlBeginGroup to True
95485>                End_Object
95486>
95486>            End_Object
95487>
95487>            Object oHelpMenu is a cCJMenuItem
95489>                Set peControlType to xtpControlPopup    
95490>                Set psCaption to "&Help"
95491>                Set psDescription to "Access Information for learning and using this DataFlex application."
95492>                Set psToolTip to "Help"
95493>
95493>                Object oHelpMenuItem is a cCJHelpMenuItem 
95495>                End_Object
95496>
95496>                Object oAboutMenuItem is a cCJAboutMenuItem
95498>                End_Object
95499>
95499>            End_Object
95500>
95500>        End_Object
95501>
95501>        Object oFindToolBar is a cCJToolbar
95503>            Set psTitle to "Finding Toolbar"
95504>
95504>            Object oFindFirstTool is a cCJFindFirstMenuItem
95506>            End_Object
95507>
95507>            Object oFindPreviousTool is a cCJFindPreviousMenuItem
95509>            End_Object
95510>
95510>            Object oFindMenuTool is a cCJFindMenuItem
95512>            End_Object
95513>
95513>            Object oFindNextTool is a cCJFindNextMenuItem
95515>            End_Object
95516>
95516>            Object oFindLastTool is a cCJFindLastMenuItem
95518>            End_Object
95519>
95519>            Object oPromptToolItem is a cCJPromptMenuItem
95521>                Set pbControlBeginGroup to True
95522>            End_Object
95523>
95523>        End_Object
95524>
95524>        Object oFileToolBar is a cCJToolbar
95526>            Set psTitle to "Data Entry Toolbar"
95527>
95527>            Object oClearToolItem is a cCJClearMenuItem
95529>                Set peControlStyle to xtpButtonIconAndCaption
95530>            End_Object
95531>
95531>            Object oClearAllToolItem2 is a cCJClearAllMenuItem
95533>                Set peControlStyle to xtpButtonIconAndCaption
95534>            End_Object
95535>
95535>            Object oSaveToolItem is a cCJSaveMenuItem
95537>                Set peControlStyle to xtpButtonIconAndCaption
95538>                Set pbControlBeginGroup to True
95539>            End_Object
95540>
95540>            Object oDeleteToolItem is a cCJDeleteMenuItem
95542>                Set peControlStyle to xtpButtonIconAndCaption
95543>            End_Object
95544>
95544>        End_Object
95545>
95545>        Object oEditToolBar is a cCJToolbar
95547>            Set psTitle to "Edit Toolbar"
95548>
95548>            Object oCutToolbarItem is a cCJCutMenuItem
95550>            End_Object
95551>
95551>            Object oCopyToolbarItem is a cCJCopyMenuItem
95553>            End_Object
95554>
95554>            Object oPasteToolbarItem is a cCJPasteMenuItem
95556>            End_Object
95557>
95557>            Object oDeleteEditToolbarItem is a cCJDeleteEditMenuItem
95559>                Set pbControlBeginGroup to True
95560>            End_Object
95561>
95561>        End_Object
95562>
95562>        Object oRememberToolbar is a cCJToolbar
95564>
95564>            Object oRememberItems is a cCJMenuItem
95566>
95566>                Set peControlType to xtpControlPopup
95567>                Set peControlStyle to xtpButtonCaption
95568>                Set psCaption to C_$Remember
95569>                
95569>                Object oMenuItem is a cCJRememberFieldMenuItem
95571>                    Set peControlStyle to xtpButtonIconAndCaption
95572>                End_Object
95573>                
95573>                Object oMenuItem is a cCJRememberLastFieldMenuItem
95575>                    Set peControlStyle to xtpButtonIconAndCaption
95576>                End_Object
95577>                
95577>                Object oMenuItem is a cCJUnRememberFieldMenuItem
95579>                    Set peControlStyle to xtpButtonIconAndCaption
95580>                End_Object
95581>                
95581>                Object oMenuItem is a cCJUnRememberFieldAllMenuItem
95583>                    Set peControlStyle to xtpButtonIconAndCaption
95584>                End_Object
95585>
95585>            End_Object
95586>            
95586>        End_Object
95587>        
95587>        Object oStatusBar is a cCJStatusBar
95589>
95589>            Object oStatusPane1 is a cCJStatusBarPane
95591>                Set piID to sbpIDIdlePane
95592>                Set pbStyleStretch to True
95593>            End_Object
95594>
95594>            Object oStatusPane2 is a cCJStatusBarPane
95596>                Set phoViewPane to Self
95597>                Set pbStyleStretch to True
95598>            End_Object
95599>
95599>        End_Object
95600>
95600>    End_Object
95601>
95601>    Object oClientArea is a cVDFD_CE_ClientArea
95603>        Use StdAbout.pkg
Including file: StdAbout.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\StdAbout.pkg)
95603>>>//************************************************************************
95603>>>// Confidential Trade Secret.
95603>>>// Copyright (c) 1997 Data Access Corporation, Miami Florida
95603>>>// as an unpublished work.  All rights reserved.
95603>>>// DataFlex is a registered trademark of Data Access Corporation.
95603>>>//
95603>>>//************************************************************************
95603>>>//************************************************************************
95603>>>//
95603>>>// $File name  : StdAbout.pkg
95603>>>// $File title : Standard about object package for VDF
95603>>>// Notice      :
95603>>>// $Author(s)  : John Tuohy
95603>>>//
95603>>>// $Rev History
95603>>>//
95603>>>// JT 06/27/97   File created
95603>>>//************************************************************************
95603>>>
95603>>>// This provides a quick and simple way to create an about package for a program.
95603>>>// You need to create a message inside you client area called Activate_About.
95603>>>// Within this message you should send the message DoAbout passing needed
95603>>>// string information.
95603>>>//
95603>>>//       Procedure Activate_About
95603>>>//           Send DoAbout sTitle sVersion sCopyright sAuthor sBitmap
95603>>>//       End_Procedure
95603>>>//    where: sTitle =     Name of application. If none provided, uses caption
95603>>>//                        bar title
95603>>>//           sVersion   = Version Line. If none provided, will be blank
95603>>>//           sCopyRight = Copyright Line. If none provided, will be blank
95603>>>//           sAuthor    = Author name, blank if none provided
95603>>>//           sBitMap    = Bitmap logo. If none provided, standard VDF bitmap
95603>>>//                        is used.
95603>>>// It is expected that you will place this in your own object package. For
95603>>>// example an order about package may look like this:
95603>>>//
95603>>>//   // OrderAbout.pkg
95603>>>//   Use StdAbout.pkg
95603>>>//   Procedure Activate_About
95603>>>//      String sTitle sCopyright sVersion sAuthor
95603>>>//      Move "My Order Entry System" to sTitle
95603>>>//      Move "Version 2.1" to sVersion
95603>>>//      Move "Copyright 1997, Super Software Inc." to sCopyright
95603>>>//      Move "John Smith"  to sAuthor
95603>>>//      Send DoAbout sTitle sVersion sCopyright sAuthor ""
95603>>>//   end_procedure
95603>>>//   // end of file.
95603>>>
95603>>>Use DfAbout.pkg
Including file: Dfabout.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\Dfabout.pkg)
95603>>>>>//************************************************************************
95603>>>>>// Confidential Trade Secret.
95603>>>>>// Copyright (c) 1997 Data Access Corporation, Miami Florida
95603>>>>>// as an unpublished work.  All rights reserved.
95603>>>>>// DataFlex Is A registered trademark Of Data Access Corporation.
95603>>>>>//
95603>>>>>//************************************************************************
95603>>>>>//************************************************************************
95603>>>>>//
95603>>>>>// $File name  : DfAbout.pkg
95603>>>>>// $File title : About class support
95603>>>>>// Notice      :
95603>>>>>// $Author(s)  : Vincent Oorsprong, Ken Ross
95603>>>>>//
95603>>>>>// $Rev History
95603>>>>>//
95603>>>>>// VOO 02/22/2012 Replaced obsolete code, improved Network_User_Name by asking
95603>>>>>//                Windows for the size first. 
95603>>>>>// VOO 07/25/2003 Removed OnResize procedure for sysinfo dialog. Replaced logic
95603>>>>>//                with anchor technique. Removed unnessary property in the
95603>>>>>//                sysinfo dialog. Changed the size Of the about & sysinfo dialog
95603>>>>>//                object To better look in Windows XP. Repositioned the close
95603>>>>>//                button in the sysinfo dialog To line up with the display area
95603>>>>>//                Replaced obsolete code and techniques. Removed dead code.
95603>>>>>// JJT 10/23/2001 removed all ghoworkspace support. Uses app object or nothing
95603>>>>>// SWB 07/19/01   Added support Of the Application object in preference to
95603>>>>>//                the global Workspace object, if it is present
95603>>>>>// JJT 11/05/98   Added version information
95603>>>>>// VOO 29/10/98   Replaced the GetFreeSystemResources for the Win32 variant
95603>>>>>// JJT 7/31/97    Registered Enumerate Workspace so dfabout can exist without
95603>>>>>//                workspace package.
95603>>>>>// JJT 6/27/97    Turned the sysinfo objects into classes so the AboutDialog
95603>>>>>//                class can create this object.
95603>>>>>//                Cleaned up the interface (used correct classes and messages)
95603>>>>>//                Added workspace reporting support To sys-info.
95603>>>>>//                Turned off wrapping in the sys-info editor.
95603>>>>>// KR  ??/??/96   File created
95603>>>>>//************************************************************************
95603>>>>>Use LanguageText.pkg
95603>>>>>Use Windows.pkg
95603>>>>>Use DFbitmap.pkg
95603>>>>>Use GlobalFunctionsProcedures.pkg
95603>>>>>Use cTextEdit.pkg
95603>>>>>
95603>>>>>Use cli.pkg
Including file: cli.pkg    (C:\Program Files\Visual DataFlex 17.1\Pkg\cli.pkg)
95603>>>>>>>//*****************************************************************************
95603>>>>>>>//*** CLI.PKG                                                               ***
95603>>>>>>>//***                                                                       ***
95603>>>>>>>//*** Author: Ben Weijers                                                   ***
95603>>>>>>>//***         Data Access Nederland                                         ***
95603>>>>>>>//***         10 September 1998                                             ***
95603>>>>>>>//***                                                                       ***
95603>>>>>>>//*** Purpose:                                                              ***
95603>>>>>>>//***   CLI specific functionality. There are several connectivity kits     ***
95603>>>>>>>//***   based on  SQL/92 CLI. Those are:                                    ***
95603>>>>>>>//***    - ODBC_DRV  The Data Access CK for ODBC                            ***
95603>>>>>>>//***    - DB2_DRV   The Data Access CK for DB2                             ***
95603>>>>>>>//***    - MSSQLDRV  The Data Access CK for Microsoft SQL Server            ***
95603>>>>>>>//***                                                                       ***
95603>>>>>>>//***   This package defines the common functionality for all CLI based     ***
95603>>>>>>>//***   drivers.                                                            ***
95603>>>>>>>//***                                                                       ***
95603>>>>>>>//***   Updated:  May 23rd 2008 (Current CK build: 5.0.0.53 )               ***
95603>>>>>>>//***             Added NULLABLE and DEFAULT attributes for DATETIME type   ***
95603>>>>>>>//***   Updated:  Apr  6th 2009 (Current CK build: 5.0.0.61 )               ***
95603>>>>>>>//***             Added DF_DRIVER_MATCH_CLIENT_SERVER_VERSION attribute     ***
95603>>>>>>>//***                   DF_DRIVER_SQLSERVER_CLIENT_VERSION    attribute     ***
95603>>>>>>>//***   Updated:  Mar 30th 2012 (Current CK build: 5.1.0.93 )               ***
95603>>>>>>>//***             Added SQLSERVER2012CLIENT return value for                ***
95603>>>>>>>//***             DF_DRIVER_SQLSERVER_CLIENT_VERSION attribute              ***
95603>>>>>>>//***   Updated:  June 4th 2012 (Current CK build: 5.1.0.96)                ***
95603>>>>>>>//***             Moved SQL Server client constants from cli.pkg to         ***
95603>>>>>>>//***             mssqldrv.pkg                                              ***
95603>>>>>>>//*****************************************************************************
95603>>>>>>>
95603>>>>>>>//*** We are not using ifndef below becuase that is not supported in Character Mode
95603>>>>>>>//*** Driver attributes
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>//-------------------------------------
95603>>>>>>>
95603>>>>>>>//*** Replacement for logical column number that indicates all columns
95603>>>>>>>
95603>>>>>>>//*** Possible DF_FILE_GENERATE_RECORD_ID_METHOD values
95603>>>>>>>
95603>>>>>>>//*** Possible DF_FIELD_READ_ONLY values
95603>>>>>>>
95603>>>>>>>// Moved to Mssqldrv.pkg
95603>>>>>>>//*** Possible DF_DRIVER_SQLSERVER_CLIENT_VERSION values
95603>>>>>>>//#REPLACE SQLSERVERUNKNOWNCLIENT  0
95603>>>>>>>//#REPLACE SQLSERVER2000CLIENT     8          //   "SQL Server"
95603>>>>>>>//#REPLACE SQLSERVER2005CLIENT     9          //   "SQL Native Client"
95603>>>>>>>//#REPLACE SQLSERVER2008CLIENT    10          //   "SQL Server Native Client 10.0"
95603>>>>>>>//#Replace SQLSERVER2012CLIENT    11          //   "SQL Server Native Client 11.0"
95603>>>>>>>
95603>>>>>>>//*** Possible SQL Column type values
95603>>>>>>>Define SQL_UNKNOWN_TYPE   For    0
95603>>>>>>>Define SQL_CHAR           For    1
95603>>>>>>>Define SQL_NUMERIC        For    2
95603>>>>>>>Define SQL_DECIMAL        For    3
95603>>>>>>>Define SQL_INTEGER        For    4
95603>>>>>>>Define SQL_SMALLINT       For    5
95603>>>>>>>Define SQL_FLOAT          For    6
95603>>>>>>>Define SQL_REAL           For    7
95603>>>>>>>Define SQL_DOUBLE         For    8
95603>>>>>>>Define SQL_DATETIME       For    9
95603>>>>>>>Define SQL_VARCHAR        For   12
95603>>>>>>>Define SQL_TYPE_DATE      For   91
95603>>>>>>>Define SQL_TYPE_TIME      For   92
95603>>>>>>>Define SQL_TYPE_TIMESTAMP For   93
95603>>>>>>>
95603>>>>>>>Define SQL_DATE           For    9
95603>>>>>>>Define SQL_INTERVAL       For   10
95603>>>>>>>Define SQL_TIME           For   10
95603>>>>>>>Define SQL_TIMESTAMP      For   11
95603>>>>>>>Define SQL_LONGVARCHAR    For  (-1)
95603>>>>>>>Define SQL_BINARY         For  (-2)
95603>>>>>>>Define SQL_VARBINARY      For  (-3)
95603>>>>>>>Define SQL_LONGVARBINARY  For  (-4)
95603>>>>>>>Define SQL_BIGINT         For  (-5)
95603>>>>>>>Define SQL_TINYINT        For  (-6)
95603>>>>>>>Define SQL_BIT            For  (-7)
95603>>>>>>>Define SQL_WCHAR          For  (-8)
95603>>>>>>>Define SQL_WVARCHAR       For  (-9)
95603>>>>>>>Define SQL_WLONGVARCHAR   For (-10)
95603>>>>>>>Define SQL_GUID           For (-11)
95603>>>>>>>
95603>>>>>>>//*** Driver level attributes
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>//*** Error number constants
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>//*** Call driver function identifiers
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>//*** Init data source types
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>//*** Dummy strings used in the commands
95603>>>>>>>    String  CLI$StrDummy 255
95603>>>>>>>    Integer CLI$IntDummy
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>//*****************************************************************************
95603>>>>>>>//*** CLI_SetConstraint <FileNum> <NewState>                                ***
95603>>>>>>>//***                                                                       ***
95603>>>>>>>//***   Setup a constraint for a file.                                      ***
95603>>>>>>>//*****************************************************************************
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>//*****************************************************************************
95603>>>>>>>//*** CLI_Set_Driver_Atrtribute / CLI_Get_Driver_Attribute                  ***
95603>>>>>>>//***                                                                       ***
95603>>>>>>>//*** Set or get an attribute at driver level. These attributes, when set,  ***
95603>>>>>>>//*** will be set for the remainder of the session or until set again. To   ***
95603>>>>>>>//*** permanently set driver level attributes change the driver             ***
95603>>>>>>>//*** configuration file.                                                   ***
95603>>>>>>>//*****************************************************************************
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>
95603>>>>>>>//*****************************************************************************
95603>>>>>>>//*** Class  : cCLIHandler                                                  ***
95603>>>>>>>//*** Purpose: An instance of this class can be used as a broker object to  ***
95603>>>>>>>//***          call several CLI releated methods.                           ***
95603>>>>>>>//*****************************************************************************
95603>>>>>>>
95603>>>>>>>Class cCLIHandler Is An Array
95604>>>>>>>
95604>>>>>>>    Procedure Construct_Object Integer iImage
95606>>>>>>>        Forward Send Construct_object iImage
95608>>>>>>>
95608>>>>>>>        Property String  psDriverID       Public ""
95609>>>>>>>    End_Procedure // Construct_Object
95610>>>>>>>
95610>>>>>>>
95610>>>>>>>
95610>>>>>>>    //***
95610>>>>>>>    //*** Fucntion: CKRevsion
95610>>>>>>>    //*** Purpose : The revsion of a CLI Connectivity Kit
95610>>>>>>>    //***
95610>>>>>>>
95610>>>>>>>    Function CKRevision Returns String
95612>>>>>>>        Local String  sDriverID
95612>>>>>>>        Local String  sRevision
95612>>>>>>>        Local String  sVoid
95612>>>>>>>        Local Integer iRetval
95612>>>>>>>
95612>>>>>>>        Get psDriverID To sDriverID
95613>>>>>>>        If (sDRiverID <> "") Begin
95615>>>>>>>            Move (Repeat(" ", 255)) To sRevision
95616>>>>>>>            Call_Driver 0 sDRiverID Function CLI_CKREVISION Callback 0 Passing sRevision sVoid 0 Result iRetval
95621>>>>>>>        End
95621>>>>>>>>
95621>>>>>>>
95621>>>>>>>        Function_Return sRevision
95622>>>>>>>    End_Function // CKRevision
95623>>>>>>>
95623>>>>>>>
95623>>>>>>>
95623>>>>>>>    //***
95623>>>>>>>    //*** Function: ExtractPartFromRevision
95623>>>>>>>    //*** Purpose : Extarct the Nth part of a a.b.c.d revsion string.
95623>>>>>>>    //***
95623>>>>>>>    //*** Returns : The part version number or -1 if there is no such part number.
95623>>>>>>>    //***
95623>>>>>>>
95623>>>>>>>    Function ExtractPartFromRevision Integer iPartNum String sRevision Returns Integer
95625>>>>>>>        Local Integer iPartRev
95625>>>>>>>        Local Integer iCurrentPart
95625>>>>>>>        Local Integer iSeparatorPos
95625>>>>>>>
95625>>>>>>>        If (iPartNum > 4) ;            Function_Return -1
95628>>>>>>>
95628>>>>>>>        Move 0 To iCurrentPart
95629>>>>>>>        Repeat
95629>>>>>>>>
95629>>>>>>>            Move (Pos(".", sRevision)) To iSeparatorPos
95630>>>>>>>            If (iSeparatorPos > 0) Begin
95632>>>>>>>                Move (Left(sRevision, iSeparatorPos - 1)) To iPartRev
95633>>>>>>>                Move (Right(sRevision, Length(sRevision) - iSeparatorPos)) To sRevision
95634>>>>>>>                Increment iCurrentPart
95635>>>>>>>            End
95635>>>>>>>>
95635>>>>>>>            Else If (sRevision <> "") Begin
95638>>>>>>>                Move sRevision To iPartRev
95639>>>>>>>                Move "" To sRevision
95640>>>>>>>                Increment iCurrentPart
95641>>>>>>>            End
95641>>>>>>>>
95641>>>>>>>            Else ;                Move -1 To iPartRev
95643>>>>>>>        Until (iCurrentPart >= iPartNum Or iPartRev = -1)
95645>>>>>>>
95645>>>>>>>        Function_Return iPartRev
95646>>>>>>>    End_Function // EcxtractPartFromRevision
95647>>>>>>>
95647>>>>>>>
95647>>>>>>>
95647>>>>>>>    //***
95647>>>>>>>    //*** Function: CKMajorRevision
95647>>>>>>>    //*** Purpose : Returns the major revision of the CK
95647>>>>>>>    //***
95647>>>>>>>
95647>>>>>>>    Function CKMajorRevision Returns Integer
95649>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 1, CKRevision(Current_Object)))
95650>>>>>>>    End_Function // CKMajorRevision
95651>>>>>>>
95651>>>>>>>
95651>>>>>>>
95651>>>>>>>    //***
95651>>>>>>>    //*** Function: CKMinorRevision
95651>>>>>>>    //*** Purpose : Returns the minor revision of the CK
95651>>>>>>>    //***
95651>>>>>>>
95651>>>>>>>    Function CKMinorRevision Returns Integer
95653>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 2, CKRevision(Current_Object)))
95654>>>>>>>    End_Function // CKMinorRevision
95655>>>>>>>
95655>>>>>>>
95655>>>>>>>
95655>>>>>>>    //***
95655>>>>>>>    //*** Function: CKReleaseRevision
95655>>>>>>>    //*** Purpose : Returns the release revision of the CK
95655>>>>>>>    //***
95655>>>>>>>
95655>>>>>>>    Function CKReleaseRevision Returns Integer
95657>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 3, CKRevision(Current_Object)))
95658>>>>>>>    End_Function // CKReleaseRevision
95659>>>>>>>
95659>>>>>>>
95659>>>>>>>
95659>>>>>>>    //***
95659>>>>>>>    //*** Function: CKBuildRevision
95659>>>>>>>    //*** Purpose : Returns the major revision of the CK
95659>>>>>>>    //***
95659>>>>>>>
95659>>>>>>>    Function CKBuildRevision Returns Integer
95661>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 4, CKRevision(Current_Object)))
95662>>>>>>>    End_Function // CKBuildRevision
95663>>>>>>>
95663>>>>>>>
95663>>>>>>>
95663>>>>>>>    //***
95663>>>>>>>    //*** Function: IsMinimalRevision
95663>>>>>>>    //*** Purpose : Determines if the CK conforms to a passed minimal revsion.
95663>>>>>>>    //***
95663>>>>>>>
95663>>>>>>>    Function IsMinimalRevision Integer iMajor Integer iMinor Integer iRelease Integer iBuild Returns Integer
95665>>>>>>>        If (iMajor < CKMajorRevision(Current_object)) ;            Function_return (TRUE)
95668>>>>>>>        Else If (iMajor = CKMajorRevision(Current_object)) Begin
95671>>>>>>>            If (iMinor < CKMinorRevision(Current_object)) ;                Function_return (TRUE)
95674>>>>>>>            Else If (iMinor = CKMinorRevision(Current_object)) Begin
95677>>>>>>>                If (iRelease < CKReleaseRevision(Current_object)) ;                    Function_return (TRUE)
95680>>>>>>>                Else If (iRelease = CKReleaseRevision(Current_object) And iBuild <= CKBuildRevision(Current_object)) ;                    Function_return (TRUE)
95684>>>>>>>            End
95684>>>>>>>>
95684>>>>>>>        End
95684>>>>>>>>
95684>>>>>>>
95684>>>>>>>        Function_Return (FALSE)
95685>>>>>>>    End_Function // IsMinimalRevision
95686>>>>>>>
95686>>>>>>>
95686>>>>>>>
95686>>>>>>>    //***
95686>>>>>>>    //*** Function: RegistrationName
95686>>>>>>>    //*** Purpose : Returns the Connectiivty Kit registration name.
95686>>>>>>>    //***
95686>>>>>>>
95686>>>>>>>    Function RegistrationName Returns String
95688>>>>>>>        Local String  sRegistration
95688>>>>>>>        Local String  sDRiverId
95688>>>>>>>        Local String  sVoid
95688>>>>>>>        Local Integer iRetval
95688>>>>>>>
95688>>>>>>>        Get psDriverID To sDriverID
95689>>>>>>>        If (sDRiverID <> "") Begin
95691>>>>>>>            Move (Repeat(" ", 255)) To sRegistration
95692>>>>>>>            Call_Driver 0 sDRiverID Function CLI_GETREGNAME Callback 0 Passing sRegistration sVoid 0 Result iRetval
95697>>>>>>>        End
95697>>>>>>>>
95697>>>>>>>
95697>>>>>>>        Function_Return sRegistration
95698>>>>>>>    End_Function // RegistrationName
95699>>>>>>>
95699>>>>>>>
95699>>>>>>>
95699>>>>>>>    //***
95699>>>>>>>    //*** Function: SerialNumber
95699>>>>>>>    //*** Purpose : Returns the Connectiivty Kit serial number.
95699>>>>>>>    //***
95699>>>>>>>
95699>>>>>>>    Function SerialNumber Returns Integer
95701>>>>>>>        Local String  sDRiverId
95701>>>>>>>        Local String  sVoid
95701>>>>>>>        Local Integer iRetval
95701>>>>>>>
95701>>>>>>>        Get psDriverID To sDriverID
95702>>>>>>>        If (sDRiverID <> "") Begin
95704>>>>>>>            Call_Driver 0 sDRiverID Function CLI_GETSERIALNUM Callback 0 Passing sVoid sVoid 0 Result iRetval
95709>>>>>>>        End
95709>>>>>>>>
95709>>>>>>>
95709>>>>>>>        Function_Return iRetval
95710>>>>>>>    End_Function // SerialNumber
95711>>>>>>>
95711>>>>>>>
95711>>>>>>>
95711>>>>>>>    //***
95711>>>>>>>    //*** Function: MaxUsers
95711>>>>>>>    //*** Purpose : Returns the Connectiivty Kit maximum number of users.
95711>>>>>>>    //***
95711>>>>>>>
95711>>>>>>>    Function MaxUsers Returns Integer
95713>>>>>>>        Local String  sDRiverId
95713>>>>>>>        Local String  sVoid
95713>>>>>>>        Local Integer iRetval
95713>>>>>>>
95713>>>>>>>        Get psDriverID To sDriverID
95714>>>>>>>        If (sDRiverID <> "") Begin
95716>>>>>>>            Call_Driver 0 sDRiverID Function CLI_GETMAXUSERS Callback 0 Passing sVoid sVoid 0 Result iRetval
95721>>>>>>>        End
95721>>>>>>>>
95721>>>>>>>
95721>>>>>>>        Function_Return iRetval
95722>>>>>>>    End_Function // MaxUsers
95723>>>>>>>
95723>>>>>>>
95723>>>>>>>
95723>>>>>>>    //***
95723>>>>>>>    //*** Procedure: DumpStatus
95723>>>>>>>    //*** Purpose  : Dump the current status of the drver in the passed disk file.
95723>>>>>>>    //***
95723>>>>>>>
95723>>>>>>>    Procedure DumpStatus String sFileName
95725>>>>>>>        Local String  sVoid
95725>>>>>>>        Local String  sDriverID
95725>>>>>>>        Local Integer iVoid
95725>>>>>>>
95725>>>>>>>        Get psDriverID To sDriverID
95726>>>>>>>        If (sDriverID <> "") ;            Call_driver 0 sDriverID Function CLI_DUMPSTATUS Callback 0 Passing sFileName sVoid iVoid Result iVoid
95733>>>>>>>    End_Procedure // DumpStatus
95734>>>>>>>
95734>>>>>>>
95734>>>>>>>
95734>>>>>>>    //***
95734>>>>>>>    //*** Procedure: ReadConfiguration
95734>>>>>>>    //*** Purpose  : Reset all driver level configurable attributes to the
95734>>>>>>>    //***            default value and then reread the configuration.
95734>>>>>>>    //***
95734>>>>>>>
95734>>>>>>>    Procedure ReadConfiguration
95736>>>>>>>        Local String  sVoid
95736>>>>>>>        Local String  sDriverID
95736>>>>>>>        Local Integer iVoid
95736>>>>>>>
95736>>>>>>>        Get psDriverID To sDriverID
95737>>>>>>>        If (sDriverID <> "") ;            Call_driver 0 sDriverID Function CLI_READCONFIGURATION Callback 0 Passing sVoid sVoid iVoid Result iVoid
95744>>>>>>>    End_Procedure // ReadConfiguration
95745>>>>>>>
95745>>>>>>>
95745>>>>>>>
95745>>>>>>>    //***
95745>>>>>>>    //*** Function: TextToRIMValue
95745>>>>>>>    //*** Purpose : Convert a text to the corresponding
95745>>>>>>>    //***           Generate_Record_ID_Method attribute value
95745>>>>>>>    //***
95745>>>>>>>
95745>>>>>>>    Function TextToRIMValue String sText Returns Integer
95747>>>>>>>        If (sText = "None") ;            Function_return RIM_NONE
95750>>>>>>>        Else If (sText = "Identity Column") ;            Function_return RIM_IDENTITY_COLUMN
95754>>>>>>>        Else If (sText = "Dispenser Table") ;            Function_return RIM_DISPENSER_TABLE
95758>>>>>>>        Else If (sText = "External") ;            Function_return RIM_EXTERNAL
95762>>>>>>>    End_Function // TextToRIMValue
95763>>>>>>>
95763>>>>>>>
95763>>>>>>>
95763>>>>>>>    //***
95763>>>>>>>    //*** Function: RIMValueTotext
95763>>>>>>>    //*** Purpose : Convert a Generate_Record_ID_Method attribute value to the
95763>>>>>>>    //***           corresponding text.
95763>>>>>>>    //***
95763>>>>>>>
95763>>>>>>>    Function RIMValueToText Integer iAttrValue Returns String
95765>>>>>>>        If (iAttrValue = RIM_NONE) ;            Function_return "None"
95768>>>>>>>        Else If (iAttrValue = RIM_IDENTITY_COLUMN) ;            Function_return "Identity Column"
95772>>>>>>>        Else If (iAttrValue = RIM_DISPENSER_TABLE) ;            Function_return "Dispenser Table"
95776>>>>>>>        Else If (iAttrValue = RIM_EXTERNAL) ;            Function_return "External"
95780>>>>>>>    End_Function // RIMValueToText
95781>>>>>>>
95781>>>>>>>
95781>>>>>>>
95781>>>>>>>    //***
95781>>>>>>>    //*** Function: TextToROValue
95781>>>>>>>    //*** Purpose : Convert a text to the corresponding
95781>>>>>>>    //***           Generate_Record_ID_Method attribute value
95781>>>>>>>    //***
95781>>>>>>>
95781>>>>>>>    Function TextToROValue String sText Returns Integer
95783>>>>>>>        If (sText = "No") ;            Function_return RO_NO
95786>>>>>>>        Else If (sText = "Ignore Change") ;            Function_return RO_IGNORECHANGE
95790>>>>>>>        Else If (sText = "Accept Change") ;            Function_return RO_ACCEPTCHANGE
95794>>>>>>>        Else If (sText = "Error On Change") ;            Function_return RO_ERRORONCHANGE
95798>>>>>>>    End_Function // TextToRIMValue
95799>>>>>>>
95799>>>>>>>
95799>>>>>>>
95799>>>>>>>    //***
95799>>>>>>>    //*** Function: ROValueTotext
95799>>>>>>>    //*** Purpose : Convert a Generate_Record_ID_Method attribute value to the
95799>>>>>>>    //***           corresponding text.
95799>>>>>>>    //***
95799>>>>>>>
95799>>>>>>>    Function ROValueToText Integer iAttrValue Returns String
95801>>>>>>>        If (iAttrValue = RO_NO) ;            Function_return "No"
95804>>>>>>>        Else If (iAttrValue = RO_IGNORECHANGE) ;            Function_return "Ignore Change"
95808>>>>>>>        Else If (iAttrValue = RO_ACCEPTCHANGE) ;            Function_return "Accept Change"
95812>>>>>>>        Else If (iAttrValue = RO_ERRORONCHANGE) ;            Function_return "Error On Change"
95816>>>>>>>    End_Function // RIMValueToText
95817>>>>>>>
95817>>>>>>>
95817>>>>>>>
95817>>>>>>>    //***
95817>>>>>>>    //*** Function: LastDriverError
95817>>>>>>>    //*** Purpose : Return the text f the last error geneated by the driver.
95817>>>>>>>    //***
95817>>>>>>>
95817>>>>>>>    Function LastDriverError Returns String
95819>>>>>>>        Local String  sDriverID
95819>>>>>>>        Local String  sLastError
95819>>>>>>>        Local String  sLastErrorLength
95819>>>>>>>        Local Integer iLastErrorLength
95819>>>>>>>        Local Integer iVoid
95819>>>>>>>
95819>>>>>>>        //*** Initialize
95819>>>>>>>        Move "" To sLastError
95820>>>>>>>
95820>>>>>>>        Get psDriverID To sDriverID
95821>>>>>>>        If (sDriverID <> "") Begin
95823>>>>>>>            //*** Get the text of the last error
95823>>>>>>>            Move (Repeat(Character(" "), 14)) To sLastErrorlength
95824>>>>>>>            Call_driver 0 sDriverID Function CLI_GETDRIVERATTRIBUTE Callback 0 Passing sLastErrorLength iVoid DRVR_LASTERRORTEXTLENGTH Result iVoid
95829>>>>>>>            Move (Left(sLastErrorLength, Pos(Character(0), sLastErrorLength) - 1)) To iLastErrorLength
95830>>>>>>>
95830>>>>>>>            If (iLastErrorLength > 0) Begin
95832>>>>>>>                Move (Repeat(Character(" "), iLastErrorLength + 1)) To sLastError
95833>>>>>>>                Call_driver 0 sDriverID Function CLI_GETDRIVERATTRIBUTE Callback 0 Passing sLastError iVoid DRVR_LASTERRORTEXT Result iVoid
95838>>>>>>>                Move (Left(sLastError, Pos(Character(0), sLastError) - 1)) To sLastError
95839>>>>>>>            End
95839>>>>>>>>
95839>>>>>>>        End
95839>>>>>>>>
95839>>>>>>>
95839>>>>>>>        Function_Return sLastError
95840>>>>>>>    End_Function // LastDriverError
95841>>>>>>>
95841>>>>>>>
95841>>>>>>>
95841>>>>>>>    //***
95841>>>>>>>    //*** Function: EnumerateTables
95841>>>>>>>    //*** Purpose : Enumerate the tables in a database
95841>>>>>>>    //***
95841>>>>>>>
95841>>>>>>>    Function EnumerateTables String sLogin Returns Integer
95843>>>>>>>        Local String  sDriver
95843>>>>>>>        Local String  sVoid
95843>>>>>>>        Local Integer iNumTables
95843>>>>>>>        Local Integer iVoid
95843>>>>>>>
95843>>>>>>>        Get psDriverID To sDriver
95844>>>>>>>        If (sDriver <> "") ;            Call_driver 0 sDriver Function CLI_ENUMERATE_TABLES Callback 0 Passing sLogin sVoid iVoid Result iNumTables
95851>>>>>>>
95851>>>>>>>        Function_Return iNumTables
95852>>>>>>>    End_Function // EnumerateTables
95853>>>>>>>
95853>>>>>>>
95853>>>>>>>
95853>>>>>>>    //***
95853>>>>>>>    //*** Function: TableName
95853>>>>>>>    //*** Purpose : Returns the name of the table enumerated at the given position
95853>>>>>>>    //***
95853>>>>>>>
95853>>>>>>>    Function TableName Integer iIndex Returns String
95855>>>>>>>        Local String  sDriver
95855>>>>>>>        Local String  sTableName
95855>>>>>>>        Local String  sVoid
95855>>>>>>>        Local Integer iVoid
95855>>>>>>>
95855>>>>>>>        Get psDriverID To sDriver
95856>>>>>>>        If (sDriver <> "") Begin
95858>>>>>>>            Move (Repeat(" ", 255)) To sTableName
95859>>>>>>>            Call_driver 0 sDriver Function CLI_TABLENAME Callback 0 Passing sTableName sVoid iIndex Result iVoid
95864>>>>>>>        End
95864>>>>>>>>
95864>>>>>>>
95864>>>>>>>        Function_Return sTableName
95865>>>>>>>    End_Function // TableName
95866>>>>>>>
95866>>>>>>>
95866>>>>>>>
95866>>>>>>>    //***
95866>>>>>>>    //*** Function: SchemaName
95866>>>>>>>    //*** Purpose : Returns the name of the schema of the table enumerated at the given position
95866>>>>>>>    //***
95866>>>>>>>
95866>>>>>>>    Function SchemaName Integer iIndex Returns String
95868>>>>>>>        Local String  sDriver
95868>>>>>>>        Local String  sSchemaName
95868>>>>>>>        Local String  sVoid
95868>>>>>>>        Local Integer iVoid
95868>>>>>>>
95868>>>>>>>        Get psDriverID To sDriver
95869>>>>>>>        If (sDriver <> "") Begin
95871>>>>>>>            Move (Repeat(" ", 255)) To sSchemaName
95872>>>>>>>            Call_driver 0 sDriver Function CLI_TABLESCHEMA Callback 0 Passing sSchemaName sVoid iIndex Result iVoid
95877>>>>>>>        End
95877>>>>>>>>
95877>>>>>>>
95877>>>>>>>        Function_Return sSchemaName
95878>>>>>>>    End_Function // SchemaName
95879>>>>>>>
95879>>>>>>>
95879>>>>>>>
95879>>>>>>>    //***
95879>>>>>>>    //*** Function: TableType
95879>>>>>>>    //*** Purpose : Returns the type of the table enumerated at the given position.
95879>>>>>>>    //***           Types can be "TABLE", "VIEW", "SYSTEM TABLE", "GLOBAL TEMPORARY",
95879>>>>>>>    //***           "LOCAL TEMPORARY", "ALIAS", "SYNONYM"
95879>>>>>>>    //***
95879>>>>>>>
95879>>>>>>>    Function TableType Integer iIndex Returns String
95881>>>>>>>        Local String  sDriver
95881>>>>>>>        Local String  sTableType
95881>>>>>>>        Local String  sVoid
95881>>>>>>>        Local Integer iVoid
95881>>>>>>>
95881>>>>>>>        Get psDriverID To sDriver
95882>>>>>>>        If (sDriver <> "") Begin
95884>>>>>>>            Move (Repeat(" ", 25)) To sTableType
95885>>>>>>>            Call_driver 0 sDriver Function CLI_TABLETYPE Callback 0 Passing sTableType sVoid iIndex Result iVoid
95890>>>>>>>        End
95890>>>>>>>>
95890>>>>>>>
95890>>>>>>>        Function_Return sTableType
95891>>>>>>>    End_Function // TableType
95892>>>>>>>
95892>>>>>>>
95892>>>>>>>
95892>>>>>>>    //***
95892>>>>>>>    //*** Function: TableComment
95892>>>>>>>    //*** Purpose : Returns the comment of the table enumerated at the given position
95892>>>>>>>    //***
95892>>>>>>>
95892>>>>>>>    Function TableComment Integer iIndex Returns String
95894>>>>>>>        Local String  sDriver
95894>>>>>>>        Local String  sTableComment
95894>>>>>>>        Local String  sVoid
95894>>>>>>>        Local Integer iVoid
95894>>>>>>>
95894>>>>>>>        Get psDriverID To sDriver
95895>>>>>>>        If (sDriver <> "") Begin
95897>>>>>>>            Move (Repeat(" ", 255)) To sTableComment
95898>>>>>>>            Call_driver 0 sDriver Function CLI_TABLECOMMENT Callback 0 Passing sTableComment sVoid iIndex Result iVoid
95903>>>>>>>        End
95903>>>>>>>>
95903>>>>>>>
95903>>>>>>>        Function_Return sTableComment
95904>>>>>>>    End_Function // TableComment
95905>>>>>>>
95905>>>>>>>
95905>>>>>>>
95905>>>>>>>    //***
95905>>>>>>>    //*** Function: EnumerateColumns
95905>>>>>>>    //*** Purpose : Enumerate the columns in a table
95905>>>>>>>    //***
95905>>>>>>>
95905>>>>>>>    Function EnumerateColumns String sLogin String sTableName Returns Integer
95907>>>>>>>        Local String  sDriver
95907>>>>>>>        Local Integer iNumColumns
95907>>>>>>>        Local Integer iVoid
95907>>>>>>>
95907>>>>>>>        Get psDriverID To sDriver
95908>>>>>>>        If (sDriver <> "") ;            Call_driver 0 sDriver Function CLI_ENUMERATE_COLUMNS Callback 0 Passing sLogin sTablename iVoid Result iNumColumns
95915>>>>>>>
95915>>>>>>>        Function_Return iNumColumns
95916>>>>>>>    End_Function // EnumerateColumns
95917>>>>>>>
95917>>>>>>>
95917>>>>>>>
95917>>>>>>>    //***
95917>>>>>>>    //*** Function: ColumnName
95917>>>>>>>    //*** Purpose : Returns the name of the column enumerated at the given position
95917>>>>>>>    //***
95917>>>>>>>
95917>>>>>>>    Function ColumnName Integer iIndex Returns String
95919>>>>>>>        Local String  sDriver
95919>>>>>>>        Local String  sColumnName
95919>>>>>>>        Local String  sVoid
95919>>>>>>>        Local Integer iVoid
95919>>>>>>>
95919>>>>>>>        Get psDriverID To sDriver
95920>>>>>>>        If (sDriver <> "") Begin
95922>>>>>>>            Move (Repeat(" ", 255)) To sColumnName
95923>>>>>>>            Call_driver 0 sDriver Function CLI_COLUMNNAME Callback 0 Passing sColumnName sVoid iIndex Result iVoid
95928>>>>>>>        End
95928>>>>>>>>
95928>>>>>>>
95928>>>>>>>        Function_Return sColumnName
95929>>>>>>>    End_Function // ColumnName
95930>>>>>>>
95930>>>>>>>
95930>>>>>>>
95930>>>>>>>    //***
95930>>>>>>>    //*** Function: CLIDFDateToSQLDate
95930>>>>>>>    //*** Purpose : Convert a DataFlex date to a SQL date using the dummy zero date value.
95930>>>>>>>    //***
95930>>>>>>>
95930>>>>>>>    Function CLIDFDateToSQLDate String sDRiver Date dDFDate Returns String
95932>>>>>>>        Local String sSQLDate
95932>>>>>>>        Local Integer iOrgDateFmt
95932>>>>>>>        Local Integer iOrgDateSep
95932>>>>>>>
95932>>>>>>>        //*** Change date format to military, SQL dates are military dates
95932>>>>>>>        Get_Attribute DF_DATE_FORMAT To iOrgDateFmt
95935>>>>>>>        Get_Attribute DF_DATE_SEPARATOR To iOrgDateSep
95938>>>>>>>        Set_Attribute DF_DATE_FORMAT To DF_DATE_MILITARY
95941>>>>>>>        Set_Attribute DF_DATE_SEPARATOR To (Ascii('-'))
95944>>>>>>>
95944>>>>>>>        //*** We only need to convert if the date is 0
95944>>>>>>>        If (Integer(dDFDate = 0)) ;            CLI_Get_Driver_Attribute sDRiver DRVR_DUMMY_ZERO_DATE_VALUE To sSQLDate
95953>>>>>>>        Else ;            Move dDFDate To sSQLDate
95955>>>>>>>
95955>>>>>>>        //*** Change date format back to original
95955>>>>>>>        Set_Attribute DF_DATE_FORMAT To iOrgDateFmt
95958>>>>>>>        Set_Attribute DF_DATE_SEPARATOR To iOrgDateSep
95961>>>>>>>
95961>>>>>>>        Function_Return sSQLDate
95962>>>>>>>    End_Function // CLIDFDateToSQLDate
95963>>>>>>>
95963>>>>>>>
95963>>>>>>>
95963>>>>>>>    //***
95963>>>>>>>    //*** Function: CLISQLDateToDFDate
95963>>>>>>>    //*** Purpose : Convert a SQL date to a DataFlex date using the dummy zero date value.
95963>>>>>>>    //***
95963>>>>>>>
95963>>>>>>>    Function CLISQLDateToDFDate String sDRiver String sSQLDate Returns Date
95965>>>>>>>        Local Date dDFDate
95965>>>>>>>        Local String sDummyDateValue
95965>>>>>>>        Local Integer iOrgDateFmt
95965>>>>>>>        Local Integer iOrgDateSep
95965>>>>>>>
95965>>>>>>>        //*** Change date format to military, SQL dates are military dates
95965>>>>>>>        Get_Attribute DF_DATE_FORMAT To iOrgDateFmt
95968>>>>>>>        Get_Attribute DF_DATE_SEPARATOR To iOrgDateSep
95971>>>>>>>        Set_Attribute DF_DATE_FORMAT To DF_DATE_MILITARY
95974>>>>>>>        Set_Attribute DF_DATE_SEPARATOR To (Ascii('-'))
95977>>>>>>>
95977>>>>>>>        //*** We only need to convert if the date is the dummy zero date value
95977>>>>>>>        CLI_Get_Driver_Attribute sDRiver DRVR_DUMMY_ZERO_DATE_VALUE To sDummyDateValue
95984>>>>>>>        If (sDummyDateValue = sSQLDate) ;            Move 0 To dDFDate
95987>>>>>>>        Else ;            Move sSQLDate To dDFDate
95989>>>>>>>
95989>>>>>>>        //*** Change date format back to original
95989>>>>>>>        Set_Attribute DF_DATE_FORMAT To iOrgDateFmt
95992>>>>>>>        Set_Attribute DF_DATE_SEPARATOR To iOrgDateSep
95995>>>>>>>
95995>>>>>>>        Function_Return dDFDate
95996>>>>>>>    End_Function // CLISQLDateToDFDate
95997>>>>>>>
95997>>>>>>>
95997>>>>>>>
95997>>>>>>>    //***
95997>>>>>>>    //*** Function: RedirectConnection
95997>>>>>>>    //*** Purpose : Redirect an exisitng connection. The existing connection
95997>>>>>>>    //***           will point to another database but all tables will stay
95997>>>>>>>    //***           open!
95997>>>>>>>    //***
95997>>>>>>>
95997>>>>>>>    Function RedirectConnection String sOldConnection String sNewConnection Returns Integer
95999>>>>>>>        Local String  sDriver
95999>>>>>>>        Local String  sVoid
95999>>>>>>>        Local Integer iResult
95999>>>>>>>        Local Integer iVoid
95999>>>>>>>
95999>>>>>>>        Get psDriverID To sDriver
96000>>>>>>>        If (sDriver <> "") Begin
96002>>>>>>>            Call_driver 0 sDriver Function CLI_REDIRECTCONNECTION Callback 0 Passing sOldConnection sNewConnection iVoid Result iResult
96007>>>>>>>        End
96007>>>>>>>>
96007>>>>>>>        Function_Return iResult
96008>>>>>>>    End_Function // RedirectConnect
96009>>>>>>>
96009>>>>>>>
96009>>>>>>>
96009>>>>>>>    //***
96009>>>>>>>    //*** Function: CreateConnectionID
96009>>>>>>>    //*** Purpose : Create a DataFlex side connection id that can be used later on.
96009>>>>>>>    //***
96009>>>>>>>
96009>>>>>>>    Function CreateConnectionID String sID String sConnStr Integer iOpt Returns Integer
96011>>>>>>>        Local String  sDriver
96011>>>>>>>        Local Integer iResult
96011>>>>>>>        Local Integer iOptions
96011>>>>>>>
96011>>>>>>>        Get psDriverID to sDriver
96012>>>>>>>        If (Num_Arguments = 2) ;            Move 0 to iOptions
96015>>>>>>>        Else ;            Move iOpt to iOptions
96017>>>>>>>        If (sDriver <> "") Begin
96019>>>>>>>            Call_Driver 0 sDriver Function CLI_CREATECONNECTIONID Callback 0 Passing sID sConnStr iOptions Result iResult
96024>>>>>>>        End
96024>>>>>>>>
96024>>>>>>>        Function_Return iResult
96025>>>>>>>    End_Function // CreateConnectionID
96026>>>>>>>
96026>>>>>>>
96026>>>>>>>
96026>>>>>>>    //***
96026>>>>>>>    //*** Function: DeleteConnectionID
96026>>>>>>>    //*** Purpose : Delete a DataFlex side connection id.
96026>>>>>>>    //***
96026>>>>>>>
96026>>>>>>>    Function DeleteConnectionID String sID Integer iIndex Returns Integer
96028>>>>>>>        Local String  sDriver
96028>>>>>>>        Local Integer iResult
96028>>>>>>>        Local String sVoid
96028>>>>>>>
96028>>>>>>>        Get psDriverID To sDriver
96029>>>>>>>        If (sDriver <> "") Begin
96031>>>>>>>            Call_Driver 0 sDriver Function CLI_DELETECONNECTIONID Callback 0 Passing sID sVoid iIndex Result iResult
96036>>>>>>>        End
96036>>>>>>>>
96036>>>>>>>        Function_Return iResult
96037>>>>>>>    End_Function // DeleteConnectionID
96038>>>>>>>
96038>>>>>>>End_Class // cCLIHandler
96039>>>>>
96039>>>>>External_Function WNetGetUser "WNetGetUserA" MPR.DLL Pointer lpName Pointer lpUser_Name Pointer lpLength Returns DWord
96040>>>>>
96040>>>>>Register_Function phoWorkspace Returns Handle
96040>>>>>Register_Function Help_filename Returns String
96040>>>>>Register_Function GetHelpFile Returns String
96040>>>>>Register_Function pbEnterKeyAsTabKey Returns Boolean
96040>>>>>
96040>>>>>//****************************************************************************
96040>>>>>// $Module type: FUNCTION
96040>>>>>// $Module name: Network_User_Name
96040>>>>>// $Author     : AK/VOO/KCR
96040>>>>>// Created     : 09-24-96 @ 19:17
96040>>>>>//
96040>>>>>// Description
96040>>>>>//    This function reads the current username Of windows and returns that
96040>>>>>//    name or an text unknown user
96040>>>>>//
96040>>>>>// $Rev History
96040>>>>>//  02/22/2012  Ask Windows how long the size of the name should be
96040>>>>>//  07/25/2003  Replaced obsolete code
96040>>>>>//  09/24/1996  Module header created
96040>>>>>//****************************************************************************
96040>>>>>Function Network_User_Name for cDesktop Returns String
96042>>>>>    String sName
96042>>>>>    Integer iRetval iLength
96042>>>>>
96042>>>>>    Move 0 to iLength
96043>>>>>    Move (WNetGetUser (0, 0, AddressOf (iLength))) to iRetval
96044>>>>>    ZeroString iLength to sName
96045>>>>>    Move (WNetGetUser (0, AddressOf (sName), AddressOf (iLength))) to iRetval
96046>>>>>
96046>>>>>    If (iRetval = NO_ERROR) Begin
96048>>>>>        Function_Return (CString (sName))
96049>>>>>    End
96049>>>>>>
96049>>>>>    
96049>>>>>    Function_Return "User Unknown"
96050>>>>>End_Function
96051>>>>>
96051>>>>>// OBSOLETE STRUCTURE AND WINDOWS API CALL. KEPT FOR BACKWARDS COMPATIBILITY
96051>>>>>Type MEMORYSTATUS
96051>>>>>   Field MEMORYSTATUS.dwLength         as DWord // sizeof(MEMORYSTATUS)
96051>>>>>   Field MEMORYSTATUS.dwMemoryLoad     as DWord // percent Of memory in use
96051>>>>>   Field MEMORYSTATUS.dwTotalPhys      as DWord // bytes Of physical memory
96051>>>>>   Field MEMORYSTATUS.dwAvailPhys      as DWord // free physical memory bytes
96051>>>>>   Field MEMORYSTATUS.dwTotalPageFile  as DWord // bytes Of paging file
96051>>>>>   Field MEMORYSTATUS.dwAvailPageFile  as DWord // free bytes Of paging file
96051>>>>>   Field MEMORYSTATUS.dwTotalVirtual   as DWord // user bytes Of address space
96051>>>>>   Field MEMORYSTATUS.dwAvailVirtual   as DWord // free user bytes
96051>>>>>End_Type // MEMORYSTATUS
96051>>>>>
96051>>>>>External_Function GlobalMemoryStatus "GlobalMemoryStatus" Kernel32.Dll Pointer lpsMemoryStatus Returns Integer
96052>>>>>
96052>>>>>Struct tWinMemoryStatusEx
96052>>>>>    UInteger dwLength                
96052>>>>>    UInteger dwMemoryLoad          
96052>>>>>    UBigInt ullTotalPhys           
96052>>>>>    UBigInt ullAvailPhys           
96052>>>>>    UBigInt ullTotalPageFile       
96052>>>>>    UBigInt ullAvailPageFile       
96052>>>>>    UBigInt ullTotalVirtual        
96052>>>>>    UBigInt ullAvailVirtual        
96052>>>>>    UBigInt ullAvailExtendedVirtual
96052>>>>>End_Struct
96052>>>>>
96052>>>>>External_Function GlobalMemoryStatusEx "GlobalMemoryStatusEx" Kernel32.Dll Pointer lpMemoryStatus Returns Integer
96053>>>>>
96053>>>>>Class SysinfoDisplay is a cTextEdit
96054>>>>>    Procedure Construct_Object
96056>>>>>        Forward Send Construct_Object
96058>>>>>
96058>>>>>        Set Location To 6 6
96059>>>>>        Set Size To 110 255
96060>>>>>        Set Read_Only_State To True
96061>>>>>        Set pbWrap to False
96062>>>>>    End_Procedure
96063>>>>>
96063>>>>>    //****************************************************************************
96063>>>>>    // $Module type: PROCEDURE
96063>>>>>    // $Module name: Show_Current_Directory
96063>>>>>    // $Author     : VOO
96063>>>>>    // Created     : 06-10-96 @ 15:24
96063>>>>>    //
96063>>>>>    // Description
96063>>>>>    //    This method will show the name Of the current directory in the system
96063>>>>>    //    information box
96063>>>>>    //
96063>>>>>    // $Rev History
96063>>>>>    //    06-10-96  Module header created
96063>>>>>    //****************************************************************************
96063>>>>>    Procedure Show_Current_Directory
96065>>>>>        String sDir
96065>>>>>
96065>>>>>        Get_Current_Directory To sDir
96066>>>>>
96066>>>>>        Send AppendTextLn (SFormat (C_$CurrentDirectory, sDir))
96067>>>>>    End_Procedure
96068>>>>>
96068>>>>>    Procedure Show_Windows_Directory
96070>>>>>        String sWindir
96070>>>>>
96070>>>>>        Get_Windows_Directory To sWindir
96071>>>>>
96071>>>>>        Send AppendTextLn (SFormat (C_$WindowsDirectory, sWindir))
96072>>>>>    End_Procedure
96073>>>>>
96073>>>>>    Procedure Show_Current_User
96075>>>>>        Send AppendTextLn (SFormat (C_$NetworkUserName, Network_User_Name (Self)))
96076>>>>>    End_Procedure
96077>>>>>
96077>>>>>    Procedure Show_Number_Format
96079>>>>>        Integer iFormat
96079>>>>>        String sFormatText
96079>>>>>
96079>>>>>        Get_Attribute DF_THOUSANDS_SEPARATOR to iFormat
96082>>>>>        Move (Character (iFormat)) To sFormatText
96083>>>>>        Send AppendTextLn (SFormat (C_$ThousandsSeparator, sFormatText, iFormat))
96084>>>>>
96084>>>>>        Get_Attribute DF_DECIMAL_SEPARATOR to iFormat
96087>>>>>        Move (Character (iFormat)) to sFormatText
96088>>>>>        Send AppendTextLn (SFormat (C_$DecimalSeparator, sFormatText))
96089>>>>>    End_Procedure
96090>>>>>
96090>>>>>    Procedure Show_Filelist_Name
96092>>>>>        String sFilename
96092>>>>>
96092>>>>>        Get_Attribute DF_FILELIST_NAME to sFilename
96095>>>>>
96095>>>>>        Send AppendTextLn (SFormat (C_$CurrentFilelist, sFilename))
96096>>>>>    End_Procedure
96097>>>>>
96097>>>>>    Procedure Show_Lock_Delay
96099>>>>>        Integer iLockdelay
96099>>>>>
96099>>>>>        Get_Attribute DF_LOCK_DELAY to iLockdelay
96102>>>>>
96102>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingDelay, iLockDelay))
96103>>>>>    End_Procedure
96104>>>>>
96104>>>>>    Procedure Show_Lock_Timeout
96106>>>>>        Integer iLockTimeout
96106>>>>>
96106>>>>>        Get_Attribute DF_LOCK_TIMEOUT to iLockTimeout
96109>>>>>
96109>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingTimeout, iLockTimeOut))
96110>>>>>    End_Procedure
96111>>>>>
96111>>>>>    Procedure Show_Screen_Size
96113>>>>>        Integer iYscreensize iXscreensize
96113>>>>>
96113>>>>>        Move (GetSystemMetrics (SM_CXSCREEN)) To iXscreensize
96114>>>>>        Move (GetSystemMetrics (SM_CYSCREEN)) To iYscreensize
96115>>>>>
96115>>>>>        Send AppendTextLn (SFormat (C_$VideoResolution, iXscreensize, iYscreensize))
96116>>>>>    End_Procedure
96117>>>>>
96117>>>>>    Procedure Show_Page_Size
96119>>>>>        Send AppendTextLn (SFormat (C_$PageEndFormFeed, Pageend, Pagefeed))
96120>>>>>    End_procedure
96121>>>>>
96121>>>>>    Procedure Show_Date
96123>>>>>        Date dToday
96123>>>>>
96123>>>>>        Sysdate dToday
96124>>>>>
96124>>>>>        Send AppendTextLn (SFormat (C_$CurrentSystemDate, String (dToday)))
96125>>>>>    End_procedure
96126>>>>>
96126>>>>>    Procedure Show_Date_Format
96128>>>>>        Integer iDateFormat
96128>>>>>        String sDateFormat
96128>>>>>
96128>>>>>        Get_Attribute DF_DATE_FORMAT to iDateFormat
96131>>>>>        Case Begin
96131>>>>>            Case (iDateFormat = DF_DATE_USA)
96133>>>>>                Move C_$USA To sDateFormat
96134>>>>>                Case Break
96135>>>>>            Case (iDateFormat = DF_DATE_EUROPEAN)
96138>>>>>                Move C_$European To sDateFormat
96139>>>>>                Case Break
96140>>>>>            Case (iDateFormat = DF_DATE_MILITARY)
96143>>>>>                Move C_$Military To sDateFormat
96144>>>>>                Case Break
96145>>>>>            Case Else
96145>>>>>                Move C_$UnknownDateType To sDateFormat
96146>>>>>                Case Break
96147>>>>>        Case End
96147>>>>>
96147>>>>>        Send AppendTextLn (SFormat (C_$DateFormat, sDateformat))
96148>>>>>    End_Procedure
96149>>>>>
96149>>>>>    Procedure Show_Systemresources
96151>>>>>        tWinMemoryStatusEx MemoryStatusInfo
96151>>>>>        tWinMemoryStatusEx MemoryStatusInfo
96151>>>>>        Integer iRetval
96151>>>>>
96151>>>>>        Move (SizeOfType (tWinMemoryStatusEx)) to MemoryStatusInfo.dwLength
96152>>>>>        Move (GlobalMemoryStatusEx (AddressOf (MemoryStatusInfo))) to iRetval
96153>>>>>        If (iRetval = 0) Begin
96155>>>>>            Move (ShowLastError ()) to iRetval
96156>>>>>        End
96156>>>>>>
96156>>>>>
96156>>>>>        Send AppendTextLn (SFormat (C_$AvailableMemory, MemoryStatusInfo.ullTotalPhys))
96157>>>>>        Send AppendTextLn (SFormat (C_$MemoryUtilization, MemoryStatusInfo.dwMemoryLoad))
96158>>>>>        Send AppendTextLn (SFormat (C_$AvailablePhysicalMemory, Real (MemoryStatusInfo.ullAvailPhys) / Real (MemoryStatusInfo.ullTotalPhys) * 100.0))
96159>>>>>        Send AppendTextLn (SFormat (C_$AvailablePagefileSpace, Real (MemoryStatusInfo.ullAvailPageFile) / Real (MemoryStatusInfo.ullTotalPageFile) * 100.0))
96160>>>>>        Send AppendTextLn (SFormat (C_$AvailableVirtualMemory, Real (MemoryStatusInfo.ullAvailVirtual) / Real (MemoryStatusInfo.ullTotalVirtual) * 100.0))
96161>>>>>    End_Procedure
96162>>>>>
96162>>>>>    Procedure Show_Registration
96164>>>>>        String sRegName
96164>>>>>        Integer iSN iMaxUsers
96164>>>>>
96164>>>>>        Registration sRegName iSN
96165>>>>>>
96165>>>>>        
96165>>>>>        Get_Licensed_Max_Users to iMaxUsers
96166>>>>>
96166>>>>>        Send AppendTextLn ""
96167>>>>>        Send AppendTextLn (SFormat (C_$Serial, iSN))
96168>>>>>        Send AppendTextLn (SFormat (C_$RegName, sRegName))
96169>>>>>        Send AppendTextLn (SFormat (C_$MaxNumUsers, iMaxUsers))
96170>>>>>    End_Procedure
96171>>>>>
96171>>>>>    //****************************************************************************
96171>>>>>    // If workspaces are used, we will send the message EnumerateWorkspaceData
96171>>>>>    // To the workspace object passing the an object and message To send back
96171>>>>>    // To this object. It is expected that the workspace object will send this
96171>>>>>    // message for every line Of information it wants displayed (passing the
96171>>>>>    // information To be displayed
96171>>>>>    //****************************************************************************
96171>>>>>    Register_Procedure EnumerateWorkspaceData Integer hObjId Integer hmMessId
96171>>>>>
96171>>>>>    Procedure Show_ServicePack
96173>>>>>        String sKey sVersionDescription sVersion 
96173>>>>>        Handle hoRegistry
96173>>>>>        Boolean bExists bOpened
96173>>>>>        
96173>>>>>        Get Create (RefClass (cRegistry)) to hoRegistry
96174>>>>>        Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
96175>>>>>        Set pfAccessRights of hoRegistry to KEY_READ
96176>>>>>
96176>>>>>        Move ("SOFTWARE\Data Access Worldwide\Visual DataFlex\" + SysConf (SYSCONF_DATAFLEX_REV)) to sKey
96177>>>>>        Get KeyExists of hoRegistry sKey to bExists
96178>>>>>        If (bExists) Begin
96180>>>>>            Get OpenKey of hoRegistry sKey to bOpened
96181>>>>>            If (bOpened) Begin
96183>>>>>                Get ValueExists of hoRegistry "CurrentVersionDescription" to bExists
96184>>>>>                If (bExists) Begin
96186>>>>>                    Get ReadString of hoRegistry "CurrentVersionDescription" to sVersionDescription
96187>>>>>                End
96187>>>>>>
96187>>>>>                
96187>>>>>                Get ValueExists of hoRegistry "CurrentVersion" to bExists
96188>>>>>                If (bExists) Begin
96190>>>>>                    Get ReadString of hoRegistry "CurrentVersion" to sVersion
96191>>>>>                End                
96191>>>>>>
96191>>>>>                Send CloseKey of hoRegistry
96192>>>>>            End
96192>>>>>>
96192>>>>>        End
96192>>>>>>
96192>>>>>        Send Destroy of hoRegistry
96193>>>>>
96193>>>>>        If (sVersionDescription <> "") Begin
96195>>>>>           Send AppendTextLn (sVersionDescription * "-" * sVersion)
96196>>>>>           Send AppendTextLn ""
96197>>>>>        End
96197>>>>>>
96197>>>>>    End_Procedure
96198>>>>>
96198>>>>>    Procedure Show_WorkspaceInformation
96200>>>>>        Integer hoWorkspace
96200>>>>>
96200>>>>>        If (ghoApplication <> 0) Begin
96202>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
96203>>>>>            If (hoWorkspace <> 0) Begin
96205>>>>>                Send EnumerateWorkspaceData of hoWorkspace Self (Refproc (AppendTextLn))
96206>>>>>            End
96206>>>>>>
96206>>>>>        End
96206>>>>>>
96206>>>>>    End_Procedure
96207>>>>>
96207>>>>>    Function VersionStr Integer iVer Integer iRev Integer iBld Returns String
96209>>>>>        Function_Return (String (iVer) - "." - String (iRev) - "." - String (iBld))
96210>>>>>    End_Function
96211>>>>>
96211>>>>>    Procedure Show_Versions
96213>>>>>        Integer iVersion iRevision iBuild
96213>>>>>
96213>>>>>        Version_information iVersion iRevision iBuild
96215>>>>>
96215>>>>>        Send AppendTextLn (SFormat (C_$RuntimeVersion, VersionStr(Self,iVersion,iRevision,iBuild) ))
96216>>>>>        Send AppendTextLn (SFormat (C_$PackageVersion, VersionStr(Self,PKG_VERSION, PKG_REVISION, PKG_BUILD) ))
96217>>>>>        Send AppendTextLn (SFormat (C_$FMACVersion, VersionStr(Self,FMAC_VERSION, FMAC_REVISION, FMAC_BUILD) ))
96218>>>>>    End_Procedure
96219>>>>>    
96219>>>>>    Function CKRevisionNumber String sDriverID Returns String
96221>>>>>        Handle hoCLIHandler
96221>>>>>        String sCKRevision
96221>>>>>    
96221>>>>>        Get Create (RefClass(cCLIHandler)) to hoCLIHandler
96222>>>>>        Set psDriverID of hoCLIHandler to sDriverID
96223>>>>>        Move (CKRevision(hoCLIHandler)) to sCKRevision
96224>>>>>        Send Destroy of hoCLIHandler
96225>>>>>        
96225>>>>>        Function_Return sCKRevision
96226>>>>>    End_Function
96227>>>>>    
96227>>>>>    
96227>>>>>    Function IsDataAccessCK String sDriverID Returns Boolean
96229>>>>>        
96229>>>>>        If (sDriverID = "DATAFLEX") Begin
96231>>>>>            Function_Return False
96232>>>>>        End
96232>>>>>>
96232>>>>>    
96232>>>>>        Function_Return (sDriverID = "MSSQLDRV" or sDriverID = "ODBC_DRV" or sDriverID = "DB2_DRV" or sDriverID = "DFBTRDRV")
96233>>>>>    End_Function    
96234>>>>>
96234>>>>>
96234>>>>>    //***
96234>>>>>    //*** BW
96234>>>>>    //*** Procedure: Show_Drivers
96234>>>>>    //*** Purpose  : Show loaded database drivers
96234>>>>>    //***
96234>>>>>
96234>>>>>    Procedure Show_Drivers
96236>>>>>        String sCurrentDriver sRevNumber
96236>>>>>        String sLoadedDrivers
96236>>>>>        Integer iNumberOfDrivers iCount
96236>>>>>        Boolean bOK
96236>>>>>
96236>>>>>        Move "" To sLoadedDrivers
96237>>>>>        Get_Attribute DF_NUMBER_DRIVERS To iNumberOfDrivers
96240>>>>>        For iCount From 1 To iNumberOfDrivers
96246>>>>>>
96246>>>>>            Get_Attribute DF_DRIVER_NAME Of iCount To sCurrentDriver
96249>>>>>            If (sLoadedDrivers <> "") Begin
96251>>>>>                Move (Append (sLoadedDrivers, ", ")) To sLoadedDrivers
96252>>>>>            End
96252>>>>>>
96252>>>>>            Get IsDataAccessCK sCurrentDriver to bOK
96253>>>>>            If (bOK) Begin
96255>>>>>                Get CKRevisionNumber sCurrentDriver to sRevNumber
96256>>>>>                Move (sCurrentDriver * "(" + sRevNumber + ")") to sCurrentDriver
96257>>>>>            End
96257>>>>>>
96257>>>>>            Move (Append (sLoadedDrivers, sCurrentDriver)) To sLoadedDrivers
96258>>>>>        Loop
96259>>>>>>
96259>>>>>        Send AppendTextLn (SFormat (C_$DatabaseDriver, sLoadedDrivers))
96260>>>>>    End_Procedure
96261>>>>>
96261>>>>>    Procedure Show_HelpFile
96263>>>>>        String sHelpFile
96263>>>>>        Integer eHelpType
96263>>>>>
96263>>>>>        If (ghoApplication <> 0) Begin
96265>>>>>            Get peHelpType Of ghoApplication To eHelpType
96266>>>>>            If (eHelpType = htHtmlHelp and ghoHtmlHelp) Begin
96268>>>>>                Get GetHelpFile Of ghoHtmlHelp To sHelpFile
96269>>>>>            End
96269>>>>>>
96269>>>>>            Else If (eHelpType = htWinHelp and Help_object_id) Begin
96272>>>>>                Get Help_filename Of Help_object_id To sHelpFile
96273>>>>>            End
96273>>>>>>
96273>>>>>            Else Begin
96274>>>>>                Move C_$ThereIsNoHelpfileDefined To sHelpFile
96275>>>>>            End
96275>>>>>>
96275>>>>>
96275>>>>>            Send AppendTextLn ""
96276>>>>>            Send AppendTextLn (SFormat (C_$HelpFile, sHelpFile))
96277>>>>>        End
96277>>>>>>
96277>>>>>    End_Procedure
96278>>>>>
96278>>>>>    Procedure Show_EnterAsTab
96280>>>>>        Boolean bEnterKeyAsTabKey
96280>>>>>        String sText
96280>>>>>
96280>>>>>        If (ghoApplication <> 0) Begin
96282>>>>>            Get pbEnterKeyAsTabKey Of ghoApplication To bEnterKeyAsTabKey
96283>>>>>            If (bEnterKeyAsTabKey) Begin
96285>>>>>                Move "True" To sText
96286>>>>>            End
96286>>>>>>
96286>>>>>            Else Begin
96287>>>>>                Move "False" To sText
96288>>>>>            End
96288>>>>>>
96288>>>>>            Send AppendTextLn (SFormat (C_$EnterKeyNavForward, sText))
96289>>>>>        End
96289>>>>>>
96289>>>>>    End_Procedure
96290>>>>>
96290>>>>>    //****************************************************************************
96290>>>>>    // $Module type: PROCEDURE
96290>>>>>    // $Module name: Add_Focus
96290>>>>>    // $Author     : VOO
96290>>>>>    // Created     : 24-09-96 @ 19:43
96290>>>>>    //
96290>>>>>    // Description
96290>>>>>    //    During activation we will remove the old information and add the newly
96290>>>>>    //    found systeminformation
96290>>>>>    //
96290>>>>>    // $Rev History
96290>>>>>    //    24-09-96  Module header created
96290>>>>>    //****************************************************************************
96290>>>>>    Procedure Add_Focus Integer hoRoot
96292>>>>>        Forward Send Add_Focus hoRoot
96294>>>>>
96294>>>>>        Send Delete_Data
96295>>>>>
96295>>>>>        Set Changed_State To False
96296>>>>>        Set Read_Only_State To True
96297>>>>>
96297>>>>>        Send Show_ServicePack
96298>>>>>        If (ghoApplication <> 0) Begin
96300>>>>>            Send Show_WorkSpaceInformation // added To show WS info
96301>>>>>            Send Show_HelpFile
96302>>>>>            Send Show_EnterAsTab
96303>>>>>        End
96303>>>>>>
96303>>>>>        Send Show_Drivers
96304>>>>>        Send Show_Current_User
96305>>>>>        Send Show_Windows_Directory
96306>>>>>        Send Show_Current_Directory
96307>>>>>        Send Show_Filelist_Name
96308>>>>>        Send Show_Versions
96309>>>>>        Send Show_Screen_Size
96310>>>>>        Send Show_Page_Size
96311>>>>>        Send Show_Number_Format
96312>>>>>        Send Show_Date_Format
96313>>>>>        Send Show_Lock_Delay
96314>>>>>        Send Show_Lock_Timeout
96315>>>>>        Send Show_Date
96316>>>>>        Send Show_Systemresources
96317>>>>>        Send Show_Registration
96318>>>>>        Send Beginning_of_Data
96319>>>>>
96319>>>>>        Set Icon to 'default.ico'
96320>>>>>    End_Procedure
96321>>>>>End_Class
96322>>>>>
96322>>>>>//****************************************************************************
96322>>>>>// $Module type: OBJECT
96322>>>>>// $Module name: Sysinfo_Dialog
96322>>>>>// $Author     : VOO
96322>>>>>// Created     : 24-09-96 @ 18:47
96322>>>>>//
96322>>>>>// Description
96322>>>>>//    This object shows the systeminformation on the screen
96322>>>>>//
96322>>>>>// $Rev History
96322>>>>>//    24-09-96  Module header created
96322>>>>>//****************************************************************************
96322>>>>>Class SysInfoDialog Is A ModalPanel
96323>>>>>    Procedure Construct_Object
96325>>>>>        Forward Send Construct_Object
96327>>>>>
96327>>>>>        Set Label to C_$SystemInformation
96328>>>>>        Set Size to 140 267
96329>>>>>        Set piMinSize to 140 267
96330>>>>>        Set Locate_Mode To CENTER_ON_SCREEN
96331>>>>>        Set Border_Style to Border_Thick
96332>>>>>
96332>>>>>        Object oSysinfoDisplay Is A SysInfoDisplay
96334>>>>>            Set peAnchors to anAll
96335>>>>>        End_Object
96336>>>>>
96336>>>>>        Object oCloseButton Is A Button
96338>>>>>            Set Label To C_$Close
96339>>>>>            Set Location To 120 210
96340>>>>>            Set Message Item 0 To (Refproc (Close_Panel))
96341>>>>>            Set Default_State To True
96342>>>>>            Set peAnchors to anBottomRight
96343>>>>>        End_Object
96344>>>>>
96344>>>>>        On_Key kCancel Send Close_Panel
96345>>>>>    End_Procedure
96346>>>>>End_Class
96347>>>>>
96347>>>>>// Purpose:
96347>>>>>//
96347>>>>>// Ken Ross 12/17/96 5:16PM
96347>>>>>//
96347>>>>>Class AboutDialog Is A ModalPanel
96348>>>>>    Procedure Construct_Object
96350>>>>>        String sVdfRootDir
96350>>>>>
96350>>>>>        Forward Send Construct_Object
96352>>>>>
96352>>>>>        Set Label To C_$About
96353>>>>>        Set Size to 89 212
96354>>>>>        Set Locate_Mode To CENTER_ON_SCREEN
96355>>>>>
96355>>>>>        Object oSysInfoDialog Is A SysInfoDialog
96357>>>>>        End_Object
96358>>>>>
96358>>>>>        Object oBox Is A Container3d
96360>>>>>            Set Border_Style To Border_StaticEdge
96361>>>>>            Set Size to 63 202
96362>>>>>            Set Location To 4 5
96363>>>>>
96363>>>>>            Object oAboutGraphic Is A BitmapContainer
96365>>>>>                Set Border_Style To Border_None
96366>>>>>                Set Bitmap_Style To Bitmap_Center
96367>>>>>                Set Size To 48 48
96368>>>>>                Set Location To 7 2
96369>>>>>            End_Object
96370>>>>>
96370>>>>>            Object oProductName Is A TextBox
96372>>>>>                Set Label To C_$ProductName
96373>>>>>                Set Size To 10 45
96374>>>>>                Set Location To 8 53
96375>>>>>            End_Object
96376>>>>>
96376>>>>>            Object oVersion Is A TextBox
96378>>>>>                Set Label To C_$Version
96379>>>>>                Set Size To 10 25
96380>>>>>                Set Location To 21 53
96381>>>>>            End_Object
96382>>>>>
96382>>>>>            Object oCopyright Is A TextBox
96384>>>>>                Set Label To C_$Copyright
96385>>>>>                Set Size To 10 31
96386>>>>>                Set Location To 34 53
96387>>>>>            End_Object
96388>>>>>
96388>>>>>            Object oAuthor Is A TextBox
96390>>>>>                Set Label To C_$Author
96391>>>>>                Set Size To 10 22
96392>>>>>                Set Location To 46 53
96393>>>>>            End_Object
96394>>>>>        End_Object
96395>>>>>
96395>>>>>        Object oOKButton Is A Button
96397>>>>>            On_Item C_$OK Send Close_Panel
96398>>>>>            Set Size To 14 50
96399>>>>>            Set Location To 71 157
96400>>>>>        End_Object
96401>>>>>
96401>>>>>        Object oSysInfoButton Is A Button
96403>>>>>            On_Item C_$SystemInfo Send Show_Sysinfo
96404>>>>>            Set Size To 14 50
96405>>>>>            Set Location To 71 101
96406>>>>>        End_Object
96407>>>>>
96407>>>>>        On_Key Kcancel Send KeyAction Of oOKButton
96408>>>>>
96408>>>>>        Set Logo To "DacAbout.bmp"  // square bitmaps Of 42x42 work best
96409>>>>>    End_Procedure
96410>>>>>
96410>>>>>    Procedure Set ProductName String sProductName
96412>>>>>        Set Label Of oProductName To sProductName
96413>>>>>    End_Procedure
96414>>>>>
96414>>>>>    Procedure Set Version String sVersion
96416>>>>>        Set Label Of oVersion To sVersion
96417>>>>>    End_Procedure
96418>>>>>
96418>>>>>    Procedure Set Copyright string sCopyright
96420>>>>>        Set Label Of oCopyright To sCopyright
96421>>>>>    End_Procedure
96422>>>>>
96422>>>>>    Procedure Set Author String sAuthor
96424>>>>>        Set Label Of oAuthor To sAuthor
96425>>>>>    End_Procedure
96426>>>>>
96426>>>>>    Procedure Set Logo string sLogo
96428>>>>>        // square bitmaps Of 42x42 work best
96428>>>>>        Set Bitmap Of oAboutGraphic To sLogo
96429>>>>>    End_Procedure
96430>>>>>
96430>>>>>    Procedure Show_Sysinfo
96432>>>>>        Send Popup_Modal Of oSysinfoDialog
96433>>>>>    End_Procedure
96434>>>>>
96434>>>>>    Procedure End_Construct_Object
96436>>>>>        Handle hoVersionInfo
96436>>>>>        Boolean bIncluded
96436>>>>>        Integer iMajor iMinor iRelease iBuild
96436>>>>>        String sLabel
96436>>>>>
96436>>>>>        Get Label Of oVersion To sLabel
96437>>>>>        If (sLabel = C_$VERSION) Begin
96439>>>>>            // set it To the version info Of the program, if available
96439>>>>>            If (ghoApplication <> 0) Begin
96441>>>>>                Get phoVersionInfo of ghoApplication to hoVersionInfo
96442>>>>>                If (hoVersionInfo <> 0) Begin
96444>>>>>                    Get pbIncluded of hoVersionInfo to bIncluded
96445>>>>>                    If (bIncluded) Begin
96447>>>>>                        Get piVersionMajor of hoVersionInfo to iMajor
96448>>>>>                        Get piVersionMinor of hoVersionInfo to iMinor
96449>>>>>                        Get piVersionRelease of hoVersionInfo to iRelease
96450>>>>>                        Get piVersionBuild of hoVersionInfo to iBuild
96451>>>>>                        Move (SFormat (C_$VERSION + ": %1.%2.%3.%4", iMajor, iMinor, iRelease, iBuild)) to sLabel
96452>>>>>                        Set Version to sLabel
96453>>>>>                    End
96453>>>>>>
96453>>>>>                End
96453>>>>>>
96453>>>>>            End
96453>>>>>>
96453>>>>>        End
96453>>>>>>
96453>>>>>
96453>>>>>        Forward Send End_Construct_Object
96455>>>>>    End_Procedure
96456>>>>>End_Class
96457>>>
96457>>>// *************************************************************************
96457>>>//  Public message. This is the default message. It is expected that you will
96457>>>//   create your own message to override this
96457>>>// *************************************************************************
96457>>>
96457>>>Procedure Activate_About
96460>>>   Send DoAbout "" "" "" "" ""
96461>>>End_Procedure
96462>>>
96462>>>// *************************************************************************
96462>>>//  Public message. It is expected that you will send this message (most
96462>>>//  likely from Activate_About. This creates an about object, activates it
96462>>>//  and destroys it when done. It is not exepected that you will augment this.
96462>>>// *************************************************************************
96462>>>
96462>>>Procedure DoAbout string sTitle string sVersion string sCopyRight string sAuthor string sBitmap
96465>>>        integer hoObj hoMain
96465>>>
96465>>>        // create object
96465>>>        Object About is an AboutDialog
96467>>>            // if no title passed use the label of the main panel
96467>>>            // (if a main panel exists).
96467>>>            if sTitle     eq '' Begin
96469>>>                Get Main_Window of desktop to hoMain
96470>>>                if hoMain Get Label of hoMain to sTitle
96473>>>            end
96473>>>>
96473>>>            set productname to sTitle
96474>>>            set version     to sVersion
96475>>>            set copyright   to sCopyRight
96476>>>            set author      to sAuthor
96477>>>            If sBitmap    ne '' ;               set logo to sBitMap // square bitmaps of 42x42 work best
96480>>>            Move self to hoObj // object Id
96481>>>        End_Object
96482>>>        Send Popup   of hoObj    // popup the about object
96483>>>        Send Destroy of hoObj // when done, it will be destroyed
96484>>>End_procedure
96485>        Use oTEST_VDFD_CE.vw
Including file: oTEST_VDFD_CE.vw    (F:\GitHub\vdfd-framework-community\AppSrc\oTEST_VDFD_CE.vw)
96485>>>Use Windows.pkg
96485>>>Use DFClient.pkg
96485>>>Use DFTabDlg.pkg
96485>>>
96485>>>Activate_View Activate_oTEST_VDFD_CE_vw for oTEST_VDFD_CE_vw
96495>>>>
96495>>>Object oTEST_VDFD_CE_vw is a dbView
96497>>>    
96497>>>    Set Label to "New View"
96498>>>    Set Size to 111 250
96499>>>    Set Location to 5 7
96500>>>
96500>>>    Object oNewTabDialog is a cVDFD_CE_TabDialog
96502>>>        
96502>>>        Set Size to 100 240
96503>>>        Set Location to 5 5
96504>>>        Set Rotate_Mode to RM_Rotate
96505>>>
96505>>>        Object oCallStackDump_tp is a cVDFD_CE_TabPage
96507>>>            Set Label to "CallStackDump"
96508>>>
96508>>>            Function TestIt Returns String
96511>>>                
96511>>>            End_Function
96512>>>
96512>>>        End_Object
96513>>>
96513>>>        Object oNewTabPage2 is a cVDFD_CE_DbTabPage
96515>>>            Set Label to "Page 2"
96516>>>        End_Object
96517>>>
96517>>>    End_Object
96518>>>
96518>>>End_Object
96519>>>
96519>
96519>        Procedure Activate_About
96522>            Send DoAbout "" "" "" "" ""
96523>        End_Procedure
96524>
96524>    End_Object
96525>
96525>End_Object
96526>
96526>Start_UI
96527>
Summary
Memory Available: 1676091392
Total Warnings : 0
Total Errors   : 0
Total Symbols  : 53748
Total Resources: 0
Total Commands : 96526
Total Windows  : 1
Total Pages    : 1
Static Data    : 515100
Message area   : 694173
Total Blocks   : 33919
